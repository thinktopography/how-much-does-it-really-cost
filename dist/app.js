/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 126);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(10);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMProperty = __webpack_require__(16);
var ReactDOMComponentFlags = __webpack_require__(96);

var invariant = __webpack_require__(1);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(19);

var ReactCurrentOwner = __webpack_require__(13);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(211);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(94);
var PooledClass = __webpack_require__(17);
var ReactFeatureFlags = __webpack_require__(99);
var ReactReconciler = __webpack_require__(25);
var Transaction = __webpack_require__(42);

var invariant = __webpack_require__(1);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(17);

var emptyFunction = __webpack_require__(10);
var warning = __webpack_require__(2);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      // eslint-disable-line valid-typeof
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // eslint-disable-line valid-typeof
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(127)
var ieee754 = __webpack_require__(169)
var isArray = __webpack_require__(88)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(13);

var warning = __webpack_require__(2);
var canDefineProperty = __webpack_require__(45);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(114);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = __webpack_require__(55);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(29);
util.inherits = __webpack_require__(11);
/*</replacement>*/

var Readable = __webpack_require__(119);
var Writable = __webpack_require__(74);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var DomUtils = module.exports;

[
	__webpack_require__(145),
	__webpack_require__(146),
	__webpack_require__(143),
	__webpack_require__(144),
	__webpack_require__(142),
	__webpack_require__(141)
].forEach(function(ext){
	Object.keys(ext).forEach(function(key){
		DomUtils[key] = ext[key].bind(DomUtils);
	});
});


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var Parser = __webpack_require__(85),
    DomHandler = __webpack_require__(139);

function defineProp(name, value){
	delete module.exports[name];
	module.exports[name] = value;
	return value;
}

module.exports = {
	Parser: Parser,
	Tokenizer: __webpack_require__(86),
	ElementType: __webpack_require__(30),
	DomHandler: DomHandler,
	get FeedHandler(){
		return defineProp("FeedHandler", __webpack_require__(166));
	},
	get Stream(){
		return defineProp("Stream", __webpack_require__(168));
	},
	get WritableStream(){
		return defineProp("WritableStream", __webpack_require__(87));
	},
	get ProxyHandler(){
		return defineProp("ProxyHandler", __webpack_require__(167));
	},
	get DomUtils(){
		return defineProp("DomUtils", __webpack_require__(22));
	},
	get CollectingHandler(){
		return defineProp("CollectingHandler", __webpack_require__(165));
	},
	// For legacy support
	DefaultHandler: DomHandler,
	get RssHandler(){
		return defineProp("RssHandler", this.FeedHandler);
	},
	//helper methods
	parseDOM: function(data, options){
		var handler = new DomHandler(options);
		new Parser(handler, options).end(data);
		return handler.dom;
	},
	parseFeed: function(feed, options){
		var handler = new module.exports.FeedHandler(options);
		new Parser(handler, options).end(feed);
		return handler.dom;
	},
	createDomStream: function(cb, options, elementCb){
		var handler = new DomHandler(cb, options, elementCb);
		return new Parser(handler, options);
	},
	// List of all events that the parser emits
	EVENTS: { /* Format: eventname: number of arguments */
		attribute: 2,
		cdatastart: 0,
		cdataend: 0,
		text: 1,
		processinginstruction: 2,
		comment: 1,
		commentend: 0,
		closetag: 1,
		opentag: 2,
		opentagname: 1,
		error: 1,
		end: 0
	}
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(57);
var setInnerHTML = __webpack_require__(44);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(64);
var setTextContent = __webpack_require__(112);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(225);
var ReactInstrumentation = __webpack_require__(9);

var warning = __webpack_require__(2);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactChildren = __webpack_require__(255);
var ReactComponent = __webpack_require__(71);
var ReactPureComponent = __webpack_require__(260);
var ReactClass = __webpack_require__(256);
var ReactDOMFactories = __webpack_require__(257);
var ReactElement = __webpack_require__(18);
var ReactPropTypes = __webpack_require__(258);
var ReactVersion = __webpack_require__(261);

var onlyChild = __webpack_require__(264);
var warning = __webpack_require__(2);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var canDefineProperty = __webpack_require__(45);
  var ReactElementValidator = __webpack_require__(115);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

// TODO: Fix tests so that this deprecation warning doesn't cause failures.
if (process.env.NODE_ENV !== 'production') {
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });
  }
}

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(37),
    render = __webpack_require__(50);

/**
 * HTML Tags
 */

var tags = { tag: true, script: true, style: true };

/**
 * Check if the DOM element is a tag
 *
 * isTag(type) includes <script> and <style> tags
 */

exports.isTag = function(type) {
  if (type.type) type = type.type;
  return tags[type] || false;
};

/**
 * Convert a string to camel case notation.
 * @param  {String} str String to be converted.
 * @return {String}     String in camel case notation.
 */

exports.camelCase = function(str) {
  return str.replace(/[_.-](\w|$)/g, function(_, x) {
    return x.toUpperCase();
  });
};

/**
 * Convert a string from camel case to "CSS case", where word boundaries are
 * described by hyphens ("-") and all characters are lower-case.
 * @param  {String} str String to be converted.
 * @return {string}     String in "CSS case".
 */
exports.cssCase = function(str) {
  return str.replace(/[A-Z]/g, '-$&').toLowerCase();
};

/**
 * Iterate over each DOM element without creating intermediary Cheerio instances.
 *
 * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced
 * by _make.
 */

exports.domEach = function(cheerio, fn) {
  var i = 0, len = cheerio.length;
  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;
  return cheerio;
};

/**
 * Create a deep copy of the given DOM structure by first rendering it to a
 * string and then parsing the resultant markup.
 *
 * @argument {Object} dom - The htmlparser2-compliant DOM structure
 * @argument {Object} options - The parsing/rendering options
 */
exports.cloneDom = function(dom, options) {
  return parse(render(dom, options), options).children;
};

/*
 * A simple way to check for HTML strings or ID strings
 */

var quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;

/*
 * Check if string is HTML
 */
exports.isHtml = function(str) {
  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML
  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;

  // Run the regex
  var match = quickExpr.exec(str);
  return !!(match && match[1]);
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15).Buffer))

/***/ }),
/* 30 */
/***/ (function(module, exports) {

//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};


/***/ }),
/* 31 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var EventPluginRegistry = __webpack_require__(39);
var EventPluginUtils = __webpack_require__(58);
var ReactErrorUtils = __webpack_require__(62);

var accumulateInto = __webpack_require__(106);
var forEachAccumulated = __webpack_require__(107);
var invariant = __webpack_require__(1);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(33);
var EventPluginUtils = __webpack_require__(58);

var accumulateInto = __webpack_require__(106);
var forEachAccumulated = __webpack_require__(107);
var warning = __webpack_require__(2);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

var getEventTarget = __webpack_require__(67);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
  Module Dependencies
*/
var htmlparser = __webpack_require__(23);

/*
  Parser
*/
exports = module.exports = function(content, options) {
  var dom = exports.evaluate(content, options),
      // Generic root element
      root = exports.evaluate('<root></root>', options)[0];

  root.type = 'root';

  // Update the dom using the root
  exports.update(dom, root);

  return root;
};

exports.evaluate = function(content, options) {
  // options = options || $.fn.options;

  var dom;

  if (typeof content === 'string' || Buffer.isBuffer(content)) {
    dom = htmlparser.parseDOM(content, options);
  } else {
    dom = content;
  }

  return dom;
};

/*
  Update the dom structure, for one changed layer
*/
exports.update = function(arr, parent) {
  // normalize
  if (!Array.isArray(arr)) arr = [arr];

  // Update parent
  if (parent) {
    parent.children = arr;
  } else {
    parent = null;
  }

  // Update neighbors
  for (var i = 0; i < arr.length; i++) {
    var node = arr[i];

    // Cleanly remove existing nodes from their previous structures.
    var oldParent = node.parent || node.root,
        oldSiblings = oldParent && oldParent.children;
    if (oldSiblings && oldSiblings !== arr) {
      oldSiblings.splice(oldSiblings.indexOf(node), 1);
      if (node.prev) {
        node.prev.next = node.next;
      }
      if (node.next) {
        node.next.prev = node.prev;
      }
    }

    if (parent) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }

    if (parent && parent.type === 'root') {
      node.root = parent;
      node.parent = null;
    } else {
      node.root = null;
      node.parent = parent;
    }
  }

  return parent;
};

// module.exports = $.extend(exports);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15).Buffer))

/***/ }),
/* 38 */
/***/ (function(module, exports) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _([1, 2]).forEach(function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, typeof iteratee == 'function' ? iteratee : identity);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = forEach;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(39);
var ReactEventEmitterMixin = __webpack_require__(215);
var ViewportMetrics = __webpack_require__(105);

var getVendorPrefixedEventName = __webpack_require__(250);
var isEventSupported = __webpack_require__(68);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }

});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(36);
var ViewportMetrics = __webpack_require__(105);

var getEventModifierState = __webpack_require__(66);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var DOMNamespaces = __webpack_require__(57);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(64);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(31).EventEmitter;
var inherits = __webpack_require__(11);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(268);
Stream.Writable = __webpack_require__(270);
Stream.Duplex = __webpack_require__(266);
Stream.Transform = __webpack_require__(269);
Stream.PassThrough = __webpack_require__(267);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

/*
  Module dependencies
*/

var parse = __webpack_require__(37),
    isHtml = __webpack_require__(28).isHtml,
    _ = {
      extend: __webpack_require__(89),
      bind: __webpack_require__(54),
      forEach: __webpack_require__(38),
      defaults: __webpack_require__(90)
    };

/*
 * The API
 */

var api = [
  __webpack_require__(128),
  __webpack_require__(132),
  __webpack_require__(131),
  __webpack_require__(129),
  __webpack_require__(130)
];

/*
 * Instance of cheerio
 */

var Cheerio = module.exports = function(selector, context, root, options) {
  if (!(this instanceof Cheerio)) return new Cheerio(selector, context, root, options);

  this.options = _.defaults(options || {}, this.options);

  // $(), $(null), $(undefined), $(false)
  if (!selector) return this;

  if (root) {
    if (typeof root === 'string') root = parse(root, this.options);
    this._root = Cheerio.call(this, root);
  }

  // $($)
  if (selector.cheerio) return selector;

  // $(dom)
  if (isNode(selector))
    selector = [selector];

  // $([dom])
  if (Array.isArray(selector)) {
    _.forEach(selector, _.bind(function(elem, idx) {
      this[idx] = elem;
    }, this));
    this.length = selector.length;
    return this;
  }

  // $(<html>)
  if (typeof selector === 'string' && isHtml(selector)) {
    return Cheerio.call(this, parse(selector, this.options).children);
  }

  // If we don't have a context, maybe we have a root, from loading
  if (!context) {
    context = this._root;
  } else if (typeof context === 'string') {
    if (isHtml(context)) {
      // $('li', '<ul>...</ul>')
      context = parse(context, this.options);
      context = Cheerio.call(this, context);
    } else {
      // $('li', 'ul')
      selector = [context, selector].join(' ');
      context = this._root;
    }
  // $('li', node), $('li', [nodes])
  } else if (!context.cheerio) {
    context = Cheerio.call(this, context);
  }

  // If we still don't have a context, return
  if (!context) return this;

  // #id, .class, tag
  return context.find(selector);
};

/**
 * Mix in `static`
 */

_.extend(Cheerio, __webpack_require__(48));

/*
 * Set a signature of the object
 */

Cheerio.prototype.cheerio = '[cheerio object]';

/*
 * Cheerio default options
 */

Cheerio.prototype.options = {
  withDomLvl1: true,
  normalizeWhitespace: false,
  xmlMode: false,
  decodeEntities: true
};

/*
 * Make cheerio an array-like object
 */

Cheerio.prototype.length = 0;
Cheerio.prototype.splice = Array.prototype.splice;

/*
 * Make a cheerio object
 *
 * @api private
 */

Cheerio.prototype._make = function(dom, context) {
  var cheerio = new this.constructor(dom, context, this._root, this.options);
  cheerio.prevObject = this;
  return cheerio;
};

/**
 * Turn a cheerio object into an array
 */

Cheerio.prototype.toArray = function() {
  return this.get();
};

/**
 * Plug in the API
 */
api.forEach(function(mod) {
  _.extend(Cheerio.prototype, mod);
});

var isNode = function(obj) {
  return obj.name || obj.type === 'text' || obj.type === 'comment';
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies
 */

var serialize = __webpack_require__(50),
    select = __webpack_require__(76),
    parse = __webpack_require__(37),
    _ = {
      merge: __webpack_require__(173),
      defaults: __webpack_require__(90)
    };

/**
 * $.load(str)
 */

exports.load = function(content, options) {
  var Cheerio = __webpack_require__(47);

  options = _.defaults(options || {}, Cheerio.prototype.options);

  var root = parse(content, options);

  var initialize = function(selector, context, r, opts) {
    if (!(this instanceof initialize)) {
      return new initialize(selector, context, r, opts);
    }
    opts = _.defaults(opts || {}, options);
    return Cheerio.call(this, selector, context, r || root, opts);
  };

  // Ensure that selections created by the "loaded" `initialize` function are
  // true Cheerio instances.
  initialize.prototype = Object.create(Cheerio.prototype);
  initialize.prototype.constructor = initialize;

  // Mimic jQuery's prototype alias for plugin authors.
  initialize.fn = initialize.prototype;

  // Keep a reference to the top-level scope so we can chain methods that implicitly
  // resolve selectors; e.g. $("<span>").(".bar"), which otherwise loses ._root
  initialize.prototype._originalRoot = root;

  // Add in the static methods
  _.merge(initialize, exports);

  // Add in the root
  initialize._root = root;
  // store options
  initialize._options = options;

  return initialize;
};

/*
* Helper function
*/

function render(that, dom, options) {
  if (!dom) {
    if (that._root && that._root.children) {
      dom = that._root.children;
    } else {
      return '';
    }
  } else if (typeof dom === 'string') {
    dom = select(dom, that._root, options);
  }

  return serialize(dom, options);
}

/**
 * $.html([selector | dom], [options])
 */

exports.html = function(dom, options) {
  var Cheerio = __webpack_require__(47);

  // be flexible about parameters, sometimes we call html(),
  // with options as only parameter
  // check dom argument for dom element specific properties
  // assume there is no 'length' or 'type' properties in the options object
  if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) && !('type' in dom))
  {
    options = dom;
    dom = undefined;
  }

  // sometimes $.html() used without preloading html
  // so fallback non existing options to the default ones
  options = _.defaults(options || {}, this._options, Cheerio.prototype.options);

  return render(this, dom, options);
};

/**
 * $.xml([selector | dom])
 */

exports.xml = function(dom) {
  var options = _.defaults({xmlMode: true}, this._options);

  return render(this, dom, options);
};

/**
 * $.text(dom)
 */

exports.text = function(elems) {
  if (!elems) {
    elems = this.root();
  }

  var ret = '',
      len = elems.length,
      elem;

  for (var i = 0; i < len; i++) {
    elem = elems[i];
    if (elem.type === 'text') ret += elem.data;
    else if (elem.children && elem.type !== 'comment') {
      ret += exports.text(elem.children);
    }
  }

  return ret;
};

/**
 * $.parseHTML(data [, context ] [, keepScripts ])
 * Parses a string into an array of DOM nodes. The `context` argument has no
 * meaning for Cheerio, but it is maintained for API compatibility with jQuery.
 */
exports.parseHTML = function(data, context, keepScripts) {
  var parsed;

  if (!data || typeof data !== 'string') {
    return null;
  }

  if (typeof context === 'boolean') {
    keepScripts = context;
  }

  parsed = this.load(data);
  if (!keepScripts) {
    parsed('script').remove();
  }

  // The `children` array is used by Cheerio internally to group elements that
  // share the same parents. When nodes created through `parseHTML` are
  // inserted into previously-existing DOM structures, they will be removed
  // from the `children` array. The results of `parseHTML` should remain
  // constant across these operations, so a shallow copy should be returned.
  return parsed.root()[0].children.slice();
};

/**
 * $.root()
 */
exports.root = function() {
  return this(this._root);
};

/**
 * $.contains()
 */
exports.contains = function(container, contained) {

  // According to the jQuery API, an element does not "contain" itself
  if (contained === container) {
    return false;
  }

  // Step up the descendants, stopping when the root element is reached
  // (signaled by `.parent` returning a reference to the same object)
  while (contained && contained !== contained.parent) {
    contained = contained.parent;
    if (contained === container) {
      return true;
    }
  }

  return false;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/*
	pseudo selectors

	---

	they are available in two forms:
	* filters called when the selector
	  is compiled and return a function
	  that needs to return next()
	* pseudos get called on execution
	  they need to return a boolean
*/

var DomUtils    = __webpack_require__(22),
    isTag       = DomUtils.isTag,
    getText     = DomUtils.getText,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    hasAttrib   = DomUtils.hasAttrib,
    getName     = DomUtils.getName,
    getAttribute= DomUtils.getAttributeValue,
    getNCheck   = __webpack_require__(179),
    checkAttrib = __webpack_require__(77).rules.equals,
    BaseFuncs   = __webpack_require__(27),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc;

//helper methods
function getFirstElement(elems){
	for(var i = 0; elems && i < elems.length; i++){
		if(isTag(elems[i])) return elems[i];
	}
}

function getAttribFunc(name, value){
	var data = {name: name, value: value};
	return function attribFunc(next){
		return checkAttrib(next, data);
	};
}

function getChildFunc(next){
	return function(elem){
		return !!getParent(elem) && next(elem);
	};
}

var filters = {
	contains: function(next, text){
		return function contains(elem){
			return next(elem) && getText(elem).indexOf(text) >= 0;
		};
	},
	icontains: function(next, text){
		var itext = text.toLowerCase();
		return function icontains(elem){
			return next(elem) &&
				getText(elem).toLowerCase().indexOf(itext) >= 0;
		};
	},

	//location specific methods
	"nth-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthChild(elem){
			var siblings = getSiblings(elem);

			for(var i = 0, pos = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastChild(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},

    //TODO determine the actual root element
    root: function(next){
        return function(elem){
            return !getParent(elem) && next(elem);
        };
    },

    scope: function(next, rule, options, context){
        if(!context || context.length === 0){
            //equivalent to :root
            return filters.root(next);
        }

        if(context.length === 1){
            //NOTE: can't be unpacked, as :has uses this for side-effects
            return function(elem){
                return context[0] === elem && next(elem);
            };
        }

        return function(elem){
            return context.indexOf(elem) >= 0 && next(elem);
        };
    },

	//jQuery extensions (others follow as pseudos)
	checkbox: getAttribFunc("type", "checkbox"),
	file: getAttribFunc("type", "file"),
	password: getAttribFunc("type", "password"),
	radio: getAttribFunc("type", "radio"),
	reset: getAttribFunc("type", "reset"),
	image: getAttribFunc("type", "image"),
	submit: getAttribFunc("type", "submit")
};

//while filters are precompiled, pseudos get called when they are needed
var pseudos = {
	empty: function(elem){
		return !getChildren(elem).some(function(elem){
			return isTag(elem) || elem.type === "text";
		});
	},

	"first-child": function(elem){
		return getFirstElement(getSiblings(elem)) === elem;
	},
	"last-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length - 1; i >= 0; i--){
			if(siblings[i] === elem) return true;
			if(isTag(siblings[i])) break;
		}

		return false;
	},
	"first-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"last-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length-1; i >= 0; i--){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"only-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0, j = siblings.length; i < j; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) continue;
				if(getName(siblings[i]) === getName(elem)) return false;
			}
		}

		return true;
	},
	"only-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i]) && siblings[i] !== elem) return false;
		}

		return true;
	},

	//:matches(a, area, link)[href]
	link: function(elem){
		return hasAttrib(elem, "href");
	},
	visited: falseFunc, //seems to be a valid implementation
	//TODO: :any-link once the name is finalized (as an alias of :link)

	//forms
	//to consider: :target

	//:matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)
	selected: function(elem){
		if(hasAttrib(elem, "selected")) return true;
		else if(getName(elem) !== "option") return false;

		//the first <option> in a <select> is also selected
		var parent = getParent(elem);

		if(
			!parent ||
			getName(parent) !== "select" ||
			hasAttrib(parent, "multiple")
		) return false;

		var siblings = getChildren(parent),
			sawElem  = false;

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem){
					sawElem = true;
				} else if(!sawElem){
					return false;
				} else if(hasAttrib(siblings[i], "selected")){
					return false;
				}
			}
		}

		return sawElem;
	},
	//https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
	//:matches(
	//  :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],
	//  optgroup[disabled] > option),
	// fieldset[disabled] * //TODO not child of first <legend>
	//)
	disabled: function(elem){
		return hasAttrib(elem, "disabled");
	},
	enabled: function(elem){
		return !hasAttrib(elem, "disabled");
	},
	//:matches(:matches(:radio, :checkbox)[checked], :selected) (TODO menuitem)
	checked: function(elem){
		return hasAttrib(elem, "checked") || pseudos.selected(elem);
	},
	//:matches(input, select, textarea)[required]
	required: function(elem){
		return hasAttrib(elem, "required");
	},
	//:matches(input, select, textarea):not([required])
	optional: function(elem){
		return !hasAttrib(elem, "required");
	},

	//jQuery extensions

	//:not(:empty)
	parent: function(elem){
		return !pseudos.empty(elem);
	},
	//:matches(h1, h2, h3, h4, h5, h6)
	header: function(elem){
		var name = getName(elem);
		return name === "h1" ||
		       name === "h2" ||
		       name === "h3" ||
		       name === "h4" ||
		       name === "h5" ||
		       name === "h6";
	},

	//:matches(button, input[type=button])
	button: function(elem){
		var name = getName(elem);
		return name === "button" ||
		       name === "input" &&
		       getAttribute(elem, "type") === "button";
	},
	//:matches(input, textarea, select, button)
	input: function(elem){
		var name = getName(elem);
		return name === "input" ||
		       name === "textarea" ||
		       name === "select" ||
		       name === "button";
	},
	//input:matches(:not([type!='']), [type='text' i])
	text: function(elem){
		var attr;
		return getName(elem) === "input" && (
			!(attr = getAttribute(elem, "type")) ||
			attr.toLowerCase() === "text"
		);
	}
};

function verifyArgs(func, name, subselect){
	if(subselect === null){
		if(func.length > 1 && name !== "scope"){
			throw new SyntaxError("pseudo-selector :" + name + " requires an argument");
		}
	} else {
		if(func.length === 1){
			throw new SyntaxError("pseudo-selector :" + name + " doesn't have any arguments");
		}
	}
}

//FIXME this feels hacky
var re_CSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;

module.exports = {
	compile: function(next, data, options, context){
		var name = data.name,
			subselect = data.data;

		if(options && options.strict && !re_CSS3.test(name)){
			throw SyntaxError(":" + name + " isn't part of CSS3");
		}

		if(typeof filters[name] === "function"){
			verifyArgs(filters[name], name,  subselect);
			return filters[name](next, subselect, options, context);
		} else if(typeof pseudos[name] === "function"){
			var func = pseudos[name];
			verifyArgs(func, name, subselect);

			if(next === trueFunc) return func;

			return function pseudoArgs(elem){
				return func(elem, subselect) && next(elem);
			};
		} else {
			throw new SyntaxError("unmatched pseudo-class :" + name);
		}
	},
	filters: filters,
	pseudos: pseudos
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

/*
  Module dependencies
*/
var ElementType = __webpack_require__(138);
var entities = __webpack_require__(147);

/*
  Boolean Attributes
*/
var booleanAttributes = {
  __proto__: null,
  allowfullscreen: true,
  async: true,
  autofocus: true,
  autoplay: true,
  checked: true,
  controls: true,
  default: true,
  defer: true,
  disabled: true,
  hidden: true,
  ismap: true,
  loop: true,
  multiple: true,
  muted: true,
  open: true,
  readonly: true,
  required: true,
  reversed: true,
  scoped: true,
  seamless: true,
  selected: true,
  typemustmatch: true
};

var unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};

/*
  Format attributes
*/
function formatAttrs(attributes, opts) {
  if (!attributes) return;

  var output = '',
      value;

  // Loop through the attributes
  for (var key in attributes) {
    value = attributes[key];
    if (output) {
      output += ' ';
    }

    if (!value && booleanAttributes[key]) {
      output += key;
    } else {
      output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
    }
  }

  return output;
}

/*
  Self-enclosing tags (stolen from node-htmlparser)
*/
var singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
};


var render = module.exports = function(dom, opts) {
  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
  opts = opts || {};

  var output = '';

  for(var i = 0; i < dom.length; i++){
    var elem = dom[i];

    if (elem.type === 'root')
      output += render(elem.children, opts);
    else if (ElementType.isTag(elem))
      output += renderTag(elem, opts);
    else if (elem.type === ElementType.Directive)
      output += renderDirective(elem);
    else if (elem.type === ElementType.Comment)
      output += renderComment(elem);
    else if (elem.type === ElementType.CDATA)
      output += renderCdata(elem);
    else
      output += renderText(elem, opts);
  }

  return output;
};

function renderTag(elem, opts) {
  // Handle SVG
  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

  var tag = '<' + elem.name,
      attribs = formatAttrs(elem.attribs, opts);

  if (attribs) {
    tag += ' ' + attribs;
  }

  if (
    opts.xmlMode
    && (!elem.children || elem.children.length === 0)
  ) {
    tag += '/>';
  } else {
    tag += '>';
    if (elem.children) {
      tag += render(elem.children, opts);
    }

    if (!singleTag[elem.name] || opts.xmlMode) {
      tag += '</' + elem.name + '>';
    }
  }

  return tag;
}

function renderDirective(elem) {
  return '<' + elem.data + '>';
}

function renderText(elem, opts) {
  var data = elem.data || '';

  // if entities weren't decoded, no need to encode them back
  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
    data = entities.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return '<![CDATA[' + elem.children[0].data + ']]>';
}

function renderComment(elem) {
  return '<!--' + elem.data + '-->';
}


/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = {
	"Aacute": "Á",
	"aacute": "á",
	"Abreve": "Ă",
	"abreve": "ă",
	"ac": "∾",
	"acd": "∿",
	"acE": "∾̳",
	"Acirc": "Â",
	"acirc": "â",
	"acute": "´",
	"Acy": "А",
	"acy": "а",
	"AElig": "Æ",
	"aelig": "æ",
	"af": "⁡",
	"Afr": "𝔄",
	"afr": "𝔞",
	"Agrave": "À",
	"agrave": "à",
	"alefsym": "ℵ",
	"aleph": "ℵ",
	"Alpha": "Α",
	"alpha": "α",
	"Amacr": "Ā",
	"amacr": "ā",
	"amalg": "⨿",
	"amp": "&",
	"AMP": "&",
	"andand": "⩕",
	"And": "⩓",
	"and": "∧",
	"andd": "⩜",
	"andslope": "⩘",
	"andv": "⩚",
	"ang": "∠",
	"ange": "⦤",
	"angle": "∠",
	"angmsdaa": "⦨",
	"angmsdab": "⦩",
	"angmsdac": "⦪",
	"angmsdad": "⦫",
	"angmsdae": "⦬",
	"angmsdaf": "⦭",
	"angmsdag": "⦮",
	"angmsdah": "⦯",
	"angmsd": "∡",
	"angrt": "∟",
	"angrtvb": "⊾",
	"angrtvbd": "⦝",
	"angsph": "∢",
	"angst": "Å",
	"angzarr": "⍼",
	"Aogon": "Ą",
	"aogon": "ą",
	"Aopf": "𝔸",
	"aopf": "𝕒",
	"apacir": "⩯",
	"ap": "≈",
	"apE": "⩰",
	"ape": "≊",
	"apid": "≋",
	"apos": "'",
	"ApplyFunction": "⁡",
	"approx": "≈",
	"approxeq": "≊",
	"Aring": "Å",
	"aring": "å",
	"Ascr": "𝒜",
	"ascr": "𝒶",
	"Assign": "≔",
	"ast": "*",
	"asymp": "≈",
	"asympeq": "≍",
	"Atilde": "Ã",
	"atilde": "ã",
	"Auml": "Ä",
	"auml": "ä",
	"awconint": "∳",
	"awint": "⨑",
	"backcong": "≌",
	"backepsilon": "϶",
	"backprime": "‵",
	"backsim": "∽",
	"backsimeq": "⋍",
	"Backslash": "∖",
	"Barv": "⫧",
	"barvee": "⊽",
	"barwed": "⌅",
	"Barwed": "⌆",
	"barwedge": "⌅",
	"bbrk": "⎵",
	"bbrktbrk": "⎶",
	"bcong": "≌",
	"Bcy": "Б",
	"bcy": "б",
	"bdquo": "„",
	"becaus": "∵",
	"because": "∵",
	"Because": "∵",
	"bemptyv": "⦰",
	"bepsi": "϶",
	"bernou": "ℬ",
	"Bernoullis": "ℬ",
	"Beta": "Β",
	"beta": "β",
	"beth": "ℶ",
	"between": "≬",
	"Bfr": "𝔅",
	"bfr": "𝔟",
	"bigcap": "⋂",
	"bigcirc": "◯",
	"bigcup": "⋃",
	"bigodot": "⨀",
	"bigoplus": "⨁",
	"bigotimes": "⨂",
	"bigsqcup": "⨆",
	"bigstar": "★",
	"bigtriangledown": "▽",
	"bigtriangleup": "△",
	"biguplus": "⨄",
	"bigvee": "⋁",
	"bigwedge": "⋀",
	"bkarow": "⤍",
	"blacklozenge": "⧫",
	"blacksquare": "▪",
	"blacktriangle": "▴",
	"blacktriangledown": "▾",
	"blacktriangleleft": "◂",
	"blacktriangleright": "▸",
	"blank": "␣",
	"blk12": "▒",
	"blk14": "░",
	"blk34": "▓",
	"block": "█",
	"bne": "=⃥",
	"bnequiv": "≡⃥",
	"bNot": "⫭",
	"bnot": "⌐",
	"Bopf": "𝔹",
	"bopf": "𝕓",
	"bot": "⊥",
	"bottom": "⊥",
	"bowtie": "⋈",
	"boxbox": "⧉",
	"boxdl": "┐",
	"boxdL": "╕",
	"boxDl": "╖",
	"boxDL": "╗",
	"boxdr": "┌",
	"boxdR": "╒",
	"boxDr": "╓",
	"boxDR": "╔",
	"boxh": "─",
	"boxH": "═",
	"boxhd": "┬",
	"boxHd": "╤",
	"boxhD": "╥",
	"boxHD": "╦",
	"boxhu": "┴",
	"boxHu": "╧",
	"boxhU": "╨",
	"boxHU": "╩",
	"boxminus": "⊟",
	"boxplus": "⊞",
	"boxtimes": "⊠",
	"boxul": "┘",
	"boxuL": "╛",
	"boxUl": "╜",
	"boxUL": "╝",
	"boxur": "└",
	"boxuR": "╘",
	"boxUr": "╙",
	"boxUR": "╚",
	"boxv": "│",
	"boxV": "║",
	"boxvh": "┼",
	"boxvH": "╪",
	"boxVh": "╫",
	"boxVH": "╬",
	"boxvl": "┤",
	"boxvL": "╡",
	"boxVl": "╢",
	"boxVL": "╣",
	"boxvr": "├",
	"boxvR": "╞",
	"boxVr": "╟",
	"boxVR": "╠",
	"bprime": "‵",
	"breve": "˘",
	"Breve": "˘",
	"brvbar": "¦",
	"bscr": "𝒷",
	"Bscr": "ℬ",
	"bsemi": "⁏",
	"bsim": "∽",
	"bsime": "⋍",
	"bsolb": "⧅",
	"bsol": "\\",
	"bsolhsub": "⟈",
	"bull": "•",
	"bullet": "•",
	"bump": "≎",
	"bumpE": "⪮",
	"bumpe": "≏",
	"Bumpeq": "≎",
	"bumpeq": "≏",
	"Cacute": "Ć",
	"cacute": "ć",
	"capand": "⩄",
	"capbrcup": "⩉",
	"capcap": "⩋",
	"cap": "∩",
	"Cap": "⋒",
	"capcup": "⩇",
	"capdot": "⩀",
	"CapitalDifferentialD": "ⅅ",
	"caps": "∩︀",
	"caret": "⁁",
	"caron": "ˇ",
	"Cayleys": "ℭ",
	"ccaps": "⩍",
	"Ccaron": "Č",
	"ccaron": "č",
	"Ccedil": "Ç",
	"ccedil": "ç",
	"Ccirc": "Ĉ",
	"ccirc": "ĉ",
	"Cconint": "∰",
	"ccups": "⩌",
	"ccupssm": "⩐",
	"Cdot": "Ċ",
	"cdot": "ċ",
	"cedil": "¸",
	"Cedilla": "¸",
	"cemptyv": "⦲",
	"cent": "¢",
	"centerdot": "·",
	"CenterDot": "·",
	"cfr": "𝔠",
	"Cfr": "ℭ",
	"CHcy": "Ч",
	"chcy": "ч",
	"check": "✓",
	"checkmark": "✓",
	"Chi": "Χ",
	"chi": "χ",
	"circ": "ˆ",
	"circeq": "≗",
	"circlearrowleft": "↺",
	"circlearrowright": "↻",
	"circledast": "⊛",
	"circledcirc": "⊚",
	"circleddash": "⊝",
	"CircleDot": "⊙",
	"circledR": "®",
	"circledS": "Ⓢ",
	"CircleMinus": "⊖",
	"CirclePlus": "⊕",
	"CircleTimes": "⊗",
	"cir": "○",
	"cirE": "⧃",
	"cire": "≗",
	"cirfnint": "⨐",
	"cirmid": "⫯",
	"cirscir": "⧂",
	"ClockwiseContourIntegral": "∲",
	"CloseCurlyDoubleQuote": "”",
	"CloseCurlyQuote": "’",
	"clubs": "♣",
	"clubsuit": "♣",
	"colon": ":",
	"Colon": "∷",
	"Colone": "⩴",
	"colone": "≔",
	"coloneq": "≔",
	"comma": ",",
	"commat": "@",
	"comp": "∁",
	"compfn": "∘",
	"complement": "∁",
	"complexes": "ℂ",
	"cong": "≅",
	"congdot": "⩭",
	"Congruent": "≡",
	"conint": "∮",
	"Conint": "∯",
	"ContourIntegral": "∮",
	"copf": "𝕔",
	"Copf": "ℂ",
	"coprod": "∐",
	"Coproduct": "∐",
	"copy": "©",
	"COPY": "©",
	"copysr": "℗",
	"CounterClockwiseContourIntegral": "∳",
	"crarr": "↵",
	"cross": "✗",
	"Cross": "⨯",
	"Cscr": "𝒞",
	"cscr": "𝒸",
	"csub": "⫏",
	"csube": "⫑",
	"csup": "⫐",
	"csupe": "⫒",
	"ctdot": "⋯",
	"cudarrl": "⤸",
	"cudarrr": "⤵",
	"cuepr": "⋞",
	"cuesc": "⋟",
	"cularr": "↶",
	"cularrp": "⤽",
	"cupbrcap": "⩈",
	"cupcap": "⩆",
	"CupCap": "≍",
	"cup": "∪",
	"Cup": "⋓",
	"cupcup": "⩊",
	"cupdot": "⊍",
	"cupor": "⩅",
	"cups": "∪︀",
	"curarr": "↷",
	"curarrm": "⤼",
	"curlyeqprec": "⋞",
	"curlyeqsucc": "⋟",
	"curlyvee": "⋎",
	"curlywedge": "⋏",
	"curren": "¤",
	"curvearrowleft": "↶",
	"curvearrowright": "↷",
	"cuvee": "⋎",
	"cuwed": "⋏",
	"cwconint": "∲",
	"cwint": "∱",
	"cylcty": "⌭",
	"dagger": "†",
	"Dagger": "‡",
	"daleth": "ℸ",
	"darr": "↓",
	"Darr": "↡",
	"dArr": "⇓",
	"dash": "‐",
	"Dashv": "⫤",
	"dashv": "⊣",
	"dbkarow": "⤏",
	"dblac": "˝",
	"Dcaron": "Ď",
	"dcaron": "ď",
	"Dcy": "Д",
	"dcy": "д",
	"ddagger": "‡",
	"ddarr": "⇊",
	"DD": "ⅅ",
	"dd": "ⅆ",
	"DDotrahd": "⤑",
	"ddotseq": "⩷",
	"deg": "°",
	"Del": "∇",
	"Delta": "Δ",
	"delta": "δ",
	"demptyv": "⦱",
	"dfisht": "⥿",
	"Dfr": "𝔇",
	"dfr": "𝔡",
	"dHar": "⥥",
	"dharl": "⇃",
	"dharr": "⇂",
	"DiacriticalAcute": "´",
	"DiacriticalDot": "˙",
	"DiacriticalDoubleAcute": "˝",
	"DiacriticalGrave": "`",
	"DiacriticalTilde": "˜",
	"diam": "⋄",
	"diamond": "⋄",
	"Diamond": "⋄",
	"diamondsuit": "♦",
	"diams": "♦",
	"die": "¨",
	"DifferentialD": "ⅆ",
	"digamma": "ϝ",
	"disin": "⋲",
	"div": "÷",
	"divide": "÷",
	"divideontimes": "⋇",
	"divonx": "⋇",
	"DJcy": "Ђ",
	"djcy": "ђ",
	"dlcorn": "⌞",
	"dlcrop": "⌍",
	"dollar": "$",
	"Dopf": "𝔻",
	"dopf": "𝕕",
	"Dot": "¨",
	"dot": "˙",
	"DotDot": "⃜",
	"doteq": "≐",
	"doteqdot": "≑",
	"DotEqual": "≐",
	"dotminus": "∸",
	"dotplus": "∔",
	"dotsquare": "⊡",
	"doublebarwedge": "⌆",
	"DoubleContourIntegral": "∯",
	"DoubleDot": "¨",
	"DoubleDownArrow": "⇓",
	"DoubleLeftArrow": "⇐",
	"DoubleLeftRightArrow": "⇔",
	"DoubleLeftTee": "⫤",
	"DoubleLongLeftArrow": "⟸",
	"DoubleLongLeftRightArrow": "⟺",
	"DoubleLongRightArrow": "⟹",
	"DoubleRightArrow": "⇒",
	"DoubleRightTee": "⊨",
	"DoubleUpArrow": "⇑",
	"DoubleUpDownArrow": "⇕",
	"DoubleVerticalBar": "∥",
	"DownArrowBar": "⤓",
	"downarrow": "↓",
	"DownArrow": "↓",
	"Downarrow": "⇓",
	"DownArrowUpArrow": "⇵",
	"DownBreve": "̑",
	"downdownarrows": "⇊",
	"downharpoonleft": "⇃",
	"downharpoonright": "⇂",
	"DownLeftRightVector": "⥐",
	"DownLeftTeeVector": "⥞",
	"DownLeftVectorBar": "⥖",
	"DownLeftVector": "↽",
	"DownRightTeeVector": "⥟",
	"DownRightVectorBar": "⥗",
	"DownRightVector": "⇁",
	"DownTeeArrow": "↧",
	"DownTee": "⊤",
	"drbkarow": "⤐",
	"drcorn": "⌟",
	"drcrop": "⌌",
	"Dscr": "𝒟",
	"dscr": "𝒹",
	"DScy": "Ѕ",
	"dscy": "ѕ",
	"dsol": "⧶",
	"Dstrok": "Đ",
	"dstrok": "đ",
	"dtdot": "⋱",
	"dtri": "▿",
	"dtrif": "▾",
	"duarr": "⇵",
	"duhar": "⥯",
	"dwangle": "⦦",
	"DZcy": "Џ",
	"dzcy": "џ",
	"dzigrarr": "⟿",
	"Eacute": "É",
	"eacute": "é",
	"easter": "⩮",
	"Ecaron": "Ě",
	"ecaron": "ě",
	"Ecirc": "Ê",
	"ecirc": "ê",
	"ecir": "≖",
	"ecolon": "≕",
	"Ecy": "Э",
	"ecy": "э",
	"eDDot": "⩷",
	"Edot": "Ė",
	"edot": "ė",
	"eDot": "≑",
	"ee": "ⅇ",
	"efDot": "≒",
	"Efr": "𝔈",
	"efr": "𝔢",
	"eg": "⪚",
	"Egrave": "È",
	"egrave": "è",
	"egs": "⪖",
	"egsdot": "⪘",
	"el": "⪙",
	"Element": "∈",
	"elinters": "⏧",
	"ell": "ℓ",
	"els": "⪕",
	"elsdot": "⪗",
	"Emacr": "Ē",
	"emacr": "ē",
	"empty": "∅",
	"emptyset": "∅",
	"EmptySmallSquare": "◻",
	"emptyv": "∅",
	"EmptyVerySmallSquare": "▫",
	"emsp13": " ",
	"emsp14": " ",
	"emsp": " ",
	"ENG": "Ŋ",
	"eng": "ŋ",
	"ensp": " ",
	"Eogon": "Ę",
	"eogon": "ę",
	"Eopf": "𝔼",
	"eopf": "𝕖",
	"epar": "⋕",
	"eparsl": "⧣",
	"eplus": "⩱",
	"epsi": "ε",
	"Epsilon": "Ε",
	"epsilon": "ε",
	"epsiv": "ϵ",
	"eqcirc": "≖",
	"eqcolon": "≕",
	"eqsim": "≂",
	"eqslantgtr": "⪖",
	"eqslantless": "⪕",
	"Equal": "⩵",
	"equals": "=",
	"EqualTilde": "≂",
	"equest": "≟",
	"Equilibrium": "⇌",
	"equiv": "≡",
	"equivDD": "⩸",
	"eqvparsl": "⧥",
	"erarr": "⥱",
	"erDot": "≓",
	"escr": "ℯ",
	"Escr": "ℰ",
	"esdot": "≐",
	"Esim": "⩳",
	"esim": "≂",
	"Eta": "Η",
	"eta": "η",
	"ETH": "Ð",
	"eth": "ð",
	"Euml": "Ë",
	"euml": "ë",
	"euro": "€",
	"excl": "!",
	"exist": "∃",
	"Exists": "∃",
	"expectation": "ℰ",
	"exponentiale": "ⅇ",
	"ExponentialE": "ⅇ",
	"fallingdotseq": "≒",
	"Fcy": "Ф",
	"fcy": "ф",
	"female": "♀",
	"ffilig": "ﬃ",
	"fflig": "ﬀ",
	"ffllig": "ﬄ",
	"Ffr": "𝔉",
	"ffr": "𝔣",
	"filig": "ﬁ",
	"FilledSmallSquare": "◼",
	"FilledVerySmallSquare": "▪",
	"fjlig": "fj",
	"flat": "♭",
	"fllig": "ﬂ",
	"fltns": "▱",
	"fnof": "ƒ",
	"Fopf": "𝔽",
	"fopf": "𝕗",
	"forall": "∀",
	"ForAll": "∀",
	"fork": "⋔",
	"forkv": "⫙",
	"Fouriertrf": "ℱ",
	"fpartint": "⨍",
	"frac12": "½",
	"frac13": "⅓",
	"frac14": "¼",
	"frac15": "⅕",
	"frac16": "⅙",
	"frac18": "⅛",
	"frac23": "⅔",
	"frac25": "⅖",
	"frac34": "¾",
	"frac35": "⅗",
	"frac38": "⅜",
	"frac45": "⅘",
	"frac56": "⅚",
	"frac58": "⅝",
	"frac78": "⅞",
	"frasl": "⁄",
	"frown": "⌢",
	"fscr": "𝒻",
	"Fscr": "ℱ",
	"gacute": "ǵ",
	"Gamma": "Γ",
	"gamma": "γ",
	"Gammad": "Ϝ",
	"gammad": "ϝ",
	"gap": "⪆",
	"Gbreve": "Ğ",
	"gbreve": "ğ",
	"Gcedil": "Ģ",
	"Gcirc": "Ĝ",
	"gcirc": "ĝ",
	"Gcy": "Г",
	"gcy": "г",
	"Gdot": "Ġ",
	"gdot": "ġ",
	"ge": "≥",
	"gE": "≧",
	"gEl": "⪌",
	"gel": "⋛",
	"geq": "≥",
	"geqq": "≧",
	"geqslant": "⩾",
	"gescc": "⪩",
	"ges": "⩾",
	"gesdot": "⪀",
	"gesdoto": "⪂",
	"gesdotol": "⪄",
	"gesl": "⋛︀",
	"gesles": "⪔",
	"Gfr": "𝔊",
	"gfr": "𝔤",
	"gg": "≫",
	"Gg": "⋙",
	"ggg": "⋙",
	"gimel": "ℷ",
	"GJcy": "Ѓ",
	"gjcy": "ѓ",
	"gla": "⪥",
	"gl": "≷",
	"glE": "⪒",
	"glj": "⪤",
	"gnap": "⪊",
	"gnapprox": "⪊",
	"gne": "⪈",
	"gnE": "≩",
	"gneq": "⪈",
	"gneqq": "≩",
	"gnsim": "⋧",
	"Gopf": "𝔾",
	"gopf": "𝕘",
	"grave": "`",
	"GreaterEqual": "≥",
	"GreaterEqualLess": "⋛",
	"GreaterFullEqual": "≧",
	"GreaterGreater": "⪢",
	"GreaterLess": "≷",
	"GreaterSlantEqual": "⩾",
	"GreaterTilde": "≳",
	"Gscr": "𝒢",
	"gscr": "ℊ",
	"gsim": "≳",
	"gsime": "⪎",
	"gsiml": "⪐",
	"gtcc": "⪧",
	"gtcir": "⩺",
	"gt": ">",
	"GT": ">",
	"Gt": "≫",
	"gtdot": "⋗",
	"gtlPar": "⦕",
	"gtquest": "⩼",
	"gtrapprox": "⪆",
	"gtrarr": "⥸",
	"gtrdot": "⋗",
	"gtreqless": "⋛",
	"gtreqqless": "⪌",
	"gtrless": "≷",
	"gtrsim": "≳",
	"gvertneqq": "≩︀",
	"gvnE": "≩︀",
	"Hacek": "ˇ",
	"hairsp": " ",
	"half": "½",
	"hamilt": "ℋ",
	"HARDcy": "Ъ",
	"hardcy": "ъ",
	"harrcir": "⥈",
	"harr": "↔",
	"hArr": "⇔",
	"harrw": "↭",
	"Hat": "^",
	"hbar": "ℏ",
	"Hcirc": "Ĥ",
	"hcirc": "ĥ",
	"hearts": "♥",
	"heartsuit": "♥",
	"hellip": "…",
	"hercon": "⊹",
	"hfr": "𝔥",
	"Hfr": "ℌ",
	"HilbertSpace": "ℋ",
	"hksearow": "⤥",
	"hkswarow": "⤦",
	"hoarr": "⇿",
	"homtht": "∻",
	"hookleftarrow": "↩",
	"hookrightarrow": "↪",
	"hopf": "𝕙",
	"Hopf": "ℍ",
	"horbar": "―",
	"HorizontalLine": "─",
	"hscr": "𝒽",
	"Hscr": "ℋ",
	"hslash": "ℏ",
	"Hstrok": "Ħ",
	"hstrok": "ħ",
	"HumpDownHump": "≎",
	"HumpEqual": "≏",
	"hybull": "⁃",
	"hyphen": "‐",
	"Iacute": "Í",
	"iacute": "í",
	"ic": "⁣",
	"Icirc": "Î",
	"icirc": "î",
	"Icy": "И",
	"icy": "и",
	"Idot": "İ",
	"IEcy": "Е",
	"iecy": "е",
	"iexcl": "¡",
	"iff": "⇔",
	"ifr": "𝔦",
	"Ifr": "ℑ",
	"Igrave": "Ì",
	"igrave": "ì",
	"ii": "ⅈ",
	"iiiint": "⨌",
	"iiint": "∭",
	"iinfin": "⧜",
	"iiota": "℩",
	"IJlig": "Ĳ",
	"ijlig": "ĳ",
	"Imacr": "Ī",
	"imacr": "ī",
	"image": "ℑ",
	"ImaginaryI": "ⅈ",
	"imagline": "ℐ",
	"imagpart": "ℑ",
	"imath": "ı",
	"Im": "ℑ",
	"imof": "⊷",
	"imped": "Ƶ",
	"Implies": "⇒",
	"incare": "℅",
	"in": "∈",
	"infin": "∞",
	"infintie": "⧝",
	"inodot": "ı",
	"intcal": "⊺",
	"int": "∫",
	"Int": "∬",
	"integers": "ℤ",
	"Integral": "∫",
	"intercal": "⊺",
	"Intersection": "⋂",
	"intlarhk": "⨗",
	"intprod": "⨼",
	"InvisibleComma": "⁣",
	"InvisibleTimes": "⁢",
	"IOcy": "Ё",
	"iocy": "ё",
	"Iogon": "Į",
	"iogon": "į",
	"Iopf": "𝕀",
	"iopf": "𝕚",
	"Iota": "Ι",
	"iota": "ι",
	"iprod": "⨼",
	"iquest": "¿",
	"iscr": "𝒾",
	"Iscr": "ℐ",
	"isin": "∈",
	"isindot": "⋵",
	"isinE": "⋹",
	"isins": "⋴",
	"isinsv": "⋳",
	"isinv": "∈",
	"it": "⁢",
	"Itilde": "Ĩ",
	"itilde": "ĩ",
	"Iukcy": "І",
	"iukcy": "і",
	"Iuml": "Ï",
	"iuml": "ï",
	"Jcirc": "Ĵ",
	"jcirc": "ĵ",
	"Jcy": "Й",
	"jcy": "й",
	"Jfr": "𝔍",
	"jfr": "𝔧",
	"jmath": "ȷ",
	"Jopf": "𝕁",
	"jopf": "𝕛",
	"Jscr": "𝒥",
	"jscr": "𝒿",
	"Jsercy": "Ј",
	"jsercy": "ј",
	"Jukcy": "Є",
	"jukcy": "є",
	"Kappa": "Κ",
	"kappa": "κ",
	"kappav": "ϰ",
	"Kcedil": "Ķ",
	"kcedil": "ķ",
	"Kcy": "К",
	"kcy": "к",
	"Kfr": "𝔎",
	"kfr": "𝔨",
	"kgreen": "ĸ",
	"KHcy": "Х",
	"khcy": "х",
	"KJcy": "Ќ",
	"kjcy": "ќ",
	"Kopf": "𝕂",
	"kopf": "𝕜",
	"Kscr": "𝒦",
	"kscr": "𝓀",
	"lAarr": "⇚",
	"Lacute": "Ĺ",
	"lacute": "ĺ",
	"laemptyv": "⦴",
	"lagran": "ℒ",
	"Lambda": "Λ",
	"lambda": "λ",
	"lang": "⟨",
	"Lang": "⟪",
	"langd": "⦑",
	"langle": "⟨",
	"lap": "⪅",
	"Laplacetrf": "ℒ",
	"laquo": "«",
	"larrb": "⇤",
	"larrbfs": "⤟",
	"larr": "←",
	"Larr": "↞",
	"lArr": "⇐",
	"larrfs": "⤝",
	"larrhk": "↩",
	"larrlp": "↫",
	"larrpl": "⤹",
	"larrsim": "⥳",
	"larrtl": "↢",
	"latail": "⤙",
	"lAtail": "⤛",
	"lat": "⪫",
	"late": "⪭",
	"lates": "⪭︀",
	"lbarr": "⤌",
	"lBarr": "⤎",
	"lbbrk": "❲",
	"lbrace": "{",
	"lbrack": "[",
	"lbrke": "⦋",
	"lbrksld": "⦏",
	"lbrkslu": "⦍",
	"Lcaron": "Ľ",
	"lcaron": "ľ",
	"Lcedil": "Ļ",
	"lcedil": "ļ",
	"lceil": "⌈",
	"lcub": "{",
	"Lcy": "Л",
	"lcy": "л",
	"ldca": "⤶",
	"ldquo": "“",
	"ldquor": "„",
	"ldrdhar": "⥧",
	"ldrushar": "⥋",
	"ldsh": "↲",
	"le": "≤",
	"lE": "≦",
	"LeftAngleBracket": "⟨",
	"LeftArrowBar": "⇤",
	"leftarrow": "←",
	"LeftArrow": "←",
	"Leftarrow": "⇐",
	"LeftArrowRightArrow": "⇆",
	"leftarrowtail": "↢",
	"LeftCeiling": "⌈",
	"LeftDoubleBracket": "⟦",
	"LeftDownTeeVector": "⥡",
	"LeftDownVectorBar": "⥙",
	"LeftDownVector": "⇃",
	"LeftFloor": "⌊",
	"leftharpoondown": "↽",
	"leftharpoonup": "↼",
	"leftleftarrows": "⇇",
	"leftrightarrow": "↔",
	"LeftRightArrow": "↔",
	"Leftrightarrow": "⇔",
	"leftrightarrows": "⇆",
	"leftrightharpoons": "⇋",
	"leftrightsquigarrow": "↭",
	"LeftRightVector": "⥎",
	"LeftTeeArrow": "↤",
	"LeftTee": "⊣",
	"LeftTeeVector": "⥚",
	"leftthreetimes": "⋋",
	"LeftTriangleBar": "⧏",
	"LeftTriangle": "⊲",
	"LeftTriangleEqual": "⊴",
	"LeftUpDownVector": "⥑",
	"LeftUpTeeVector": "⥠",
	"LeftUpVectorBar": "⥘",
	"LeftUpVector": "↿",
	"LeftVectorBar": "⥒",
	"LeftVector": "↼",
	"lEg": "⪋",
	"leg": "⋚",
	"leq": "≤",
	"leqq": "≦",
	"leqslant": "⩽",
	"lescc": "⪨",
	"les": "⩽",
	"lesdot": "⩿",
	"lesdoto": "⪁",
	"lesdotor": "⪃",
	"lesg": "⋚︀",
	"lesges": "⪓",
	"lessapprox": "⪅",
	"lessdot": "⋖",
	"lesseqgtr": "⋚",
	"lesseqqgtr": "⪋",
	"LessEqualGreater": "⋚",
	"LessFullEqual": "≦",
	"LessGreater": "≶",
	"lessgtr": "≶",
	"LessLess": "⪡",
	"lesssim": "≲",
	"LessSlantEqual": "⩽",
	"LessTilde": "≲",
	"lfisht": "⥼",
	"lfloor": "⌊",
	"Lfr": "𝔏",
	"lfr": "𝔩",
	"lg": "≶",
	"lgE": "⪑",
	"lHar": "⥢",
	"lhard": "↽",
	"lharu": "↼",
	"lharul": "⥪",
	"lhblk": "▄",
	"LJcy": "Љ",
	"ljcy": "љ",
	"llarr": "⇇",
	"ll": "≪",
	"Ll": "⋘",
	"llcorner": "⌞",
	"Lleftarrow": "⇚",
	"llhard": "⥫",
	"lltri": "◺",
	"Lmidot": "Ŀ",
	"lmidot": "ŀ",
	"lmoustache": "⎰",
	"lmoust": "⎰",
	"lnap": "⪉",
	"lnapprox": "⪉",
	"lne": "⪇",
	"lnE": "≨",
	"lneq": "⪇",
	"lneqq": "≨",
	"lnsim": "⋦",
	"loang": "⟬",
	"loarr": "⇽",
	"lobrk": "⟦",
	"longleftarrow": "⟵",
	"LongLeftArrow": "⟵",
	"Longleftarrow": "⟸",
	"longleftrightarrow": "⟷",
	"LongLeftRightArrow": "⟷",
	"Longleftrightarrow": "⟺",
	"longmapsto": "⟼",
	"longrightarrow": "⟶",
	"LongRightArrow": "⟶",
	"Longrightarrow": "⟹",
	"looparrowleft": "↫",
	"looparrowright": "↬",
	"lopar": "⦅",
	"Lopf": "𝕃",
	"lopf": "𝕝",
	"loplus": "⨭",
	"lotimes": "⨴",
	"lowast": "∗",
	"lowbar": "_",
	"LowerLeftArrow": "↙",
	"LowerRightArrow": "↘",
	"loz": "◊",
	"lozenge": "◊",
	"lozf": "⧫",
	"lpar": "(",
	"lparlt": "⦓",
	"lrarr": "⇆",
	"lrcorner": "⌟",
	"lrhar": "⇋",
	"lrhard": "⥭",
	"lrm": "‎",
	"lrtri": "⊿",
	"lsaquo": "‹",
	"lscr": "𝓁",
	"Lscr": "ℒ",
	"lsh": "↰",
	"Lsh": "↰",
	"lsim": "≲",
	"lsime": "⪍",
	"lsimg": "⪏",
	"lsqb": "[",
	"lsquo": "‘",
	"lsquor": "‚",
	"Lstrok": "Ł",
	"lstrok": "ł",
	"ltcc": "⪦",
	"ltcir": "⩹",
	"lt": "<",
	"LT": "<",
	"Lt": "≪",
	"ltdot": "⋖",
	"lthree": "⋋",
	"ltimes": "⋉",
	"ltlarr": "⥶",
	"ltquest": "⩻",
	"ltri": "◃",
	"ltrie": "⊴",
	"ltrif": "◂",
	"ltrPar": "⦖",
	"lurdshar": "⥊",
	"luruhar": "⥦",
	"lvertneqq": "≨︀",
	"lvnE": "≨︀",
	"macr": "¯",
	"male": "♂",
	"malt": "✠",
	"maltese": "✠",
	"Map": "⤅",
	"map": "↦",
	"mapsto": "↦",
	"mapstodown": "↧",
	"mapstoleft": "↤",
	"mapstoup": "↥",
	"marker": "▮",
	"mcomma": "⨩",
	"Mcy": "М",
	"mcy": "м",
	"mdash": "—",
	"mDDot": "∺",
	"measuredangle": "∡",
	"MediumSpace": " ",
	"Mellintrf": "ℳ",
	"Mfr": "𝔐",
	"mfr": "𝔪",
	"mho": "℧",
	"micro": "µ",
	"midast": "*",
	"midcir": "⫰",
	"mid": "∣",
	"middot": "·",
	"minusb": "⊟",
	"minus": "−",
	"minusd": "∸",
	"minusdu": "⨪",
	"MinusPlus": "∓",
	"mlcp": "⫛",
	"mldr": "…",
	"mnplus": "∓",
	"models": "⊧",
	"Mopf": "𝕄",
	"mopf": "𝕞",
	"mp": "∓",
	"mscr": "𝓂",
	"Mscr": "ℳ",
	"mstpos": "∾",
	"Mu": "Μ",
	"mu": "μ",
	"multimap": "⊸",
	"mumap": "⊸",
	"nabla": "∇",
	"Nacute": "Ń",
	"nacute": "ń",
	"nang": "∠⃒",
	"nap": "≉",
	"napE": "⩰̸",
	"napid": "≋̸",
	"napos": "ŉ",
	"napprox": "≉",
	"natural": "♮",
	"naturals": "ℕ",
	"natur": "♮",
	"nbsp": " ",
	"nbump": "≎̸",
	"nbumpe": "≏̸",
	"ncap": "⩃",
	"Ncaron": "Ň",
	"ncaron": "ň",
	"Ncedil": "Ņ",
	"ncedil": "ņ",
	"ncong": "≇",
	"ncongdot": "⩭̸",
	"ncup": "⩂",
	"Ncy": "Н",
	"ncy": "н",
	"ndash": "–",
	"nearhk": "⤤",
	"nearr": "↗",
	"neArr": "⇗",
	"nearrow": "↗",
	"ne": "≠",
	"nedot": "≐̸",
	"NegativeMediumSpace": "​",
	"NegativeThickSpace": "​",
	"NegativeThinSpace": "​",
	"NegativeVeryThinSpace": "​",
	"nequiv": "≢",
	"nesear": "⤨",
	"nesim": "≂̸",
	"NestedGreaterGreater": "≫",
	"NestedLessLess": "≪",
	"NewLine": "\n",
	"nexist": "∄",
	"nexists": "∄",
	"Nfr": "𝔑",
	"nfr": "𝔫",
	"ngE": "≧̸",
	"nge": "≱",
	"ngeq": "≱",
	"ngeqq": "≧̸",
	"ngeqslant": "⩾̸",
	"nges": "⩾̸",
	"nGg": "⋙̸",
	"ngsim": "≵",
	"nGt": "≫⃒",
	"ngt": "≯",
	"ngtr": "≯",
	"nGtv": "≫̸",
	"nharr": "↮",
	"nhArr": "⇎",
	"nhpar": "⫲",
	"ni": "∋",
	"nis": "⋼",
	"nisd": "⋺",
	"niv": "∋",
	"NJcy": "Њ",
	"njcy": "њ",
	"nlarr": "↚",
	"nlArr": "⇍",
	"nldr": "‥",
	"nlE": "≦̸",
	"nle": "≰",
	"nleftarrow": "↚",
	"nLeftarrow": "⇍",
	"nleftrightarrow": "↮",
	"nLeftrightarrow": "⇎",
	"nleq": "≰",
	"nleqq": "≦̸",
	"nleqslant": "⩽̸",
	"nles": "⩽̸",
	"nless": "≮",
	"nLl": "⋘̸",
	"nlsim": "≴",
	"nLt": "≪⃒",
	"nlt": "≮",
	"nltri": "⋪",
	"nltrie": "⋬",
	"nLtv": "≪̸",
	"nmid": "∤",
	"NoBreak": "⁠",
	"NonBreakingSpace": " ",
	"nopf": "𝕟",
	"Nopf": "ℕ",
	"Not": "⫬",
	"not": "¬",
	"NotCongruent": "≢",
	"NotCupCap": "≭",
	"NotDoubleVerticalBar": "∦",
	"NotElement": "∉",
	"NotEqual": "≠",
	"NotEqualTilde": "≂̸",
	"NotExists": "∄",
	"NotGreater": "≯",
	"NotGreaterEqual": "≱",
	"NotGreaterFullEqual": "≧̸",
	"NotGreaterGreater": "≫̸",
	"NotGreaterLess": "≹",
	"NotGreaterSlantEqual": "⩾̸",
	"NotGreaterTilde": "≵",
	"NotHumpDownHump": "≎̸",
	"NotHumpEqual": "≏̸",
	"notin": "∉",
	"notindot": "⋵̸",
	"notinE": "⋹̸",
	"notinva": "∉",
	"notinvb": "⋷",
	"notinvc": "⋶",
	"NotLeftTriangleBar": "⧏̸",
	"NotLeftTriangle": "⋪",
	"NotLeftTriangleEqual": "⋬",
	"NotLess": "≮",
	"NotLessEqual": "≰",
	"NotLessGreater": "≸",
	"NotLessLess": "≪̸",
	"NotLessSlantEqual": "⩽̸",
	"NotLessTilde": "≴",
	"NotNestedGreaterGreater": "⪢̸",
	"NotNestedLessLess": "⪡̸",
	"notni": "∌",
	"notniva": "∌",
	"notnivb": "⋾",
	"notnivc": "⋽",
	"NotPrecedes": "⊀",
	"NotPrecedesEqual": "⪯̸",
	"NotPrecedesSlantEqual": "⋠",
	"NotReverseElement": "∌",
	"NotRightTriangleBar": "⧐̸",
	"NotRightTriangle": "⋫",
	"NotRightTriangleEqual": "⋭",
	"NotSquareSubset": "⊏̸",
	"NotSquareSubsetEqual": "⋢",
	"NotSquareSuperset": "⊐̸",
	"NotSquareSupersetEqual": "⋣",
	"NotSubset": "⊂⃒",
	"NotSubsetEqual": "⊈",
	"NotSucceeds": "⊁",
	"NotSucceedsEqual": "⪰̸",
	"NotSucceedsSlantEqual": "⋡",
	"NotSucceedsTilde": "≿̸",
	"NotSuperset": "⊃⃒",
	"NotSupersetEqual": "⊉",
	"NotTilde": "≁",
	"NotTildeEqual": "≄",
	"NotTildeFullEqual": "≇",
	"NotTildeTilde": "≉",
	"NotVerticalBar": "∤",
	"nparallel": "∦",
	"npar": "∦",
	"nparsl": "⫽⃥",
	"npart": "∂̸",
	"npolint": "⨔",
	"npr": "⊀",
	"nprcue": "⋠",
	"nprec": "⊀",
	"npreceq": "⪯̸",
	"npre": "⪯̸",
	"nrarrc": "⤳̸",
	"nrarr": "↛",
	"nrArr": "⇏",
	"nrarrw": "↝̸",
	"nrightarrow": "↛",
	"nRightarrow": "⇏",
	"nrtri": "⋫",
	"nrtrie": "⋭",
	"nsc": "⊁",
	"nsccue": "⋡",
	"nsce": "⪰̸",
	"Nscr": "𝒩",
	"nscr": "𝓃",
	"nshortmid": "∤",
	"nshortparallel": "∦",
	"nsim": "≁",
	"nsime": "≄",
	"nsimeq": "≄",
	"nsmid": "∤",
	"nspar": "∦",
	"nsqsube": "⋢",
	"nsqsupe": "⋣",
	"nsub": "⊄",
	"nsubE": "⫅̸",
	"nsube": "⊈",
	"nsubset": "⊂⃒",
	"nsubseteq": "⊈",
	"nsubseteqq": "⫅̸",
	"nsucc": "⊁",
	"nsucceq": "⪰̸",
	"nsup": "⊅",
	"nsupE": "⫆̸",
	"nsupe": "⊉",
	"nsupset": "⊃⃒",
	"nsupseteq": "⊉",
	"nsupseteqq": "⫆̸",
	"ntgl": "≹",
	"Ntilde": "Ñ",
	"ntilde": "ñ",
	"ntlg": "≸",
	"ntriangleleft": "⋪",
	"ntrianglelefteq": "⋬",
	"ntriangleright": "⋫",
	"ntrianglerighteq": "⋭",
	"Nu": "Ν",
	"nu": "ν",
	"num": "#",
	"numero": "№",
	"numsp": " ",
	"nvap": "≍⃒",
	"nvdash": "⊬",
	"nvDash": "⊭",
	"nVdash": "⊮",
	"nVDash": "⊯",
	"nvge": "≥⃒",
	"nvgt": ">⃒",
	"nvHarr": "⤄",
	"nvinfin": "⧞",
	"nvlArr": "⤂",
	"nvle": "≤⃒",
	"nvlt": "<⃒",
	"nvltrie": "⊴⃒",
	"nvrArr": "⤃",
	"nvrtrie": "⊵⃒",
	"nvsim": "∼⃒",
	"nwarhk": "⤣",
	"nwarr": "↖",
	"nwArr": "⇖",
	"nwarrow": "↖",
	"nwnear": "⤧",
	"Oacute": "Ó",
	"oacute": "ó",
	"oast": "⊛",
	"Ocirc": "Ô",
	"ocirc": "ô",
	"ocir": "⊚",
	"Ocy": "О",
	"ocy": "о",
	"odash": "⊝",
	"Odblac": "Ő",
	"odblac": "ő",
	"odiv": "⨸",
	"odot": "⊙",
	"odsold": "⦼",
	"OElig": "Œ",
	"oelig": "œ",
	"ofcir": "⦿",
	"Ofr": "𝔒",
	"ofr": "𝔬",
	"ogon": "˛",
	"Ograve": "Ò",
	"ograve": "ò",
	"ogt": "⧁",
	"ohbar": "⦵",
	"ohm": "Ω",
	"oint": "∮",
	"olarr": "↺",
	"olcir": "⦾",
	"olcross": "⦻",
	"oline": "‾",
	"olt": "⧀",
	"Omacr": "Ō",
	"omacr": "ō",
	"Omega": "Ω",
	"omega": "ω",
	"Omicron": "Ο",
	"omicron": "ο",
	"omid": "⦶",
	"ominus": "⊖",
	"Oopf": "𝕆",
	"oopf": "𝕠",
	"opar": "⦷",
	"OpenCurlyDoubleQuote": "“",
	"OpenCurlyQuote": "‘",
	"operp": "⦹",
	"oplus": "⊕",
	"orarr": "↻",
	"Or": "⩔",
	"or": "∨",
	"ord": "⩝",
	"order": "ℴ",
	"orderof": "ℴ",
	"ordf": "ª",
	"ordm": "º",
	"origof": "⊶",
	"oror": "⩖",
	"orslope": "⩗",
	"orv": "⩛",
	"oS": "Ⓢ",
	"Oscr": "𝒪",
	"oscr": "ℴ",
	"Oslash": "Ø",
	"oslash": "ø",
	"osol": "⊘",
	"Otilde": "Õ",
	"otilde": "õ",
	"otimesas": "⨶",
	"Otimes": "⨷",
	"otimes": "⊗",
	"Ouml": "Ö",
	"ouml": "ö",
	"ovbar": "⌽",
	"OverBar": "‾",
	"OverBrace": "⏞",
	"OverBracket": "⎴",
	"OverParenthesis": "⏜",
	"para": "¶",
	"parallel": "∥",
	"par": "∥",
	"parsim": "⫳",
	"parsl": "⫽",
	"part": "∂",
	"PartialD": "∂",
	"Pcy": "П",
	"pcy": "п",
	"percnt": "%",
	"period": ".",
	"permil": "‰",
	"perp": "⊥",
	"pertenk": "‱",
	"Pfr": "𝔓",
	"pfr": "𝔭",
	"Phi": "Φ",
	"phi": "φ",
	"phiv": "ϕ",
	"phmmat": "ℳ",
	"phone": "☎",
	"Pi": "Π",
	"pi": "π",
	"pitchfork": "⋔",
	"piv": "ϖ",
	"planck": "ℏ",
	"planckh": "ℎ",
	"plankv": "ℏ",
	"plusacir": "⨣",
	"plusb": "⊞",
	"pluscir": "⨢",
	"plus": "+",
	"plusdo": "∔",
	"plusdu": "⨥",
	"pluse": "⩲",
	"PlusMinus": "±",
	"plusmn": "±",
	"plussim": "⨦",
	"plustwo": "⨧",
	"pm": "±",
	"Poincareplane": "ℌ",
	"pointint": "⨕",
	"popf": "𝕡",
	"Popf": "ℙ",
	"pound": "£",
	"prap": "⪷",
	"Pr": "⪻",
	"pr": "≺",
	"prcue": "≼",
	"precapprox": "⪷",
	"prec": "≺",
	"preccurlyeq": "≼",
	"Precedes": "≺",
	"PrecedesEqual": "⪯",
	"PrecedesSlantEqual": "≼",
	"PrecedesTilde": "≾",
	"preceq": "⪯",
	"precnapprox": "⪹",
	"precneqq": "⪵",
	"precnsim": "⋨",
	"pre": "⪯",
	"prE": "⪳",
	"precsim": "≾",
	"prime": "′",
	"Prime": "″",
	"primes": "ℙ",
	"prnap": "⪹",
	"prnE": "⪵",
	"prnsim": "⋨",
	"prod": "∏",
	"Product": "∏",
	"profalar": "⌮",
	"profline": "⌒",
	"profsurf": "⌓",
	"prop": "∝",
	"Proportional": "∝",
	"Proportion": "∷",
	"propto": "∝",
	"prsim": "≾",
	"prurel": "⊰",
	"Pscr": "𝒫",
	"pscr": "𝓅",
	"Psi": "Ψ",
	"psi": "ψ",
	"puncsp": " ",
	"Qfr": "𝔔",
	"qfr": "𝔮",
	"qint": "⨌",
	"qopf": "𝕢",
	"Qopf": "ℚ",
	"qprime": "⁗",
	"Qscr": "𝒬",
	"qscr": "𝓆",
	"quaternions": "ℍ",
	"quatint": "⨖",
	"quest": "?",
	"questeq": "≟",
	"quot": "\"",
	"QUOT": "\"",
	"rAarr": "⇛",
	"race": "∽̱",
	"Racute": "Ŕ",
	"racute": "ŕ",
	"radic": "√",
	"raemptyv": "⦳",
	"rang": "⟩",
	"Rang": "⟫",
	"rangd": "⦒",
	"range": "⦥",
	"rangle": "⟩",
	"raquo": "»",
	"rarrap": "⥵",
	"rarrb": "⇥",
	"rarrbfs": "⤠",
	"rarrc": "⤳",
	"rarr": "→",
	"Rarr": "↠",
	"rArr": "⇒",
	"rarrfs": "⤞",
	"rarrhk": "↪",
	"rarrlp": "↬",
	"rarrpl": "⥅",
	"rarrsim": "⥴",
	"Rarrtl": "⤖",
	"rarrtl": "↣",
	"rarrw": "↝",
	"ratail": "⤚",
	"rAtail": "⤜",
	"ratio": "∶",
	"rationals": "ℚ",
	"rbarr": "⤍",
	"rBarr": "⤏",
	"RBarr": "⤐",
	"rbbrk": "❳",
	"rbrace": "}",
	"rbrack": "]",
	"rbrke": "⦌",
	"rbrksld": "⦎",
	"rbrkslu": "⦐",
	"Rcaron": "Ř",
	"rcaron": "ř",
	"Rcedil": "Ŗ",
	"rcedil": "ŗ",
	"rceil": "⌉",
	"rcub": "}",
	"Rcy": "Р",
	"rcy": "р",
	"rdca": "⤷",
	"rdldhar": "⥩",
	"rdquo": "”",
	"rdquor": "”",
	"rdsh": "↳",
	"real": "ℜ",
	"realine": "ℛ",
	"realpart": "ℜ",
	"reals": "ℝ",
	"Re": "ℜ",
	"rect": "▭",
	"reg": "®",
	"REG": "®",
	"ReverseElement": "∋",
	"ReverseEquilibrium": "⇋",
	"ReverseUpEquilibrium": "⥯",
	"rfisht": "⥽",
	"rfloor": "⌋",
	"rfr": "𝔯",
	"Rfr": "ℜ",
	"rHar": "⥤",
	"rhard": "⇁",
	"rharu": "⇀",
	"rharul": "⥬",
	"Rho": "Ρ",
	"rho": "ρ",
	"rhov": "ϱ",
	"RightAngleBracket": "⟩",
	"RightArrowBar": "⇥",
	"rightarrow": "→",
	"RightArrow": "→",
	"Rightarrow": "⇒",
	"RightArrowLeftArrow": "⇄",
	"rightarrowtail": "↣",
	"RightCeiling": "⌉",
	"RightDoubleBracket": "⟧",
	"RightDownTeeVector": "⥝",
	"RightDownVectorBar": "⥕",
	"RightDownVector": "⇂",
	"RightFloor": "⌋",
	"rightharpoondown": "⇁",
	"rightharpoonup": "⇀",
	"rightleftarrows": "⇄",
	"rightleftharpoons": "⇌",
	"rightrightarrows": "⇉",
	"rightsquigarrow": "↝",
	"RightTeeArrow": "↦",
	"RightTee": "⊢",
	"RightTeeVector": "⥛",
	"rightthreetimes": "⋌",
	"RightTriangleBar": "⧐",
	"RightTriangle": "⊳",
	"RightTriangleEqual": "⊵",
	"RightUpDownVector": "⥏",
	"RightUpTeeVector": "⥜",
	"RightUpVectorBar": "⥔",
	"RightUpVector": "↾",
	"RightVectorBar": "⥓",
	"RightVector": "⇀",
	"ring": "˚",
	"risingdotseq": "≓",
	"rlarr": "⇄",
	"rlhar": "⇌",
	"rlm": "‏",
	"rmoustache": "⎱",
	"rmoust": "⎱",
	"rnmid": "⫮",
	"roang": "⟭",
	"roarr": "⇾",
	"robrk": "⟧",
	"ropar": "⦆",
	"ropf": "𝕣",
	"Ropf": "ℝ",
	"roplus": "⨮",
	"rotimes": "⨵",
	"RoundImplies": "⥰",
	"rpar": ")",
	"rpargt": "⦔",
	"rppolint": "⨒",
	"rrarr": "⇉",
	"Rrightarrow": "⇛",
	"rsaquo": "›",
	"rscr": "𝓇",
	"Rscr": "ℛ",
	"rsh": "↱",
	"Rsh": "↱",
	"rsqb": "]",
	"rsquo": "’",
	"rsquor": "’",
	"rthree": "⋌",
	"rtimes": "⋊",
	"rtri": "▹",
	"rtrie": "⊵",
	"rtrif": "▸",
	"rtriltri": "⧎",
	"RuleDelayed": "⧴",
	"ruluhar": "⥨",
	"rx": "℞",
	"Sacute": "Ś",
	"sacute": "ś",
	"sbquo": "‚",
	"scap": "⪸",
	"Scaron": "Š",
	"scaron": "š",
	"Sc": "⪼",
	"sc": "≻",
	"sccue": "≽",
	"sce": "⪰",
	"scE": "⪴",
	"Scedil": "Ş",
	"scedil": "ş",
	"Scirc": "Ŝ",
	"scirc": "ŝ",
	"scnap": "⪺",
	"scnE": "⪶",
	"scnsim": "⋩",
	"scpolint": "⨓",
	"scsim": "≿",
	"Scy": "С",
	"scy": "с",
	"sdotb": "⊡",
	"sdot": "⋅",
	"sdote": "⩦",
	"searhk": "⤥",
	"searr": "↘",
	"seArr": "⇘",
	"searrow": "↘",
	"sect": "§",
	"semi": ";",
	"seswar": "⤩",
	"setminus": "∖",
	"setmn": "∖",
	"sext": "✶",
	"Sfr": "𝔖",
	"sfr": "𝔰",
	"sfrown": "⌢",
	"sharp": "♯",
	"SHCHcy": "Щ",
	"shchcy": "щ",
	"SHcy": "Ш",
	"shcy": "ш",
	"ShortDownArrow": "↓",
	"ShortLeftArrow": "←",
	"shortmid": "∣",
	"shortparallel": "∥",
	"ShortRightArrow": "→",
	"ShortUpArrow": "↑",
	"shy": "­",
	"Sigma": "Σ",
	"sigma": "σ",
	"sigmaf": "ς",
	"sigmav": "ς",
	"sim": "∼",
	"simdot": "⩪",
	"sime": "≃",
	"simeq": "≃",
	"simg": "⪞",
	"simgE": "⪠",
	"siml": "⪝",
	"simlE": "⪟",
	"simne": "≆",
	"simplus": "⨤",
	"simrarr": "⥲",
	"slarr": "←",
	"SmallCircle": "∘",
	"smallsetminus": "∖",
	"smashp": "⨳",
	"smeparsl": "⧤",
	"smid": "∣",
	"smile": "⌣",
	"smt": "⪪",
	"smte": "⪬",
	"smtes": "⪬︀",
	"SOFTcy": "Ь",
	"softcy": "ь",
	"solbar": "⌿",
	"solb": "⧄",
	"sol": "/",
	"Sopf": "𝕊",
	"sopf": "𝕤",
	"spades": "♠",
	"spadesuit": "♠",
	"spar": "∥",
	"sqcap": "⊓",
	"sqcaps": "⊓︀",
	"sqcup": "⊔",
	"sqcups": "⊔︀",
	"Sqrt": "√",
	"sqsub": "⊏",
	"sqsube": "⊑",
	"sqsubset": "⊏",
	"sqsubseteq": "⊑",
	"sqsup": "⊐",
	"sqsupe": "⊒",
	"sqsupset": "⊐",
	"sqsupseteq": "⊒",
	"square": "□",
	"Square": "□",
	"SquareIntersection": "⊓",
	"SquareSubset": "⊏",
	"SquareSubsetEqual": "⊑",
	"SquareSuperset": "⊐",
	"SquareSupersetEqual": "⊒",
	"SquareUnion": "⊔",
	"squarf": "▪",
	"squ": "□",
	"squf": "▪",
	"srarr": "→",
	"Sscr": "𝒮",
	"sscr": "𝓈",
	"ssetmn": "∖",
	"ssmile": "⌣",
	"sstarf": "⋆",
	"Star": "⋆",
	"star": "☆",
	"starf": "★",
	"straightepsilon": "ϵ",
	"straightphi": "ϕ",
	"strns": "¯",
	"sub": "⊂",
	"Sub": "⋐",
	"subdot": "⪽",
	"subE": "⫅",
	"sube": "⊆",
	"subedot": "⫃",
	"submult": "⫁",
	"subnE": "⫋",
	"subne": "⊊",
	"subplus": "⪿",
	"subrarr": "⥹",
	"subset": "⊂",
	"Subset": "⋐",
	"subseteq": "⊆",
	"subseteqq": "⫅",
	"SubsetEqual": "⊆",
	"subsetneq": "⊊",
	"subsetneqq": "⫋",
	"subsim": "⫇",
	"subsub": "⫕",
	"subsup": "⫓",
	"succapprox": "⪸",
	"succ": "≻",
	"succcurlyeq": "≽",
	"Succeeds": "≻",
	"SucceedsEqual": "⪰",
	"SucceedsSlantEqual": "≽",
	"SucceedsTilde": "≿",
	"succeq": "⪰",
	"succnapprox": "⪺",
	"succneqq": "⪶",
	"succnsim": "⋩",
	"succsim": "≿",
	"SuchThat": "∋",
	"sum": "∑",
	"Sum": "∑",
	"sung": "♪",
	"sup1": "¹",
	"sup2": "²",
	"sup3": "³",
	"sup": "⊃",
	"Sup": "⋑",
	"supdot": "⪾",
	"supdsub": "⫘",
	"supE": "⫆",
	"supe": "⊇",
	"supedot": "⫄",
	"Superset": "⊃",
	"SupersetEqual": "⊇",
	"suphsol": "⟉",
	"suphsub": "⫗",
	"suplarr": "⥻",
	"supmult": "⫂",
	"supnE": "⫌",
	"supne": "⊋",
	"supplus": "⫀",
	"supset": "⊃",
	"Supset": "⋑",
	"supseteq": "⊇",
	"supseteqq": "⫆",
	"supsetneq": "⊋",
	"supsetneqq": "⫌",
	"supsim": "⫈",
	"supsub": "⫔",
	"supsup": "⫖",
	"swarhk": "⤦",
	"swarr": "↙",
	"swArr": "⇙",
	"swarrow": "↙",
	"swnwar": "⤪",
	"szlig": "ß",
	"Tab": "\t",
	"target": "⌖",
	"Tau": "Τ",
	"tau": "τ",
	"tbrk": "⎴",
	"Tcaron": "Ť",
	"tcaron": "ť",
	"Tcedil": "Ţ",
	"tcedil": "ţ",
	"Tcy": "Т",
	"tcy": "т",
	"tdot": "⃛",
	"telrec": "⌕",
	"Tfr": "𝔗",
	"tfr": "𝔱",
	"there4": "∴",
	"therefore": "∴",
	"Therefore": "∴",
	"Theta": "Θ",
	"theta": "θ",
	"thetasym": "ϑ",
	"thetav": "ϑ",
	"thickapprox": "≈",
	"thicksim": "∼",
	"ThickSpace": "  ",
	"ThinSpace": " ",
	"thinsp": " ",
	"thkap": "≈",
	"thksim": "∼",
	"THORN": "Þ",
	"thorn": "þ",
	"tilde": "˜",
	"Tilde": "∼",
	"TildeEqual": "≃",
	"TildeFullEqual": "≅",
	"TildeTilde": "≈",
	"timesbar": "⨱",
	"timesb": "⊠",
	"times": "×",
	"timesd": "⨰",
	"tint": "∭",
	"toea": "⤨",
	"topbot": "⌶",
	"topcir": "⫱",
	"top": "⊤",
	"Topf": "𝕋",
	"topf": "𝕥",
	"topfork": "⫚",
	"tosa": "⤩",
	"tprime": "‴",
	"trade": "™",
	"TRADE": "™",
	"triangle": "▵",
	"triangledown": "▿",
	"triangleleft": "◃",
	"trianglelefteq": "⊴",
	"triangleq": "≜",
	"triangleright": "▹",
	"trianglerighteq": "⊵",
	"tridot": "◬",
	"trie": "≜",
	"triminus": "⨺",
	"TripleDot": "⃛",
	"triplus": "⨹",
	"trisb": "⧍",
	"tritime": "⨻",
	"trpezium": "⏢",
	"Tscr": "𝒯",
	"tscr": "𝓉",
	"TScy": "Ц",
	"tscy": "ц",
	"TSHcy": "Ћ",
	"tshcy": "ћ",
	"Tstrok": "Ŧ",
	"tstrok": "ŧ",
	"twixt": "≬",
	"twoheadleftarrow": "↞",
	"twoheadrightarrow": "↠",
	"Uacute": "Ú",
	"uacute": "ú",
	"uarr": "↑",
	"Uarr": "↟",
	"uArr": "⇑",
	"Uarrocir": "⥉",
	"Ubrcy": "Ў",
	"ubrcy": "ў",
	"Ubreve": "Ŭ",
	"ubreve": "ŭ",
	"Ucirc": "Û",
	"ucirc": "û",
	"Ucy": "У",
	"ucy": "у",
	"udarr": "⇅",
	"Udblac": "Ű",
	"udblac": "ű",
	"udhar": "⥮",
	"ufisht": "⥾",
	"Ufr": "𝔘",
	"ufr": "𝔲",
	"Ugrave": "Ù",
	"ugrave": "ù",
	"uHar": "⥣",
	"uharl": "↿",
	"uharr": "↾",
	"uhblk": "▀",
	"ulcorn": "⌜",
	"ulcorner": "⌜",
	"ulcrop": "⌏",
	"ultri": "◸",
	"Umacr": "Ū",
	"umacr": "ū",
	"uml": "¨",
	"UnderBar": "_",
	"UnderBrace": "⏟",
	"UnderBracket": "⎵",
	"UnderParenthesis": "⏝",
	"Union": "⋃",
	"UnionPlus": "⊎",
	"Uogon": "Ų",
	"uogon": "ų",
	"Uopf": "𝕌",
	"uopf": "𝕦",
	"UpArrowBar": "⤒",
	"uparrow": "↑",
	"UpArrow": "↑",
	"Uparrow": "⇑",
	"UpArrowDownArrow": "⇅",
	"updownarrow": "↕",
	"UpDownArrow": "↕",
	"Updownarrow": "⇕",
	"UpEquilibrium": "⥮",
	"upharpoonleft": "↿",
	"upharpoonright": "↾",
	"uplus": "⊎",
	"UpperLeftArrow": "↖",
	"UpperRightArrow": "↗",
	"upsi": "υ",
	"Upsi": "ϒ",
	"upsih": "ϒ",
	"Upsilon": "Υ",
	"upsilon": "υ",
	"UpTeeArrow": "↥",
	"UpTee": "⊥",
	"upuparrows": "⇈",
	"urcorn": "⌝",
	"urcorner": "⌝",
	"urcrop": "⌎",
	"Uring": "Ů",
	"uring": "ů",
	"urtri": "◹",
	"Uscr": "𝒰",
	"uscr": "𝓊",
	"utdot": "⋰",
	"Utilde": "Ũ",
	"utilde": "ũ",
	"utri": "▵",
	"utrif": "▴",
	"uuarr": "⇈",
	"Uuml": "Ü",
	"uuml": "ü",
	"uwangle": "⦧",
	"vangrt": "⦜",
	"varepsilon": "ϵ",
	"varkappa": "ϰ",
	"varnothing": "∅",
	"varphi": "ϕ",
	"varpi": "ϖ",
	"varpropto": "∝",
	"varr": "↕",
	"vArr": "⇕",
	"varrho": "ϱ",
	"varsigma": "ς",
	"varsubsetneq": "⊊︀",
	"varsubsetneqq": "⫋︀",
	"varsupsetneq": "⊋︀",
	"varsupsetneqq": "⫌︀",
	"vartheta": "ϑ",
	"vartriangleleft": "⊲",
	"vartriangleright": "⊳",
	"vBar": "⫨",
	"Vbar": "⫫",
	"vBarv": "⫩",
	"Vcy": "В",
	"vcy": "в",
	"vdash": "⊢",
	"vDash": "⊨",
	"Vdash": "⊩",
	"VDash": "⊫",
	"Vdashl": "⫦",
	"veebar": "⊻",
	"vee": "∨",
	"Vee": "⋁",
	"veeeq": "≚",
	"vellip": "⋮",
	"verbar": "|",
	"Verbar": "‖",
	"vert": "|",
	"Vert": "‖",
	"VerticalBar": "∣",
	"VerticalLine": "|",
	"VerticalSeparator": "❘",
	"VerticalTilde": "≀",
	"VeryThinSpace": " ",
	"Vfr": "𝔙",
	"vfr": "𝔳",
	"vltri": "⊲",
	"vnsub": "⊂⃒",
	"vnsup": "⊃⃒",
	"Vopf": "𝕍",
	"vopf": "𝕧",
	"vprop": "∝",
	"vrtri": "⊳",
	"Vscr": "𝒱",
	"vscr": "𝓋",
	"vsubnE": "⫋︀",
	"vsubne": "⊊︀",
	"vsupnE": "⫌︀",
	"vsupne": "⊋︀",
	"Vvdash": "⊪",
	"vzigzag": "⦚",
	"Wcirc": "Ŵ",
	"wcirc": "ŵ",
	"wedbar": "⩟",
	"wedge": "∧",
	"Wedge": "⋀",
	"wedgeq": "≙",
	"weierp": "℘",
	"Wfr": "𝔚",
	"wfr": "𝔴",
	"Wopf": "𝕎",
	"wopf": "𝕨",
	"wp": "℘",
	"wr": "≀",
	"wreath": "≀",
	"Wscr": "𝒲",
	"wscr": "𝓌",
	"xcap": "⋂",
	"xcirc": "◯",
	"xcup": "⋃",
	"xdtri": "▽",
	"Xfr": "𝔛",
	"xfr": "𝔵",
	"xharr": "⟷",
	"xhArr": "⟺",
	"Xi": "Ξ",
	"xi": "ξ",
	"xlarr": "⟵",
	"xlArr": "⟸",
	"xmap": "⟼",
	"xnis": "⋻",
	"xodot": "⨀",
	"Xopf": "𝕏",
	"xopf": "𝕩",
	"xoplus": "⨁",
	"xotime": "⨂",
	"xrarr": "⟶",
	"xrArr": "⟹",
	"Xscr": "𝒳",
	"xscr": "𝓍",
	"xsqcup": "⨆",
	"xuplus": "⨄",
	"xutri": "△",
	"xvee": "⋁",
	"xwedge": "⋀",
	"Yacute": "Ý",
	"yacute": "ý",
	"YAcy": "Я",
	"yacy": "я",
	"Ycirc": "Ŷ",
	"ycirc": "ŷ",
	"Ycy": "Ы",
	"ycy": "ы",
	"yen": "¥",
	"Yfr": "𝔜",
	"yfr": "𝔶",
	"YIcy": "Ї",
	"yicy": "ї",
	"Yopf": "𝕐",
	"yopf": "𝕪",
	"Yscr": "𝒴",
	"yscr": "𝓎",
	"YUcy": "Ю",
	"yucy": "ю",
	"yuml": "ÿ",
	"Yuml": "Ÿ",
	"Zacute": "Ź",
	"zacute": "ź",
	"Zcaron": "Ž",
	"zcaron": "ž",
	"Zcy": "З",
	"zcy": "з",
	"Zdot": "Ż",
	"zdot": "ż",
	"zeetrf": "ℨ",
	"ZeroWidthSpace": "​",
	"Zeta": "Ζ",
	"zeta": "ζ",
	"zfr": "𝔷",
	"Zfr": "ℨ",
	"ZHcy": "Ж",
	"zhcy": "ж",
	"zigrarr": "⇝",
	"zopf": "𝕫",
	"Zopf": "ℤ",
	"Zscr": "𝒵",
	"zscr": "𝓏",
	"zwj": "‍",
	"zwnj": "‌"
};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = {
	"amp": "&",
	"apos": "'",
	"gt": ">",
	"lt": "<",
	"quot": "\""
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var BIND_FLAG = 1,
    BIND_KEY_FLAG = 2,
    CURRY_BOUND_FLAG = 4,
    CURRY_FLAG = 8,
    CURRY_RIGHT_FLAG = 16,
    PARTIAL_FLAG = 32,
    PARTIAL_RIGHT_FLAG = 64,
    ARY_FLAG = 128,
    REARG_FLAG = 256,
    FLIP_FLAG = 512;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [
  ['ary', ARY_FLAG],
  ['bind', BIND_FLAG],
  ['bindKey', BIND_KEY_FLAG],
  ['curry', CURRY_FLAG],
  ['curryRight', CURRY_RIGHT_FLAG],
  ['flip', FLIP_FLAG],
  ['partial', PARTIAL_FLAG],
  ['partialRight', PARTIAL_RIGHT_FLAG],
  ['rearg', REARG_FLAG]
];

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      result++;
    }
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }
  return result;
}

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var objectCreate = Object.create;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/* Used to set `toString` methods. */
var defineProperty = (function() {
  var func = getNative(Object, 'defineProperty'),
      name = getNative.name;

  return (name && name.length > 2) ? func : undefined;
}());

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & ARY_FLAG,
      isBind = bitmask & BIND_FLAG,
      isBindKey = bitmask & BIND_KEY_FLAG,
      isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
      isFlip = bitmask & FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
        args, newHolders, argPos, ary, arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
  bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

  if (!(bitmask & CURRY_BOUND_FLAG)) {
    bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
  }

  var result = wrapFunc(func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity);
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *  The bitmask may be composed of the following flags:
 *     1 - `_.bind`
 *     2 - `_.bindKey`
 *     4 - `_.curry` or `_.curryRight` of a bound function
 *     8 - `_.curry`
 *    16 - `_.curryRight`
 *    32 - `_.partial`
 *    64 - `_.partialRight`
 *   128 - `_.rearg`
 *   256 - `_.ary`
 *   512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & BIND_KEY_FLAG;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }

  var newData = [
    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    argPos, ary, arity
  ];

  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] == null
    ? (isBindKey ? 0 : func.length)
    : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
    bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  return setWrapToString(result, func, bitmask);
}

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails(source, details) {
  var length = details.length,
      lastIndex = length - 1;

  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
  var source = (reference + '');
  return defineProperty(wrapper, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
  });
};

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function(pair) {
    var value = '_.' + pair[0];
    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

/**
 * Creates a function that invokes `func` with the `this` binding of `thisArg`
 * and `partials` prepended to the arguments it receives.
 *
 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for partially applied arguments.
 *
 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
 * property of bound functions.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * function greet(greeting, punctuation) {
 *   return greeting + ' ' + this.user + punctuation;
 * }
 *
 * var object = { 'user': 'fred' };
 *
 * var bound = _.bind(greet, object, 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * // Bound with placeholders.
 * var bound = _.bind(greet, object, _, '!');
 * bound('hi');
 * // => 'hi fred!'
 */
var bind = baseRest(function(func, thisArg, partials) {
  var bitmask = BIND_FLAG;
  if (partials.length) {
    var holders = replaceHolders(partials, getHolder(bind));
    bitmask |= PARTIAL_FLAG;
  }
  return createWrap(func, bitmask, thisArg, partials, holders);
});

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

// Assign default placeholders.
bind.placeholder = {};

module.exports = bind;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(24);
var Danger = __webpack_require__(188);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(9);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(64);
var setInnerHTML = __webpack_require__(44);
var setTextContent = __webpack_require__(112);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: { toIndex: update.toIndex, content: update.content.toString() }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactErrorUtils = __webpack_require__(62);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypesSecret = __webpack_require__(104);
var propTypesFactory = __webpack_require__(91);

var React = __webpack_require__(26);
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(13);
var ReactInstanceMap = __webpack_require__(35);
var ReactInstrumentation = __webpack_require__(9);
var ReactUpdates = __webpack_require__(12);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }

};

module.exports = ReactUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyFunction = __webpack_require__(10);
var warning = __webpack_require__(2);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(19);

var ReactNoopUpdateQueue = __webpack_require__(72);

var canDefineProperty = __webpack_require__(45);
var emptyObject = __webpack_require__(32);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(20);

/*<replacement>*/
var util = __webpack_require__(29);
util.inherits = __webpack_require__(11);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/*<replacement>*/
var processNextTick = __webpack_require__(55);
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(15).Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(29);
util.inherits = __webpack_require__(11);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(273)
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = __webpack_require__(46);
  } catch (_) {} finally {
    if (!Stream) Stream = __webpack_require__(31).EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = __webpack_require__(15).Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(20);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // create the two objects needed to store the corked requests
  // they are not a linked list, as no new elements are inserted in there
  this.corkedRequestsFree = new CorkedRequest(this);
  this.corkedRequestsFree.next = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

var Duplex;
function Writable(options) {
  Duplex = Duplex || __webpack_require__(20);

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    state.corkedRequestsFree = holder.next;
    holder.next = null;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(272).setImmediate))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(15).Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = CSSselect;

var Pseudos       = __webpack_require__(49),
    DomUtils      = __webpack_require__(22),
    findOne       = DomUtils.findOne,
    findAll       = DomUtils.findAll,
    getChildren   = DomUtils.getChildren,
    removeSubsets = DomUtils.removeSubsets,
    falseFunc     = __webpack_require__(27).falseFunc,
    compile       = __webpack_require__(134),
    compileUnsafe = compile.compileUnsafe,
    compileToken  = compile.compileToken;

function getSelectorFunc(searchFunc){
	return function select(query, elems, options){
        if(typeof query !== "function") query = compileUnsafe(query, options, elems);
        if(!Array.isArray(elems)) elems = getChildren(elems);
		else elems = removeSubsets(elems);
		return searchFunc(query, elems);
	};
}

var selectAll = getSelectorFunc(function selectAll(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? [] : findAll(query, elems);
});

var selectOne = getSelectorFunc(function selectOne(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? null : findOne(query, elems);
});

function is(elem, query, options){
	return (typeof query === "function" ? query : compile(query, options))(elem);
}

/*
	the exported interface
*/
function CSSselect(query, elems, options){
	return selectAll(query, elems, options);
}

CSSselect.compile = compile;
CSSselect.filters = Pseudos.filters;
CSSselect.pseudos = Pseudos.pseudos;

CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;

CSSselect.is = is;

//legacy methods (might be removed)
CSSselect.parse = compile;
CSSselect.iterate = selectAll;

//hooks
CSSselect._compileUnsafe = compileUnsafe;
CSSselect._compileToken = compileToken;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var DomUtils  = __webpack_require__(22),
    hasAttrib = DomUtils.hasAttrib,
    getAttributeValue = DomUtils.getAttributeValue,
    falseFunc = __webpack_require__(27).falseFunc;

//https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;

/*
	attribute selectors
*/

var attributeRules = {
	__proto__: null,
	equals: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function equalsIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() === value && next(elem);
			};
		}

		return function equals(elem){
			return getAttributeValue(elem, name) === value && next(elem);
		};
	},
	hyphen: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function hyphenIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null &&
						(attr.length === len || attr.charAt(len) === "-") &&
						attr.substr(0, len).toLowerCase() === value &&
						next(elem);
			};
		}

		return function hyphen(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null &&
					attr.substr(0, len) === value &&
					(attr.length === len || attr.charAt(len) === "-") &&
					next(elem);
		};
	},
	element: function(next, data){
		var name = data.name,
		    value = data.value;

		if(/\s/.test(value)){
			return falseFunc;
		}

		value = value.replace(reChars, "\\$&");

		var pattern = "(?:^|\\s)" + value + "(?:$|\\s)",
		    flags = data.ignoreCase ? "i" : "",
		    regex = new RegExp(pattern, flags);

		return function element(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && regex.test(attr) && next(elem);
		};
	},
	exists: function(next, data){
		var name = data.name;
		return function exists(elem){
			return hasAttrib(elem, name) && next(elem);
		};
	},
	start: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(len === 0){
			return falseFunc;
		}
		
		if(data.ignoreCase){
			value = value.toLowerCase();

			return function startIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);
			};
		}

		return function start(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(0, len) === value && next(elem);
		};
	},
	end: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len   = -value.length;

		if(len === 0){
			return falseFunc;
		}

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function endIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(len).toLowerCase() === value && next(elem);
			};
		}

		return function end(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(len) === value && next(elem);
		};
	},
	any: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return falseFunc;
		}

		if(data.ignoreCase){
			var regex = new RegExp(value.replace(reChars, "\\$&"), "i");

			return function anyIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && regex.test(attr) && next(elem);
			};
		}

		return function any(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.indexOf(value) >= 0 && next(elem);
		};
	},
	not: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return function notEmpty(elem){
				return !!getAttributeValue(elem, name) && next(elem);
			};
		} else if(data.ignoreCase){
			value = value.toLowerCase();

			return function notIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() !== value && next(elem);
			};
		}

		return function not(elem){
			return getAttributeValue(elem, name) !== value && next(elem);
		};
	}
};

module.exports = {
	compile: function(next, data, options){
		if(options && options.strict && (
			data.ignoreCase || data.action === "not"
		)) throw SyntaxError("Unsupported attribute selector");
		return attributeRules[data.action](next, data);
	},
	rules: attributeRules
};


/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = {
	"universal": 50,
	"tag": 30,
	"attribute": 1,
	"pseudo": 0,
	"descendant": -1,
	"child": -1,
	"parent": -1,
	"sibling": -1,
	"adjacent": -1
};

/***/ }),
/* 79 */
/***/ (function(module, exports) {

// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype = module.exports = {
	get firstChild() {
		var children = this.children;
		return children && children[0] || null;
	},
	get lastChild() {
		var children = this.children;
		return children && children[children.length - 1] || null;
	},
	get nodeType() {
		return nodeTypes[this.type] || nodeTypes.element;
	}
};

var domLvl1 = {
	tagName: "name",
	childNodes: "children",
	parentNode: "parent",
	previousSibling: "prev",
	nextSibling: "next",
	nodeValue: "data"
};

var nodeTypes = {
	element: 1,
	text: 3,
	cdata: 4,
	comment: 8
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(NodePrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var decodeMap = __webpack_require__(150);

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}


/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = {
	"Aacute": "Á",
	"aacute": "á",
	"Acirc": "Â",
	"acirc": "â",
	"acute": "´",
	"AElig": "Æ",
	"aelig": "æ",
	"Agrave": "À",
	"agrave": "à",
	"amp": "&",
	"AMP": "&",
	"Aring": "Å",
	"aring": "å",
	"Atilde": "Ã",
	"atilde": "ã",
	"Auml": "Ä",
	"auml": "ä",
	"brvbar": "¦",
	"Ccedil": "Ç",
	"ccedil": "ç",
	"cedil": "¸",
	"cent": "¢",
	"copy": "©",
	"COPY": "©",
	"curren": "¤",
	"deg": "°",
	"divide": "÷",
	"Eacute": "É",
	"eacute": "é",
	"Ecirc": "Ê",
	"ecirc": "ê",
	"Egrave": "È",
	"egrave": "è",
	"ETH": "Ð",
	"eth": "ð",
	"Euml": "Ë",
	"euml": "ë",
	"frac12": "½",
	"frac14": "¼",
	"frac34": "¾",
	"gt": ">",
	"GT": ">",
	"Iacute": "Í",
	"iacute": "í",
	"Icirc": "Î",
	"icirc": "î",
	"iexcl": "¡",
	"Igrave": "Ì",
	"igrave": "ì",
	"iquest": "¿",
	"Iuml": "Ï",
	"iuml": "ï",
	"laquo": "«",
	"lt": "<",
	"LT": "<",
	"macr": "¯",
	"micro": "µ",
	"middot": "·",
	"nbsp": " ",
	"not": "¬",
	"Ntilde": "Ñ",
	"ntilde": "ñ",
	"Oacute": "Ó",
	"oacute": "ó",
	"Ocirc": "Ô",
	"ocirc": "ô",
	"Ograve": "Ò",
	"ograve": "ò",
	"ordf": "ª",
	"ordm": "º",
	"Oslash": "Ø",
	"oslash": "ø",
	"Otilde": "Õ",
	"otilde": "õ",
	"Ouml": "Ö",
	"ouml": "ö",
	"para": "¶",
	"plusmn": "±",
	"pound": "£",
	"quot": "\"",
	"QUOT": "\"",
	"raquo": "»",
	"reg": "®",
	"REG": "®",
	"sect": "§",
	"shy": "­",
	"sup1": "¹",
	"sup2": "²",
	"sup3": "³",
	"szlig": "ß",
	"THORN": "Þ",
	"thorn": "þ",
	"times": "×",
	"Uacute": "Ú",
	"uacute": "ú",
	"Ucirc": "Û",
	"ucirc": "û",
	"Ugrave": "Ù",
	"ugrave": "ù",
	"uml": "¨",
	"Uuml": "Ü",
	"uuml": "ü",
	"Yacute": "Ý",
	"yacute": "ý",
	"yen": "¥",
	"yuml": "ÿ"
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(10);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var Tokenizer = __webpack_require__(86);

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = {
	input: true,
	option: true,
	optgroup: true,
	select: true,
	button: true,
	datalist: true,
	textarea: true
};

var openImpliesClose = {
	tr      : { tr:true, th:true, td:true },
	th      : { th:true },
	td      : { thead:true, th:true, td:true },
	body    : { head:true, link:true, script:true },
	li      : { li:true },
	p       : { p:true },
	h1      : { p:true },
	h2      : { p:true },
	h3      : { p:true },
	h4      : { p:true },
	h5      : { p:true },
	h6      : { p:true },
	select  : formTags,
	input   : formTags,
	output  : formTags,
	button  : formTags,
	datalist: formTags,
	textarea: formTags,
	option  : { option:true },
	optgroup: { optgroup:true }
};

var voidElements = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	command: true,
	embed: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	keygen: true,
	link: true,
	meta: true,
	param: true,
	source: true,
	track: true,
	wbr: true,

	//common self closing svg elements
	path: true,
	circle: true,
	ellipse: true,
	line: true,
	rect: true,
	use: true,
	stop: true,
	polyline: true,
	polygon: true
};

var re_nameEnd = /\s|\//;

function Parser(cbs, options){
	this._options = options || {};
	this._cbs = cbs || {};

	this._tagname = "";
	this._attribname = "";
	this._attribvalue = "";
	this._attribs = null;
	this._stack = [];

	this.startIndex = 0;
	this.endIndex = null;

	this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
									!!this._options.lowerCaseTags :
									!this._options.xmlMode;
	this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
									!!this._options.lowerCaseAttributeNames :
									!this._options.xmlMode;

	if(this._options.Tokenizer) {
		Tokenizer = this._options.Tokenizer;
	}
	this._tokenizer = new Tokenizer(this._options, this);

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
}

__webpack_require__(11)(Parser, __webpack_require__(31).EventEmitter);

Parser.prototype._updatePosition = function(initialOffset){
	if(this.endIndex === null){
		if(this._tokenizer._sectionStart <= initialOffset){
			this.startIndex = 0;
		} else {
			this.startIndex = this._tokenizer._sectionStart - initialOffset;
		}
	}
	else this.startIndex = this.endIndex + 1;
	this.endIndex = this._tokenizer.getAbsoluteIndex();
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data){
	this._updatePosition(1);
	this.endIndex--;

	if(this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name){
	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	this._tagname = name;

	if(!this._options.xmlMode && name in openImpliesClose) {
		for(
			var el;
			(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
			this.onclosetag(el)
		);
	}

	if(this._options.xmlMode || !(name in voidElements)){
		this._stack.push(name);
	}

	if(this._cbs.onopentagname) this._cbs.onopentagname(name);
	if(this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function(){
	this._updatePosition(1);

	if(this._attribs){
		if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
		this._attribs = null;
	}

	if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
		this._cbs.onclosetag(this._tagname);
	}

	this._tagname = "";
};

Parser.prototype.onclosetag = function(name){
	this._updatePosition(1);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
		var pos = this._stack.lastIndexOf(name);
		if(pos !== -1){
			if(this._cbs.onclosetag){
				pos = this._stack.length - pos;
				while(pos--) this._cbs.onclosetag(this._stack.pop());
			}
			else this._stack.length = pos;
		} else if(name === "p" && !this._options.xmlMode){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	} else if(!this._options.xmlMode && (name === "br" || name === "p")){
		this.onopentagname(name);
		this._closeCurrentTag();
	}
};

Parser.prototype.onselfclosingtag = function(){
	if(this._options.xmlMode || this._options.recognizeSelfClosing){
		this._closeCurrentTag();
	} else {
		this.onopentagend();
	}
};

Parser.prototype._closeCurrentTag = function(){
	var name = this._tagname;

	this.onopentagend();

	//self-closing tags will be on the top of the stack
	//(cheaper check than in onclosetag)
	if(this._stack[this._stack.length - 1] === name){
		if(this._cbs.onclosetag){
			this._cbs.onclosetag(name);
		}
		this._stack.pop();
	}
};

Parser.prototype.onattribname = function(name){
	if(this._lowerCaseAttributeNames){
		name = name.toLowerCase();
	}
	this._attribname = name;
};

Parser.prototype.onattribdata = function(value){
	this._attribvalue += value;
};

Parser.prototype.onattribend = function(){
	if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
	if(
		this._attribs &&
		!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	){
		this._attribs[this._attribname] = this._attribvalue;
	}
	this._attribname = "";
	this._attribvalue = "";
};

Parser.prototype._getInstructionName = function(value){
	var idx = value.search(re_nameEnd),
	    name = idx < 0 ? value : value.substr(0, idx);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	return name;
};

Parser.prototype.ondeclaration = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("!" + name, "!" + value);
	}
};

Parser.prototype.onprocessinginstruction = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("?" + name, "?" + value);
	}
};

Parser.prototype.oncomment = function(value){
	this._updatePosition(4);

	if(this._cbs.oncomment) this._cbs.oncomment(value);
	if(this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value){
	this._updatePosition(1);

	if(this._options.xmlMode || this._options.recognizeCDATA){
		if(this._cbs.oncdatastart) this._cbs.oncdatastart();
		if(this._cbs.ontext) this._cbs.ontext(value);
		if(this._cbs.oncdataend) this._cbs.oncdataend();
	} else {
		this.oncomment("[CDATA[" + value + "]]");
	}
};

Parser.prototype.onerror = function(err){
	if(this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function(){
	if(this._cbs.onclosetag){
		for(
			var i = this._stack.length;
			i > 0;
			this._cbs.onclosetag(this._stack[--i])
		);
	}
	if(this._cbs.onend) this._cbs.onend();
};


//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function(){
	if(this._cbs.onreset) this._cbs.onreset();
	this._tokenizer.reset();

	this._tagname = "";
	this._attribname = "";
	this._attribs = null;
	this._stack = [];

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data){
	this.reset();
	this.end(data);
};

Parser.prototype.write = function(chunk){
	this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk){
	this._tokenizer.end(chunk);
};

Parser.prototype.pause = function(){
	this._tokenizer.pause();
};

Parser.prototype.resume = function(){
	this._tokenizer.resume();
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

module.exports = Parser;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Tokenizer;

var decodeCodePoint = __webpack_require__(80),
    entityMap = __webpack_require__(51),
    legacyMap = __webpack_require__(81),
    xmlMap    = __webpack_require__(52),

    i = 0,

    TEXT                      = i++,
    BEFORE_TAG_NAME           = i++, //after <
    IN_TAG_NAME               = i++,
    IN_SELF_CLOSING_TAG       = i++,
    BEFORE_CLOSING_TAG_NAME   = i++,
    IN_CLOSING_TAG_NAME       = i++,
    AFTER_CLOSING_TAG_NAME    = i++,

    //attributes
    BEFORE_ATTRIBUTE_NAME     = i++,
    IN_ATTRIBUTE_NAME         = i++,
    AFTER_ATTRIBUTE_NAME      = i++,
    BEFORE_ATTRIBUTE_VALUE    = i++,
    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
    IN_ATTRIBUTE_VALUE_NQ     = i++,

    //declarations
    BEFORE_DECLARATION        = i++, // !
    IN_DECLARATION            = i++,

    //processing instructions
    IN_PROCESSING_INSTRUCTION = i++, // ?

    //comments
    BEFORE_COMMENT            = i++,
    IN_COMMENT                = i++,
    AFTER_COMMENT_1           = i++,
    AFTER_COMMENT_2           = i++,

    //cdata
    BEFORE_CDATA_1            = i++, // [
    BEFORE_CDATA_2            = i++, // C
    BEFORE_CDATA_3            = i++, // D
    BEFORE_CDATA_4            = i++, // A
    BEFORE_CDATA_5            = i++, // T
    BEFORE_CDATA_6            = i++, // A
    IN_CDATA                  = i++, // [
    AFTER_CDATA_1             = i++, // ]
    AFTER_CDATA_2             = i++, // ]

    //special tags
    BEFORE_SPECIAL            = i++, //S
    BEFORE_SPECIAL_END        = i++,   //S

    BEFORE_SCRIPT_1           = i++, //C
    BEFORE_SCRIPT_2           = i++, //R
    BEFORE_SCRIPT_3           = i++, //I
    BEFORE_SCRIPT_4           = i++, //P
    BEFORE_SCRIPT_5           = i++, //T
    AFTER_SCRIPT_1            = i++, //C
    AFTER_SCRIPT_2            = i++, //R
    AFTER_SCRIPT_3            = i++, //I
    AFTER_SCRIPT_4            = i++, //P
    AFTER_SCRIPT_5            = i++, //T

    BEFORE_STYLE_1            = i++, //T
    BEFORE_STYLE_2            = i++, //Y
    BEFORE_STYLE_3            = i++, //L
    BEFORE_STYLE_4            = i++, //E
    AFTER_STYLE_1             = i++, //T
    AFTER_STYLE_2             = i++, //Y
    AFTER_STYLE_3             = i++, //L
    AFTER_STYLE_4             = i++, //E

    BEFORE_ENTITY             = i++, //&
    BEFORE_NUMERIC_ENTITY     = i++, //#
    IN_NAMED_ENTITY           = i++,
    IN_NUMERIC_ENTITY         = i++,
    IN_HEX_ENTITY             = i++, //X

    j = 0,

    SPECIAL_NONE              = j++,
    SPECIAL_SCRIPT            = j++,
    SPECIAL_STYLE             = j++;

function whitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function characterState(char, SUCCESS){
	return function(c){
		if(c === char) this._state = SUCCESS;
	};
}

function ifElseState(upper, SUCCESS, FAILURE){
	var lower = upper.toLowerCase();

	if(upper === lower){
		return function(c){
			if(c === lower){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	} else {
		return function(c){
			if(c === lower || c === upper){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	}
}

function consumeSpecialNameChar(upper, NEXT_STATE){
	var lower = upper.toLowerCase();

	return function(c){
		if(c === lower || c === upper){
			this._state = NEXT_STATE;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};
}

function Tokenizer(options, cbs){
	this._state = TEXT;
	this._buffer = "";
	this._sectionStart = 0;
	this._index = 0;
	this._bufferOffset = 0; //chars removed from _buffer
	this._baseState = TEXT;
	this._special = SPECIAL_NONE;
	this._cbs = cbs;
	this._running = true;
	this._ended = false;
	this._xmlMode = !!(options && options.xmlMode);
	this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c){
	if(c === "<"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._state = BEFORE_TAG_NAME;
		this._sectionStart = this._index;
	} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._baseState = TEXT;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeTagName = function(c){
	if(c === "/"){
		this._state = BEFORE_CLOSING_TAG_NAME;
	} else if(c === "<"){
		this._cbs.ontext(this._getSection());
		this._sectionStart = this._index;
	} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
		this._state = TEXT;
	} else if(c === "!"){
		this._state = BEFORE_DECLARATION;
		this._sectionStart = this._index + 1;
	} else if(c === "?"){
		this._state = IN_PROCESSING_INSTRUCTION;
		this._sectionStart = this._index + 1;
	} else {
		this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
						BEFORE_SPECIAL : IN_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInTagName = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._emitToken("onopentagname");
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
	if(whitespace(c));
	else if(c === ">"){
		this._state = TEXT;
	} else if(this._special !== SPECIAL_NONE){
		if(c === "s" || c === "S"){
			this._state = BEFORE_SPECIAL_END;
		} else {
			this._state = TEXT;
			this._index--;
		}
	} else {
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInCloseingTagName = function(c){
	if(c === ">" || whitespace(c)){
		this._emitToken("onclosetag");
		this._state = AFTER_CLOSING_TAG_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c){
	//skip everything until ">"
	if(c === ">"){
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeAttributeName = function(c){
	if(c === ">"){
		this._cbs.onopentagend();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c === "/"){
		this._state = IN_SELF_CLOSING_TAG;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInSelfClosingTag = function(c){
	if(c === ">"){
		this._cbs.onselfclosingtag();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateInAttributeName = function(c){
	if(c === "=" || c === "/" || c === ">" || whitespace(c)){
		this._cbs.onattribname(this._getSection());
		this._sectionStart = -1;
		this._state = AFTER_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterAttributeName = function(c){
	if(c === "="){
		this._state = BEFORE_ATTRIBUTE_VALUE;
	} else if(c === "/" || c === ">"){
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(!whitespace(c)){
		this._cbs.onattribend();
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c){
	if(c === "\""){
		this._state = IN_ATTRIBUTE_VALUE_DQ;
		this._sectionStart = this._index + 1;
	} else if(c === "'"){
		this._state = IN_ATTRIBUTE_VALUE_SQ;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_VALUE_NQ;
		this._sectionStart = this._index;
		this._index--; //reconsume token
	}
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
	if(c === "\""){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
	if(c === "'"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
	if(whitespace(c) || c === ">"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeDeclaration = function(c){
	this._state = c === "[" ? BEFORE_CDATA_1 :
					c === "-" ? BEFORE_COMMENT :
						IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c){
	if(c === ">"){
		this._cbs.ondeclaration(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateInProcessingInstruction = function(c){
	if(c === ">"){
		this._cbs.onprocessinginstruction(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeComment = function(c){
	if(c === "-"){
		this._state = IN_COMMENT;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInComment = function(c){
	if(c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function(c){
	if(c === "-"){
		this._state = AFTER_COMMENT_2;
	} else {
		this._state = IN_COMMENT;
	}
};

Tokenizer.prototype._stateAfterComment2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "-"){
		this._state = IN_COMMENT;
	}
	// else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function(c){
	if(c === "["){
		this._state = IN_CDATA;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
		this._index--;
	}
};

Tokenizer.prototype._stateInCdata = function(c){
	if(c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

Tokenizer.prototype._stateAfterCdata2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "]") {
		this._state = IN_CDATA;
	}
	//else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c){
	if(c === "c" || c === "C"){
		this._state = BEFORE_SCRIPT_1;
	} else if(c === "t" || c === "T"){
		this._state = BEFORE_STYLE_1;
	} else {
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	}
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
	if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
		this._state = AFTER_SCRIPT_1;
	} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
		this._state = AFTER_STYLE_1;
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_SCRIPT;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 6;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_STYLE;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 5;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict = function(){
	//offset = 1
	if(this._sectionStart + 1 < this._index){
		var entity = this._buffer.substring(this._sectionStart + 1, this._index),
		    map = this._xmlMode ? xmlMap : entityMap;

		if(map.hasOwnProperty(entity)){
			this._emitPartial(map[entity]);
			this._sectionStart = this._index + 1;
		}
	}
};


//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function(){
	var start = this._sectionStart + 1,
	    limit = this._index - start;

	if(limit > 6) limit = 6; //the max length of legacy entities is 6

	while(limit >= 2){ //the min length of legacy entities is 2
		var entity = this._buffer.substr(start, limit);

		if(legacyMap.hasOwnProperty(entity)){
			this._emitPartial(legacyMap[entity]);
			this._sectionStart += limit + 1;
			return;
		} else {
			limit--;
		}
	}
};

Tokenizer.prototype._stateInNamedEntity = function(c){
	if(c === ";"){
		this._parseNamedEntityStrict();
		if(this._sectionStart + 1 < this._index && !this._xmlMode){
			this._parseLegacyEntity();
		}
		this._state = this._baseState;
	} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
		if(this._xmlMode);
		else if(this._sectionStart + 1 === this._index);
		else if(this._baseState !== TEXT){
			if(c !== "="){
				this._parseNamedEntityStrict();
			}
		} else {
			this._parseLegacyEntity();
		}

		this._state = this._baseState;
		this._index--;
	}
};

Tokenizer.prototype._decodeNumericEntity = function(offset, base){
	var sectionStart = this._sectionStart + offset;

	if(sectionStart !== this._index){
		//parse entity
		var entity = this._buffer.substring(sectionStart, this._index);
		var parsed = parseInt(entity, base);

		this._emitPartial(decodeCodePoint(parsed));
		this._sectionStart = this._index;
	} else {
		this._sectionStart--;
	}

	this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(2, 10);
		this._sectionStart++;
	} else if(c < "0" || c > "9"){
		if(!this._xmlMode){
			this._decodeNumericEntity(2, 10);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._stateInHexEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(3, 16);
		this._sectionStart++;
	} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
		if(!this._xmlMode){
			this._decodeNumericEntity(3, 16);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._cleanup = function (){
	if(this._sectionStart < 0){
		this._buffer = "";
		this._bufferOffset += this._index;
		this._index = 0;
	} else if(this._running){
		if(this._state === TEXT){
			if(this._sectionStart !== this._index){
				this._cbs.ontext(this._buffer.substr(this._sectionStart));
			}
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else if(this._sectionStart === this._index){
			//the section just started
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else {
			//remove everything unnecessary
			this._buffer = this._buffer.substr(this._sectionStart);
			this._index -= this._sectionStart;
			this._bufferOffset += this._sectionStart;
		}

		this._sectionStart = 0;
	}
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".write() after done!"));

	this._buffer += chunk;
	this._parse();
};

Tokenizer.prototype._parse = function(){
	while(this._index < this._buffer.length && this._running){
		var c = this._buffer.charAt(this._index);
		if(this._state === TEXT) {
			this._stateText(c);
		} else if(this._state === BEFORE_TAG_NAME){
			this._stateBeforeTagName(c);
		} else if(this._state === IN_TAG_NAME) {
			this._stateInTagName(c);
		} else if(this._state === BEFORE_CLOSING_TAG_NAME){
			this._stateBeforeCloseingTagName(c);
		} else if(this._state === IN_CLOSING_TAG_NAME){
			this._stateInCloseingTagName(c);
		} else if(this._state === AFTER_CLOSING_TAG_NAME){
			this._stateAfterCloseingTagName(c);
		} else if(this._state === IN_SELF_CLOSING_TAG){
			this._stateInSelfClosingTag(c);
		}

		/*
		*	attributes
		*/
		else if(this._state === BEFORE_ATTRIBUTE_NAME){
			this._stateBeforeAttributeName(c);
		} else if(this._state === IN_ATTRIBUTE_NAME){
			this._stateInAttributeName(c);
		} else if(this._state === AFTER_ATTRIBUTE_NAME){
			this._stateAfterAttributeName(c);
		} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
			this._stateBeforeAttributeValue(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
			this._stateInAttributeValueDoubleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
			this._stateInAttributeValueSingleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
			this._stateInAttributeValueNoQuotes(c);
		}

		/*
		*	declarations
		*/
		else if(this._state === BEFORE_DECLARATION){
			this._stateBeforeDeclaration(c);
		} else if(this._state === IN_DECLARATION){
			this._stateInDeclaration(c);
		}

		/*
		*	processing instructions
		*/
		else if(this._state === IN_PROCESSING_INSTRUCTION){
			this._stateInProcessingInstruction(c);
		}

		/*
		*	comments
		*/
		else if(this._state === BEFORE_COMMENT){
			this._stateBeforeComment(c);
		} else if(this._state === IN_COMMENT){
			this._stateInComment(c);
		} else if(this._state === AFTER_COMMENT_1){
			this._stateAfterComment1(c);
		} else if(this._state === AFTER_COMMENT_2){
			this._stateAfterComment2(c);
		}

		/*
		*	cdata
		*/
		else if(this._state === BEFORE_CDATA_1){
			this._stateBeforeCdata1(c);
		} else if(this._state === BEFORE_CDATA_2){
			this._stateBeforeCdata2(c);
		} else if(this._state === BEFORE_CDATA_3){
			this._stateBeforeCdata3(c);
		} else if(this._state === BEFORE_CDATA_4){
			this._stateBeforeCdata4(c);
		} else if(this._state === BEFORE_CDATA_5){
			this._stateBeforeCdata5(c);
		} else if(this._state === BEFORE_CDATA_6){
			this._stateBeforeCdata6(c);
		} else if(this._state === IN_CDATA){
			this._stateInCdata(c);
		} else if(this._state === AFTER_CDATA_1){
			this._stateAfterCdata1(c);
		} else if(this._state === AFTER_CDATA_2){
			this._stateAfterCdata2(c);
		}

		/*
		* special tags
		*/
		else if(this._state === BEFORE_SPECIAL){
			this._stateBeforeSpecial(c);
		} else if(this._state === BEFORE_SPECIAL_END){
			this._stateBeforeSpecialEnd(c);
		}

		/*
		* script
		*/
		else if(this._state === BEFORE_SCRIPT_1){
			this._stateBeforeScript1(c);
		} else if(this._state === BEFORE_SCRIPT_2){
			this._stateBeforeScript2(c);
		} else if(this._state === BEFORE_SCRIPT_3){
			this._stateBeforeScript3(c);
		} else if(this._state === BEFORE_SCRIPT_4){
			this._stateBeforeScript4(c);
		} else if(this._state === BEFORE_SCRIPT_5){
			this._stateBeforeScript5(c);
		}

		else if(this._state === AFTER_SCRIPT_1){
			this._stateAfterScript1(c);
		} else if(this._state === AFTER_SCRIPT_2){
			this._stateAfterScript2(c);
		} else if(this._state === AFTER_SCRIPT_3){
			this._stateAfterScript3(c);
		} else if(this._state === AFTER_SCRIPT_4){
			this._stateAfterScript4(c);
		} else if(this._state === AFTER_SCRIPT_5){
			this._stateAfterScript5(c);
		}

		/*
		* style
		*/
		else if(this._state === BEFORE_STYLE_1){
			this._stateBeforeStyle1(c);
		} else if(this._state === BEFORE_STYLE_2){
			this._stateBeforeStyle2(c);
		} else if(this._state === BEFORE_STYLE_3){
			this._stateBeforeStyle3(c);
		} else if(this._state === BEFORE_STYLE_4){
			this._stateBeforeStyle4(c);
		}

		else if(this._state === AFTER_STYLE_1){
			this._stateAfterStyle1(c);
		} else if(this._state === AFTER_STYLE_2){
			this._stateAfterStyle2(c);
		} else if(this._state === AFTER_STYLE_3){
			this._stateAfterStyle3(c);
		} else if(this._state === AFTER_STYLE_4){
			this._stateAfterStyle4(c);
		}

		/*
		* entities
		*/
		else if(this._state === BEFORE_ENTITY){
			this._stateBeforeEntity(c);
		} else if(this._state === BEFORE_NUMERIC_ENTITY){
			this._stateBeforeNumericEntity(c);
		} else if(this._state === IN_NAMED_ENTITY){
			this._stateInNamedEntity(c);
		} else if(this._state === IN_NUMERIC_ENTITY){
			this._stateInNumericEntity(c);
		} else if(this._state === IN_HEX_ENTITY){
			this._stateInHexEntity(c);
		}

		else {
			this._cbs.onerror(Error("unknown _state"), this._state);
		}

		this._index++;
	}

	this._cleanup();
};

Tokenizer.prototype.pause = function(){
	this._running = false;
};
Tokenizer.prototype.resume = function(){
	this._running = true;

	if(this._index < this._buffer.length){
		this._parse();
	}
	if(this._ended){
		this._finish();
	}
};

Tokenizer.prototype.end = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".end() after done!"));
	if(chunk) this.write(chunk);

	this._ended = true;

	if(this._running) this._finish();
};

Tokenizer.prototype._finish = function(){
	//if there is remaining data, emit it in a reasonable way
	if(this._sectionStart < this._index){
		this._handleTrailingData();
	}

	this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function(){
	var data = this._buffer.substr(this._sectionStart);

	if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
		this._cbs.oncdata(data);
	} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
		this._cbs.oncomment(data);
	} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
		this._parseLegacyEntity();
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(2, 10);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(3, 16);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(
		this._state !== IN_TAG_NAME &&
		this._state !== BEFORE_ATTRIBUTE_NAME &&
		this._state !== BEFORE_ATTRIBUTE_VALUE &&
		this._state !== AFTER_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_VALUE_SQ &&
		this._state !== IN_ATTRIBUTE_VALUE_DQ &&
		this._state !== IN_ATTRIBUTE_VALUE_NQ &&
		this._state !== IN_CLOSING_TAG_NAME
	){
		this._cbs.ontext(data);
	}
	//else, ignore remaining data
	//TODO add a way to remove current tag
};

Tokenizer.prototype.reset = function(){
	Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
};

Tokenizer.prototype.getAbsoluteIndex = function(){
	return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function(){
	return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name){
	this._cbs[name](this._getSection());
	this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value){
	if(this._baseState !== TEXT){
		this._cbs.onattribdata(value); //TODO implement the new event
	} else {
		this._cbs.ontext(value);
	}
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Stream;

var Parser = __webpack_require__(85),
    WritableStream = __webpack_require__(46).Writable || __webpack_require__(274).Writable,
    StringDecoder = __webpack_require__(75).StringDecoder,
    Buffer = __webpack_require__(15).Buffer;

function Stream(cbs, options){
	var parser = this._parser = new Parser(cbs, options);
	var decoder = this._decoder = new StringDecoder();

	WritableStream.call(this, {decodeStrings: false});

	this.once("finish", function(){
		parser.end(decoder.end());
	});
}

__webpack_require__(11)(Stream, WritableStream);

WritableStream.prototype._write = function(chunk, encoding, cb){
	if(chunk instanceof Buffer) chunk = this._decoder.write(chunk);
	this._parser.write(chunk);
	cb();
};

/***/ }),
/* 88 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 89 */
/***/ (function(module, exports) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */
var assignIn = createAssigner(function(object, source) {
  copyObject(source, keysIn(source), object);
});

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = assignIn;


/***/ }),
/* 90 */
/***/ (function(module, exports) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Used by `_.defaults` to customize its `_.assignIn` use.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to assign.
 * @param {Object} object The parent object of `objValue`.
 * @returns {*} Returns the value to assign.
 */
function assignInDefaults(objValue, srcValue, key, object) {
  if (objValue === undefined ||
      (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    return srcValue;
  }
  return objValue;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * This method is like `_.assignIn` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extendWith
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignInWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject(source, keysIn(source), object, customizer);
});

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = baseRest(function(args) {
  args.push(undefined, assignInDefaults);
  return apply(assignInWith, undefined, args);
});

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = defaults;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = __webpack_require__(182);
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(17);

var invariant = __webpack_require__(1);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(9);

var quoteAttributeValueForBrowser = __webpack_require__(251);
var warning = __webpack_require__(2);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }

};

module.exports = DOMPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(60);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(12);

var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(206);

var containsNode = __webpack_require__(153);
var focusNode = __webpack_require__(83);
var getActiveElement = __webpack_require__(84);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(24);
var DOMProperty = __webpack_require__(16);
var React = __webpack_require__(26);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactCurrentOwner = __webpack_require__(13);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMContainerInfo = __webpack_require__(198);
var ReactDOMFeatureFlags = __webpack_require__(200);
var ReactFeatureFlags = __webpack_require__(99);
var ReactInstanceMap = __webpack_require__(35);
var ReactInstrumentation = __webpack_require__(9);
var ReactMarkupChecksum = __webpack_require__(220);
var ReactReconciler = __webpack_require__(25);
var ReactUpdateQueue = __webpack_require__(63);
var ReactUpdates = __webpack_require__(12);

var emptyObject = __webpack_require__(32);
var instantiateReactComponent = __webpack_require__(110);
var invariant = __webpack_require__(1);
var setInnerHTML = __webpack_require__(44);
var shouldUpdateReactComponent = __webpack_require__(69);
var warning = __webpack_require__(2);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(26);

var invariant = __webpack_require__(1);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactNodeTypes = __webpack_require__(103);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var ReactCompositeComponent = __webpack_require__(195);
var ReactEmptyComponent = __webpack_require__(98);
var ReactHostComponent = __webpack_require__(100);

var getNextDebugID = __webpack_require__(263);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var escapeTextContentForBrowser = __webpack_require__(43);
var setInnerHTML = __webpack_require__(44);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(13);
var REACT_ELEMENT_TYPE = __webpack_require__(214);

var getIteratorFn = __webpack_require__(248);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(59);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(13);
var ReactComponentTreeHook = __webpack_require__(7);
var ReactElement = __webpack_require__(18);

var checkReactTypeSpec = __webpack_require__(262);

var canDefineProperty = __webpack_require__(45);
var getIteratorFn = __webpack_require__(117);
var warning = __webpack_require__(2);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(73);

/*<replacement>*/
var util = __webpack_require__(29);
util.inherits = __webpack_require__(11);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

module.exports = Readable;

/*<replacement>*/
var processNextTick = __webpack_require__(55);
/*</replacement>*/

/*<replacement>*/
var isArray = __webpack_require__(88);
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(15).Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = __webpack_require__(31);

/*<replacement>*/
var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = __webpack_require__(46);
  } catch (_) {} finally {
    if (!Stream) Stream = __webpack_require__(31).EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = __webpack_require__(15).Buffer;

/*<replacement>*/
var util = __webpack_require__(29);
util.inherits = __webpack_require__(11);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(275);
var debug = undefined;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(20);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(75).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || __webpack_require__(20);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(75).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended) return 0;

  if (state.objectMode) return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
  }

  if (n <= 0) return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended) state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && !this._readableState.endEmitted) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0) return null;

  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode) ret = '';else ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Export cheerio (with )
 */

exports = module.exports = __webpack_require__(47);

/*
  Export the version
*/

exports.version = __webpack_require__(133).version;


/***/ }),
/* 121 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)(module)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(196);


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(26);


/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = {
	"type": "FeatureCollection",
	"features": [
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.37257632072769,
							42.41363349160318,
							0
						],
						[
							-76.37259132074628,
							42.4138214916374,
							0
						],
						[
							-76.37263632080197,
							42.4143844917399,
							0
						],
						[
							-76.37266532089971,
							42.41559049196212,
							0
						],
						[
							-76.37267432096469,
							42.41643749211866,
							0
						],
						[
							-76.37269832101293,
							42.4169904922201,
							0
						],
						[
							-76.37271932103022,
							42.41713449224594,
							0
						],
						[
							-76.37275632105231,
							42.41727349227021,
							0
						],
						[
							-76.37286732111028,
							42.41757849232221,
							0
						],
						[
							-76.37308532121574,
							42.4180624924031,
							0
						],
						[
							-76.37325332129093,
							42.41835249245006,
							0
						],
						[
							-76.3734003213535,
							42.41856249248303,
							0
						],
						[
							-76.37359432143346,
							42.41880349251985,
							0
						],
						[
							-76.37394132157196,
							42.41917349257442,
							0
						],
						[
							-76.37421732168306,
							42.41948049262017,
							0
						],
						[
							-76.37409232164535,
							42.41951349263132,
							0
						],
						[
							-76.37354932147716,
							42.41959649266855,
							0
						],
						[
							-76.37310232133639,
							42.41963349269339,
							0
						],
						[
							-76.37244332112677,
							42.41965949272474,
							0
						],
						[
							-76.37123532074068,
							42.41968249277762,
							0
						],
						[
							-76.37086832062525,
							42.41971449279832,
							0
						],
						[
							-76.37068032056638,
							42.4197344928096,
							0
						],
						[
							-76.37054632052481,
							42.41975449281868,
							0
						],
						[
							-76.370478320504,
							42.41976849282401,
							0
						],
						[
							-76.37040432048195,
							42.41979149283127,
							0
						],
						[
							-76.37015532041016,
							42.41990249286184,
							0
						],
						[
							-76.36974732029445,
							42.42011049291678,
							0
						],
						[
							-76.36918132013243,
							42.42037849298921,
							0
						],
						[
							-76.36910232011044,
							42.42042449300089,
							0
						],
						[
							-76.36903032008968,
							42.42045649300973,
							0
						],
						[
							-76.36881932003236,
							42.42059849304451,
							0
						],
						[
							-76.36869431999926,
							42.42069449306732,
							0
						],
						[
							-76.36853331995601,
							42.42080949309511,
							0
						],
						[
							-76.36837431991437,
							42.42093749312522,
							0
						],
						[
							-76.36820531986885,
							42.42105649315406,
							0
						],
						[
							-76.36805231982808,
							42.42117049318134,
							0
						],
						[
							-76.36782231976474,
							42.42131349321709,
							0
						],
						[
							-76.36727231961437,
							42.42167049330531,
							0
						],
						[
							-76.36691731951625,
							42.42188649335962,
							0
						],
						[
							-76.36657931942197,
							42.42208049340917,
							0
						],
						[
							-76.36612731929347,
							42.42230649346921,
							0
						],
						[
							-76.36573431917918,
							42.42246849351504,
							0
						],
						[
							-76.36552031911599,
							42.42254349353753,
							0
						],
						[
							-76.36445631879747,
							42.42285749363852,
							0
						],
						[
							-76.36417631871278,
							42.42292849366292,
							0
						],
						[
							-76.36343731848707,
							42.42308549372175,
							0
						],
						[
							-76.36296731834258,
							42.42317249375676,
							0
						],
						[
							-76.36268131825202,
							42.42318949377143,
							0
						],
						[
							-76.36240731816231,
							42.42316549377801,
							0
						],
						[
							-76.36215431807697,
							42.42310949377781,
							0
						],
						[
							-76.36186631797874,
							42.42303049377478,
							0
						],
						[
							-76.3614703178445,
							42.42293349377275,
							0
						],
						[
							-76.35986631730358,
							42.42257849377153,
							0
						],
						[
							-76.35960931721573,
							42.42250549376835,
							0
						],
						[
							-76.35934631712361,
							42.42240049375948,
							0
						],
						[
							-76.35874931691268,
							42.42213749373478,
							0
						],
						[
							-76.35751531647273,
							42.42153949367367,
							0
						],
						[
							-76.35718531635652,
							42.42139949366103,
							0
						],
						[
							-76.35699731629201,
							42.42134249365804,
							0
						],
						[
							-76.3568413162381,
							42.42129049365467,
							0
						],
						[
							-76.35662931616662,
							42.4212434936545,
							0
						],
						[
							-76.35623031603758,
							42.42123049366813,
							0
						],
						[
							-76.35572631588019,
							42.42129049369952,
							0
						],
						[
							-76.35544031579255,
							42.4213474937216,
							0
						],
						[
							-76.35501331566508,
							42.42147849376302,
							0
						],
						[
							-76.35480731560475,
							42.42155749378595,
							0
						],
						[
							-76.35462331555183,
							42.42164149380892,
							0
						],
						[
							-76.35443631549553,
							42.42169249382588,
							0
						],
						[
							-76.35420031542196,
							42.42172249384095,
							0
						],
						[
							-76.35395831534554,
							42.42173949385382,
							0
						],
						[
							-76.3530053150404,
							42.42175049389418,
							0
						],
						[
							-76.35270231494373,
							42.42175849390785,
							0
						],
						[
							-76.35236631483615,
							42.42176249392212,
							0
						],
						[
							-76.35191431469245,
							42.42178149394383,
							0
						],
						[
							-76.35155731458009,
							42.42181249396393,
							0
						],
						[
							-76.35127931449306,
							42.42184249398066,
							0
						],
						[
							-76.35091631438013,
							42.42189149400434,
							0
						],
						[
							-76.35012831413411,
							42.42198649405364,
							0
						],
						[
							-76.34980931403595,
							42.42204449407721,
							0
						],
						[
							-76.34957931396725,
							42.42211449409942,
							0
						],
						[
							-76.3493343138954,
							42.42220749412651,
							0
						],
						[
							-76.34904031381122,
							42.42234649416406,
							0
						],
						[
							-76.3487503137289,
							42.42249349420295,
							0
						],
						[
							-76.34812631355354,
							42.42283449429122,
							0
						],
						[
							-76.34782631347072,
							42.42301849433736,
							0
						],
						[
							-76.34725931331258,
							42.42334449442055,
							0
						],
						[
							-76.34693831322133,
							42.4235054944633,
							0
						],
						[
							-76.34671731315785,
							42.42360749449105,
							0
						],
						[
							-76.34657131311538,
							42.42366749450806,
							0
						],
						[
							-76.34640931306784,
							42.42372849452587,
							0
						],
						[
							-76.34619131300097,
							42.42377149454259,
							0
						],
						[
							-76.34574931286276,
							42.42382149456963,
							0
						],
						[
							-76.3453313127312,
							42.42385749459311,
							0
						],
						[
							-76.34495331261286,
							42.42389849461591,
							0
						],
						[
							-76.34453131248199,
							42.42396149464454,
							0
						],
						[
							-76.34441831244784,
							42.42399049465446,
							0
						],
						[
							-76.34430931241556,
							42.4240274946657,
							0
						],
						[
							-76.34420431238492,
							42.4240694946777,
							0
						],
						[
							-76.34410831235813,
							42.42412449469174,
							0
						],
						[
							-76.34402031233428,
							42.42418449470641,
							0
						],
						[
							-76.34393931231288,
							42.42424749472134,
							0
						],
						[
							-76.34377331227066,
							42.42439849475596,
							0
						],
						[
							-76.3435523122134,
							42.4245854947995,
							0
						],
						[
							-76.34325031213287,
							42.42480949485314,
							0
						],
						[
							-76.34303731207496,
							42.42495249488817,
							0
						],
						[
							-76.34280431200922,
							42.42507649492053,
							0
						],
						[
							-76.34255431193674,
							42.42518249495021,
							0
						],
						[
							-76.34229231185914,
							42.42527149497724,
							0
						],
						[
							-76.34214531181436,
							42.42530449498925,
							0
						],
						[
							-76.34201831177572,
							42.42533349499973,
							0
						],
						[
							-76.34173731168872,
							42.42537749501918,
							0
						],
						[
							-76.34145131159873,
							42.42540249503531,
							0
						],
						[
							-76.3411633115062,
							42.42540149504671,
							0
						],
						[
							-76.34082131139539,
							42.42538749505785,
							0
						],
						[
							-76.3402053111935,
							42.42533149507225,
							0
						],
						[
							-76.34005931114612,
							42.42532449507682,
							0
						],
						[
							-76.33973231104078,
							42.42531949508907,
							0
						],
						[
							-76.33978131106073,
							42.42537749509782,
							0
						],
						[
							-76.34036031127778,
							42.42580249515326,
							0
						],
						[
							-76.34067831139745,
							42.42604249518493,
							0
						],
						[
							-76.34097731151161,
							42.42629049521884,
							0
						],
						[
							-76.34127131162491,
							42.42654849525481,
							0
						],
						[
							-76.34156131173889,
							42.42683349529593,
							0
						],
						[
							-76.34261631216347,
							42.42800549547056,
							0
						],
						[
							-76.34294631229523,
							42.42835749552248,
							0
						],
						[
							-76.34323731241274,
							42.42868649557171,
							0
						],
						[
							-76.34351131252528,
							42.42902149562274,
							0
						],
						[
							-76.34370331261081,
							42.4293474956754,
							0
						],
						[
							-76.3438703126914,
							42.42971549573683,
							0
						],
						[
							-76.34408231279588,
							42.43021249582034,
							0
						],
						[
							-76.34464731307645,
							42.43156549604818,
							0
						],
						[
							-76.3449153132085,
							42.43219349615369,
							0
						],
						[
							-76.34509731329811,
							42.43261849622508,
							0
						],
						[
							-76.34523231336709,
							42.43296849628446,
							0
						],
						[
							-76.34528631339623,
							42.4331294963121,
							0
						],
						[
							-76.34534731342903,
							42.43330949634297,
							0
						],
						[
							-76.34543931348186,
							42.43362749639817,
							0
						],
						[
							-76.34548831352097,
							42.43394649645527,
							0
						],
						[
							-76.34553731356347,
							42.43431149652088,
							0
						],
						[
							-76.34554331359575,
							42.43472549659731,
							0
						],
						[
							-76.34553531364304,
							42.43540549672352,
							0
						],
						[
							-76.34554631366598,
							42.43567049677217,
							0
						],
						[
							-76.34557431369251,
							42.43590949681528,
							0
						],
						[
							-76.34562831373285,
							42.43622349687125,
							0
						],
						[
							-76.34568931377386,
							42.43651549692287,
							0
						],
						[
							-76.34578531383401,
							42.43691549699307,
							0
						],
						[
							-76.34588131389812,
							42.43736949707326,
							0
						],
						[
							-76.34590331391142,
							42.43745449708813,
							0
						],
						[
							-76.3460133139875,
							42.43801049718664,
							0
						],
						[
							-76.3464843143134,
							42.4403924976087,
							0
						],
						[
							-76.3464923143192,
							42.44043649761653,
							0
						],
						[
							-76.3465373143515,
							42.4406794976597,
							0
						],
						[
							-76.34657231437495,
							42.44084649768923,
							0
						],
						[
							-76.34663231440565,
							42.4410024977157,
							0
						],
						[
							-76.34671631444415,
							42.44115949774137,
							0
						],
						[
							-76.34684531449899,
							42.44134249777007,
							0
						],
						[
							-76.34703731457897,
							42.44159249780863,
							0
						],
						[
							-76.3476013148035,
							42.44218449789553,
							0
						],
						[
							-76.34974631565552,
							42.44441049822129,
							0
						],
						[
							-76.35000931575895,
							42.44466949825864,
							0
						],
						[
							-76.3502073158359,
							42.44485149828437,
							0
						],
						[
							-76.35053031595912,
							42.44511749832061,
							0
						],
						[
							-76.35119431621078,
							42.4456414983909,
							0
						],
						[
							-76.3518713164652,
							42.44614649845713,
							0
						],
						[
							-76.35286631683736,
							42.44686449854999,
							0
						],
						[
							-76.35298431688238,
							42.44696149856318,
							0
						],
						[
							-76.35313331693946,
							42.44708749858051,
							0
						],
						[
							-76.35416131733339,
							42.44795749870016,
							0
						],
						[
							-76.35479031757441,
							42.44848949877333,
							0
						],
						[
							-76.35574731793939,
							42.44927549888027,
							0
						],
						[
							-76.35608531807038,
							42.44958149892329,
							0
						],
						[
							-76.35644931820848,
							42.44987049896213,
							0
						],
						[
							-76.3568083183429,
							42.45013149899599,
							0
						],
						[
							-76.35734331854039,
							42.45048149903921,
							0
						],
						[
							-76.35779531870658,
							42.45076849907413,
							0
						],
						[
							-76.35826131888125,
							42.4511094991185,
							0
						],
						[
							-76.35894131913865,
							42.45164149918957,
							0
						],
						[
							-76.35915431922182,
							42.4518424992182,
							0
						],
						[
							-76.35932531929177,
							42.45204749924924,
							0
						],
						[
							-76.3594043193286,
							42.45220349927492,
							0
						],
						[
							-76.35945931935748,
							42.45235649930105,
							0
						],
						[
							-76.35955631942093,
							42.45279649937856,
							0
						],
						[
							-76.35963031947207,
							42.45316949944463,
							0
						],
						[
							-76.35971431951351,
							42.45336649947769,
							0
						],
						[
							-76.35984731955277,
							42.45331949946364,
							0
						],
						[
							-76.36017431965041,
							42.45321949943196,
							0
						],
						[
							-76.36094431988026,
							42.45298249935708,
							0
						],
						[
							-76.36136832000774,
							42.45286449931817,
							0
						],
						[
							-76.36171832011162,
							42.45274849928261,
							0
						],
						[
							-76.36209432022174,
							42.45260449924083,
							0
						],
						[
							-76.36224732026481,
							42.4525214992193,
							0
						],
						[
							-76.36238832030362,
							42.45243349919734,
							0
						],
						[
							-76.36251532033668,
							42.45232849917279,
							0
						],
						[
							-76.36262732036464,
							42.45221949914811,
							0
						],
						[
							-76.3627433203919,
							42.45208349911827,
							0
						],
						[
							-76.36286432041577,
							42.45187949907565,
							0
						],
						[
							-76.36294132042919,
							42.45172549904405,
							0
						],
						[
							-76.36298132043402,
							42.45161649902227,
							0
						],
						[
							-76.3630033204356,
							42.4515414990075,
							0
						],
						[
							-76.36307832044065,
							42.45128249895653,
							0
						],
						[
							-76.36318732044377,
							42.45084849887183,
							0
						],
						[
							-76.36335732045225,
							42.45022049874876,
							0
						],
						[
							-76.3635273204561,
							42.44952949861401,
							0
						],
						[
							-76.363605320455,
							42.44917349854501,
							0
						],
						[
							-76.3636663204365,
							42.44865449844647,
							0
						],
						[
							-76.36370532043146,
							42.44841549840069,
							0
						],
						[
							-76.36375732043523,
							42.448239498366,
							0
						],
						[
							-76.36382632044541,
							42.44807649833307,
							0
						],
						[
							-76.3639253204645,
							42.44790349829706,
							0
						],
						[
							-76.36417132051983,
							42.44758149822756,
							0
						],
						[
							-76.36432632055853,
							42.44743049819336,
							0
						],
						[
							-76.36449232060147,
							42.44728949816058,
							0
						],
						[
							-76.36532432082323,
							42.44667149801268,
							0
						],
						[
							-76.36547832086225,
							42.44652949798021,
							0
						],
						[
							-76.3655853208883,
							42.44641649795499,
							0
						],
						[
							-76.36566732090662,
							42.44630749793151,
							0
						],
						[
							-76.36573132091948,
							42.44620249790949,
							0
						],
						[
							-76.36588332094765,
							42.44592149785137,
							0
						],
						[
							-76.36604432097708,
							42.44561849778879,
							0
						],
						[
							-76.36607232098233,
							42.44556749777824,
							0
						],
						[
							-76.36622032101033,
							42.44530149772302,
							0
						],
						[
							-76.36630932102885,
							42.44516449769409,
							0
						],
						[
							-76.36655832108647,
							42.44486049762779,
							0
						],
						[
							-76.36668732111747,
							42.44471849759631,
							0
						],
						[
							-76.36687032116454,
							42.44455949755952,
							0
						],
						[
							-76.36706332121504,
							42.44440349752286,
							0
						],
						[
							-76.36724232126248,
							42.44426649749029,
							0
						],
						[
							-76.36744532131694,
							42.4441204974551,
							0
						],
						[
							-76.36775132140033,
							42.4439184974054,
							0
						],
						[
							-76.36788232143697,
							42.44384449738642,
							0
						],
						[
							-76.36804332148293,
							42.4437664973655,
							0
						],
						[
							-76.36823032153717,
							42.44368749734334,
							0
						],
						[
							-76.36857632163878,
							42.44355849730553,
							0
						],
						[
							-76.36883432171471,
							42.44346449727774,
							0
						],
						[
							-76.36938332187592,
							42.44325949721767,
							0
						],
						[
							-76.36989132202405,
							42.44305549715946,
							0
						],
						[
							-76.37017332210672,
							42.44294849712831,
							0
						],
						[
							-76.37049132219904,
							42.44281549709088,
							0
						],
						[
							-76.37057332222288,
							42.44278149708129,
							0
						],
						[
							-76.37081932229269,
							42.44265649704823,
							0
						],
						[
							-76.37104932235579,
							42.44251049701195,
							0
						],
						[
							-76.37124432240665,
							42.44235049697448,
							0
						],
						[
							-76.37136732243778,
							42.44223649694843,
							0
						],
						[
							-76.37149932246878,
							42.44208149691443,
							0
						],
						[
							-76.37172732251996,
							42.44178149684969,
							0
						],
						[
							-76.37175132252493,
							42.44174449684189,
							0
						],
						[
							-76.37191132255774,
							42.44149149678862,
							0
						],
						[
							-76.37211032259563,
							42.44113749671507,
							0
						],
						[
							-76.37244732266332,
							42.44058549659932,
							0
						],
						[
							-76.37255032268396,
							42.44041649656388,
							0
						],
						[
							-76.37291432276317,
							42.43990349645426,
							0
						],
						[
							-76.37313632281138,
							42.43958949638719,
							0
						],
						[
							-76.37344132288162,
							42.43921249630511,
							0
						],
						[
							-76.373703322946,
							42.43894349624477,
							0
						],
						[
							-76.3739013229975,
							42.43877949620643,
							0
						],
						[
							-76.37440032312946,
							42.43839449611508,
							0
						],
						[
							-76.37633132364753,
							42.43700749578055,
							0
						],
						[
							-76.37657832371171,
							42.43680149573245,
							0
						],
						[
							-76.37701632382121,
							42.43637749563631,
							0
						],
						[
							-76.37767532398395,
							42.43571249548666,
							0
						],
						[
							-76.37818732410852,
							42.43517049536568,
							0
						],
						[
							-76.3783433241475,
							42.43501949533146,
							0
						],
						[
							-76.37849132418664,
							42.4349054953044,
							0
						],
						[
							-76.37866932423505,
							42.4347864952752,
							0
						],
						[
							-76.37886332428955,
							42.43468049524775,
							0
						],
						[
							-76.3789903243262,
							42.43462449523227,
							0
						],
						[
							-76.37907132434987,
							42.43459249522309,
							0
						],
						[
							-76.37929032441465,
							42.43451749520038,
							0
						],
						[
							-76.37949832447761,
							42.43446549518237,
							0
						],
						[
							-76.37968032453308,
							42.43442549516762,
							0
						],
						[
							-76.37973732455052,
							42.43441349516312,
							0
						],
						[
							-76.37985832458743,
							42.43438749515342,
							0
						],
						[
							-76.38015732467866,
							42.43432249512934,
							0
						],
						[
							-76.38094832492133,
							42.43416949506916,
							0
						],
						[
							-76.3817873251803,
							42.43402849500927,
							0
						],
						[
							-76.38258932542647,
							42.43387449494844,
							0
						],
						[
							-76.38308432557729,
							42.43376449490815,
							0
						],
						[
							-76.38358432572741,
							42.43362349486188,
							0
						],
						[
							-76.38443332598139,
							42.43337049478085,
							0
						],
						[
							-76.38583332640076,
							42.43296149464876,
							0
						],
						[
							-76.38592832642891,
							42.43292949463898,
							0
						],
						[
							-76.38601832645472,
							42.43288749462759,
							0
						],
						[
							-76.38610132647798,
							42.43284149461571,
							0
						],
						[
							-76.386178326499,
							42.43279149460336,
							0
						],
						[
							-76.38624832651708,
							42.43273149458942,
							0
						],
						[
							-76.38630832653163,
							42.43266749457517,
							0
						],
						[
							-76.38635932654338,
							42.43260449456145,
							0
						],
						[
							-76.38640132655152,
							42.43253149454624,
							0
						],
						[
							-76.38643232655618,
							42.43245949453166,
							0
						],
						[
							-76.38645332655726,
							42.43238249451657,
							0
						],
						[
							-76.38646232655451,
							42.43230549450195,
							0
						],
						[
							-76.38646232654894,
							42.43222949448787,
							0
						],
						[
							-76.38645032653942,
							42.4321524944741,
							0
						],
						[
							-76.38642732652646,
							42.43207649446097,
							0
						],
						[
							-76.38642432651821,
							42.43197749444275,
							0
						],
						[
							-76.38728132684516,
							42.43268349453892,
							0
						],
						[
							-76.38846632729815,
							42.43367249467428,
							0
						],
						[
							-76.38911232754566,
							42.43421949474953,
							0
						],
						[
							-76.3892893276135,
							42.43436949477016,
							0
						],
						[
							-76.39012932793601,
							42.43508949486959,
							0
						],
						[
							-76.39079932819146,
							42.4356394949444,
							0
						],
						[
							-76.39128132837453,
							42.43602549499644,
							0
						],
						[
							-76.39207832867393,
							42.43661849507409,
							0
						],
						[
							-76.39211432868782,
							42.43665049507857,
							0
						],
						[
							-76.39263832888592,
							42.4370574951328,
							0
						],
						[
							-76.3929583290112,
							42.43736449517673,
							0
						],
						[
							-76.39297932901957,
							42.43738649517994,
							0
						],
						[
							-76.393167329094,
							42.43757849520792,
							0
						],
						[
							-76.39346732921483,
							42.43791249525766,
							0
						],
						[
							-76.39359832926402,
							42.43800949527032,
							0
						],
						[
							-76.39367232929071,
							42.43804949527475,
							0
						],
						[
							-76.39375332931927,
							42.43808449527796,
							0
						],
						[
							-76.39383832934884,
							42.43811549528027,
							0
						],
						[
							-76.39392632937863,
							42.43813649528061,
							0
						],
						[
							-76.39402632941197,
							42.43815349527972,
							0
						],
						[
							-76.39544932988072,
							42.43831649525252,
							0
						],
						[
							-76.39848033087901,
							42.43866149519422,
							0
						],
						[
							-76.39968633127567,
							42.43879149516967,
							0
						],
						[
							-76.4006843316044,
							42.43890549515053,
							0
						],
						[
							-76.40130133180354,
							42.43892049512844,
							0
						],
						[
							-76.40195233201192,
							42.43891249510072,
							0
						],
						[
							-76.40284933229573,
							42.43885649505418,
							0
						],
						[
							-76.40332933244605,
							42.43880549502538,
							0
						],
						[
							-76.40421533272199,
							42.43869049496837,
							0
						],
						[
							-76.4049253329443,
							42.43861449492567,
							0
						],
						[
							-76.40554033313816,
							42.438566494892,
							0
						],
						[
							-76.40614033332827,
							42.43853249486151,
							0
						],
						[
							-76.40715333365313,
							42.43852849481992,
							0
						],
						[
							-76.40805133393562,
							42.43845049476926,
							0
						],
						[
							-76.40945733438257,
							42.43839149470163,
							0
						],
						[
							-76.40988033451701,
							42.43837349468126,
							0
						],
						[
							-76.41019533461812,
							42.43837349466856,
							0
						],
						[
							-76.41053933472861,
							42.43837449465485,
							0
						],
						[
							-76.41132133498122,
							42.43839649462741,
							0
						],
						[
							-76.41269433542793,
							42.43847849458719,
							0
						],
						[
							-76.41284633548224,
							42.43855349459494,
							0
						],
						[
							-76.41306233555865,
							42.43864949460398,
							0
						],
						[
							-76.41687233691246,
							42.44043049477993,
							0
						],
						[
							-76.41777333722997,
							42.44081549481482,
							0
						],
						[
							-76.41819433737597,
							42.44096349482523,
							0
						],
						[
							-76.41890633761876,
							42.4411574948324,
							0
						],
						[
							-76.41930333775345,
							42.4412564948347,
							0
						],
						[
							-76.41984233793625,
							42.44138949483757,
							0
						],
						[
							-76.42075033824425,
							42.44161449484257,
							0
						],
						[
							-76.4218313386109,
							42.44188249484856,
							0
						],
						[
							-76.42205533868655,
							42.44193349484895,
							0
						],
						[
							-76.42242633880997,
							42.4419924948449,
							0
						],
						[
							-76.42280233893257,
							42.44201849483453,
							0
						],
						[
							-76.42321833906571,
							42.44201349481683,
							0
						],
						[
							-76.42392033928948,
							42.44199249478462,
							0
						],
						[
							-76.42655334012875,
							42.44191349466374,
							0
						],
						[
							-76.42685334022642,
							42.44193249465514,
							0
						],
						[
							-76.42706634029692,
							42.44196149465191,
							0
						],
						[
							-76.42727434036715,
							42.4420084946522,
							0
						],
						[
							-76.42751134044893,
							42.44208649465709,
							0
						],
						[
							-76.42841434076244,
							42.44240849468022,
							0
						],
						[
							-76.42855934081184,
							42.4424474946816,
							0
						],
						[
							-76.42870834086152,
							42.4424724946802,
							0
						],
						[
							-76.42888334091916,
							42.44249249467683,
							0
						],
						[
							-76.4288673408974,
							42.44226649463566,
							0
						],
						[
							-76.42886334089177,
							42.4422074946249,
							0
						],
						[
							-76.42884234086229,
							42.44189849456858,
							0
						],
						[
							-76.42881934083704,
							42.44165549452453,
							0
						],
						[
							-76.42856234044969,
							42.43751149376803,
							0
						],
						[
							-76.42840734022035,
							42.43506949332235,
							0
						],
						[
							-76.42823833997116,
							42.43241849283849,
							0
						],
						[
							-76.42815933986802,
							42.43136049264584,
							0
						],
						[
							-76.42811733981328,
							42.43079949254369,
							0
						],
						[
							-76.42811633981164,
							42.43078149254041,
							0
						],
						[
							-76.42808233978288,
							42.43053849249679,
							0
						],
						[
							-76.42795633960151,
							42.42862149214702,
							0
						],
						[
							-76.42787533949492,
							42.42752549194741,
							0
						],
						[
							-76.42760833914252,
							42.42389649128635,
							0
						],
						[
							-76.42760333913715,
							42.42384549127711,
							0
						],
						[
							-76.42760133913322,
							42.42380049126887,
							0
						],
						[
							-76.42754033905433,
							42.42299349112192,
							0
						],
						[
							-76.42741733891808,
							42.42167649088304,
							0
						],
						[
							-76.42743233890997,
							42.42150049084985,
							0
						],
						[
							-76.42729333886285,
							42.42146649084917,
							0
						],
						[
							-76.42717733882239,
							42.4214224908457,
							0
						],
						[
							-76.42706333878192,
							42.42136949084048,
							0
						],
						[
							-76.42659033861274,
							42.42113249081567,
							0
						],
						[
							-76.4264183385524,
							42.42106249080964,
							0
						],
						[
							-76.42623733849018,
							42.42100649080658,
							0
						],
						[
							-76.42604933842706,
							42.42096849080712,
							0
						],
						[
							-76.42588533837261,
							42.42094349080912,
							0
						],
						[
							-76.425007338083,
							42.42083649082472,
							0
						],
						[
							-76.4243693378726,
							42.42075949083619,
							0
						],
						[
							-76.42428633784539,
							42.42075149083805,
							0
						],
						[
							-76.42401733775702,
							42.42072349084375,
							0
						],
						[
							-76.42367033764103,
							42.42066049084605,
							0
						],
						[
							-76.42326133750156,
							42.42054849084181,
							0
						],
						[
							-76.42085933667339,
							42.41976749079409,
							0
						],
						[
							-76.42067633661019,
							42.41970649079016,
							0
						],
						[
							-76.41958833622996,
							42.4192834907557,
							0
						],
						[
							-76.41923033610384,
							42.41913049074181,
							0
						],
						[
							-76.41899333601837,
							42.41900249072766,
							0
						],
						[
							-76.4172193353816,
							42.41808349062903,
							0
						],
						[
							-76.41688333525718,
							42.41785749060071,
							0
						],
						[
							-76.41667533517811,
							42.417689490578,
							0
						],
						[
							-76.41602033491885,
							42.41702149048069,
							0
						],
						[
							-76.41591133487705,
							42.41692849046788,
							0
						],
						[
							-76.41574533481437,
							42.41680049045087,
							0
						],
						[
							-76.4146933344248,
							42.41609249036216,
							0
						],
						[
							-76.41440933431943,
							42.41589849033768,
							0
						],
						[
							-76.41357133401057,
							42.41535449027072,
							0
						],
						[
							-76.41306833382355,
							42.41500549022637,
							0
						],
						[
							-76.4122903335332,
							42.41445149015512,
							0
						],
						[
							-76.41090933301957,
							42.413491490033,
							0
						],
						[
							-76.41079533297814,
							42.41342549002535,
							0
						],
						[
							-76.41073933295826,
							42.4133994900228,
							0
						],
						[
							-76.41064633292585,
							42.41336449002007,
							0
						],
						[
							-76.41045533286045,
							42.4133084900174,
							0
						],
						[
							-76.41013933275273,
							42.41322249001421,
							0
						],
						[
							-76.4097813326322,
							42.41314549001436,
							0
						],
						[
							-76.40949533253735,
							42.41310349001812,
							0
						],
						[
							-76.40933033248322,
							42.4130874900218,
							0
						],
						[
							-76.40913033241691,
							42.4130584900245,
							0
						],
						[
							-76.40847333219742,
							42.41294049002912,
							0
						],
						[
							-76.40779233197125,
							42.41283649003729,
							0
						],
						[
							-76.4075203318789,
							42.4127674900355,
							0
						],
						[
							-76.40716333175811,
							42.41268249003414,
							0
						],
						[
							-76.4062983314674,
							42.41250349003582,
							0
						],
						[
							-76.40558233122675,
							42.41235549003726,
							0
						],
						[
							-76.40482733097193,
							42.41218449003601,
							0
						],
						[
							-76.40429933079301,
							42.41205549003341,
							0
						],
						[
							-76.40412733073437,
							42.41200849003162,
							0
						],
						[
							-76.4031163303877,
							42.41170549001624,
							0
						],
						[
							-76.40267333023505,
							42.41156249000759,
							0
						],
						[
							-76.40117232972129,
							42.41112548998714,
							0
						],
						[
							-76.40086332961472,
							42.41102448998088,
							0
						],
						[
							-76.40065432954268,
							42.4109564899767,
							0
						],
						[
							-76.40054532950484,
							42.41091748997386,
							0
						],
						[
							-76.4003333294277,
							42.41079348995943,
							0
						],
						[
							-76.40021332938237,
							42.41070048994703,
							0
						],
						[
							-76.40010632934055,
							42.41059848993246,
							0
						],
						[
							-76.40003732931217,
							42.4105134899195,
							0
						],
						[
							-76.39998632929192,
							42.41046048991174,
							0
						],
						[
							-76.39983332922638,
							42.41023648987641,
							0
						],
						[
							-76.39964132914217,
							42.40992848982709,
							0
						],
						[
							-76.39936332901885,
							42.40946348975215,
							0
						],
						[
							-76.39911932890776,
							42.40901648967918,
							0
						],
						[
							-76.39902732886408,
							42.40882348964712,
							0
						],
						[
							-76.39866432868753,
							42.40800448951005,
							0
						],
						[
							-76.39826432849448,
							42.40712248936276,
							0
						],
						[
							-76.39823732848214,
							42.4070724893546,
							0
						],
						[
							-76.39820332846764,
							42.4070234893469,
							0
						],
						[
							-76.39811632843319,
							42.4069344893339,
							0
						],
						[
							-76.39800732839308,
							42.40686448932533,
							0
						],
						[
							-76.39794532837091,
							42.40683348932208,
							0
						],
						[
							-76.39781032832437,
							42.40678948931936,
							0
						],
						[
							-76.39774032830101,
							42.40677748931996,
							0
						],
						[
							-76.39710132809127,
							42.40671348933383,
							0
						],
						[
							-76.39692532803295,
							42.4066884893363,
							0
						],
						[
							-76.39684832800663,
							42.40666648933532,
							0
						],
						[
							-76.39670432795593,
							42.40660548932981,
							0
						],
						[
							-76.39519832741327,
							42.40579548924041,
							0
						],
						[
							-76.39460032719644,
							42.4054554892015,
							0
						],
						[
							-76.39408532700918,
							42.40515548916667,
							0
						],
						[
							-76.39339932675766,
							42.404727489115,
							0
						],
						[
							-76.39300532661369,
							42.40448848908658,
							0
						],
						[
							-76.39283332655175,
							42.40439648907647,
							0
						],
						[
							-76.39263432648077,
							42.40429948906652,
							0
						],
						[
							-76.39222632633673,
							42.40412048904977,
							0
						],
						[
							-76.39173732616706,
							42.40394648903722,
							0
						],
						[
							-76.3912513259993,
							42.40378548902696,
							0
						],
						[
							-76.39093432588787,
							42.40365348901528,
							0
						],
						[
							-76.39071732581093,
							42.40355348900548,
							0
						],
						[
							-76.3905113257374,
							42.40345248899507,
							0
						],
						[
							-76.39003632556658,
							42.40320148896768,
							0
						],
						[
							-76.38925132528365,
							42.40277848892092,
							0
						],
						[
							-76.38879732511957,
							42.40252748889269,
							0
						],
						[
							-76.38864432506395,
							42.40243848888235,
							0
						],
						[
							-76.3883913249712,
							42.40228048886326,
							0
						],
						[
							-76.38825932492333,
							42.40220548885468,
							0
						],
						[
							-76.3881483248836,
							42.40214948884879,
							0
						],
						[
							-76.38798532482602,
							42.40207748884201,
							0
						],
						[
							-76.38745232464032,
							42.40187748882639,
							0
						],
						[
							-76.38587032408911,
							42.40128348878002,
							0
						],
						[
							-76.38521132386211,
							42.40107148876727,
							0
						],
						[
							-76.38489332375302,
							42.40097548876229,
							0
						],
						[
							-76.38460632365489,
							42.40089348875863,
							0
						],
						[
							-76.38288132306857,
							42.40044648874525,
							0
						],
						[
							-76.38282232304773,
							42.40042048874279,
							0
						],
						[
							-76.38271632300916,
							42.40035848873558,
							0
						],
						[
							-76.38266932299116,
							42.40031848873005,
							0
						],
						[
							-76.38259432296124,
							42.40023848871824,
							0
						],
						[
							-76.38254532293863,
							42.40014448870279,
							0
						],
						[
							-76.38252632292689,
							42.40006748868929,
							0
						],
						[
							-76.3824643228543,
							42.39934848855857,
							0
						],
						[
							-76.38246232285111,
							42.39931348855215,
							0
						],
						[
							-76.38240532276613,
							42.39840348838582,
							0
						],
						[
							-76.3823463226684,
							42.3973274881888,
							0
						],
						[
							-76.38230332260484,
							42.39664848806469,
							0
						],
						[
							-76.3822813225559,
							42.39607648795957,
							0
						],
						[
							-76.38226532253003,
							42.39579348790776,
							0
						],
						[
							-76.38220932248474,
							42.39542048784089,
							0
						],
						[
							-76.38194532239922,
							42.39540948784948,
							0
						],
						[
							-76.3811983221549,
							42.39534648786786,
							0
						],
						[
							-76.38051732193044,
							42.39526548788027,
							0
						],
						[
							-76.37807532112188,
							42.39492548791549,
							0
						],
						[
							-76.37730732086649,
							42.3948034879238,
							0
						],
						[
							-76.37691432073518,
							42.39473248792644,
							0
						],
						[
							-76.37590732039774,
							42.39453748793082,
							0
						],
						[
							-76.37519032015675,
							42.39438848793206,
							0
						],
						[
							-76.37488932005547,
							42.3943244879323,
							0
						],
						[
							-76.37442831990103,
							42.39423548793434,
							0
						],
						[
							-76.37431531986314,
							42.39421348793481,
							0
						],
						[
							-76.37394931974109,
							42.39415048793786,
							0
						],
						[
							-76.37346031957932,
							42.3940844879453,
							0
						],
						[
							-76.37312331946853,
							42.39404848795219,
							0
						],
						[
							-76.3728073193651,
							42.3940204879597,
							0
						],
						[
							-76.37226331918778,
							42.39398348797473,
							0
						],
						[
							-76.37142731891542,
							42.39392748799799,
							0
						],
						[
							-76.37076831870071,
							42.39388348801634,
							0
						],
						[
							-76.37037331857196,
							42.39385648802722,
							0
						],
						[
							-76.36785931775283,
							42.39368748809702,
							0
						],
						[
							-76.36724431755368,
							42.3936634881173,
							0
						],
						[
							-76.36734531779598,
							42.3965304886446,
							0
						],
						[
							-76.36744131797805,
							42.39859648902365,
							0
						],
						[
							-76.3674663180065,
							42.39887548907435,
							0
						],
						[
							-76.3675303180474,
							42.39915348912327,
							0
						],
						[
							-76.36763331810009,
							42.39942148916882,
							0
						],
						[
							-76.36763431810047,
							42.39942248916898,
							0
						],
						[
							-76.36773531814761,
							42.39962348920215,
							0
						],
						[
							-76.36827931839723,
							42.40064848937021,
							0
						],
						[
							-76.36853631851379,
							42.40111348944604,
							0
						],
						[
							-76.36881331863843,
							42.40160148952533,
							0
						],
						[
							-76.36906331875338,
							42.40207548960311,
							0
						],
						[
							-76.3697823190778,
							42.40335448981121,
							0
						],
						[
							-76.37027431929636,
							42.40418248994484,
							0
						],
						[
							-76.37046331937789,
							42.40446748999002,
							0
						],
						[
							-76.37059731943636,
							42.40467849002373,
							0
						],
						[
							-76.37071931948759,
							42.40484349004942,
							0
						],
						[
							-76.37085831954694,
							42.40504449008106,
							0
						],
						[
							-76.37099031960233,
							42.40522249010873,
							0
						],
						[
							-76.37118531968653,
							42.40551749015553,
							0
						],
						[
							-76.37136131976594,
							42.40583049020645,
							0
						],
						[
							-76.37141731979476,
							42.40597849023163,
							0
						],
						[
							-76.3714923198277,
							42.40609949025102,
							0
						],
						[
							-76.37155731985837,
							42.40623349027323,
							0
						],
						[
							-76.37162831989362,
							42.40640349030187,
							0
						],
						[
							-76.37168931992505,
							42.40656549032944,
							0
						],
						[
							-76.37174131995589,
							42.4067584903631,
							0
						],
						[
							-76.37179431998966,
							42.4069874904034,
							0
						],
						[
							-76.37184032002385,
							42.40725249045064,
							0
						],
						[
							-76.37198232013597,
							42.40816049061317,
							0
						],
						[
							-76.37201832017118,
							42.40848349067154,
							0
						],
						[
							-76.37212532026582,
							42.40930649081973,
							0
						],
						[
							-76.37217632031415,
							42.40974249089845,
							0
						],
						[
							-76.37233932045446,
							42.4109434911144,
							0
						],
						[
							-76.37246132059776,
							42.41236449137273,
							0
						],
						[
							-76.37257632072769,
							42.41363349160318,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090014003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>21681907</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>70032</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4211099</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3848121</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090014003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090014003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1369</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>557</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>5357.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>74</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>91</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.97</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26893</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26555</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27866</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14892</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14550</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15438</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8793</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8526</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9116</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6098</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6022</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6319</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2630</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>93</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3916</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>158</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3432</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1921</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1961</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1731</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>83</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00000"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.36763331810009,
							42.39942148916882,
							0
						],
						[
							-76.3675303180474,
							42.39915348912327,
							0
						],
						[
							-76.3674663180065,
							42.39887548907435,
							0
						],
						[
							-76.36744131797805,
							42.39859648902365,
							0
						],
						[
							-76.36734531779598,
							42.3965304886446,
							0
						],
						[
							-76.36724431755368,
							42.3936634881173,
							0
						],
						[
							-76.36683131741992,
							42.39364648813075,
							0
						],
						[
							-76.36555631701383,
							42.39368848818982,
							0
						],
						[
							-76.36466831673388,
							42.39375748823831,
							0
						],
						[
							-76.36429331661522,
							42.39378048825765,
							0
						],
						[
							-76.36406031654155,
							42.3937954882698,
							0
						],
						[
							-76.3632463162817,
							42.39381448830606,
							0
						],
						[
							-76.36283431614919,
							42.39381048832189,
							0
						],
						[
							-76.36280931611122,
							42.39340148824707,
							0
						],
						[
							-76.3628063161064,
							42.39334848823737,
							0
						],
						[
							-76.36271831597504,
							42.39193948797974,
							0
						],
						[
							-76.36260531580838,
							42.39015748765395,
							0
						],
						[
							-76.36254531576016,
							42.38976148758297,
							0
						],
						[
							-76.36243131569466,
							42.38936648751432,
							0
						],
						[
							-76.36224631560552,
							42.38895948744631,
							0
						],
						[
							-76.36203031550671,
							42.38855648738029,
							0
						],
						[
							-76.36189331544543,
							42.38831948734187,
							0
						],
						[
							-76.36160831532521,
							42.38792648728048,
							0
						],
						[
							-76.36124331517873,
							42.38752548722079,
							0
						],
						[
							-76.36010931473021,
							42.38636848705189,
							0
						],
						[
							-76.36006131471018,
							42.38630548704214,
							0
						],
						[
							-76.3600263146931,
							42.38622548702871,
							0
						],
						[
							-76.36001431468296,
							42.38613948701324,
							0
						],
						[
							-76.36001831468097,
							42.38609448700475,
							0
						],
						[
							-76.36002831468123,
							42.38605448699694,
							0
						],
						[
							-76.36011031469094,
							42.38582748695153,
							0
						],
						[
							-76.3600743146758,
							42.38577848694391,
							0
						],
						[
							-76.35970131454395,
							42.38561248692811,
							0
						],
						[
							-76.35935531441875,
							42.38541848690606,
							0
						],
						[
							-76.35903831430049,
							42.38519248687691,
							0
						],
						[
							-76.35875431419143,
							42.3849474868429,
							0
						],
						[
							-76.35850631409231,
							42.38468048680336,
							0
						],
						[
							-76.35829731400469,
							42.38439948675968,
							0
						],
						[
							-76.35754431367677,
							42.38321948657114,
							0
						],
						[
							-76.35671831331399,
							42.38188348635663,
							0
						],
						[
							-76.35552631278301,
							42.37985248602794,
							0
						],
						[
							-76.35540031272691,
							42.3796384859933,
							0
						],
						[
							-76.35520331263913,
							42.37930248593893,
							0
						],
						[
							-76.3550313125629,
							42.37901448589242,
							0
						],
						[
							-76.35457031235825,
							42.37823848576704,
							0
						],
						[
							-76.35422831219682,
							42.37753148564969,
							0
						],
						[
							-76.35412031213812,
							42.37720248559301,
							0
						],
						[
							-76.35399331206922,
							42.37681748552673,
							0
						],
						[
							-76.35362731185596,
							42.37550648529831,
							0
						],
						[
							-76.35341331173095,
							42.37473548516392,
							0
						],
						[
							-76.35325131162415,
							42.37398548503132,
							0
						],
						[
							-76.35319631155097,
							42.37322548489258,
							0
						],
						[
							-76.35322331147664,
							42.3720894846808,
							0
						],
						[
							-76.35326231137611,
							42.3705424843923,
							0
						],
						[
							-76.35326731136442,
							42.37036048435835,
							0
						],
						[
							-76.35304331128809,
							42.37029948435602,
							0
						],
						[
							-76.35195231091794,
							42.37002448434884,
							0
						],
						[
							-76.34943031006213,
							42.36938748433199,
							0
						],
						[
							-76.34917130997268,
							42.36930048432626,
							0
						],
						[
							-76.34892530988607,
							42.36919548431666,
							0
						],
						[
							-76.3486963098036,
							42.36907248430305,
							0
						],
						[
							-76.34848530972552,
							42.36893048428518,
							0
						],
						[
							-76.3483283096658,
							42.36880248426774,
							0
						],
						[
							-76.34703230916486,
							42.36763748410368,
							0
						],
						[
							-76.34572530865739,
							42.36643148393245,
							0
						],
						[
							-76.34535530851377,
							42.36609048388404,
							0
						],
						[
							-76.34480930829528,
							42.36549748379598,
							0
						],
						[
							-76.34476830827919,
							42.36545748379018,
							0
						],
						[
							-76.34468730824838,
							42.36539148378121,
							0
						],
						[
							-76.34459630821465,
							42.36532948377336,
							0
						],
						[
							-76.34449830817933,
							42.36527648376745,
							0
						],
						[
							-76.34439330814244,
							42.36523248376349,
							0
						],
						[
							-76.34428330810427,
							42.36519348376067,
							0
						],
						[
							-76.34416730806517,
							42.36516748376052,
							0
						],
						[
							-76.34404930802577,
							42.36514648376136,
							0
						],
						[
							-76.34392830798636,
							42.36513848376475,
							0
						],
						[
							-76.34368630790928,
							42.36514648377593,
							0
						],
						[
							-76.34325430777564,
							42.36521448380589,
							0
						],
						[
							-76.34286430765079,
							42.36521848382229,
							0
						],
						[
							-76.34255530754997,
							42.36519548383043,
							0
						],
						[
							-76.34228730746125,
							42.36515848383434,
							0
						],
						[
							-76.34153730720804,
							42.36498648383254,
							0
						],
						[
							-76.34145830718151,
							42.36497048383274,
							0
						],
						[
							-76.33952330653213,
							42.36458048383808,
							0
						],
						[
							-76.33901130635996,
							42.36447248383859,
							0
						],
						[
							-76.33882530629742,
							42.36443348383882,
							0
						],
						[
							-76.33809030604611,
							42.36422148382899,
							0
						],
						[
							-76.33713430571876,
							42.36393948381505,
							0
						],
						[
							-76.33663830554771,
							42.36377648380472,
							0
						],
						[
							-76.33621130540038,
							42.3636354837957,
							0
						],
						[
							-76.336138305375,
							42.36360848379361,
							0
						],
						[
							-76.33597130531761,
							42.36355648379067,
							0
						],
						[
							-76.33566530521016,
							42.36342948377939,
							0
						],
						[
							-76.33537830510711,
							42.36327948376308,
							0
						],
						[
							-76.33515130502369,
							42.36313448374528,
							0
						],
						[
							-76.33386330454638,
							42.36225748363427,
							0
						],
						[
							-76.33225030394934,
							42.36116848349694,
							0
						],
						[
							-76.3319103038241,
							42.36094748346957,
							0
						],
						[
							-76.33182130379133,
							42.3608894834624,
							0
						],
						[
							-76.33136730362827,
							42.36065148343644,
							0
						],
						[
							-76.3311883035648,
							42.36056848342822,
							0
						],
						[
							-76.33096430348355,
							42.36044048341345,
							0
						],
						[
							-76.33075930340712,
							42.3602944833946,
							0
						],
						[
							-76.33060730334894,
							42.36016548337675,
							0
						],
						[
							-76.32999330310545,
							42.3595284832832,
							0
						],
						[
							-76.32981230303474,
							42.35935548325836,
							0
						],
						[
							-76.32960730295767,
							42.35920048323781,
							0
						],
						[
							-76.32934630286225,
							42.35904048321861,
							0
						],
						[
							-76.32923330282154,
							42.35897948321183,
							0
						],
						[
							-76.32836730250361,
							42.35843048314469,
							0
						],
						[
							-76.32771230226184,
							42.3579974830906,
							0
						],
						[
							-76.32679330192545,
							42.35742848302191,
							0
						],
						[
							-76.32447330107642,
							42.35599448284884,
							0
						],
						[
							-76.32425730099841,
							42.35587548283542,
							0
						],
						[
							-76.32398430090186,
							42.35575248282355,
							0
						],
						[
							-76.32373230081437,
							42.35566148281678,
							0
						],
						[
							-76.32294930054437,
							42.35540448280047,
							0
						],
						[
							-76.322656300444,
							42.35531748279608,
							0
						],
						[
							-76.32236230034209,
							42.35521348278858,
							0
						],
						[
							-76.32206530023679,
							42.35507648277507,
							0
						],
						[
							-76.3216483000873,
							42.35486148275189,
							0
						],
						[
							-76.32119829992322,
							42.35459148271983,
							0
						],
						[
							-76.32084329979159,
							42.35434848268896,
							0
						],
						[
							-76.32062129970737,
							42.35417048266482,
							0
						],
						[
							-76.3204262996309,
							42.35397948263719,
							0
						],
						[
							-76.32040729962317,
							42.35395748263387,
							0
						],
						[
							-76.32028129957166,
							42.35380548261073,
							0
						],
						[
							-76.31993929942868,
							42.35334948253982,
							0
						],
						[
							-76.3198332993849,
							42.35321548251918,
							0
						],
						[
							-76.31953529926362,
							42.35286348246579,
							0
						],
						[
							-76.31924429914685,
							42.3525424824179,
							0
						],
						[
							-76.31884429898803,
							42.35212448235635,
							0
						],
						[
							-76.318706298935,
							42.35200448233962,
							0
						],
						[
							-76.31860229889384,
							42.35189748232393,
							0
						],
						[
							-76.3177332985622,
							42.35117348222436,
							0
						],
						[
							-76.31748829846735,
							42.35095048219282,
							0
						],
						[
							-76.31726929837893,
							42.35070148215538,
							0
						],
						[
							-76.31645929804387,
							42.34967048199649,
							0
						],
						[
							-76.31626429796243,
							42.34941148195622,
							0
						],
						[
							-76.31612529789989,
							42.34916548191613,
							0
						],
						[
							-76.31584429776633,
							42.34856948181675,
							0
						],
						[
							-76.31571329770868,
							42.34835548178229,
							0
						],
						[
							-76.31546929760336,
							42.34798448172321,
							0
						],
						[
							-76.31520229749066,
							42.34761348166504,
							0
						],
						[
							-76.31508029744211,
							42.34748448164597,
							0
						],
						[
							-76.31490729737297,
							42.34729748161819,
							0
						],
						[
							-76.31456829724249,
							42.34699948157648,
							0
						],
						[
							-76.31428329713617,
							42.34679548155002,
							0
						],
						[
							-76.31240429644721,
							42.3456144814061,
							0
						],
						[
							-76.3114072960809,
							42.3449774813278,
							0
						],
						[
							-76.31113129598076,
							42.34481848130935,
							0
						],
						[
							-76.3107932958605,
							42.34465648129284,
							0
						],
						[
							-76.31046329574565,
							42.34453348128321,
							0
						],
						[
							-76.30860429510712,
							42.34395648125059,
							0
						],
						[
							-76.30641629436418,
							42.34339548123413,
							0
						],
						[
							-76.30440329368483,
							42.34293648122958,
							0
						],
						[
							-76.30401529355547,
							42.34286948123266,
							0
						],
						[
							-76.30358129341357,
							42.34283348124336,
							0
						],
						[
							-76.3033672933441,
							42.3428224812499,
							0
						],
						[
							-76.30205629292415,
							42.3428324813043,
							0
						],
						[
							-76.30156529276536,
							42.3428154813208,
							0
						],
						[
							-76.30129429267765,
							42.34280548132979,
							0
						],
						[
							-76.29960729212722,
							42.34268048137418,
							0
						],
						[
							-76.29938629205458,
							42.34265648137857,
							0
						],
						[
							-76.2992052919943,
							42.34262648138025,
							0
						],
						[
							-76.29903129193504,
							42.34257948137849,
							0
						],
						[
							-76.29886429187694,
							42.34251748137368,
							0
						],
						[
							-76.29870629182085,
							42.34244348136627,
							0
						],
						[
							-76.29856029176788,
							42.34235948135652,
							0
						],
						[
							-76.29837729169948,
							42.34222648133915,
							0
						],
						[
							-76.29798429155008,
							42.34190648129547,
							0
						],
						[
							-76.29795329153832,
							42.34188148129208,
							0
						],
						[
							-76.29752529137579,
							42.34153548124498,
							0
						],
						[
							-76.2975002913663,
							42.34151548124226,
							0
						],
						[
							-76.2972732912773,
							42.34129348121014,
							0
						],
						[
							-76.29707829119681,
							42.34104748117227,
							0
						],
						[
							-76.29691929112725,
							42.3407924811313,
							0
						],
						[
							-76.29682829108437,
							42.34060448110002,
							0
						],
						[
							-76.29607129071105,
							42.33881248079757,
							0
						],
						[
							-76.29517429026627,
							42.33665548043295,
							0
						],
						[
							-76.29429728983493,
							42.3345944800853,
							0
						],
						[
							-76.29415428976824,
							42.33430848003792,
							0
						],
						[
							-76.29395628968325,
							42.33401347999104,
							0
						],
						[
							-76.29371828958674,
							42.33373647994914,
							0
						],
						[
							-76.29344328947973,
							42.33347847991225,
							0
						],
						[
							-76.293194289386,
							42.3332884798869,
							0
						],
						[
							-76.28910128786671,
							42.33045647952478,
							0
						],
						[
							-76.28779928738356,
							42.3295574794099,
							0
						],
						[
							-76.2874082872368,
							42.32926447937113,
							0
						],
						[
							-76.2847832862399,
							42.32713747908109,
							0
						],
						[
							-76.28442028610175,
							42.32683947904025,
							0
						],
						[
							-76.27885728397936,
							42.32219647840025,
							0
						],
						[
							-76.27815028370858,
							42.32159147831612,
							0
						],
						[
							-76.27709828330447,
							42.32067547818802,
							0
						],
						[
							-76.27611728292767,
							42.31982147806858,
							0
						],
						[
							-76.27535828263672,
							42.31916847797761,
							0
						],
						[
							-76.27530728261722,
							42.31912547797166,
							0
						],
						[
							-76.27353628193815,
							42.31759947775892,
							0
						],
						[
							-76.27346728191246,
							42.31755047775258,
							0
						],
						[
							-76.27171928124376,
							42.31606547754653,
							0
						],
						[
							-76.26957828043273,
							42.31435647731453,
							0
						],
						[
							-76.26819727991288,
							42.31329947717332,
							0
						],
						[
							-76.26601627910047,
							42.31174747697206,
							0
						],
						[
							-76.26591127906133,
							42.31167247696232,
							0
						],
						[
							-76.26576527900642,
							42.31156147694752,
							0
						],
						[
							-76.26537127885967,
							42.31128147691123,
							0
						],
						[
							-76.26403127836029,
							42.31032447678692,
							0
						],
						[
							-76.2625252778025,
							42.30929647665602,
							0
						],
						[
							-76.25810827616503,
							42.3062604762682,
							0
						],
						[
							-76.25717527582584,
							42.30571147620342,
							0
						],
						[
							-76.25710127579929,
							42.30567247619912,
							0
						],
						[
							-76.25627627550642,
							42.30528447615996,
							0
						],
						[
							-76.25600727541159,
							42.30516647614876,
							0
						],
						[
							-76.25581027534227,
							42.30508247614103,
							0
						],
						[
							-76.2547622749723,
							42.30461747609646,
							0
						],
						[
							-76.25468927494668,
							42.30458747609378,
							0
						],
						[
							-76.25464427493087,
							42.30456847609205,
							0
						],
						[
							-76.25448527487607,
							42.30451647608874,
							0
						],
						[
							-76.25427927480659,
							42.30446947608824,
							0
						],
						[
							-76.25415027476367,
							42.30444847608948,
							0
						],
						[
							-76.25384827466539,
							42.30442947609802,
							0
						],
						[
							-76.25347527454397,
							42.30440547610846,
							0
						],
						[
							-76.25340527452158,
							42.30440647611143,
							0
						],
						[
							-76.25336627450878,
							42.30440247611226,
							0
						],
						[
							-76.25322727446563,
							42.30442247612153,
							0
						],
						[
							-76.25314227444002,
							42.3044454761292,
							0
						],
						[
							-76.25301927440361,
							42.30448747614192,
							0
						],
						[
							-76.25277527433299,
							42.30459347617136,
							0
						],
						[
							-76.25255927427203,
							42.3047084762014,
							0
						],
						[
							-76.25234527421365,
							42.30485047623633,
							0
						],
						[
							-76.25212427415632,
							42.30503747627992,
							0
						],
						[
							-76.25100227387489,
							42.30612147652628,
							0
						],
						[
							-76.25074627380927,
							42.30634947657889,
							0
						],
						[
							-76.25046127373304,
							42.30655947662931,
							0
						],
						[
							-76.25041827372107,
							42.30658447663569,
							0
						],
						[
							-76.25045127373436,
							42.30662147664122,
							0
						],
						[
							-76.25047327374378,
							42.30665447664648,
							0
						],
						[
							-76.2506432738087,
							42.30679747666629,
							0
						],
						[
							-76.25090127390266,
							42.3069514766846,
							0
						],
						[
							-76.25093827391649,
							42.30697847668814,
							0
						],
						[
							-76.25110127397916,
							42.30712147670823,
							0
						],
						[
							-76.25117527401443,
							42.30728047673482,
							0
						],
						[
							-76.25119727403627,
							42.30748447677187,
							0
						],
						[
							-76.25117427405,
							42.30777547682688,
							0
						],
						[
							-76.2512262740933,
							42.30814247689303,
							0
						],
						[
							-76.25124027409939,
							42.30816447689656,
							0
						],
						[
							-76.25126327411314,
							42.30825247691201,
							0
						],
						[
							-76.25128527412224,
							42.30828047691631,
							0
						],
						[
							-76.25129927412867,
							42.30830747692079,
							0
						],
						[
							-76.2513222741381,
							42.30833547692508,
							0
						],
						[
							-76.2513512741569,
							42.30846647694825,
							0
						],
						[
							-76.25138827417754,
							42.30858747696927,
							0
						],
						[
							-76.25141727422746,
							42.30914747707222,
							0
						],
						[
							-76.25143927425366,
							42.30941147712041,
							0
						],
						[
							-76.25140927428103,
							42.30992147721644,
							0
						],
						[
							-76.25141627428522,
							42.30994847722116,
							0
						],
						[
							-76.25135727426948,
							42.3099924772317,
							0
						],
						[
							-76.25132027426203,
							42.31005347724452,
							0
						],
						[
							-76.25126827424891,
							42.31010247725569,
							0
						],
						[
							-76.25114227421362,
							42.31017347727394,
							0
						],
						[
							-76.25104627418484,
							42.31020147728298,
							0
						],
						[
							-76.25093527415244,
							42.31024547729557,
							0
						],
						[
							-76.25086127412983,
							42.31026147730152,
							0
						],
						[
							-76.25075827410079,
							42.31031647731586,
							0
						],
						[
							-76.25068427408183,
							42.31038247733107,
							0
						],
						[
							-76.25067627408123,
							42.31040947733642,
							0
						],
						[
							-76.25063927407217,
							42.31044847734515,
							0
						],
						[
							-76.25062427407249,
							42.31051947735895,
							0
						],
						[
							-76.25057327406091,
							42.31058547737324,
							0
						],
						[
							-76.25049927403957,
							42.31061847738234,
							0
						],
						[
							-76.2504392740219,
							42.31064047738882,
							0
						],
						[
							-76.25032827399065,
							42.31070047740441,
							0
						],
						[
							-76.25026227397542,
							42.3107824774223,
							0
						],
						[
							-76.25023927398995,
							42.31108447747936,
							0
						],
						[
							-76.2502102739846,
							42.31113947749073,
							0
						],
						[
							-76.25017327397593,
							42.3111834775004,
							0
						],
						[
							-76.25006127395392,
							42.31137547754055,
							0
						],
						[
							-76.25006127396051,
							42.31146647755747,
							0
						],
						[
							-76.2500612739635,
							42.31150747756509,
							0
						],
						[
							-76.25008327397374,
							42.31155147757239,
							0
						],
						[
							-76.25010627399222,
							42.31170447759989,
							0
						],
						[
							-76.25012827400406,
							42.3117704776113,
							0
						],
						[
							-76.25015727401461,
							42.31178747761331,
							0
						],
						[
							-76.25018727403179,
							42.31189147763143,
							0
						],
						[
							-76.25020127404665,
							42.31203447765746,
							0
						],
						[
							-76.25022427405561,
							42.31205647766063,
							0
						],
						[
							-76.25027527409388,
							42.31235847771471,
							0
						],
						[
							-76.25031227410895,
							42.31240247772143,
							0
						],
						[
							-76.25042327415052,
							42.31248447773223,
							0
						],
						[
							-76.25053427419091,
							42.31255047774007,
							0
						],
						[
							-76.25063027422375,
							42.31257847774144,
							0
						],
						[
							-76.25071127425251,
							42.31261647774524,
							0
						],
						[
							-76.2507852742774,
							42.31263247774528,
							0
						],
						[
							-76.250889274316,
							42.31270447775449,
							0
						],
						[
							-76.25085927431036,
							42.31275947776593,
							0
						],
						[
							-76.25072627427524,
							42.31286347779057,
							0
						],
						[
							-76.25063727425263,
							42.31294547780936,
							0
						],
						[
							-76.25060027424517,
							42.31300647782219,
							0
						],
						[
							-76.25056327423606,
							42.31304447783072,
							0
						],
						[
							-76.25054827423443,
							42.31308847783951,
							0
						],
						[
							-76.25052627422862,
							42.31310547784355,
							0
						],
						[
							-76.25051127422735,
							42.31315447785325,
							0
						],
						[
							-76.25048927422145,
							42.3131704778571,
							0
						],
						[
							-76.25047427422861,
							42.31333547788837,
							0
						],
						[
							-76.25047527423146,
							42.31337047789484,
							0
						],
						[
							-76.2504882742381,
							42.31340447790063,
							0
						],
						[
							-76.2504842742545,
							42.31364847794615,
							0
						],
						[
							-76.25045827424834,
							42.31367847795276,
							0
						],
						[
							-76.25040927423973,
							42.31377647797294,
							0
						],
						[
							-76.25033627423109,
							42.31398047801378,
							0
						],
						[
							-76.25031627422702,
							42.31401247802051,
							0
						],
						[
							-76.25030527422857,
							42.31408247803398,
							0
						],
						[
							-76.25027527422371,
							42.31414847804744,
							0
						],
						[
							-76.25024227422328,
							42.31428847807478,
							0
						],
						[
							-76.2502072742196,
							42.31439247809551,
							0
						],
						[
							-76.25020327422078,
							42.31442647810199,
							0
						],
						[
							-76.25017927421538,
							42.3144584781089,
							0
						],
						[
							-76.25016927421726,
							42.31452847812229,
							0
						],
						[
							-76.25014827421286,
							42.31456047812909,
							0
						],
						[
							-76.25013627421153,
							42.31459547813608,
							0
						],
						[
							-76.25013127421248,
							42.31463047814278,
							0
						],
						[
							-76.2500952742057,
							42.31469647815648,
							0
						],
						[
							-76.25004527419401,
							42.31475647816965,
							0
						],
						[
							-76.25001227418531,
							42.31478247817578,
							0
						],
						[
							-76.24995927417258,
							42.31484147818886,
							0
						],
						[
							-76.2498602741464,
							42.31491847820713,
							0
						],
						[
							-76.24974827411546,
							42.31498747822445,
							0
						],
						[
							-76.24961127407374,
							42.31501847823569,
							0
						],
						[
							-76.24956827406126,
							42.31503647824074,
							0
						],
						[
							-76.24953027405066,
							42.31505847824634,
							0
						],
						[
							-76.24945027403443,
							42.31518847827371,
							0
						],
						[
							-76.24940727402803,
							42.31529047829438,
							0
						],
						[
							-76.2493892740324,
							42.31543047832111,
							0
						],
						[
							-76.24936227403134,
							42.31553547834172,
							0
						],
						[
							-76.2493622740367,
							42.31560947835546,
							0
						],
						[
							-76.24936127404393,
							42.31571347837483,
							0
						],
						[
							-76.24936627404817,
							42.31574947838133,
							0
						],
						[
							-76.2494062740657,
							42.3158144783918,
							0
						],
						[
							-76.24946827408952,
							42.31586847839935,
							0
						],
						[
							-76.24951127410463,
							42.31588647840099,
							0
						],
						[
							-76.24960327413567,
							42.31590747840122,
							0
						],
						[
							-76.24968727416531,
							42.31594447840473,
							0
						],
						[
							-76.2497252741791,
							42.31596647840731,
							0
						],
						[
							-76.24975727419132,
							42.31599347841105,
							0
						],
						[
							-76.24983127422173,
							42.31608547842519,
							0
						],
						[
							-76.24990727425556,
							42.31621547844632,
							0
						],
						[
							-76.24991827426165,
							42.31625047845237,
							0
						],
						[
							-76.24994927427652,
							42.31631847846379,
							0
						],
						[
							-76.24997027428552,
							42.31634947846871,
							0
						],
						[
							-76.2500142743097,
							42.31648847849278,
							0
						],
						[
							-76.25003727432725,
							42.31662847851788,
							0
						],
						[
							-76.25003827432762,
							42.31662947851802,
							0
						],
						[
							-76.25005827433776,
							42.31668047852671,
							0
						],
						[
							-76.25006927434643,
							42.31675147853945,
							0
						],
						[
							-76.25006727435087,
							42.31682147855254,
							0
						],
						[
							-76.25009427436737,
							42.31692947857155,
							0
						],
						[
							-76.25011027437736,
							42.31699647858335,
							0
						],
						[
							-76.25016927440325,
							42.31709247859885,
							0
						],
						[
							-76.25023727443198,
							42.31718747861378,
							0
						],
						[
							-76.25026727444354,
							42.3172144786176,
							0
						],
						[
							-76.25040227449763,
							42.31736247863971,
							0
						],
						[
							-76.25046627452505,
							42.31745747865481,
							0
						],
						[
							-76.25055527456544,
							42.31762047868156,
							0
						],
						[
							-76.25055727456869,
							42.31765647868816,
							0
						],
						[
							-76.25057727457744,
							42.31768847869331,
							0
						],
						[
							-76.25058027458093,
							42.31772347869969,
							0
						],
						[
							-76.25059927458942,
							42.31775647870506,
							0
						],
						[
							-76.25064927461788,
							42.31792747873485,
							0
						],
						[
							-76.25065327462177,
							42.31796347874138,
							0
						],
						[
							-76.25068027463529,
							42.31803047875275,
							0
						],
						[
							-76.2507202746582,
							42.31816947877699,
							0
						],
						[
							-76.25076427468758,
							42.31837947881425,
							0
						],
						[
							-76.25077327469815,
							42.31848547883359,
							0
						],
						[
							-76.25078427470677,
							42.31855547884617,
							0
						],
						[
							-76.25078427470937,
							42.31859147885286,
							0
						],
						[
							-76.25073927471024,
							42.31880247889387,
							0
						],
						[
							-76.25074027471317,
							42.31883847890052,
							0
						],
						[
							-76.25074727471795,
							42.31887347890674,
							0
						],
						[
							-76.25073727472251,
							42.31898047892702,
							0
						],
						[
							-76.25073627472995,
							42.31908747894696,
							0
						],
						[
							-76.25075627474408,
							42.31919347896585,
							0
						],
						[
							-76.25078927476223,
							42.31929747898388,
							0
						],
						[
							-76.25082227477438,
							42.31931947898664,
							0
						],
						[
							-76.2509152748059,
							42.3193424789872,
							0
						],
						[
							-76.25095627482035,
							42.31936047898889,
							0
						],
						[
							-76.2510262748464,
							42.31940947899521,
							0
						],
						[
							-76.251067274861,
							42.31942947899729,
							0
						],
						[
							-76.25108927487123,
							42.31947347900459,
							0
						],
						[
							-76.25108927487676,
							42.31954947901871,
							0
						],
						[
							-76.25108227487894,
							42.31961047903033,
							0
						],
						[
							-76.2510522748709,
							42.3196324790356,
							0
						],
						[
							-76.25103027486821,
							42.31969247904764,
							0
						],
						[
							-76.25100827486273,
							42.31971447905261,
							0
						],
						[
							-76.25099327486032,
							42.31974747905934,
							0
						],
						[
							-76.25092627484442,
							42.31982447907632,
							0
						],
						[
							-76.25085227482582,
							42.31989547909248,
							0
						],
						[
							-76.25084527482639,
							42.31993447910001,
							0
						],
						[
							-76.25077827480926,
							42.31999447911385,
							0
						],
						[
							-76.25077127480975,
							42.32003247912117,
							0
						],
						[
							-76.25068927479063,
							42.32013147914284,
							0
						],
						[
							-76.2506672747848,
							42.32014847914689,
							0
						],
						[
							-76.25065227478274,
							42.32018647915455,
							0
						],
						[
							-76.25048227474248,
							42.32038347919795,
							0
						],
						[
							-76.25035627470967,
							42.3204884792225,
							0
						],
						[
							-76.25034127470761,
							42.32052647923018,
							0
						],
						[
							-76.25023027467996,
							42.32063647925504,
							0
						],
						[
							-76.25022327468012,
							42.32066947926145,
							0
						],
						[
							-76.25015627466342,
							42.3207354792764,
							0
						],
						[
							-76.25008227464642,
							42.32082847929663,
							0
						],
						[
							-76.25004527463693,
							42.32086147930426,
							0
						],
						[
							-76.25003027463487,
							42.32089947931191,
							0
						],
						[
							-76.24998627462475,
							42.32095447932389,
							0
						],
						[
							-76.24995627462427,
							42.32108047934851,
							0
						],
						[
							-76.24991227461457,
							42.32114147936159,
							0
						],
						[
							-76.24988227461887,
							42.32133347939847,
							0
						],
						[
							-76.2498732746199,
							42.32138747940888,
							0
						],
						[
							-76.24986727462081,
							42.32142647941638,
							0
						],
						[
							-76.24988227463555,
							42.3215634794412,
							0
						],
						[
							-76.24988227463838,
							42.32160247944845,
							0
						],
						[
							-76.24990427464661,
							42.32161847945056,
							0
						],
						[
							-76.24991127465366,
							42.32168447946253,
							0
						],
						[
							-76.24994127466452,
							42.3217014794645,
							0
						],
						[
							-76.24995227467703,
							42.32182547948711,
							0
						],
						[
							-76.24996327469029,
							42.32195947951156,
							0
						],
						[
							-76.2500142747174,
							42.32210747953703,
							0
						],
						[
							-76.25002227472511,
							42.3221784795499,
							0
						],
						[
							-76.25004427473536,
							42.3222224795572,
							0
						],
						[
							-76.25005827474351,
							42.32227247956592,
							0
						],
						[
							-76.25005827474546,
							42.32229947957097,
							0
						],
						[
							-76.25008127475407,
							42.32231647957319,
							0
						],
						[
							-76.25009527476051,
							42.32234347957765,
							0
						],
						[
							-76.25011727476955,
							42.32237047958179,
							0
						],
						[
							-76.2501402747809,
							42.32242547959109,
							0
						],
						[
							-76.2502872748381,
							42.32256347961086,
							0
						],
						[
							-76.25084927504915,
							42.322986479667,
							0
						],
						[
							-76.25097527509838,
							42.32310747968446,
							0
						],
						[
							-76.25101227511657,
							42.32319447969915,
							0
						],
						[
							-76.25101927512642,
							42.32329947971837,
							0
						],
						[
							-76.25098227511934,
							42.3233654797321,
							0
						],
						[
							-76.25096027511344,
							42.32338147973596,
							0
						],
						[
							-76.25093027510782,
							42.32343647974739,
							0
						],
						[
							-76.2509082751019,
							42.32345247975123,
							0
						],
						[
							-76.2508932751003,
							42.32349647976001,
							0
						],
						[
							-76.25085627509,
							42.32351847976558,
							0
						],
						[
							-76.25084127509514,
							42.32365547979164,
							0
						],
						[
							-76.25085627510315,
							42.32369947979922,
							0
						],
						[
							-76.25089327511901,
							42.32375447980795,
							0
						],
						[
							-76.25097427515261,
							42.32385947982421,
							0
						],
						[
							-76.25101127516886,
							42.32391947983388,
							0
						],
						[
							-76.25121127524778,
							42.32412247986363,
							0
						],
						[
							-76.25123327525883,
							42.32417747987297,
							0
						],
						[
							-76.25125527526713,
							42.32419447987525,
							0
						],
						[
							-76.25128527528192,
							42.32426547988724,
							0
						],
						[
							-76.25132127532052,
							42.32463847995512,
							0
						],
						[
							-76.25136527535382,
							42.32490248000242,
							0
						],
						[
							-76.25135827535672,
							42.32497348001589,
							0
						],
						[
							-76.25131327534903,
							42.32506648003496,
							0
						],
						[
							-76.25128427534096,
							42.32508348003926,
							0
						],
						[
							-76.25127627534116,
							42.32512148004665,
							0
						],
						[
							-76.25117327531608,
							42.32523148007124,
							0
						],
						[
							-76.25112127530852,
							42.3253574800967,
							0
						],
						[
							-76.25109827530237,
							42.32537448010078,
							0
						],
						[
							-76.25107627530961,
							42.32557148013827,
							0
						],
						[
							-76.25108327532145,
							42.3257034801625,
							0
						],
						[
							-76.25106127531919,
							42.32576948017566,
							0
						],
						[
							-76.25100927530649,
							42.32582448018795,
							0
						],
						[
							-76.25098027530038,
							42.32586848019727,
							0
						],
						[
							-76.25094327529126,
							42.32590648020583,
							0
						],
						[
							-76.25093527529108,
							42.32593948021228,
							0
						],
						[
							-76.25089827528284,
							42.32598948022304,
							0
						],
						[
							-76.25086127527611,
							42.32606048023772,
							0
						],
						[
							-76.2508462752793,
							42.32617048025875,
							0
						],
						[
							-76.25081727527196,
							42.32619748026493,
							0
						],
						[
							-76.25079527527201,
							42.32629548028404,
							0
						],
						[
							-76.25079427527167,
							42.32629548028408,
							0
						],
						[
							-76.25077227527268,
							42.32640648030557,
							0
						],
						[
							-76.2507352752624,
							42.32642848031114,
							0
						],
						[
							-76.2507202752599,
							42.32646048031769,
							0
						],
						[
							-76.25065427524352,
							42.32652648033257,
							0
						],
						[
							-76.25064627524333,
							42.32655948033904,
							0
						],
						[
							-76.25050527520767,
							42.3266914803692,
							0
						],
						[
							-76.2500912750899,
							42.32689948042438,
							0
						],
						[
							-76.24997327505727,
							42.32697148044248,
							0
						],
						[
							-76.24993627504735,
							42.32699848044897,
							0
						],
						[
							-76.24980227501351,
							42.32712448047775,
							0
						],
						[
							-76.24976527500641,
							42.32719048049148,
							0
						],
						[
							-76.2497652750075,
							42.32720548049427,
							0
						],
						[
							-76.24975927502119,
							42.32742048053446,
							0
						],
						[
							-76.24975927502147,
							42.32742448053521,
							0
						],
						[
							-76.24975727502496,
							42.32748148054586,
							0
						],
						[
							-76.249898275079,
							42.32760248056272,
							0
						],
						[
							-76.24993527509683,
							42.32768448057648,
							0
						],
						[
							-76.24996427510976,
							42.3277344805846,
							0
						],
						[
							-76.24996427511331,
							42.32778348059372,
							0
						],
						[
							-76.24999427512454,
							42.3278054805966,
							0
						],
						[
							-76.24994227512934,
							42.32810148065368,
							0
						],
						[
							-76.24992727512576,
							42.32811848065743,
							0
						],
						[
							-76.24989027511985,
							42.32820048067414,
							0
						],
						[
							-76.24982727510326,
							42.32825048068595,
							0
						],
						[
							-76.24982727510333,
							42.32825148068614,
							0
						],
						[
							-76.24982627510299,
							42.32825148068619,
							0
						],
						[
							-76.24978427509213,
							42.32828748069454,
							0
						],
						[
							-76.24974927508293,
							42.32831548070114,
							0
						],
						[
							-76.24965327505372,
							42.32833748070908,
							0
						],
						[
							-76.24960827503956,
							42.32834148071162,
							0
						],
						[
							-76.24953427501866,
							42.32838048072181,
							0
						],
						[
							-76.24943127498639,
							42.32839148072798,
							0
						],
						[
							-76.24924627492977,
							42.32842948074244,
							0
						],
						[
							-76.24905427487019,
							42.32845748075531,
							0
						],
						[
							-76.2485882747282,
							42.32856148079326,
							0
						],
						[
							-76.24840327467042,
							42.32858348080475,
							0
						],
						[
							-76.2481072745771,
							42.32860648082084,
							0
						],
						[
							-76.24787027450341,
							42.32863948083645,
							0
						],
						[
							-76.24762627442992,
							42.32870548085847,
							0
						],
						[
							-76.24756027441069,
							42.32873248086614,
							0
						],
						[
							-76.24751527439668,
							42.32873848086904,
							0
						],
						[
							-76.24748627438896,
							42.32876048087429,
							0
						],
						[
							-76.24742627437006,
							42.32876548087761,
							0
						],
						[
							-76.24737527435573,
							42.32879348088483,
							0
						],
						[
							-76.24733027434208,
							42.32880448088869,
							0
						],
						[
							-76.24716827429603,
							42.3288864809104,
							0
						],
						[
							-76.24713127428613,
							42.32891348091689,
							0
						],
						[
							-76.24709427427744,
							42.32895748092656,
							0
						],
						[
							-76.24699827425383,
							42.32905648094877,
							0
						],
						[
							-76.2469682742482,
							42.32911148096019,
							0
						],
						[
							-76.24696827425895,
							42.32925948098769,
							0
						],
						[
							-76.24699827426979,
							42.32927648098965,
							0
						],
						[
							-76.24700527428003,
							42.32938648100981,
							0
						],
						[
							-76.24703527429126,
							42.32940848101271,
							0
						],
						[
							-76.24704227429983,
							42.32949548102859,
							0
						],
						[
							-76.24707227431068,
							42.32951248103054,
							0
						],
						[
							-76.24707227431423,
							42.32956148103965,
							0
						],
						[
							-76.2471092743341,
							42.32967148105862,
							0
						],
						[
							-76.24711727434783,
							42.3298254810869,
							0
						],
						[
							-76.24710227435732,
							42.3300224811241,
							0
						],
						[
							-76.24711027436274,
							42.33006148113103,
							0
						],
						[
							-76.24702127435928,
							42.33040748119888,
							0
						],
						[
							-76.24699927435461,
							42.33044048120588,
							0
						],
						[
							-76.24699927435701,
							42.330473481212,
							0
						],
						[
							-76.2469692743505,
							42.33051648122119,
							0
						],
						[
							-76.24694727435028,
							42.33061048123954,
							0
						],
						[
							-76.24689227433907,
							42.33069948125828,
							0
						],
						[
							-76.24687427433454,
							42.33071648126216,
							0
						],
						[
							-76.24687127433486,
							42.33073448126562,
							0
						],
						[
							-76.2468592743324,
							42.33075348126963,
							0
						],
						[
							-76.2467772743172,
							42.33090648130132,
							0
						],
						[
							-76.24674127431682,
							42.33106048133137,
							0
						],
						[
							-76.24674127431965,
							42.33109948133862,
							0
						],
						[
							-76.24670427431293,
							42.33117048135329,
							0
						],
						[
							-76.24670427431569,
							42.33120848136036,
							0
						],
						[
							-76.24666727430665,
							42.33124748136908,
							0
						],
						[
							-76.24659327429008,
							42.33134648139043,
							0
						],
						[
							-76.24657827428766,
							42.33137948139715,
							0
						],
						[
							-76.2465562742822,
							42.33140148140214,
							0
						],
						[
							-76.24654127428015,
							42.33143948140978,
							0
						],
						[
							-76.24649027427053,
							42.33153248142909,
							0
						],
						[
							-76.24646727426757,
							42.33159348144135,
							0
						],
						[
							-76.24644527426211,
							42.33161548144633,
							0
						],
						[
							-76.2464162742568,
							42.33167048145771,
							0
						],
						[
							-76.24637127424671,
							42.33173048147064,
							0
						],
						[
							-76.24635727424497,
							42.33176848147825,
							0
						],
						[
							-76.24633427423883,
							42.33178548148234,
							0
						],
						[
							-76.24632027423709,
							42.33182348148998,
							0
						],
						[
							-76.24623127421775,
							42.33195048151712,
							0
						],
						[
							-76.24619427420862,
							42.33198848152567,
							0
						],
						[
							-76.24618727420842,
							42.33201648153114,
							0
						],
						[
							-76.24608327418417,
							42.3321424815587,
							0
						],
						[
							-76.24607627418594,
							42.33219748156919,
							0
						],
						[
							-76.24600927416921,
							42.33226348158414,
							0
						],
						[
							-76.2459722741617,
							42.33232348159677,
							0
						],
						[
							-76.24597227416766,
							42.33240548161199,
							0
						],
						[
							-76.24598727417566,
							42.33244948161957,
							0
						],
						[
							-76.24604727419971,
							42.33251548162944,
							0
						],
						[
							-76.2460472742037,
							42.33257048163965,
							0
						],
						[
							-76.2460842742204,
							42.33263648165043,
							0
						],
						[
							-76.24608427422234,
							42.33266348165544,
							0
						],
						[
							-76.24611327423288,
							42.33268048165744,
							0
						],
						[
							-76.24612127424024,
							42.33274648166939,
							0
						],
						[
							-76.2461142742491,
							42.33289948169809,
							0
						],
						[
							-76.24613627426058,
							42.33296048170854,
							0
						],
						[
							-76.24619527428307,
							42.33300948171527,
							0
						],
						[
							-76.24626227430699,
							42.33304248171876,
							0
						],
						[
							-76.2463582743394,
							42.33306448171899,
							0
						],
						[
							-76.24642427435955,
							42.33305048171376,
							0
						],
						[
							-76.2464732743755,
							42.33305348171236,
							0
						],
						[
							-76.24651827439075,
							42.33306448171259,
							0
						],
						[
							-76.24672927446485,
							42.33315248172051,
							0
						],
						[
							-76.2468832745206,
							42.33323948173052,
							0
						],
						[
							-76.24693927454278,
							42.33329748173907,
							0
						],
						[
							-76.24695727455095,
							42.33333048174446,
							0
						],
						[
							-76.24709427463027,
							42.33381748182946,
							0
						],
						[
							-76.2472542747162,
							42.33429348191151,
							0
						],
						[
							-76.24726627472273,
							42.3343304819179,
							0
						],
						[
							-76.24729227473668,
							42.33440748193116,
							0
						],
						[
							-76.2472812747383,
							42.33447848194478,
							0
						],
						[
							-76.24727427474375,
							42.33458448196476,
							0
						],
						[
							-76.24726627474371,
							42.33461948197158,
							0
						],
						[
							-76.2472422747382,
							42.33464948197811,
							0
						],
						[
							-76.24709927470262,
							42.33479148201021,
							0
						],
						[
							-76.24697427467027,
							42.33489848203508,
							0
						],
						[
							-76.24684327463898,
							42.3350464820678,
							0
						],
						[
							-76.2468372746395,
							42.33508048207438,
							0
						],
						[
							-76.24681427463445,
							42.33511248208122,
							0
						],
						[
							-76.24678027462535,
							42.33513748208723,
							0
						],
						[
							-76.24677527462627,
							42.33517248209395,
							0
						],
						[
							-76.24674227461766,
							42.33519948210029,
							0
						],
						[
							-76.24667027460116,
							42.33529048212007,
							0
						],
						[
							-76.24661027458582,
							42.33534448213248,
							0
						],
						[
							-76.24654227456762,
							42.3353944821445,
							0
						],
						[
							-76.24646027454405,
							42.33543248215483,
							0
						],
						[
							-76.2464132745297,
							42.33544248215856,
							0
						],
						[
							-76.24631727449903,
							42.33544448216276,
							0
						],
						[
							-76.2462722744838,
							42.33543348216254,
							0
						],
						[
							-76.24614627443937,
							42.33537848215735,
							0
						],
						[
							-76.24609927442441,
							42.3353804821596,
							0
						],
						[
							-76.24600527439542,
							42.33539648216632,
							0
						],
						[
							-76.24591627436895,
							42.33542548217527,
							0
						],
						[
							-76.24584727435015,
							42.33547148218658,
							0
						],
						[
							-76.24581727434249,
							42.33549848219278,
							0
						],
						[
							-76.2458112743431,
							42.33553348219952,
							0
						],
						[
							-76.2457842743366,
							42.33556348220619,
							0
						],
						[
							-76.24576727433353,
							42.33559648221301,
							0
						],
						[
							-76.24575027433303,
							42.3356644822263,
							0
						],
						[
							-76.2457462743393,
							42.33576848224578,
							0
						],
						[
							-76.24577327436053,
							42.33594148227684,
							0
						],
						[
							-76.24578927437598,
							42.33608348230258,
							0
						],
						[
							-76.24576727437646,
							42.33618748232278,
							0
						],
						[
							-76.2457102743623,
							42.33624448233564,
							0
						],
						[
							-76.24567527435288,
							42.33626948234169,
							0
						],
						[
							-76.24564627434563,
							42.33629748234805,
							0
						],
						[
							-76.24559727433417,
							42.33635648236096,
							0
						],
						[
							-76.24558127433143,
							42.33638948236774,
							0
						],
						[
							-76.24557727433269,
							42.3364244823744,
							0
						],
						[
							-76.24559127434225,
							42.33649448238685,
							0
						],
						[
							-76.24568327437758,
							42.33657448239803,
							0
						],
						[
							-76.24593327446524,
							42.33667648240699,
							0
						],
						[
							-76.24597927448045,
							42.33668248240625,
							0
						],
						[
							-76.24602427449584,
							42.33669548240687,
							0
						],
						[
							-76.24610627452486,
							42.33673248241045,
							0
						],
						[
							-76.24620527456214,
							42.33680848242064,
							0
						],
						[
							-76.24621827456878,
							42.33684248242642,
							0
						],
						[
							-76.24621327457234,
							42.33691348243982,
							0
						],
						[
							-76.24617927456883,
							42.33701548246013,
							0
						],
						[
							-76.2461392745607,
							42.3370804824738,
							0
						],
						[
							-76.24613427456173,
							42.33711648248069,
							0
						],
						[
							-76.24609227455107,
							42.33715548248961,
							0
						],
						[
							-76.24607327454737,
							42.33718848249649,
							0
						],
						[
							-76.24595527451712,
							42.33729348252072,
							0
						],
						[
							-76.24586327449616,
							42.33741148254631,
							0
						],
						[
							-76.24583027448747,
							42.33743748255246,
							0
						],
						[
							-76.24577727447735,
							42.33753248257222,
							0
						],
						[
							-76.24571727446774,
							42.33766548259934,
							0
						],
						[
							-76.24570627446916,
							42.33773348261241,
							0
						],
						[
							-76.24568027446306,
							42.33776448261919,
							0
						],
						[
							-76.24567327446329,
							42.3377984826258,
							0
						],
						[
							-76.24560127444664,
							42.33788748264522,
							0
						],
						[
							-76.24556827443793,
							42.33791348265135,
							0
						],
						[
							-76.24551927442641,
							42.33797148266409,
							0
						],
						[
							-76.24547527441962,
							42.33807248268461,
							0
						],
						[
							-76.24546627441921,
							42.33810648269128,
							0
						],
						[
							-76.24546627442416,
							42.33817448270391,
							0
						],
						[
							-76.24547827443287,
							42.33824148271587,
							0
						],
						[
							-76.24552127445132,
							42.33830548272606,
							0
						],
						[
							-76.24555127446276,
							42.3383304827295,
							0
						],
						[
							-76.24562727449346,
							42.33841748274263,
							0
						],
						[
							-76.24569927451985,
							42.33846248274808,
							0
						],
						[
							-76.24574027453433,
							42.33848048274979,
							0
						],
						[
							-76.24580727455916,
							42.33852648275566,
							0
						],
						[
							-76.24587227458372,
							42.33857748276255,
							0
						],
						[
							-76.24595727461733,
							42.33866448277531,
							0
						],
						[
							-76.2459692746235,
							42.33869648278076,
							0
						],
						[
							-76.2459842746358,
							42.33879948279931,
							0
						],
						[
							-76.24597827463889,
							42.33886848281235,
							0
						],
						[
							-76.24597027463885,
							42.33890348281919,
							0
						],
						[
							-76.24597327464738,
							42.3390074828384,
							0
						],
						[
							-76.24600927467112,
							42.33917548286814,
							0
						],
						[
							-76.2460062746728,
							42.33921148287494,
							0
						],
						[
							-76.24601327467997,
							42.33927948288731,
							0
						],
						[
							-76.24604827469598,
							42.33934548289817,
							0
						],
						[
							-76.24608227471956,
							42.33951948292911,
							0
						],
						[
							-76.24613627474669,
							42.33965448295202,
							0
						],
						[
							-76.24612727476958,
							42.34000948301834,
							0
						],
						[
							-76.24611827476924,
							42.3400444830252,
							0
						],
						[
							-76.24607527476276,
							42.34014548304568,
							0
						],
						[
							-76.24606627476241,
							42.34018048305255,
							0
						],
						[
							-76.2460032747491,
							42.3402754830727,
							0
						],
						[
							-76.24597727474294,
							42.34030548307931,
							0
						],
						[
							-76.24594027473579,
							42.34037048309287,
							0
						],
						[
							-76.24586727471896,
							42.34046148311268,
							0
						],
						[
							-76.2457562746916,
							42.34057548313831,
							0
						],
						[
							-76.24560627465624,
							42.34075148317699,
							0
						],
						[
							-76.24556427464698,
							42.34080948318943,
							0
						],
						[
							-76.24547427463261,
							42.34100948323018,
							0
						],
						[
							-76.24545427463107,
							42.34107648324342,
							0
						],
						[
							-76.24543427463206,
							42.34117848326316,
							0
						],
						[
							-76.24543927464121,
							42.34128248328229,
							0
						],
						[
							-76.24543427464215,
							42.341317483289,
							0
						],
						[
							-76.24543927464869,
							42.34138548330143,
							0
						],
						[
							-76.24550127468856,
							42.34166048335002,
							0
						],
						[
							-76.24551527469555,
							42.34169448335577,
							0
						],
						[
							-76.24551527470034,
							42.34176048336804,
							0
						],
						[
							-76.24549327470126,
							42.34187048338935,
							0
						],
						[
							-76.24538227467436,
							42.34199048341608,
							0
						],
						[
							-76.24534527466247,
							42.34199048341755,
							0
						],
						[
							-76.24532327465663,
							42.3420074834216,
							0
						],
						[
							-76.24528027464515,
							42.34203948342925,
							0
						],
						[
							-76.2452412746341,
							42.34205948343453,
							0
						],
						[
							-76.24505627457762,
							42.34209948344935,
							0
						],
						[
							-76.24501827456686,
							42.34211948345458,
							0
						],
						[
							-76.24488527452723,
							42.34216148346769,
							0
						],
						[
							-76.24483827451252,
							42.3421664834705,
							0
						],
						[
							-76.24474827448536,
							42.34219048347858,
							0
						],
						[
							-76.24471027447471,
							42.34221148348397,
							0
						],
						[
							-76.24462427444898,
							42.34223748349226,
							0
						],
						[
							-76.24457627443417,
							42.34224548349566,
							0
						],
						[
							-76.24453327442136,
							42.34225948349998,
							0
						],
						[
							-76.24449627441102,
							42.34228048350536,
							0
						],
						[
							-76.24432627436123,
							42.34234648352442,
							0
						],
						[
							-76.24428027434736,
							42.34235848352846,
							0
						],
						[
							-76.24425427433975,
							42.34236848353137,
							0
						],
						[
							-76.24419627432279,
							42.34239148353797,
							0
						],
						[
							-76.2440452742805,
							42.34247648355979,
							0
						],
						[
							-76.24396827425848,
							42.34251348356973,
							0
						],
						[
							-76.24389727423895,
							42.34255848358093,
							0
						],
						[
							-76.2436962741851,
							42.34270548361627,
							0
						],
						[
							-76.24368127418225,
							42.34273248362188,
							0
						],
						[
							-76.24364427417356,
							42.34277648363154,
							0
						],
						[
							-76.24360027416947,
							42.34291448365894,
							0
						],
						[
							-76.24360027417259,
							42.34295748366692,
							0
						],
						[
							-76.24358927418103,
							42.343122483698,
							0
						],
						[
							-76.24360827418948,
							42.34315448370318,
							0
						],
						[
							-76.24361127419306,
							42.34319048370976,
							0
						],
						[
							-76.24359727419103,
							42.34322448371664,
							0
						],
						[
							-76.24360327419805,
							42.34329448372937,
							0
						],
						[
							-76.24359427419769,
							42.34332948373624,
							0
						],
						[
							-76.24355227419147,
							42.34342948375651,
							0
						],
						[
							-76.24349027417854,
							42.34352548377682,
							0
						],
						[
							-76.24331627413781,
							42.34373348382239,
							0
						],
						[
							-76.24322227411322,
							42.34381048384045,
							0
						],
						[
							-76.24321027411176,
							42.34384348384705,
							0
						],
						[
							-76.24318027410396,
							42.34386848385292,
							0
						],
						[
							-76.24315227409991,
							42.34393648386664,
							0
						],
						[
							-76.24310427408884,
							42.34399648387972,
							0
						],
						[
							-76.2430872740858,
							42.34402948388652,
							0
						],
						[
							-76.2430812740864,
							42.34406448389326,
							0
						],
						[
							-76.24305627408333,
							42.34413248390689,
							0
						],
						[
							-76.2430392740802,
							42.34416448391352,
							0
						],
						[
							-76.24299527407871,
							42.3443384839476,
							0
						],
						[
							-76.24296827408001,
							42.34447548397412,
							0
						],
						[
							-76.24295427408074,
							42.34454748398805,
							0
						],
						[
							-76.24294727408356,
							42.34461748400133,
							0
						],
						[
							-76.24290527407743,
							42.34471848402177,
							0
						],
						[
							-76.24285427406541,
							42.34477848403495,
							0
						],
						[
							-76.24281427405397,
							42.34479748404007,
							0
						],
						[
							-76.24267727401273,
							42.3448354840526,
							0
						],
						[
							-76.24264027400166,
							42.34484648405613,
							0
						],
						[
							-76.24260327399102,
							42.34486348406077,
							0
						],
						[
							-76.24249927396244,
							42.34492948407718,
							0
						],
						[
							-76.24246227395375,
							42.34497348408683,
							0
						],
						[
							-76.2424332739496,
							42.34504448410118,
							0
						],
						[
							-76.24241827395313,
							42.34515948412314,
							0
						],
						[
							-76.24239127394877,
							42.34521848413517,
							0
						],
						[
							-76.24239427395226,
							42.34525348414155,
							0
						],
						[
							-76.24236827395112,
							42.345352484161,
							0
						],
						[
							-76.24230127393636,
							42.34544548418092,
							0
						],
						[
							-76.24222127391685,
							42.34553048419991,
							0
						],
						[
							-76.24213627389501,
							42.34560548421724,
							0
						],
						[
							-76.2420362738693,
							42.34569348423759,
							0
						],
						[
							-76.24193727384298,
							42.34576848425547,
							0
						],
						[
							-76.2419082738357,
							42.34579648426183,
							0
						],
						[
							-76.24181227381288,
							42.3459064842861,
							0
						],
						[
							-76.24176027379939,
							42.34595048429636,
							0
						],
						[
							-76.2416422737735,
							42.34611548433171,
							0
						],
						[
							-76.24161227376786,
							42.34617048434313,
							0
						],
						[
							-76.24157527376398,
							42.34628048436503,
							0
						],
						[
							-76.2415752737687,
							42.3463454843771,
							0
						],
						[
							-76.2416272737878,
							42.34637848438115,
							0
						],
						[
							-76.2416502737972,
							42.34640648438543,
							0
						],
						[
							-76.24175327383557,
							42.34647948439487,
							0
						],
						[
							-76.24176627384215,
							42.34651248440048,
							0
						],
						[
							-76.24175527384094,
							42.34654448440686,
							0
						],
						[
							-76.24176727384724,
							42.34657848441271,
							0
						],
						[
							-76.24174827384356,
							42.34661148441957,
							0
						],
						[
							-76.24167027382484,
							42.34669848443886,
							0
						],
						[
							-76.24148627377762,
							42.34686148447649,
							0
						],
						[
							-76.24144727376664,
							42.34688248448193,
							0
						],
						[
							-76.24136627374315,
							42.34691748449168,
							0
						],
						[
							-76.24127227371335,
							42.34692248449638,
							0
						],
						[
							-76.24109027365384,
							42.34690748450086,
							0
						],
						[
							-76.2410222736302,
							42.34688248449893,
							0
						],
						[
							-76.24095627361105,
							42.34691048450678,
							0
						],
						[
							-76.24091027359692,
							42.34691948451029,
							0
						],
						[
							-76.24086427358216,
							42.34691948451211,
							0
						],
						[
							-76.24081827356812,
							42.34692948451581,
							0
						],
						[
							-76.24078027355752,
							42.34695148452142,
							0
						],
						[
							-76.24069727353336,
							42.34698548453106,
							0
						],
						[
							-76.24065127351945,
							42.34699748453514,
							0
						],
						[
							-76.240611273508,
							42.34701648454026,
							0
						],
						[
							-76.24050727347985,
							42.34708848455778,
							0
						],
						[
							-76.24048027347322,
							42.34711648456405,
							0
						],
						[
							-76.24041127345443,
							42.34716248457536,
							0
						],
						[
							-76.2403472734377,
							42.34721548458777,
							0
						],
						[
							-76.24032027343117,
							42.34724448459421,
							0
						],
						[
							-76.24030527342866,
							42.34727648460076,
							0
						],
						[
							-76.24030727343175,
							42.34731048460701,
							0
						],
						[
							-76.24033127344865,
							42.34743648462944,
							0
						],
						[
							-76.24033327345022,
							42.34744948463177,
							0
						],
						[
							-76.24034827345905,
							42.3475044846414,
							0
						],
						[
							-76.2403852734757,
							42.34757048465217,
							0
						],
						[
							-76.24040727348873,
							42.34765248466652,
							0
						],
						[
							-76.24042227350196,
							42.34776848468746,
							0
						],
						[
							-76.24039127349369,
							42.34779148469298,
							0
						],
						[
							-76.24037627349121,
							42.34782348469952,
							0
						],
						[
							-76.24021827345864,
							42.34807348475227,
							0
						],
						[
							-76.24018627345026,
							42.34809948475836,
							0
						],
						[
							-76.2401362734414,
							42.34819848477876,
							0
						],
						[
							-76.24010727343412,
							42.3482264847851,
							0
						],
						[
							-76.24001427341582,
							42.34838548481837,
							0
						],
						[
							-76.24001927341989,
							42.34841948482446,
							0
						],
						[
							-76.24000027341604,
							42.34845048483098,
							0
						],
						[
							-76.23998827341714,
							42.3485184848441,
							0
						],
						[
							-76.23998727341943,
							42.34855448485082,
							0
						],
						[
							-76.23996827341564,
							42.34858648485752,
							0
						],
						[
							-76.23996927342607,
							42.3487254848833,
							0
						],
						[
							-76.23999127344331,
							42.34886548490841,
							0
						],
						[
							-76.24001027345182,
							42.34889848491378,
							0
						],
						[
							-76.24002027346243,
							42.34900048493233,
							0
						],
						[
							-76.24001027346685,
							42.34910548495223,
							0
						],
						[
							-76.23998227346273,
							42.34917248496578,
							0
						],
						[
							-76.23981427341353,
							42.34923748498456,
							0
						],
						[
							-76.23978427340585,
							42.34926448499078,
							0
						],
						[
							-76.23976627340718,
							42.34936248500971,
							0
						],
						[
							-76.23976527341122,
							42.34942248502088,
							0
						],
						[
							-76.23981127342913,
							42.34946548502705,
							0
						],
						[
							-76.23984827344835,
							42.34956648504431,
							0
						],
						[
							-76.23985327345197,
							42.34959448504932,
							0
						],
						[
							-76.23985427345288,
							42.34960248505075,
							0
						],
						[
							-76.2398692734624,
							42.34966748506221,
							0
						],
						[
							-76.23986927346444,
							42.34969548506741,
							0
						],
						[
							-76.23983927346397,
							42.34982148509202,
							0
						],
						[
							-76.23980327345723,
							42.34988748510573,
							0
						],
						[
							-76.23965527342088,
							42.35004148514025,
							0
						],
						[
							-76.2396102734084,
							42.35006848514705,
							0
						],
						[
							-76.23960327340637,
							42.35007148514789,
							0
						],
						[
							-76.2395152733806,
							42.35010548515771,
							0
						],
						[
							-76.23944527336009,
							42.35013248516553,
							0
						],
						[
							-76.23941027334945,
							42.35014048516839,
							0
						],
						[
							-76.23932927332699,
							42.35018948518076,
							0
						],
						[
							-76.23918127328267,
							42.35023348519484,
							0
						],
						[
							-76.23917427328072,
							42.35023748519586,
							0
						],
						[
							-76.23911027326258,
							42.35027048520454,
							0
						],
						[
							-76.239065273249,
							42.35028248520857,
							0
						],
						[
							-76.23876927316293,
							42.35040548524325,
							0
						],
						[
							-76.23858827311216,
							42.35050648526924,
							0
						],
						[
							-76.23852227309438,
							42.35055348528059,
							0
						],
						[
							-76.23848027308222,
							42.35057148528561,
							0
						],
						[
							-76.23836827305077,
							42.35063348530162,
							0
						],
						[
							-76.2383012730328,
							42.3506824853134,
							0
						],
						[
							-76.23825927302056,
							42.35069948531823,
							0
						],
						[
							-76.23819027300162,
							42.35074348532915,
							0
						],
						[
							-76.23796527293845,
							42.35086848536136,
							0
						],
						[
							-76.23787527291537,
							42.35094848537982,
							0
						],
						[
							-76.23782027290193,
							42.35100648539278,
							0
						],
						[
							-76.23773927288502,
							42.35113148541924,
							0
						],
						[
							-76.23772127288412,
							42.3511984854324,
							0
						],
						[
							-76.23772627288827,
							42.35123348543871,
							0
						],
						[
							-76.23770427288352,
							42.35126548544552,
							0
						],
						[
							-76.237704272886,
							42.35129948545183,
							0
						],
						[
							-76.23771127289079,
							42.35133448545805,
							0
						],
						[
							-76.23769727288862,
							42.35136648546456,
							0
						],
						[
							-76.23770027289211,
							42.35140148547094,
							0
						],
						[
							-76.23772327290699,
							42.35150448548914,
							0
						],
						[
							-76.23772927291385,
							42.35157248550152,
							0
						],
						[
							-76.23777527294088,
							42.35174148553107,
							0
						],
						[
							-76.23781327296044,
							42.3518424855483,
							0
						],
						[
							-76.23785027297632,
							42.35189748555705,
							0
						],
						[
							-76.23788827299447,
							42.35197948557074,
							0
						],
						[
							-76.23791627300542,
							42.35200648557463,
							0
						],
						[
							-76.23792527300954,
							42.35202348557746,
							0
						],
						[
							-76.23796227302462,
							42.35206748558414,
							0
						],
						[
							-76.2379692730289,
							42.35209548558908,
							0
						],
						[
							-76.23799927304049,
							42.35212248559288,
							0
						],
						[
							-76.23799927304252,
							42.35215048559807,
							0
						],
						[
							-76.23803627305716,
							42.35218848560366,
							0
						],
						[
							-76.23814727310597,
							42.35236948563281,
							0
						],
						[
							-76.23816927311418,
							42.35238548563491,
							0
						],
						[
							-76.23819127312603,
							42.35245148564628,
							0
						],
						[
							-76.23821427313581,
							42.3524844856515,
							0
						],
						[
							-76.2382212731401,
							42.35251248565641,
							0
						],
						[
							-76.23824327315073,
							42.35256148566464,
							0
						],
						[
							-76.23831027318583,
							42.35274848569669,
							0
						],
						[
							-76.23836927322067,
							42.35296748573499,
							0
						],
						[
							-76.2384062732449,
							42.35313748576507,
							0
						],
						[
							-76.2384142732551,
							42.35324248578426,
							0
						],
						[
							-76.23846627328975,
							42.35348948582803,
							0
						],
						[
							-76.2384882732992,
							42.35352248583327,
							0
						],
						[
							-76.23851827332517,
							42.35374748587388,
							0
						],
						[
							-76.23854027333341,
							42.35376348587595,
							0
						],
						[
							-76.2385702733546,
							42.35392248590427,
							0
						],
						[
							-76.2386002733714,
							42.35402148592146,
							0
						],
						[
							-76.23863027339543,
							42.35421948595702,
							0
						],
						[
							-76.23865227340366,
							42.35423548595912,
							0
						],
						[
							-76.23866727341648,
							42.35434548597895,
							0
						],
						[
							-76.23868927342515,
							42.35436748598215,
							0
						],
						[
							-76.23870427343752,
							42.35447148600086,
							0
						],
						[
							-76.23871927344436,
							42.35449948600546,
							0
						],
						[
							-76.23877027347903,
							42.35475148605022,
							0
						],
						[
							-76.23877827348997,
							42.35486648607124,
							0
						],
						[
							-76.2387492734835,
							42.35490548607965,
							0
						],
						[
							-76.23877827349601,
							42.35494948608664,
							0
						],
						[
							-76.23877827349665,
							42.35495848608832,
							0
						],
						[
							-76.2387782734968,
							42.3549604860887,
							0
						],
						[
							-76.23878627350693,
							42.3550644861077,
							0
						],
						[
							-76.23874927351382,
							42.35532248615707,
							0
						],
						[
							-76.23871227350789,
							42.35540448617376,
							0
						],
						[
							-76.23867927350572,
							42.35552048619664,
							0
						],
						[
							-76.23866827350494,
							42.35555848620412,
							0
						],
						[
							-76.23864527350075,
							42.35560248621321,
							0
						],
						[
							-76.23863827350056,
							42.3556304862187,
							0
						],
						[
							-76.23861627349706,
							42.35567948622867,
							0
						],
						[
							-76.23858627349578,
							42.35579448625121,
							0
						],
						[
							-76.23857927349718,
							42.35584448626078,
							0
						],
						[
							-76.23855727349249,
							42.3558774862678,
							0
						],
						[
							-76.23856427349831,
							42.35592648627662,
							0
						],
						[
							-76.23856327349797,
							42.35592648627666,
							0
						],
						[
							-76.23856227349847,
							42.35593748627873,
							0
						],
						[
							-76.23856227349876,
							42.35594148627948,
							0
						],
						[
							-76.23856127349843,
							42.35594148627951,
							0
						],
						[
							-76.2385422735084,
							42.35616248632132,
							0
						],
						[
							-76.23852827352185,
							42.35640948636773,
							0
						],
						[
							-76.23855727354714,
							42.35662948640743,
							0
						],
						[
							-76.23858427356099,
							42.35670048641952,
							0
						],
						[
							-76.23859527356649,
							42.35672748642408,
							0
						],
						[
							-76.23859527356773,
							42.35674448642725,
							0
						],
						[
							-76.23860227357046,
							42.35675148642828,
							0
						],
						[
							-76.23863927358504,
							42.35678848643367,
							0
						],
						[
							-76.23865427359262,
							42.35682648644011,
							0
						],
						[
							-76.23870627361455,
							42.3568984864514,
							0
						],
						[
							-76.23874327363237,
							42.35698048646515,
							0
						],
						[
							-76.2387872736505,
							42.35703548647361,
							0
						],
						[
							-76.2388022736581,
							42.35707348648005,
							0
						],
						[
							-76.23882427366638,
							42.35709048648234,
							0
						],
						[
							-76.23885427368,
							42.35714548649136,
							0
						],
						[
							-76.2389132737049,
							42.35722748650422,
							0
						],
						[
							-76.23892827371247,
							42.35726548651068,
							0
						],
						[
							-76.23895027372079,
							42.35728248651295,
							0
						],
						[
							-76.23896527372837,
							42.35732048651941,
							0
						],
						[
							-76.23898727373746,
							42.35734848652373,
							0
						],
						[
							-76.2390242737545,
							42.35741948653541,
							0
						],
						[
							-76.2390542737661,
							42.35744648653925,
							0
						],
						[
							-76.23912127380041,
							42.35762248656923,
							0
						],
						[
							-76.2391652738305,
							42.35784248660832,
							0
						],
						[
							-76.2392252738633,
							42.35802848664046,
							0
						],
						[
							-76.23924027386934,
							42.35804548664302,
							0
						],
						[
							-76.2392842738914,
							42.35815448666149,
							0
						],
						[
							-76.23929927390022,
							42.35820948667111,
							0
						],
						[
							-76.23932127390886,
							42.35823148667431,
							0
						],
						[
							-76.2393512739225,
							42.35828648668333,
							0
						],
						[
							-76.23944727396089,
							42.3583904866988,
							0
						],
						[
							-76.23948427397754,
							42.35845648670956,
							0
						],
						[
							-76.23950727398893,
							42.35851148671886,
							0
						],
						[
							-76.23963227403945,
							42.35865448674041,
							0
						],
						[
							-76.23967027405406,
							42.35868748674501,
							0
						],
						[
							-76.23969227406309,
							42.35871448674914,
							0
						],
						[
							-76.23968427406852,
							42.35882448676988,
							0
						],
						[
							-76.23969927407688,
							42.35887348677839,
							0
						],
						[
							-76.2397142740881,
							42.35896148679412,
							0
						],
						[
							-76.2396922740862,
							42.35903248680819,
							0
						],
						[
							-76.23970727409262,
							42.35905448681168,
							0
						],
						[
							-76.23974427410688,
							42.35908748681631,
							0
						],
						[
							-76.23975927411534,
							42.35913748682499,
							0
						],
						[
							-76.23980327413383,
							42.35919748683439,
							0
						],
						[
							-76.23983327414862,
							42.35926848684635,
							0
						],
						[
							-76.23980327414823,
							42.35939548687114,
							0
						],
						[
							-76.23977427414408,
							42.3594664868855,
							0
						],
						[
							-76.23976727415257,
							42.35961448691323,
							0
						],
						[
							-76.23978127416427,
							42.35971348693106,
							0
						],
						[
							-76.23980427417327,
							42.35973548693421,
							0
						],
						[
							-76.23981927418323,
							42.35980648694681,
							0
						],
						[
							-76.23984127419155,
							42.35982348694908,
							0
						],
						[
							-76.23985627420036,
							42.3598784869587,
							0
						],
						[
							-76.2399152742241,
							42.35994448696857,
							0
						],
						[
							-76.23993027423087,
							42.359971486973,
							0
						],
						[
							-76.24000427426022,
							42.36004848698436,
							0
						],
						[
							-76.24010027429665,
							42.36012548699479,
							0
						],
						[
							-76.24035227438749,
							42.36026248701015,
							0
						],
						[
							-76.24044827442349,
							42.36033348701948,
							0
						],
						[
							-76.24053727445802,
							42.36041548703115,
							0
						],
						[
							-76.24059627448219,
							42.36048748704215,
							0
						],
						[
							-76.2406112744902,
							42.36053148704972,
							0
						],
						[
							-76.24063327449886,
							42.36055348705293,
							0
						],
						[
							-76.24065627451063,
							42.36061348706316,
							0
						],
						[
							-76.24067827451964,
							42.36064048706729,
							0
						],
						[
							-76.2407072745326,
							42.36069048707542,
							0
						],
						[
							-76.2408192745785,
							42.36082748709637,
							0
						],
						[
							-76.24091527461448,
							42.36089848710571,
							0
						],
						[
							-76.24110027468588,
							42.36106348712894,
							0
						],
						[
							-76.24121127472748,
							42.36114548713972,
							0
						],
						[
							-76.24133727477307,
							42.36121648714786,
							0
						],
						[
							-76.24138927479022,
							42.36122248714689,
							0
						],
						[
							-76.24147027481979,
							42.36127148715276,
							0
						],
						[
							-76.24183227495833,
							42.36157848719528,
							0
						],
						[
							-76.24184127496244,
							42.36159548719808,
							0
						],
						[
							-76.24191527499218,
							42.36167748721033,
							0
						],
						[
							-76.2419302749986,
							42.36169948721381,
							0
						],
						[
							-76.24210027506436,
							42.36185348723562,
							0
						],
						[
							-76.24213727507943,
							42.36189748724228,
							0
						],
						[
							-76.24215227508664,
							42.36193048724783,
							0
						],
						[
							-76.24217427509612,
							42.36196348725307,
							0
						],
						[
							-76.24218927510333,
							42.36199648725859,
							0
						],
						[
							-76.24221127511237,
							42.36202348726272,
							0
						],
						[
							-76.24221127511318,
							42.36203448726477,
							0
						],
						[
							-76.24218227510944,
							42.36211148728022,
							0
						],
						[
							-76.24217427511408,
							42.36221048729891,
							0
						],
						[
							-76.24215227510817,
							42.36222648730276,
							0
						],
						[
							-76.24215227511138,
							42.36227048731093,
							0
						],
						[
							-76.24213027510591,
							42.3622924873159,
							0
						],
						[
							-76.24200427506985,
							42.36235248733208,
							0
						],
						[
							-76.24195227505393,
							42.3623634873362,
							0
						],
						[
							-76.2418342750189,
							42.36240248734816,
							0
						],
						[
							-76.2417082749836,
							42.36247348736637,
							0
						],
						[
							-76.24169427498113,
							42.36250148737214,
							0
						],
						[
							-76.2417082749884,
							42.36253948737862,
							0
						],
						[
							-76.24185727504742,
							42.36269348740126,
							0
						],
						[
							-76.24189427506526,
							42.362775487415,
							0
						],
						[
							-76.24189427506846,
							42.36281948742317,
							0
						],
						[
							-76.24188627506953,
							42.36286948743276,
							0
						],
						[
							-76.24190927508644,
							42.36300048745616,
							0
						],
						[
							-76.24193127509474,
							42.36301748745845,
							0
						],
						[
							-76.24194627510356,
							42.36307248746806,
							0
						],
						[
							-76.24196827511221,
							42.36309448747127,
							0
						],
						[
							-76.2419902751416,
							42.36340148752736,
							0
						],
						[
							-76.2420122751502,
							42.36342248753039,
							0
						],
						[
							-76.24204227516312,
							42.36346748753753,
							0
						],
						[
							-76.2420652751745,
							42.36352248754683,
							0
						],
						[
							-76.24208727518315,
							42.36354448755004,
							0
						],
						[
							-76.2421312752076,
							42.36368648757463,
							0
						],
						[
							-76.24216827522231,
							42.3637254875804,
							0
						],
						[
							-76.24230527527291,
							42.36381648759181,
							0
						],
						[
							-76.24232427527997,
							42.36382948759346,
							0
						],
						[
							-76.24237627529746,
							42.36384048759341,
							0
						],
						[
							-76.2424872753363,
							42.36388448759714,
							0
						],
						[
							-76.24262027538693,
							42.36399348761207,
							0
						],
						[
							-76.2426942754135,
							42.36403248761636,
							0
						],
						[
							-76.24276127543538,
							42.36403748761458,
							0
						],
						[
							-76.24296827550069,
							42.36402148760334,
							0
						],
						[
							-76.24310127554338,
							42.36402148759802,
							0
						],
						[
							-76.24310227554363,
							42.36402048759779,
							0
						],
						[
							-76.24310227554355,
							42.36401948759761,
							0
						],
						[
							-76.24310227554348,
							42.36401848759743,
							0
						],
						[
							-76.24310227554341,
							42.36401748759725,
							0
						],
						[
							-76.24310227554334,
							42.36401648759707,
							0
						],
						[
							-76.2432492755861,
							42.36395548757984,
							0
						],
						[
							-76.24327927559447,
							42.36393848757549,
							0
						],
						[
							-76.24339027562816,
							42.36391148756605,
							0
						],
						[
							-76.24349427566112,
							42.36390548756078,
							0
						],
						[
							-76.24357527568756,
							42.36391148755865,
							0
						],
						[
							-76.24369327572785,
							42.36394448756006,
							0
						],
						[
							-76.24376827575185,
							42.36394348755686,
							0
						],
						[
							-76.24387127578295,
							42.36391648754772,
							0
						],
						[
							-76.24398927582084,
							42.363916487543,
							0
						],
						[
							-76.24402727583463,
							42.36393848754558,
							0
						],
						[
							-76.24433827595082,
							42.3641634875749,
							0
						],
						[
							-76.24447127599834,
							42.36422948758183,
							0
						],
						[
							-76.24467127606408,
							42.36425048757773,
							0
						],
						[
							-76.24472327608359,
							42.36428948758289,
							0
						],
						[
							-76.24472327608636,
							42.36432748758995,
							0
						],
						[
							-76.24478227610932,
							42.36438248759779,
							0
						],
						[
							-76.24487827614217,
							42.36441048759915,
							0
						],
						[
							-76.24494527616599,
							42.36444248760241,
							0
						],
						[
							-76.24500427618894,
							42.36449748761024,
							0
						],
						[
							-76.24504127620402,
							42.36454148761695,
							0
						],
						[
							-76.24507827622071,
							42.36460748762772,
							0
						],
						[
							-76.24509327622872,
							42.36465148763529,
							0
						],
						[
							-76.24513027624337,
							42.36468948764087,
							0
						],
						[
							-76.24513827624877,
							42.36472848764779,
							0
						],
						[
							-76.24517527626502,
							42.36478848765744,
							0
						],
						[
							-76.24524927629356,
							42.36485448766673,
							0
						],
						[
							-76.24531527631716,
							42.36488748767021,
							0
						],
						[
							-76.2454122763499,
							42.36490948767041,
							0
						],
						[
							-76.24545627636438,
							42.36491448766959,
							0
						],
						[
							-76.24550027637815,
							42.36490948766689,
							0
						],
						[
							-76.2457232764509,
							42.36492548766094,
							0
						],
						[
							-76.24574527645919,
							42.36494248766322,
							0
						],
						[
							-76.24578927647413,
							42.36495348766351,
							0
						],
						[
							-76.24591527652134,
							42.36504648767573,
							0
						],
						[
							-76.24607827658525,
							42.36520548769871,
							0
						],
						[
							-76.24617427662167,
							42.36528248770918,
							0
						],
						[
							-76.24638927669986,
							42.36540848772395,
							0
						],
						[
							-76.24650827674243,
							42.36546848773033,
							0
						],
						[
							-76.24658227676777,
							42.36549048773146,
							0
						],
						[
							-76.24663427678644,
							42.36551748773439,
							0
						],
						[
							-76.24676727683234,
							42.36556148773724,
							0
						],
						[
							-76.24690827687964,
							42.36558948773678,
							0
						],
						[
							-76.24696727689894,
							42.36559448773536,
							0
						],
						[
							-76.24739627703623,
							42.3655884877171,
							0
						],
						[
							-76.2476112771065,
							42.36560548771164,
							0
						],
						[
							-76.24776627715903,
							42.36564348771249,
							0
						],
						[
							-76.24790727720865,
							42.36570348771799,
							0
						],
						[
							-76.24795127722358,
							42.36571448771828,
							0
						],
						[
							-76.24800327724232,
							42.36574248772138,
							0
						],
						[
							-76.24806327726273,
							42.36575848772196,
							0
						],
						[
							-76.24827727733863,
							42.36585748773177,
							0
						],
						[
							-76.24835927736693,
							42.36588448773352,
							0
						],
						[
							-76.24842527739096,
							42.36592348773811,
							0
						],
						[
							-76.24852227742407,
							42.36595048773923,
							0
						],
						[
							-76.24861127745585,
							42.36599448774383,
							0
						],
						[
							-76.24874427750127,
							42.36603248774558,
							0
						],
						[
							-76.24880327752228,
							42.36606048774842,
							0
						],
						[
							-76.24885527753933,
							42.36606548774726,
							0
						],
						[
							-76.24887727754799,
							42.36608748775047,
							0
						],
						[
							-76.24895127757298,
							42.36610448775065,
							0
						],
						[
							-76.24906227761176,
							42.36614748775418,
							0
						],
						[
							-76.24909227762102,
							42.36614248775206,
							0
						],
						[
							-76.24916627764594,
							42.36615848775207,
							0
						],
						[
							-76.24935127770694,
							42.36618048774876,
							0
						],
						[
							-76.24958027778126,
							42.36619148774164,
							0
						],
						[
							-76.24965427780553,
							42.36619848773998,
							0
						],
						[
							-76.24983927786856,
							42.36624848774186,
							0
						],
						[
							-76.24991327789508,
							42.36628648774594,
							0
						],
						[
							-76.25002427793348,
							42.36632448774856,
							0
						],
						[
							-76.25014227797776,
							42.36641248776017,
							0
						],
						[
							-76.25026827802745,
							42.3665394877787,
							0
						],
						[
							-76.25032027805251,
							42.36665448779797,
							0
						],
						[
							-76.25032727805991,
							42.36672548781086,
							0
						],
						[
							-76.25034927806821,
							42.36674248781313,
							0
						],
						[
							-76.25036427807784,
							42.36680848782479,
							0
						],
						[
							-76.25040127809213,
							42.36684148782944,
							0
						],
						[
							-76.25040827809714,
							42.36687948783621,
							0
						],
						[
							-76.25047527812548,
							42.36697348785097,
							0
						],
						[
							-76.25063027818679,
							42.36713248787428,
							0
						],
						[
							-76.25079327824989,
							42.36728048789523,
							0
						],
						[
							-76.25087427827876,
							42.36731948789922,
							0
						],
						[
							-76.2509852783191,
							42.36738448790685,
							0
						],
						[
							-76.25104527834041,
							42.36741248790965,
							0
						],
						[
							-76.2511552783809,
							42.36748348791842,
							0
						],
						[
							-76.25165827857118,
							42.36787948797179,
							0
						],
						[
							-76.25191727866394,
							42.36801148798594,
							0
						],
						[
							-76.25197127868216,
							42.36802348798599,
							0
						],
						[
							-76.25199227868919,
							42.3680274879859,
							0
						],
						[
							-76.25205127871017,
							42.36805548798873,
							0
						],
						[
							-76.25211727873217,
							42.36806648798812,
							0
						],
						[
							-76.25214727874295,
							42.36808248798992,
							0
						],
						[
							-76.25223627877277,
							42.3680994879895,
							0
						],
						[
							-76.25236927882027,
							42.36816548799644,
							0
						],
						[
							-76.25262027891083,
							42.36830248801182,
							0
						],
						[
							-76.25288727900855,
							42.36846748803175,
							0
						],
						[
							-76.2530722790747,
							42.3685604880416,
							0
						],
						[
							-76.25320527912059,
							42.36860448804445,
							0
						],
						[
							-76.25335327917371,
							42.36868148805284,
							0
						],
						[
							-76.25346327921224,
							42.36872548805658,
							0
						],
						[
							-76.25356027924622,
							42.36876448805993,
							0
						],
						[
							-76.25363427927273,
							42.36880248806403,
							0
						],
						[
							-76.25373027930559,
							42.36883048806539,
							0
						],
						[
							-76.25409327943451,
							42.36900048808241,
							0
						],
						[
							-76.25417427946691,
							42.3690884880955,
							0
						],
						[
							-76.25421127948397,
							42.36915948810719,
							0
						],
						[
							-76.25421527948727,
							42.36918748811223,
							0
						],
						[
							-76.25422627949561,
							42.36925348812405,
							0
						],
						[
							-76.25424827950384,
							42.36926948812614,
							0
						],
						[
							-76.25425627950882,
							42.36930248813193,
							0
						],
						[
							-76.2542482795106,
							42.3693624881434,
							0
						],
						[
							-76.25428527952569,
							42.36940648815006,
							0
						],
						[
							-76.25432227955227,
							42.36960848818608,
							0
						],
						[
							-76.25432927955583,
							42.36962648818915,
							0
						],
						[
							-76.25435227956518,
							42.36965348819324,
							0
						],
						[
							-76.2543662795757,
							42.36973648820807,
							0
						],
						[
							-76.25438827958395,
							42.36975248821015,
							0
						],
						[
							-76.25440327959473,
							42.36983448822478,
							0
						],
						[
							-76.2544252796034,
							42.36985648822799,
							0
						],
						[
							-76.25444027961184,
							42.36990648823667,
							0
						],
						[
							-76.2544622796205,
							42.36992848823987,
							0
						],
						[
							-76.25447727962852,
							42.36997248824743,
							0
						],
						[
							-76.25457327966612,
							42.37006548826085,
							0
						],
						[
							-76.25464727969627,
							42.37015348827421,
							0
						],
						[
							-76.25475827973672,
							42.37021948828203,
							0
						],
						[
							-76.25481727975725,
							42.37024148828373,
							0
						],
						[
							-76.2548402797658,
							42.3702574882858,
							0
						],
						[
							-76.25490627978903,
							42.37028548828835,
							0
						],
						[
							-76.25505427983771,
							42.37030148828539,
							0
						],
						[
							-76.25538027994877,
							42.37038948828869,
							0
						],
						[
							-76.2554322799675,
							42.37041748829179,
							0
						],
						[
							-76.25548327998426,
							42.37042248829069,
							0
						],
						[
							-76.25556528001458,
							42.37047748829762,
							0
						],
						[
							-76.25569828006734,
							42.3706154883179,
							0
						],
						[
							-76.25583928011856,
							42.37069748832747,
							0
						],
						[
							-76.25593528015018,
							42.37070848832568,
							0
						],
						[
							-76.25615728021904,
							42.37067548831067,
							0
						],
						[
							-76.25629828026192,
							42.37064248829889,
							0
						],
						[
							-76.25649028032434,
							42.37065348829324,
							0
						],
						[
							-76.2565422803439,
							42.37069248829841,
							0
						],
						[
							-76.2565492803553,
							42.37081848832152,
							0
						],
						[
							-76.25662328038386,
							42.37088448833078,
							0
						],
						[
							-76.25668228040442,
							42.37090648833251,
							0
						],
						[
							-76.25725228059541,
							42.37101648833011,
							0
						],
						[
							-76.25736328063346,
							42.37104948833179,
							0
						],
						[
							-76.2574152806521,
							42.37107648833472,
							0
						],
						[
							-76.25747428067389,
							42.37111548833961,
							0
						],
						[
							-76.25751928069313,
							42.37118148835005,
							0
						],
						[
							-76.25753328070039,
							42.37121948835653,
							0
						],
						[
							-76.25757828072089,
							42.37130248837013,
							0
						],
						[
							-76.25768128076035,
							42.37139048838235,
							0
						],
						[
							-76.2577042807713,
							42.37143948839053,
							0
						],
						[
							-76.25775528079008,
							42.3714724883946,
							0
						],
						[
							-76.25789628084095,
							42.37154948840325,
							0
						],
						[
							-76.25798528086874,
							42.37153848839765,
							0
						],
						[
							-76.25827428095153,
							42.37140148836065,
							0
						],
						[
							-76.25835528097551,
							42.37137348835221,
							0
						],
						[
							-76.25842228099586,
							42.37135748834656,
							0
						],
						[
							-76.25845928100772,
							42.37135748834508,
							0
						],
						[
							-76.25854028103292,
							42.3713464883398,
							0
						],
						[
							-76.25865128107213,
							42.37139548834445,
							0
						],
						[
							-76.25868828108604,
							42.37142348834817,
							0
						],
						[
							-76.25888728116303,
							42.37160348837361,
							0
						],
						[
							-76.25889528116691,
							42.37162148837663,
							0
						],
						[
							-76.25908028124066,
							42.37181848840577,
							0
						],
						[
							-76.25909528124751,
							42.37184648841037,
							0
						],
						[
							-76.25910028124912,
							42.37184648841016,
							0
						],
						[
							-76.25910228124984,
							42.37184748841028,
							0
						],
						[
							-76.25910428125047,
							42.37184748841019,
							0
						],
						[
							-76.25910928125222,
							42.37184948841036,
							0
						],
						[
							-76.25911028125253,
							42.37184948841033,
							0
						],
						[
							-76.25911728125494,
							42.37185148841042,
							0
						],
						[
							-76.25916928127366,
							42.37187948841353,
							0
						],
						[
							-76.25928028131287,
							42.37192848841819,
							0
						],
						[
							-76.25939828135598,
							42.37200048842683,
							0
						],
						[
							-76.25945828137723,
							42.37202748842942,
							0
						],
						[
							-76.25953228140497,
							42.37208248843668,
							0
						],
						[
							-76.2598052815106,
							42.37232948847158,
							0
						],
						[
							-76.2598502815358,
							42.37247748849723,
							0
						],
						[
							-76.2599612815799,
							42.37259348851432,
							0
						],
						[
							-76.26005728161714,
							42.37268148852681,
							0
						],
						[
							-76.26015328165234,
							42.3727414885341,
							0
						],
						[
							-76.26026428169152,
							42.37279048853877,
							0
						],
						[
							-76.26036828172731,
							42.37282348854071,
							0
						],
						[
							-76.26059028180303,
							42.37288448854314,
							0
						],
						[
							-76.26077528186404,
							42.37290648853983,
							0
						],
						[
							-76.26082728188187,
							42.37292248854072,
							0
						],
						[
							-76.261041281953,
							42.37295548853827,
							0
						],
						[
							-76.26119728200548,
							42.37298848853816,
							0
						],
						[
							-76.26124828202231,
							42.37299448853722,
							0
						],
						[
							-76.2612492820226,
							42.37299448853718,
							0
						],
						[
							-76.26135928205987,
							42.37302148853778,
							0
						],
						[
							-76.26141128207863,
							42.37304948854088,
							0
						],
						[
							-76.26150028210961,
							42.37308248854345,
							0
						],
						[
							-76.26154428212452,
							42.37309348854373,
							0
						],
						[
							-76.261611282148,
							42.37312048854606,
							0
						],
						[
							-76.26165628216323,
							42.37313148854629,
							0
						],
						[
							-76.26186328223451,
							42.37319748855027,
							0
						],
						[
							-76.26192928225774,
							42.37322548855283,
							0
						],
						[
							-76.26197428227255,
							42.37323048855195,
							0
						],
						[
							-76.26207728230801,
							42.37326348855395,
							0
						],
						[
							-76.26226228236901,
							42.37328548855061,
							0
						],
						[
							-76.2626922825155,
							42.37340148855492,
							0
						],
						[
							-76.26279528255019,
							42.37342348855489,
							0
						],
						[
							-76.26289928258436,
							42.37343448855275,
							0
						],
						[
							-76.26318028267734,
							42.37347248854857,
							0
						],
						[
							-76.26336528274038,
							42.37352248855044,
							0
						],
						[
							-76.26347628278002,
							42.37357748855618,
							0
						],
						[
							-76.26357328281516,
							42.37363248856251,
							0
						],
						[
							-76.26363928284073,
							42.37369248857101,
							0
						],
						[
							-76.26367628285821,
							42.37376948858383,
							0
						],
						[
							-76.26383128291714,
							42.373895488601,
							0
						],
						[
							-76.26397928296946,
							42.37396148860731,
							0
						],
						[
							-76.26403128298695,
							42.37397248860728,
							0
						],
						[
							-76.26421628304838,
							42.37400048860506,
							0
						],
						[
							-76.26424628305881,
							42.3740114886059,
							0
						],
						[
							-76.26440128311054,
							42.3740384886047,
							0
						],
						[
							-76.2645792831693,
							42.37406048860167,
							0
						],
						[
							-76.26462328318465,
							42.37407748860305,
							0
						],
						[
							-76.2647202832166,
							42.37408848860119,
							0
						],
						[
							-76.26483128325783,
							42.37416548861106,
							0
						],
						[
							-76.26486828327408,
							42.3742254886207,
							0
						],
						[
							-76.2648752832791,
							42.37426348862748,
							0
						],
						[
							-76.2648972832874,
							42.37428048862974,
							0
						],
						[
							-76.264927283303,
							42.37436248864376,
							0
						],
						[
							-76.26504528338809,
							42.37501048875927,
							0
						],
						[
							-76.26500828338138,
							42.37508148877394,
							0
						],
						[
							-76.26506428340534,
							42.3751634887869,
							0
						],
						[
							-76.26519028345263,
							42.37525748879931,
							0
						],
						[
							-76.2652712834822,
							42.37530648880514,
							0
						],
						[
							-76.265360283512,
							42.37532348880475,
							0
						],
						[
							-76.26538228351986,
							42.3753344888059,
							0
						],
						[
							-76.26547128354962,
							42.3753504888053,
							0
						],
						[
							-76.26551528356613,
							42.37538348880967,
							0
						],
						[
							-76.26553328357149,
							42.37537748880783,
							0
						],
						[
							-76.26554528357504,
							42.3753734888066,
							0
						],
						[
							-76.26555228357721,
							42.37537248880615,
							0
						],
						[
							-76.26582628366758,
							42.37540548880131,
							0
						],
						[
							-76.26609928375676,
							42.37542648879426,
							0
						],
						[
							-76.26612228376466,
							42.37543348879463,
							0
						],
						[
							-76.26632228383045,
							42.37545548879073,
							0
						],
						[
							-76.26641828386323,
							42.37548248879187,
							0
						],
						[
							-76.26645628387544,
							42.37548248879034,
							0
						],
						[
							-76.26664128393804,
							42.37552648879111,
							0
						],
						[
							-76.26677428398474,
							42.37558148879599,
							0
						],
						[
							-76.26679628399305,
							42.37559848879825,
							0
						],
						[
							-76.26694428405163,
							42.37575048882056,
							0
						],
						[
							-76.2669512840552,
							42.3757684888236,
							0
						],
						[
							-76.26715128413097,
							42.37592748884509,
							0
						],
						[
							-76.26728428417849,
							42.375993488852,
							0
						],
						[
							-76.26730428418601,
							42.37600848885401,
							0
						],
						[
							-76.26732928419416,
							42.37601048885338,
							0
						],
						[
							-76.26735828420465,
							42.37602648885517,
							0
						],
						[
							-76.26764028430041,
							42.37609848885724,
							0
						],
						[
							-76.26773228433107,
							42.37611348885633,
							0
						],
						[
							-76.26775128433803,
							42.3761254888578,
							0
						],
						[
							-76.26784128436765,
							42.37613548885604,
							0
						],
						[
							-76.26786228437527,
							42.37614748885743,
							0
						],
						[
							-76.26788728438336,
							42.37614848885661,
							0
						],
						[
							-76.2681282844635,
							42.37618648885403,
							0
						],
						[
							-76.26819228448514,
							42.37620148885424,
							0
						],
						[
							-76.26821728449325,
							42.37620248885343,
							0
						],
						[
							-76.26836528454315,
							42.37623548885362,
							0
						],
						[
							-76.26858728461728,
							42.37627448885197,
							0
						],
						[
							-76.2686262846298,
							42.37627448885042,
							0
						],
						[
							-76.26864628463701,
							42.37628548885163,
							0
						],
						[
							-76.26896528473979,
							42.37629048883979,
							0
						],
						[
							-76.26915928480089,
							42.37627448882905,
							0
						],
						[
							-76.26917928480653,
							42.37626348882622,
							0
						],
						[
							-76.26931328484955,
							42.37626348882086,
							0
						],
						[
							-76.26944628489463,
							42.37629648882164,
							0
						],
						[
							-76.26951028491709,
							42.37632248882392,
							0
						],
						[
							-76.26953528492517,
							42.37632348882309,
							0
						],
						[
							-76.26969528498243,
							42.37640448883172,
							0
						],
						[
							-76.26972028499061,
							42.37640648883108,
							0
						],
						[
							-76.26989028505275,
							42.37651048884356,
							0
						],
						[
							-76.26994928507332,
							42.3765324888453,
							0
						],
						[
							-76.27014628514371,
							42.37663048885558,
							0
						],
						[
							-76.27017128515179,
							42.37663148885477,
							0
						],
						[
							-76.27022028516978,
							42.37666248885856,
							0
						],
						[
							-76.27024528517795,
							42.37666448885793,
							0
						],
						[
							-76.27029028519443,
							42.37669248886131,
							0
						],
						[
							-76.27039328522949,
							42.37671948886221,
							0
						],
						[
							-76.27045028524975,
							42.37674648886493,
							0
						],
						[
							-76.27049028526338,
							42.37675748886537,
							0
						],
						[
							-76.27051528527154,
							42.37675948886473,
							0
						],
						[
							-76.27056428528918,
							42.37678548886759,
							0
						],
						[
							-76.27061528530635,
							42.37679648886761,
							0
						],
						[
							-76.27067228532654,
							42.37682248887013,
							0
						],
						[
							-76.27069728533465,
							42.37682348886933,
							0
						],
						[
							-76.27071928534293,
							42.3768404888716,
							0
						],
						[
							-76.27077128536044,
							42.37685148887155,
							0
						],
						[
							-76.27080828537392,
							42.37687348887414,
							0
						],
						[
							-76.27106728545867,
							42.37689548886786,
							0
						],
						[
							-76.27123028550976,
							42.37687848885818,
							0
						],
						[
							-76.27126728552092,
							42.37686848885485,
							0
						],
						[
							-76.271311285533,
							42.37684048884788,
							0
						],
						[
							-76.27134128554228,
							42.37683548884575,
							0
						],
						[
							-76.27136928555002,
							42.37681848884147,
							0
						],
						[
							-76.27139328555735,
							42.37681348883958,
							0
						],
						[
							-76.27152628559365,
							42.37672548881793,
							0
						],
						[
							-76.27160028561302,
							42.37666548880385,
							0
						],
						[
							-76.27179328566618,
							42.37654448877365,
							0
						],
						[
							-76.27194828571272,
							42.37650048875927,
							0
						],
						[
							-76.27199128572653,
							42.37650048875756,
							0
						],
						[
							-76.27201528573387,
							42.37649548875569,
							0
						],
						[
							-76.272259285813,
							42.37650648874793,
							0
						],
						[
							-76.27230128582714,
							42.37651548874793,
							0
						],
						[
							-76.27231828583355,
							42.37652848874967,
							0
						],
						[
							-76.27253428590406,
							42.37654448874397,
							0
						],
						[
							-76.2725552859116,
							42.3765554887452,
							0
						],
						[
							-76.27258028591969,
							42.37655648874436,
							0
						],
						[
							-76.27268128595365,
							42.37657748874421,
							0
						],
						[
							-76.27272628597014,
							42.3766054887476,
							0
						],
						[
							-76.27276328598121,
							42.37659448874408,
							0
						],
						[
							-76.27280028599309,
							42.3765944887426,
							0
						],
						[
							-76.27294328604053,
							42.37661548874076,
							0
						],
						[
							-76.2729622860475,
							42.37662748874223,
							0
						],
						[
							-76.27305928607944,
							42.3766384887404,
							0
						],
						[
							-76.27319028612331,
							42.37666348873978,
							0
						],
						[
							-76.27320728612972,
							42.3766764887415,
							0
						],
						[
							-76.27323228613783,
							42.3766774887407,
							0
						],
						[
							-76.27359228625893,
							42.37675348874038,
							0
						],
						[
							-76.27366628628349,
							42.37676448873945,
							0
						],
						[
							-76.27370328629618,
							42.37677548874,
							0
						],
						[
							-76.27374328630938,
							42.37678048873932,
							0
						],
						[
							-76.27376228631634,
							42.37679248874082,
							0
						],
						[
							-76.27392428636989,
							42.3768134887382,
							0
						],
						[
							-76.2739472863777,
							42.37681948873839,
							0
						],
						[
							-76.27414828644378,
							42.37684048873425,
							0
						],
						[
							-76.27416928645137,
							42.37685248873563,
							0
						],
						[
							-76.27420628646325,
							42.37685248873415,
							0
						],
						[
							-76.27445428654558,
							42.37688948873108,
							0
						],
						[
							-76.2744732865526,
							42.37690248873273,
							0
						],
						[
							-76.27465428661226,
							42.37692348872938,
							0
						],
						[
							-76.27467328661923,
							42.37693548873084,
							0
						],
						[
							-76.27481228666458,
							42.37694548872712,
							0
						],
						[
							-76.2748352866724,
							42.37695148872733,
							0
						],
						[
							-76.27512428676839,
							42.37699548872391,
							0
						],
						[
							-76.27526628681511,
							42.3770114887212,
							0
						],
						[
							-76.27528728682275,
							42.37702348872257,
							0
						],
						[
							-76.27563528693767,
							42.3770674887168,
							0
						],
						[
							-76.27579028698858,
							42.37708348871355,
							0
						],
						[
							-76.27610128709405,
							42.37716048871538,
							0
						],
						[
							-76.2761982871276,
							42.37719348871762,
							0
						],
						[
							-76.27632728717097,
							42.37722048871746,
							0
						],
						[
							-76.27634628717794,
							42.37723248871892,
							0
						],
						[
							-76.27637128718605,
							42.37723348871811,
							0
						],
						[
							-76.27649428722742,
							42.377259488718,
							0
						],
						[
							-76.2765532872484,
							42.37728748872083,
							0
						],
						[
							-76.27667928729439,
							42.37736348872989,
							0
						],
						[
							-76.27690828737876,
							42.37751248874837,
							0
						],
						[
							-76.27720228748365,
							42.37765648876329,
							0
						],
						[
							-76.27722628749163,
							42.37766048876307,
							0
						],
						[
							-76.27726328750548,
							42.3776874887666,
							0
						],
						[
							-76.27734528753545,
							42.37773748877259,
							0
						],
						[
							-76.27744128756824,
							42.37776448877376,
							0
						],
						[
							-76.27750828759055,
							42.3777754887731,
							0
						],
						[
							-76.27790028771682,
							42.37778148875852,
							0
						],
						[
							-76.27806328777673,
							42.37788548877128,
							0
						],
						[
							-76.27822628783993,
							42.3780344887924,
							0
						],
						[
							-76.27835828788872,
							42.37812248880343,
							0
						],
						[
							-76.27839728790255,
							42.37814048880522,
							0
						],
						[
							-76.27841528790957,
							42.37815748880765,
							0
						],
						[
							-76.2785962879751,
							42.3782594888193,
							0
						],
						[
							-76.27869228800913,
							42.37830348882364,
							0
						],
						[
							-76.27876628803449,
							42.37832548882476,
							0
						],
						[
							-76.27881828805313,
							42.37835248882766,
							0
						],
						[
							-76.27887728807333,
							42.37836948882846,
							0
						],
						[
							-76.2790252881276,
							42.37846248883978,
							0
						],
						[
							-76.27904728813665,
							42.3784894888439,
							0
						],
						[
							-76.27904728813826,
							42.37851148884798,
							0
						],
						[
							-76.27908428815255,
							42.37854448885264,
							0
						],
						[
							-76.27908428815458,
							42.37857248885783,
							0
						],
						[
							-76.2791062881652,
							42.37862148886605,
							0
						],
						[
							-76.27920328820116,
							42.37868748887438,
							0
						],
						[
							-76.27952128830404,
							42.37869848886371,
							0
						],
						[
							-76.27958828832759,
							42.3787264888662,
							0
						],
						[
							-76.27963228834449,
							42.37876448887148,
							0
						],
						[
							-76.27969128836904,
							42.37884148888342,
							0
						],
						[
							-76.27969128837545,
							42.37892948889972,
							0
						],
						[
							-76.27967628837422,
							42.37897848890941,
							0
						],
						[
							-76.27965728836921,
							42.37899348891296,
							0
						],
						[
							-76.27965428836956,
							42.37901148891642,
							0
						],
						[
							-76.27963928836677,
							42.37903948892222,
							0
						],
						[
							-76.27945428831934,
							42.37920348896006,
							0
						],
						[
							-76.27943928831773,
							42.37924748896883,
							0
						],
						[
							-76.27944728833153,
							42.37940148899708,
							0
						],
						[
							-76.27941828833256,
							42.37954348902458,
							0
						],
						[
							-76.27941028833125,
							42.37956048902805,
							0
						],
						[
							-76.27940928833333,
							42.37959348903421,
							0
						],
						[
							-76.27938028833363,
							42.37972548905986,
							0
						],
						[
							-76.27938028833604,
							42.379758489066,
							0
						],
						[
							-76.27939628834686,
							42.37983648907982,
							0
						],
						[
							-76.27940128835016,
							42.37985948908388,
							0
						],
						[
							-76.27940928835534,
							42.37989548909022,
							0
						],
						[
							-76.27942428836094,
							42.37990648909169,
							0
						],
						[
							-76.27942428836175,
							42.37991748909373,
							0
						],
						[
							-76.27949828838952,
							42.37997248910096,
							0
						],
						[
							-76.27955728841043,
							42.37999948910361,
							0
						],
						[
							-76.27968628845383,
							42.38002648910343,
							0
						],
						[
							-76.27970528846078,
							42.38003848910491,
							0
						],
						[
							-76.27997928855116,
							42.38007148910005,
							0
						],
						[
							-76.2800242885656,
							42.38007148909825,
							0
						],
						[
							-76.28015028860723,
							42.38008748909616,
							0
						],
						[
							-76.28030528865982,
							42.38012648909719,
							0
						],
						[
							-76.2804682887165,
							42.38018648910179,
							0
						],
						[
							-76.28049028872475,
							42.38020248910387,
							0
						],
						[
							-76.28057928875499,
							42.38022548910456,
							0
						],
						[
							-76.28060128876324,
							42.38024148910666,
							0
						],
						[
							-76.28065328878071,
							42.38025248910663,
							0
						],
						[
							-76.28069028879376,
							42.38026848910811,
							0
						],
						[
							-76.2808012888302,
							42.38027948910571,
							0
						],
						[
							-76.28094928887656,
							42.38026348909681,
							0
						],
						[
							-76.28103828890315,
							42.38023648908823,
							0
						],
						[
							-76.28106028890898,
							42.38021948908418,
							0
						],
						[
							-76.2810952889191,
							42.38020448908,
							0
						],
						[
							-76.28112028892707,
							42.38020348907881,
							0
						],
						[
							-76.2811712889414,
							42.38017548907158,
							0
						],
						[
							-76.2812972889799,
							42.38014848906151,
							0
						],
						[
							-76.28147528903855,
							42.38016948905829,
							0
						],
						[
							-76.28149528904585,
							42.38018148905972,
							0
						],
						[
							-76.281564289068,
							42.38018148905697,
							0
						],
						[
							-76.28165328909533,
							42.38016448905022,
							0
						],
						[
							-76.28175528912341,
							42.38010048903426,
							0
						],
						[
							-76.28175628912241,
							42.38008248903088,
							0
						],
						[
							-76.28182328913927,
							42.38001848901632,
							0
						],
						[
							-76.28183028914019,
							42.38000048901272,
							0
						],
						[
							-76.28190428916075,
							42.37995648900158,
							0
						],
						[
							-76.28194128917218,
							42.37995048899899,
							0
						],
						[
							-76.28200828919172,
							42.37992348899129,
							0
						],
						[
							-76.28206728920986,
							42.37991248898688,
							0
						],
						[
							-76.28223328926468,
							42.37993348898413,
							0
						],
						[
							-76.28225228927165,
							42.37994548898558,
							0
						],
						[
							-76.28227728927969,
							42.37994548898457,
							0
						],
						[
							-76.28255628937326,
							42.38000048898363,
							0
						],
						[
							-76.28276128944132,
							42.38003148898115,
							0
						],
						[
							-76.28277828944773,
							42.38004448898289,
							0
						],
						[
							-76.2829282894967,
							42.3800554889789,
							0
						],
						[
							-76.28307428954436,
							42.38006648897511,
							0
						],
						[
							-76.28325928960258,
							42.38005048896472,
							0
						],
						[
							-76.28345928966279,
							42.3799954889465,
							0
						],
						[
							-76.28360728970388,
							42.37990748892424,
							0
						],
						[
							-76.28362228970664,
							42.37987948891846,
							0
						],
						[
							-76.28365228971509,
							42.3798634889143,
							0
						],
						[
							-76.28366728971234,
							42.37975948889439,
							0
						],
						[
							-76.28368928971817,
							42.37974248889036,
							0
						],
						[
							-76.28371928971103,
							42.37951248884647,
							0
						],
						[
							-76.28374128971642,
							42.37948948884133,
							0
						],
						[
							-76.2837702897242,
							42.37946848883626,
							0
						],
						[
							-76.28380828973515,
							42.37945148883159,
							0
						],
						[
							-76.2839192897708,
							42.37945148882715,
							0
						],
						[
							-76.28397828979134,
							42.37947348882886,
							0
						],
						[
							-76.28400028979964,
							42.37949048883114,
							0
						],
						[
							-76.2841112898433,
							42.3796004888471,
							0
						],
						[
							-76.28418528987186,
							42.37966648885637,
							0
						],
						[
							-76.28429628991223,
							42.37973148886398,
							0
						],
						[
							-76.2843702899376,
							42.3797534888651,
							0
						],
						[
							-76.28439728994654,
							42.37975748886477,
							0
						],
						[
							-76.28441428995295,
							42.37977048886648,
							0
						],
						[
							-76.28446028996773,
							42.37977048886465,
							0
						],
						[
							-76.28448128997525,
							42.37978148886584,
							0
						],
						[
							-76.28460029001347,
							42.37978148886107,
							0
						],
						[
							-76.28474829005974,
							42.379764488852,
							0
						],
						[
							-76.28482229008232,
							42.37974848884605,
							0
						],
						[
							-76.28499929013395,
							42.37967748882579,
							0
						],
						[
							-76.2850362901438,
							42.37964948881912,
							0
						],
						[
							-76.28522229019111,
							42.37947948878013,
							0
						],
						[
							-76.28534029022302,
							42.37939748876018,
							0
						],
						[
							-76.28537629023457,
							42.37939748875873,
							0
						],
						[
							-76.28539929024153,
							42.3793914887567,
							0
						],
						[
							-76.28547329026529,
							42.37939148875375,
							0
						],
						[
							-76.28559929030733,
							42.37941348875278,
							0
						],
						[
							-76.28577029036542,
							42.37945748875409,
							0
						],
						[
							-76.28599229044194,
							42.37952948875855,
							0
						],
						[
							-76.28602929045418,
							42.37953448875799,
							0
						],
						[
							-76.28605129046284,
							42.37955648876119,
							0
						],
						[
							-76.2861102904826,
							42.37956748876086,
							0
						],
						[
							-76.28618429050874,
							42.37960048876401,
							0
						],
						[
							-76.28629529054679,
							42.37963348876568,
							0
						],
						[
							-76.2863172905551,
							42.37965048876797,
							0
						],
						[
							-76.2863692905726,
							42.37966148876793,
							0
						],
						[
							-76.28649529061582,
							42.37969948876992,
							0
						],
						[
							-76.28661329065493,
							42.37971648876835,
							0
						],
						[
							-76.28672529068963,
							42.37969948876071,
							0
						],
						[
							-76.28679929071222,
							42.37968348875475,
							0
						],
						[
							-76.28695429075879,
							42.37963948874037,
							0
						],
						[
							-76.28704629078715,
							42.37962348873373,
							0
						],
						[
							-76.28706529079237,
							42.37961148873075,
							0
						],
						[
							-76.28714729081912,
							42.37961748872856,
							0
						],
						[
							-76.28723529084856,
							42.37963348872801,
							0
						],
						[
							-76.28731729087967,
							42.37969948873697,
							0
						],
						[
							-76.28740729091608,
							42.37980248875247,
							0
						],
						[
							-76.28741329091932,
							42.37982048875558,
							0
						],
						[
							-76.28745029093317,
							42.37984748875909,
							0
						],
						[
							-76.28756129097361,
							42.37991348876689,
							0
						],
						[
							-76.28765729100648,
							42.37994148876824,
							0
						],
						[
							-76.28782029106121,
							42.37997448876782,
							0
						],
						[
							-76.28815329117008,
							42.3800014887595,
							0
						],
						[
							-76.28833229122716,
							42.37999648875138,
							0
						],
						[
							-76.28835329123311,
							42.37998548874849,
							0
						],
						[
							-76.28846429126911,
							42.37999048874497,
							0
						],
						[
							-76.28858329130856,
							42.38000748874337,
							0
						],
						[
							-76.28868729134435,
							42.38004048874532,
							0
						],
						[
							-76.28885729140212,
							42.38008448874665,
							0
						],
						[
							-76.28894629143105,
							42.38008948874403,
							0
						],
						[
							-76.28905729146551,
							42.3800734887366,
							0
						],
						[
							-76.28915329149268,
							42.38002348872347,
							0
						],
						[
							-76.28950029158455,
							42.37975548865985,
							0
						],
						[
							-76.28950829158588,
							42.37973848865639,
							0
						],
						[
							-76.28967929163156,
							42.37961248862617,
							0
						],
						[
							-76.28976829165774,
							42.37957948861646,
							0
						],
						[
							-76.28985629168517,
							42.37956848861092,
							0
						],
						[
							-76.2899752917234,
							42.37956848860613,
							0
						],
						[
							-76.29012329177365,
							42.37960648860726,
							0
						],
						[
							-76.29015029178379,
							42.37962648860987,
							0
						],
						[
							-76.29017529179195,
							42.37962848860924,
							0
						],
						[
							-76.29052829191856,
							42.37981048862886,
							0
						],
						[
							-76.29055229192662,
							42.37981548862883,
							0
						],
						[
							-76.29057529193524,
							42.37983248863105,
							0
						],
						[
							-76.2906262919524,
							42.37984348863104,
							0
						],
						[
							-76.29064929196139,
							42.37986548863422,
							0
						],
						[
							-76.29101929208493,
							42.37993048863143,
							0
						],
						[
							-76.29130829217813,
							42.37993648862097,
							0
						],
						[
							-76.291475292231,
							42.3799264886124,
							0
						],
						[
							-76.29156729226008,
							42.37992048860762,
							0
						],
						[
							-76.29158929226794,
							42.37993148860876,
							0
						],
						[
							-76.29164829228566,
							42.37991448860326,
							0
						],
						[
							-76.29178829232988,
							42.37990448859578,
							0
						],
						[
							-76.29181129233683,
							42.37989848859374,
							0
						],
						[
							-76.29199629239497,
							42.37988148858318,
							0
						],
						[
							-76.29204829241085,
							42.37987048857906,
							0
						],
						[
							-76.29222929246743,
							42.37984948856791,
							0
						],
						[
							-76.29224829247264,
							42.37983748856491,
							0
						],
						[
							-76.29233829250117,
							42.37983248856038,
							0
						],
						[
							-76.2923592925071,
							42.3798214885575,
							0
						],
						[
							-76.29269929261383,
							42.37978848853774,
							0
						],
						[
							-76.2930992927427,
							42.37979448852282,
							0
						],
						[
							-76.2936252929135,
							42.37982148850675,
							0
						],
						[
							-76.29369229293626,
							42.37983848850721,
							0
						],
						[
							-76.2938472929868,
							42.37984948850305,
							0
						],
						[
							-76.29388029299813,
							42.37985948850356,
							0
						],
						[
							-76.29389929300511,
							42.37987148850503,
							0
						],
						[
							-76.29404729305378,
							42.37988748850208,
							0
						],
						[
							-76.29413929308485,
							42.37990848850229,
							0
						],
						[
							-76.29415829309183,
							42.37992048850375,
							0
						],
						[
							-76.2941832930999,
							42.37992148850293,
							0
						],
						[
							-76.29432829314842,
							42.37994848850212,
							0
						],
						[
							-76.29457329323145,
							42.38000848850344,
							0
						],
						[
							-76.29471729327958,
							42.38003448850249,
							0
						],
						[
							-76.29473629328653,
							42.38004648850396,
							0
						],
						[
							-76.29492829334941,
							42.3800634884994,
							0
						],
						[
							-76.29495229335794,
							42.38007448850047,
							0
						],
						[
							-76.29523229344896,
							42.38009048849223,
							0
						],
						[
							-76.29548329353159,
							42.38011848848733,
							0
						],
						[
							-76.29557229356497,
							42.38018448849601,
							0
						],
						[
							-76.29559429358282,
							42.38033248852258,
							0
						],
						[
							-76.2956312935979,
							42.38037648852927,
							0
						],
						[
							-76.29571329362781,
							42.38042548853507,
							0
						],
						[
							-76.29586129367736,
							42.38045348853432,
							0
						],
						[
							-76.2959502937095,
							42.38050248853985,
							0
						],
						[
							-76.29609029376327,
							42.38062348855668,
							0
						],
						[
							-76.2961202937761,
							42.38066748856365,
							0
						],
						[
							-76.29614229378433,
							42.38068348856572,
							0
						],
						[
							-76.29614229378593,
							42.3807054885698,
							0
						],
						[
							-76.29617929380024,
							42.38073848857445,
							0
						],
						[
							-76.29618729380563,
							42.38077748858136,
							0
						],
						[
							-76.29619929381126,
							42.38080148858533,
							0
						],
						[
							-76.29621629381771,
							42.38081548858725,
							0
						],
						[
							-76.29622329382487,
							42.38088248859939,
							0
						],
						[
							-76.29623829383075,
							42.38089748860158,
							0
						],
						[
							-76.29623829383361,
							42.3809364886088,
							0
						],
						[
							-76.29619429382868,
							42.38106248863394,
							0
						],
						[
							-76.29615729382198,
							42.3811334886486,
							0
						],
						[
							-76.29613529381975,
							42.38119948866173,
							0
						],
						[
							-76.29615729383002,
							42.381243488669,
							0
						],
						[
							-76.29619429384391,
							42.38127148867271,
							0
						],
						[
							-76.29623129385698,
							42.38128748867419,
							0
						],
						[
							-76.2962902938767,
							42.38129848867387,
							0
						],
						[
							-76.29638629390797,
							42.38130448867113,
							0
						],
						[
							-76.29674929402208,
							42.38127148865046,
							0
						],
						[
							-76.29682329404663,
							42.38128248864952,
							0
						],
						[
							-76.2969912941037,
							42.38132548865075,
							0
						],
						[
							-76.29701629411178,
							42.38132648864994,
							0
						],
						[
							-76.29704529412271,
							42.38134848865288,
							0
						],
						[
							-76.29708229413497,
							42.38135348865232,
							0
						],
						[
							-76.29714229415663,
							42.38138648865602,
							0
						],
						[
							-76.29729029420932,
							42.38145748866326,
							0
						],
						[
							-76.29746029427073,
							42.38155148867388,
							0
						],
						[
							-76.29749729428262,
							42.38155148867241,
							0
						],
						[
							-76.29754129429915,
							42.38158448867676,
							0
						],
						[
							-76.29768929434942,
							42.38162248867788,
							0
						],
						[
							-76.29781529439111,
							42.38163948867597,
							0
						],
						[
							-76.29786029440555,
							42.38163948867417,
							0
						],
						[
							-76.29792629442632,
							42.3816334886704,
							0
						],
						[
							-76.29814129448737,
							42.38152448864157,
							0
						],
						[
							-76.29822329451326,
							42.38151848863717,
							0
						],
						[
							-76.29832629454633,
							42.38151848863303,
							0
						],
						[
							-76.29838529456607,
							42.38152948863271,
							0
						],
						[
							-76.2984082945747,
							42.38154648863493,
							0
						],
						[
							-76.29843129458264,
							42.38155448863551,
							0
						],
						[
							-76.29859329464487,
							42.38169448865497,
							0
						],
						[
							-76.29861529465273,
							42.38170548865613,
							0
						],
						[
							-76.29860029464909,
							42.3817214886597,
							0
						],
						[
							-76.29869629468669,
							42.3818144886731,
							0
						],
						[
							-76.2987332947034,
							42.38188048868386,
							0
						],
						[
							-76.29873329470863,
							42.38195248869722,
							0
						],
						[
							-76.29870429470493,
							42.38202948871266,
							0
						],
						[
							-76.29870429470735,
							42.38206248871876,
							0
						],
						[
							-76.29873329472221,
							42.38213848873171,
							0
						],
						[
							-76.29882929475828,
							42.38221048874122,
							0
						],
						[
							-76.2989632948069,
							42.38228748875012,
							0
						],
						[
							-76.29899929482036,
							42.38231348875349,
							0
						],
						[
							-76.299000294822,
							42.3823314887568,
							0
						],
						[
							-76.29903729483584,
							42.38235848876033,
							0
						],
						[
							-76.29904429484087,
							42.38239648876709,
							0
						],
						[
							-76.29906629485077,
							42.38243548877345,
							0
						],
						[
							-76.29906629485316,
							42.38246848877957,
							0
						],
						[
							-76.29908829486672,
							42.38255748879521,
							0
						],
						[
							-76.29910329487264,
							42.38257248879737,
							0
						],
						[
							-76.29910329487467,
							42.38260048880257,
							0
						],
						[
							-76.2991402948913,
							42.38266548881313,
							0
						],
						[
							-76.29914829489627,
							42.38269848881894,
							0
						],
						[
							-76.29917729490762,
							42.38272648882298,
							0
						],
						[
							-76.29918529491668,
							42.38281548883916,
							0
						],
						[
							-76.2992002949226,
							42.38283048884133,
							0
						],
						[
							-76.29920029492463,
							42.38285848884652,
							0
						],
						[
							-76.29915529491734,
							42.3829564888665,
							0
						],
						[
							-76.29913329491151,
							42.38297348887054,
							0
						],
						[
							-76.29911929491081,
							42.38302548888075,
							0
						],
						[
							-76.2991032949067,
							42.383039488884,
							0
						],
						[
							-76.29911729491594,
							42.38310448889549,
							0
						],
						[
							-76.29912529491975,
							42.38312148889833,
							0
						],
						[
							-76.29912629492203,
							42.38314848890327,
							0
						],
						[
							-76.29915529493616,
							42.38321448891438,
							0
						],
						[
							-76.29919829495908,
							42.38333948893582,
							0
						],
						[
							-76.29919929496072,
							42.38335748893911,
							0
						],
						[
							-76.29918529495828,
							42.38338548894488,
							0
						],
						[
							-76.2990742949298,
							42.38348348896751,
							0
						],
						[
							-76.29905929492861,
							42.38353348897737,
							0
						],
						[
							-76.29909629495049,
							42.3836704890013,
							0
						],
						[
							-76.29905929496152,
							42.38398448906104,
							0
						],
						[
							-76.29907329496712,
							42.38399948906326,
							0
						],
						[
							-76.29907329496916,
							42.38402748906843,
							0
						],
						[
							-76.2990812949737,
							42.38405448907313,
							0
						],
						[
							-76.2991922950154,
							42.38413748908406,
							0
						],
						[
							-76.29934029506887,
							42.38421948909336,
							0
						],
						[
							-76.29941429509621,
							42.38426848909947,
							0
						],
						[
							-76.29947929511955,
							42.38430248910317,
							0
						],
						[
							-76.29950329512764,
							42.38430748910312,
							0
						],
						[
							-76.29955429514678,
							42.38434548910812,
							0
						],
						[
							-76.29956229515058,
							42.38436248911096,
							0
						],
						[
							-76.29959929516443,
							42.38438948911449,
							0
						],
						[
							-76.29960629516953,
							42.38442848912144,
							0
						],
						[
							-76.29962929517887,
							42.38445548912552,
							0
						],
						[
							-76.29964329519059,
							42.38455448914333,
							0
						],
						[
							-76.29964429519491,
							42.38460948915348,
							0
						],
						[
							-76.29961429519726,
							42.38477348918511,
							0
						],
						[
							-76.29960029519496,
							42.38480348919122,
							0
						],
						[
							-76.29958429519085,
							42.38481748919446,
							0
						],
						[
							-76.2995842951929,
							42.38484548919966,
							0
						],
						[
							-76.2994952951771,
							42.38502048923569,
							0
						],
						[
							-76.29947629517208,
							42.38503548923924,
							0
						],
						[
							-76.29947329517242,
							42.38505348924268,
							0
						],
						[
							-76.2994362951626,
							42.38508148924936,
							0
						],
						[
							-76.29942129516056,
							42.38511948925702,
							0
						],
						[
							-76.29931829513457,
							42.38521648927913,
							0
						],
						[
							-76.29931029513332,
							42.38523448928279,
							0
						],
						[
							-76.29920029510399,
							42.38531648930241,
							0
						],
						[
							-76.29919229510267,
							42.38533348930588,
							0
						],
						[
							-76.29897029504343,
							42.3854984893454,
							0
						],
						[
							-76.29877729498827,
							42.38559148937038,
							0
						],
						[
							-76.298733294977,
							42.38563048937938,
							0
						],
						[
							-76.29844429489742,
							42.38581148942453,
							0
						],
						[
							-76.29829629485712,
							42.38591048944883,
							0
						],
						[
							-76.2982162948343,
							42.38594948945926,
							0
						],
						[
							-76.29819229482689,
							42.38595348946098,
							0
						],
						[
							-76.29815529481705,
							42.38598148946765,
							0
						],
						[
							-76.29805129478724,
							42.38603048948092,
							0
						],
						[
							-76.29790329474777,
							42.38614048950724,
							0
						],
						[
							-76.297844294734,
							42.38621148952278,
							0
						],
						[
							-76.29781529472622,
							42.38623248952785,
							0
						],
						[
							-76.29781429472723,
							42.38625048953121,
							0
						],
						[
							-76.29777729471776,
							42.38628348953882,
							0
						],
						[
							-76.29772529470667,
							42.38636048955519,
							0
						],
						[
							-76.29770529470369,
							42.38640748956472,
							0
						],
						[
							-76.29768829469917,
							42.38642048956781,
							0
						],
						[
							-76.29768829470116,
							42.3864474895728,
							0
						],
						[
							-76.29766629469533,
							42.38646448957684,
							0
						],
						[
							-76.29759929468345,
							42.386596489604,
							0
						],
						[
							-76.29758529468013,
							42.38661248960752,
							0
						],
						[
							-76.29742929464932,
							42.38687648966275,
							0
						],
						[
							-76.29740729464619,
							42.38693048967365,
							0
						],
						[
							-76.29739229464262,
							42.38694748967741,
							0
						],
						[
							-76.29723029461162,
							42.38723548973731,
							0
						],
						[
							-76.29721429460751,
							42.38724948974054,
							0
						],
						[
							-76.29721429460949,
							42.38727648974557,
							0
						],
						[
							-76.29717729460206,
							42.38733748975836,
							0
						],
						[
							-76.29714829459735,
							42.3874004897712,
							0
						],
						[
							-76.29714829459749,
							42.38740248977158,
							0
						],
						[
							-76.2971332945931,
							42.38740848977329,
							0
						],
						[
							-76.29713329459508,
							42.38743548977829,
							0
						],
						[
							-76.2970762945859,
							42.38756048980378,
							0
						],
						[
							-76.29705929458139,
							42.38757348980685,
							0
						],
						[
							-76.29705929458417,
							42.38761148981391,
							0
						],
						[
							-76.29703629457804,
							42.38762848981797,
							0
						],
						[
							-76.2970072945747,
							42.38771048983435,
							0
						],
						[
							-76.2969842945701,
							42.38774848984232,
							0
						],
						[
							-76.29691929456222,
							42.38792648987795,
							0
						],
						[
							-76.2969032945581,
							42.38794048988118,
							0
						],
						[
							-76.29690329456051,
							42.38797348988731,
							0
						],
						[
							-76.2968662945539,
							42.38804548990213,
							0
						],
						[
							-76.29686629455585,
							42.38807248990714,
							0
						],
						[
							-76.29682229454734,
							42.38814948992317,
							0
						],
						[
							-76.29682229454932,
							42.38817648992819,
							0
						],
						[
							-76.29678429454238,
							42.38824848994306,
							0
						],
						[
							-76.29678429454516,
							42.38828648995012,
							0
						],
						[
							-76.29674729453853,
							42.38835848996495,
							0
						],
						[
							-76.29673329453922,
							42.38842948997868,
							0
						],
						[
							-76.29669529453298,
							42.3885114899954,
							0
						],
						[
							-76.29669629453537,
							42.38853949000055,
							0
						],
						[
							-76.29665129452896,
							42.38864949002277,
							0
						],
						[
							-76.29657729452029,
							42.38885649006413,
							0
						],
						[
							-76.2965772945216,
							42.38887449006745,
							0
						],
						[
							-76.29654729451555,
							42.38892349007775,
							0
						],
						[
							-76.2965252945157,
							42.38902249009697,
							0
						],
						[
							-76.2965122945133,
							42.38904649010196,
							0
						],
						[
							-76.29649629450917,
							42.38906049010519,
							0
						],
						[
							-76.29649529451089,
							42.38908849011044,
							0
						],
						[
							-76.29645829450617,
							42.38918649013009,
							0
						],
						[
							-76.29644429450569,
							42.38924149014085,
							0
						],
						[
							-76.29643329450369,
							42.3892624901452,
							0
						],
						[
							-76.29641429449846,
							42.38927449014818,
							0
						],
						[
							-76.2964142945005,
							42.38930249015336,
							0
						],
						[
							-76.29639329449839,
							42.38936549016589,
							0
						],
						[
							-76.29637729449426,
							42.38937949016913,
							0
						],
						[
							-76.29637729449624,
							42.38940649017415,
							0
						],
						[
							-76.29629529448633,
							42.38963149021914,
							0
						],
						[
							-76.29629529449633,
							42.38976849024455,
							0
						],
						[
							-76.29631729451032,
							42.38986349026129,
							0
						],
						[
							-76.29633229451625,
							42.38987849026348,
							0
						],
						[
							-76.29633229451755,
							42.38989649026681,
							0
						],
						[
							-76.29635529452959,
							42.38996049027775,
							0
						],
						[
							-76.29639229454631,
							42.39002649028851,
							0
						],
						[
							-76.29641429455735,
							42.39008149029783,
							0
						],
						[
							-76.2964512945745,
							42.39015349030971,
							0
						],
						[
							-76.29645829457836,
							42.3901754903135,
							0
						],
						[
							-76.29649529459462,
							42.39023549032313,
							0
						],
						[
							-76.29651729460569,
							42.39029049033245,
							0
						],
						[
							-76.29653029461124,
							42.39030949033545,
							0
						],
						[
							-76.29654729461774,
							42.39032349033738,
							0
						],
						[
							-76.29656229463372,
							42.39047649036513,
							0
						],
						[
							-76.29656229463853,
							42.39054249037737,
							0
						],
						[
							-76.29653929464041,
							42.39066949040186,
							0
						],
						[
							-76.29653229464816,
							42.39080649042754,
							0
						],
						[
							-76.2965512946585,
							42.39086449043754,
							0
						],
						[
							-76.29656929466523,
							42.39087749043922,
							0
						],
						[
							-76.29656929466684,
							42.3908994904433,
							0
						],
						[
							-76.29682129476095,
							42.39108049046676,
							0
						],
						[
							-76.29691029479514,
							42.39115749047746,
							0
						],
						[
							-76.29691729480263,
							42.39122949049054,
							0
						],
						[
							-76.29693029480855,
							42.39125349049444,
							0
						],
						[
							-76.29694729481504,
							42.39126749049638,
							0
						],
						[
							-76.29693929481846,
							42.39134949051192,
							0
						],
						[
							-76.29690229481542,
							42.39147049053583,
							0
						],
						[
							-76.29691729482424,
							42.39152549054543,
							0
						],
						[
							-76.29693929483328,
							42.39155249054954,
							0
						],
						[
							-76.29698429485013,
							42.39158549055387,
							0
						],
						[
							-76.2970632948788,
							42.39163049055905,
							0
						],
						[
							-76.29708729488685,
							42.39163549055901,
							0
						],
						[
							-76.29710729489436,
							42.39165049056098,
							0
						],
						[
							-76.29713229490247,
							42.39165149056017,
							0
						],
						[
							-76.29724329494373,
							42.39172849057,
							0
						],
						[
							-76.2973152949715,
							42.39179249057898,
							0
						],
						[
							-76.29734629499079,
							42.39192049060146,
							0
						],
						[
							-76.29732429501942,
							42.39240949069303,
							0
						],
						[
							-76.2973462950394,
							42.39258649072497,
							0
						],
						[
							-76.29736129504533,
							42.39260149072715,
							0
						],
						[
							-76.2973682950556,
							42.39271149074726,
							0
						],
						[
							-76.29738329506239,
							42.39273849075166,
							0
						],
						[
							-76.29742629508516,
							42.39286149077275,
							0
						],
						[
							-76.29744229509132,
							42.39287549077469,
							0
						],
						[
							-76.29744229509264,
							42.39289349077804,
							0
						],
						[
							-76.29747229510978,
							42.39299649079592,
							0
						],
						[
							-76.29747229511185,
							42.39302449080111,
							0
						],
						[
							-76.29750229512585,
							42.39308449081104,
							0
						],
						[
							-76.29752829513922,
							42.39315349082279,
							0
						],
						[
							-76.29754629514598,
							42.3931664908245,
							0
						],
						[
							-76.29754629514801,
							42.39319449082969,
							0
						],
						[
							-76.29756829515668,
							42.39321649083289,
							0
						],
						[
							-76.29759029516775,
							42.39327149084219,
							0
						],
						[
							-76.29760529517374,
							42.39328749084456,
							0
						],
						[
							-76.2976792952083,
							42.39343549086902,
							0
						],
						[
							-76.29768629521227,
							42.39345949087321,
							0
						],
						[
							-76.2977012952182,
							42.39347449087538,
							0
						],
						[
							-76.29770929522691,
							42.39355849089065,
							0
						],
						[
							-76.29772429523283,
							42.39357349089282,
							0
						],
						[
							-76.29772929524631,
							42.39373649092284,
							0
						],
						[
							-76.29772929524952,
							42.39378049093102,
							0
						],
						[
							-76.29772029524995,
							42.3938254909397,
							0
						],
						[
							-76.29769829524929,
							42.3939134909569,
							0
						],
						[
							-76.29768729524898,
							42.39395749096549,
							0
						],
						[
							-76.2976832952493,
							42.39397949096974,
							0
						],
						[
							-76.29768229524903,
							42.39398049096997,
							0
						],
						[
							-76.29768129524976,
							42.39399449097262,
							0
						],
						[
							-76.29768129524983,
							42.39399549097279,
							0
						],
						[
							-76.29768029524956,
							42.39399649097302,
							0
						],
						[
							-76.29767929525042,
							42.39401249097602,
							0
						],
						[
							-76.29766629524799,
							42.394036490981,
							0
						],
						[
							-76.29765029524388,
							42.39405049098421,
							0
						],
						[
							-76.29765029524629,
							42.39408349099035,
							0
						],
						[
							-76.29762729524408,
							42.39415449100444,
							0
						],
						[
							-76.29762029524468,
							42.39419349101194,
							0
						],
						[
							-76.2976492952608,
							42.39428649102803,
							0
						],
						[
							-76.29767229526942,
							42.39430349103025,
							0
						],
						[
							-76.29769429528048,
							42.39435849103958,
							0
						],
						[
							-76.29771629528918,
							42.39438049104277,
							0
						],
						[
							-76.29773129529639,
							42.3944134910483,
							0
						],
						[
							-76.29776829531183,
							42.3944624910559,
							0
						],
						[
							-76.29778929531967,
							42.39447749105784,
							0
						],
						[
							-76.2977902953213,
							42.39449549106113,
							0
						],
						[
							-76.29790029536416,
							42.39459849107581,
							0
						],
						[
							-76.29790129536578,
							42.39461649107911,
							0
						],
						[
							-76.29793829537962,
							42.39464349108265,
							0
						],
						[
							-76.29794629538497,
							42.39468149108937,
							0
						],
						[
							-76.29796829539366,
							42.39470349109254,
							0
						],
						[
							-76.2979682953957,
							42.39473149109775,
							0
						],
						[
							-76.29799729540616,
							42.39474749109957,
							0
						],
						[
							-76.29802629542051,
							42.39481649111118,
							0
						],
						[
							-76.29804229542667,
							42.39483049111314,
							0
						],
						[
							-76.29805729543666,
							42.3949014911257,
							0
						],
						[
							-76.29808629545161,
							42.39497849113881,
							0
						],
						[
							-76.29810729547016,
							42.39514049116802,
							0
						],
						[
							-76.29812329547633,
							42.39515449116995,
							0
						],
						[
							-76.29813129548731,
							42.39526949119096,
							0
						],
						[
							-76.29815329549793,
							42.39531849119916,
							0
						],
						[
							-76.29815329549997,
							42.39534649120434,
							0
						],
						[
							-76.29820529552508,
							42.39546149122359,
							0
						],
						[
							-76.29824929554403,
							42.39552749123406,
							0
						],
						[
							-76.29839729560102,
							42.39565749125224,
							0
						],
						[
							-76.2984052956049,
							42.39567549125525,
							0
						],
						[
							-76.29843429561582,
							42.39569749125816,
							0
						],
						[
							-76.29844229562437,
							42.39577949127305,
							0
						],
						[
							-76.29839029562017,
							42.39595049130684,
							0
						],
						[
							-76.29836829561427,
							42.3959664913107,
							0
						],
						[
							-76.29835329561223,
							42.39600449131833,
							0
						],
						[
							-76.29831629560319,
							42.39604349132704,
							0
						],
						[
							-76.29823429558206,
							42.3961144913435,
							0
						],
						[
							-76.29806429553713,
							42.39624649137478,
							0
						],
						[
							-76.29791029549527,
							42.39635049140026,
							0
						],
						[
							-76.29790129549363,
							42.39636749140379,
							0
						],
						[
							-76.29784929547934,
							42.39640049141197,
							0
						],
						[
							-76.29770829544326,
							42.396526491441,
							0
						],
						[
							-76.29769329544123,
							42.39656449144864,
							0
						],
						[
							-76.29766429543382,
							42.39659049145463,
							0
						],
						[
							-76.29765629543257,
							42.39660849145828,
							0
						],
						[
							-76.29763429542675,
							42.39662549146232,
							0
						],
						[
							-76.29763429542835,
							42.3966474914664,
							0
						],
						[
							-76.29759729541846,
							42.39667449147289,
							0
						],
						[
							-76.29758229541605,
							42.39670749147962,
							0
						],
						[
							-76.29756029541014,
							42.39672349148347,
							0
						],
						[
							-76.29754529540934,
							42.39677849149424,
							0
						],
						[
							-76.29751629540164,
							42.3968004914995,
							0
						],
						[
							-76.29749329540032,
							42.39688349151581,
							0
						],
						[
							-76.29744329539244,
							42.39699549153858,
							0
						],
						[
							-76.29742729538832,
							42.39700949154182,
							0
						],
						[
							-76.2973972953927,
							42.39720149157864,
							0
						],
						[
							-76.2974112953994,
							42.39723149158361,
							0
						],
						[
							-76.29742729540556,
							42.39724549158558,
							0
						],
						[
							-76.29741929540577,
							42.39728349159293,
							0
						],
						[
							-76.29744029541871,
							42.39736849160786,
							0
						],
						[
							-76.29745629542488,
							42.3973824916098,
							0
						],
						[
							-76.29747729543942,
							42.3974894916288,
							0
						],
						[
							-76.29749329544558,
							42.39750349163076,
							0
						],
						[
							-76.2974862954554,
							42.39766849166163,
							0
						],
						[
							-76.29746429545271,
							42.39772849167363,
							0
						],
						[
							-76.29743429544709,
							42.39778349168503,
							0
						],
						[
							-76.29741429544212,
							42.39780349168956,
							0
						],
						[
							-76.2974122954428,
							42.39782149169297,
							0
						],
						[
							-76.29739729544002,
							42.39784949169877,
							0
						],
						[
							-76.29737529543412,
							42.3978654917026,
							0
						],
						[
							-76.29736029543216,
							42.39790449171044,
							0
						],
						[
							-76.29733829542627,
							42.39792049171428,
							0
						],
						[
							-76.2973232954243,
							42.39795949172213,
							0
						],
						[
							-76.29729629541666,
							42.39797349172581,
							0
						],
						[
							-76.297293295417,
							42.39799149172927,
							0
						],
						[
							-76.29725629540717,
							42.39801949173594,
							0
						],
						[
							-76.29725629540877,
							42.39804149174,
							0
						],
						[
							-76.29721929539889,
							42.39806849174651,
							0
						],
						[
							-76.29720429539647,
							42.39810149175322,
							0
						],
						[
							-76.29718229539064,
							42.39811849175725,
							0
						],
						[
							-76.2971672953886,
							42.3981564917649,
							0
						],
						[
							-76.29714529538278,
							42.39817349176894,
							0
						],
						[
							-76.29713029538199,
							42.39822849177973,
							0
						],
						[
							-76.2971152953787,
							42.39824949178424,
							0
						],
						[
							-76.29707829537689,
							42.39838749181131,
							0
						],
						[
							-76.29707129538984,
							42.39859549185015,
							0
						],
						[
							-76.29704929539481,
							42.39876049188162,
							0
						],
						[
							-76.29703429539119,
							42.39877649188518,
							0
						],
						[
							-76.29699729538618,
							42.39887049190411,
							0
						],
						[
							-76.2969522953769,
							42.39894149191907,
							0
						],
						[
							-76.2969332953719,
							42.39895649192261,
							0
						],
						[
							-76.29693029537225,
							42.39897449192608,
							0
						],
						[
							-76.29689329536235,
							42.39900149193256,
							0
						],
						[
							-76.29689329536396,
							42.39902349193662,
							0
						],
						[
							-76.29680429534143,
							42.3991064919556,
							0
						],
						[
							-76.2967742953334,
							42.39912849196089,
							0
						],
						[
							-76.2967352953244,
							42.39917649197133,
							0
						],
						[
							-76.2967302953241,
							42.39919449197488,
							0
						],
						[
							-76.29670029531563,
							42.39921049197905,
							0
						],
						[
							-76.29667829531338,
							42.39927649199218,
							0
						],
						[
							-76.29666329530939,
							42.39928749199481,
							0
						],
						[
							-76.29666329530961,
							42.39929049199537,
							0
						],
						[
							-76.29666329531581,
							42.39937549201112,
							0
						],
						[
							-76.29661929531167,
							42.3995124920383,
							0
						],
						[
							-76.29661929531446,
							42.39955049204534,
							0
						],
						[
							-76.29658329531065,
							42.39965649206643,
							0
						],
						[
							-76.29658229531184,
							42.39967749207037,
							0
						],
						[
							-76.29654529530868,
							42.39979649209391,
							0
						],
						[
							-76.29654529530998,
							42.39981449209724,
							0
						],
						[
							-76.29652829530943,
							42.39988149211035,
							0
						],
						[
							-76.29652829530971,
							42.3998854921111,
							0
						],
						[
							-76.29650029530957,
							42.40000649213464,
							0
						],
						[
							-76.29647029531597,
							42.40022649217664,
							0
						],
						[
							-76.29644829531208,
							42.40026949218549,
							0
						],
						[
							-76.2964042953124,
							42.40046749222396,
							0
						],
						[
							-76.296404295314,
							42.40048949222804,
							0
						],
						[
							-76.29637429531357,
							42.40061549225262,
							0
						],
						[
							-76.29641129533152,
							42.40069849226651,
							0
						],
						[
							-76.29648529536082,
							42.40077449227763,
							0
						],
						[
							-76.29649329536544,
							42.4008024922825,
							0
						],
						[
							-76.29652229537592,
							42.40081849228431,
							0
						],
						[
							-76.29654429538905,
							42.40090149229881,
							0
						],
						[
							-76.29650729538236,
							42.40097249231345,
							0
						],
						[
							-76.29647829537464,
							42.4009944923187,
							0
						],
						[
							-76.29646329537225,
							42.40102749232543,
							0
						],
						[
							-76.29642629536313,
							42.40106549233396,
							0
						],
						[
							-76.29641829536261,
							42.40109349233944,
							0
						],
						[
							-76.29638929535447,
							42.40110949234358,
							0
						],
						[
							-76.29637429535249,
							42.40114849235142,
							0
						],
						[
							-76.29633729534304,
							42.40118149235902,
							0
						],
						[
							-76.29630029533473,
							42.40123049236959,
							0
						],
						[
							-76.29618929530828,
							42.40135649239741,
							0
						],
						[
							-76.29607829527983,
							42.40145449242003,
							0
						],
						[
							-76.29607029527857,
							42.40147249242368,
							0
						],
						[
							-76.29604829527267,
							42.40148849242753,
							0
						],
						[
							-76.29592229524106,
							42.401609492455,
							0
						],
						[
							-76.29584129522016,
							42.40167949247125,
							0
						],
						[
							-76.2958332952189,
							42.4016974924749,
							0
						],
						[
							-76.29574129519528,
							42.4017784924936,
							0
						],
						[
							-76.29572229519044,
							42.40179549249753,
							0
						],
						[
							-76.29565529517497,
							42.4018784925156,
							0
						],
						[
							-76.29565529517694,
							42.40190549252058,
							0
						],
						[
							-76.29561929517006,
							42.40196949253392,
							0
						],
						[
							-76.29561829517104,
							42.4019874925373,
							0
						],
						[
							-76.29558929516656,
							42.40205349255068,
							0
						],
						[
							-76.29558129516641,
							42.40208649255712,
							0
						],
						[
							-76.29553829515734,
							42.4021514925709,
							0
						],
						[
							-76.29553729515834,
							42.40216949257427,
							0
						],
						[
							-76.29550129514948,
							42.40220649258259,
							0
						],
						[
							-76.29549229514784,
							42.4022234925861,
							0
						],
						[
							-76.29541929512915,
							42.40228849260106,
							0
						],
						[
							-76.29541129512789,
							42.40230649260473,
							0
						],
						[
							-76.29521929507742,
							42.40245949264081,
							0
						],
						[
							-76.2952112950761,
							42.40247649264427,
							0
						],
						[
							-76.29518929507019,
							42.40249249264813,
							0
						],
						[
							-76.29517429506822,
							42.40253149265594,
							0
						],
						[
							-76.29515229506234,
							42.40254749265979,
							0
						],
						[
							-76.29512429505714,
							42.40259949267055,
							0
						],
						[
							-76.2951072950527,
							42.40261349267384,
							0
						],
						[
							-76.29510729505401,
							42.40263149267716,
							0
						],
						[
							-76.29507029505004,
							42.40273949269867,
							0
						],
						[
							-76.29507029506208,
							42.40290449272926,
							0
						],
						[
							-76.29508529508348,
							42.40313149277075,
							0
						],
						[
							-76.29510029508944,
							42.4031474927731,
							0
						],
						[
							-76.2951002950918,
							42.40317949277905,
							0
						],
						[
							-76.29512929511432,
							42.40336049281144,
							0
						],
						[
							-76.29516629513621,
							42.40349749283534,
							0
						],
						[
							-76.29518629515044,
							42.40360449285437,
							0
						],
						[
							-76.29520329515692,
							42.40361849285629,
							0
						],
						[
							-76.29521029517883,
							42.40388749290587,
							0
						],
						[
							-76.29518829518213,
							42.40402949293308,
							0
						],
						[
							-76.29513629517267,
							42.40412849295353,
							0
						],
						[
							-76.29509929516364,
							42.40416749296223,
							0
						],
						[
							-76.29506229515657,
							42.40423349297596,
							0
						],
						[
							-76.29504029515068,
							42.4042494929798,
							0
						],
						[
							-76.29504029515266,
							42.4042764929848,
							0
						],
						[
							-76.29500329514283,
							42.40430449299148,
							0
						],
						[
							-76.29498829514041,
							42.40433749299822,
							0
						],
						[
							-76.29496729513521,
							42.40435849300294,
							0
						],
						[
							-76.29495829513357,
							42.40437549300644,
							0
						],
						[
							-76.29492129512373,
							42.40440349301314,
							0
						],
						[
							-76.2949142951255,
							42.4044584930236,
							0
						],
						[
							-76.29488429511704,
							42.40447449302777,
							0
						],
						[
							-76.29486229511721,
							42.404573493047,
							0
						],
						[
							-76.29484929511477,
							42.40459749305197,
							0
						],
						[
							-76.29483329511068,
							42.40461149305521,
							0
						],
						[
							-76.29483329511352,
							42.40465049306243,
							0
						],
						[
							-76.29480429511909,
							42.40485449310141,
							0
						],
						[
							-76.29478829511507,
							42.40486949310485,
							0
						],
						[
							-76.29478829511748,
							42.40490249311094,
							0
						],
						[
							-76.29476629511524,
							42.40496849312406,
							0
						],
						[
							-76.29469929510292,
							42.40509449315012,
							0
						],
						[
							-76.29457329507093,
							42.40521049317668,
							0
						],
						[
							-76.29449929505074,
							42.40525949318874,
							0
						],
						[
							-76.29442529502941,
							42.40529249319781,
							0
						],
						[
							-76.29439529501978,
							42.40529249319901,
							0
						],
						[
							-76.29435129500762,
							42.4053194932058,
							0
						],
						[
							-76.29421029496557,
							42.4053634932196,
							0
						],
						[
							-76.2939292948806,
							42.40543549324421,
							0
						],
						[
							-76.29378829483767,
							42.40546749325582,
							0
						],
						[
							-76.29372929482076,
							42.40549549326336,
							0
						],
						[
							-76.29367729480443,
							42.40550049326637,
							0
						],
						[
							-76.29365529479897,
							42.40552249327134,
							0
						],
						[
							-76.29362529478935,
							42.40552249327255,
							0
						],
						[
							-76.29358129477762,
							42.40555549328042,
							0
						],
						[
							-76.293551294768,
							42.40555549328163,
							0
						],
						[
							-76.29353529476535,
							42.40558949328857,
							0
						],
						[
							-76.29349229475388,
							42.40562149329623,
							0
						],
						[
							-76.29345329474368,
							42.40565349330372,
							0
						],
						[
							-76.29345329474376,
							42.40565449330391,
							0
						],
						[
							-76.29345229474343,
							42.40565449330395,
							0
						],
						[
							-76.29340329473092,
							42.40569849331409,
							0
						],
						[
							-76.29340329473253,
							42.40572049331815,
							0
						],
						[
							-76.29336629472306,
							42.40575349332575,
							0
						],
						[
							-76.29335129472103,
							42.4057914933334,
							0
						],
						[
							-76.29332929471519,
							42.40580849333744,
							0
						],
						[
							-76.29332129471423,
							42.40583049334185,
							0
						],
						[
							-76.29328429470395,
							42.40585249334739,
							0
						],
						[
							-76.29328429470556,
							42.40587449335147,
							0
						],
						[
							-76.29326229469969,
							42.40589049335531,
							0
						],
						[
							-76.29322529469101,
							42.40593449336496,
							0
						],
						[
							-76.29315829467431,
							42.40600049337988,
							0
						],
						[
							-76.29313629466922,
							42.40602749338577,
							0
						],
						[
							-76.29312129467047,
							42.40611049340176,
							0
						],
						[
							-76.2931432946887,
							42.40626349342924,
							0
						],
						[
							-76.29315129469254,
							42.40628049343206,
							0
						],
						[
							-76.2931652946981,
							42.4062954934343,
							0
						],
						[
							-76.29317329470807,
							42.40639649345268,
							0
						],
						[
							-76.29318829471397,
							42.40641149345485,
							0
						],
						[
							-76.29318829472325,
							42.4065384934784,
							0
						],
						[
							-76.29317029472054,
							42.40658049348691,
							0
						],
						[
							-76.29290029463428,
							42.40658649349884,
							0
						],
						[
							-76.29045729385433,
							42.40664749360817,
							0
						],
						[
							-76.28883629333684,
							42.4066884936808,
							0
						],
						[
							-76.26972028723354,
							42.40716649453588,
							0
						],
						[
							-76.26134128455813,
							42.40737649491062,
							0
						],
						[
							-76.25404428222807,
							42.40755849523671,
							0
						],
						[
							-76.25336128201002,
							42.4075764952674,
							0
						],
						[
							-76.25340128207101,
							42.40823649538816,
							0
						],
						[
							-76.25340928208277,
							42.40836249541119,
							0
						],
						[
							-76.25343328211943,
							42.40875949548383,
							0
						],
						[
							-76.25347028217617,
							42.40937449559637,
							0
						],
						[
							-76.25349128220911,
							42.40973349566208,
							0
						],
						[
							-76.25387928280183,
							42.41614949683589,
							0
						],
						[
							-76.25391428285519,
							42.41672649694144,
							0
						],
						[
							-76.25395428291556,
							42.41737749706049,
							0
						],
						[
							-76.25421528331395,
							42.42168749784887,
							0
						],
						[
							-76.25425128336852,
							42.42227649795657,
							0
						],
						[
							-76.25481528422961,
							42.43158749965932,
							0
						],
						[
							-76.25483128425454,
							42.43185849970889,
							0
						],
						[
							-76.25494828443236,
							42.43377850005992,
							0
						],
						[
							-76.25519928481569,
							42.43792150081739,
							0
						],
						[
							-76.25529728485002,
							42.43796050082067,
							0
						],
						[
							-76.25536828487473,
							42.43798650082265,
							0
						],
						[
							-76.25785728572923,
							42.43873850086215,
							0
						],
						[
							-76.25944628627555,
							42.4392295008894,
							0
						],
						[
							-76.26065628669157,
							42.43960350091015,
							0
						],
						[
							-76.26142928696522,
							42.43995050094343,
							0
						],
						[
							-76.26170328706458,
							42.44010550096115,
							0
						],
						[
							-76.26208628720538,
							42.44034850099079,
							0
						],
						[
							-76.26266028742127,
							42.44077950104762,
							0
						],
						[
							-76.26493328828352,
							42.44258650129112,
							0
						],
						[
							-76.26613328874052,
							42.44356450142413,
							0
						],
						[
							-76.26851128963779,
							42.44538850166654,
							0
						],
						[
							-76.26897328981201,
							42.44574150171339,
							0
						],
						[
							-76.26900928982565,
							42.44576950171713,
							0
						],
						[
							-76.26905028984108,
							42.44580050172122,
							0
						],
						[
							-76.27013629013264,
							42.44501750153265,
							0
						],
						[
							-76.27047229022361,
							42.4447855014762,
							0
						],
						[
							-76.27063529026718,
							42.44466550144744,
							0
						],
						[
							-76.27082829032268,
							42.4445765014232,
							0
						],
						[
							-76.27098029036821,
							42.44453150140878,
							0
						],
						[
							-76.27118229043208,
							42.44451750139807,
							0
						],
						[
							-76.2712532904546,
							42.44451350139449,
							0
						],
						[
							-76.27242229082579,
							42.44445450133664,
							0
						],
						[
							-76.27617129201867,
							42.44429950115751,
							0
						],
						[
							-76.2773582923982,
							42.44427550110542,
							0
						],
						[
							-76.28055129341898,
							42.44420950096506,
							0
						],
						[
							-76.28068729346164,
							42.44419550095701,
							0
						],
						[
							-76.28074529347985,
							42.44418950095356,
							0
						],
						[
							-76.28077729348902,
							42.44417450094949,
							0
						],
						[
							-76.2808972935237,
							42.44412150093488,
							0
						],
						[
							-76.28109329358014,
							42.44403250091052,
							0
						],
						[
							-76.28122229361732,
							42.44397450089461,
							0
						],
						[
							-76.28217029387609,
							42.4433495007408,
							0
						],
						[
							-76.28272829402891,
							42.44298850065155,
							0
						],
						[
							-76.28350529425134,
							42.44261750055166,
							0
						],
						[
							-76.2847192946016,
							42.44207550040255,
							0
						],
						[
							-76.28617329507095,
							42.44210750035011,
							0
						],
						[
							-76.28653829519516,
							42.44220250035306,
							0
						],
						[
							-76.28672929525692,
							42.4422085003465,
							0
						],
						[
							-76.28678129527378,
							42.44221050034479,
							0
						],
						[
							-76.28788629561683,
							42.44204850027042,
							0
						],
						[
							-76.28850429580172,
							42.44186250021116,
							0
						],
						[
							-76.28934529606012,
							42.44170250014776,
							0
						],
						[
							-76.2893482960624,
							42.44172050015099,
							0
						],
						[
							-76.28943329609056,
							42.44173250014979,
							0
						],
						[
							-76.2895222961188,
							42.44172750014528,
							0
						],
						[
							-76.28992429624198,
							42.44164650011417,
							0
						],
						[
							-76.29054529643003,
							42.44149050006033,
							0
						],
						[
							-76.29117129661843,
							42.44131750000314,
							0
						],
						[
							-76.29129529665613,
							42.44128849999279,
							0
						],
						[
							-76.29202929688367,
							42.4411764999426,
							0
						],
						[
							-76.29262929706928,
							42.44107949990054,
							0
						],
						[
							-76.29343729731167,
							42.44084549982475,
							0
						],
						[
							-76.29350429733245,
							42.44083549982022,
							0
						],
						[
							-76.29357129735398,
							42.44083549981752,
							0
						],
						[
							-76.29437629761975,
							42.44093449980353,
							0
						],
						[
							-76.2945462976762,
							42.44095949980133,
							0
						],
						[
							-76.29501829782704,
							42.44094949978054,
							0
						],
						[
							-76.29572529805354,
							42.44094149975065,
							0
						],
						[
							-76.29739729858548,
							42.44087249967074,
							0
						],
						[
							-76.29861229897342,
							42.44084149961621,
							0
						],
						[
							-76.29888929906151,
							42.44082949960286,
							0
						],
						[
							-76.29954829927257,
							42.44082149957492,
							0
						],
						[
							-76.30003929942889,
							42.44080249955167,
							0
						],
						[
							-76.30079329966838,
							42.44076649951472,
							0
						],
						[
							-76.30109029976224,
							42.44074549949891,
							0
						],
						[
							-76.30245330019822,
							42.4407214994397,
							0
						],
						[
							-76.3029743003654,
							42.44071949941841,
							0
						],
						[
							-76.30321230044264,
							42.44073049941088,
							0
						],
						[
							-76.30390630066692,
							42.44074949938653,
							0
						],
						[
							-76.30473630093611,
							42.44078549935987,
							0
						],
						[
							-76.30566630123397,
							42.44077449932046,
							0
						],
						[
							-76.30628630143191,
							42.44075849929259,
							0
						],
						[
							-76.30659830153125,
							42.44074649927783,
							0
						],
						[
							-76.30745930180798,
							42.44074949924379,
							0
						],
						[
							-76.3078773019392,
							42.44070849921942,
							0
						],
						[
							-76.30829230207118,
							42.4406904991994,
							0
						],
						[
							-76.30847930213108,
							42.44068849919152,
							0
						],
						[
							-76.3087053022041,
							42.44069449918356,
							0
						],
						[
							-76.30921230237014,
							42.44073849917133,
							0
						],
						[
							-76.30930530240427,
							42.44079649917834,
							0
						],
						[
							-76.3095993025106,
							42.44095949919671,
							0
						],
						[
							-76.31041730280891,
							42.44144549925384,
							0
						],
						[
							-76.31048130283267,
							42.4414894992594,
							0
						],
						[
							-76.31191630335894,
							42.44238249936711,
							0
						],
						[
							-76.3121923034588,
							42.44253549938433,
							0
						],
						[
							-76.31229930349747,
							42.44259449939096,
							0
						],
						[
							-76.31243530354297,
							42.44261949939015,
							0
						],
						[
							-76.31256030358438,
							42.44263649938826,
							0
						],
						[
							-76.31268730362574,
							42.44264449938464,
							0
						],
						[
							-76.31372430395591,
							42.44260549933573,
							0
						],
						[
							-76.31380130398087,
							42.4426084993332,
							0
						],
						[
							-76.31413830409245,
							42.44265449932819,
							0
						],
						[
							-76.31421530409929,
							42.4424104992799,
							0
						],
						[
							-76.3143593041227,
							42.44209849921635,
							0
						],
						[
							-76.31437130412493,
							42.44207649921179,
							0
						],
						[
							-76.31439830413025,
							42.44203049920219,
							0
						],
						[
							-76.31483430422996,
							42.44148049908282,
							0
						],
						[
							-76.31499230426738,
							42.44129849904277,
							0
						],
						[
							-76.31595230449942,
							42.44025749881143,
							0
						],
						[
							-76.31767830491654,
							42.43838549839542,
							0
						],
						[
							-76.31904830524648,
							42.43688349806222,
							0
						],
						[
							-76.31937130532654,
							42.43656049798941,
							0
						],
						[
							-76.31954130537007,
							42.43640949795463,
							0
						],
						[
							-76.31967730540575,
							42.43630049792896,
							0
						],
						[
							-76.31982330544524,
							42.43619949790439,
							0
						],
						[
							-76.32022230555556,
							42.43595649784336,
							0
						],
						[
							-76.32088330574051,
							42.43558349774774,
							0
						],
						[
							-76.3215363059233,
							42.43521649765351,
							0
						],
						[
							-76.32205030606616,
							42.43491349757674,
							0
						],
						[
							-76.32242230617112,
							42.43471549752513,
							0
						],
						[
							-76.32250830619405,
							42.43465149750982,
							0
						],
						[
							-76.32278430627117,
							42.43449449746964,
							0
						],
						[
							-76.32317730638023,
							42.43426049741051,
							0
						],
						[
							-76.3233533064284,
							42.43414649738232,
							0
						],
						[
							-76.32369530651975,
							42.43389449732192,
							0
						],
						[
							-76.32397630659328,
							42.4336664972684,
							0
						],
						[
							-76.32424030666063,
							42.4334284972137,
							0
						],
						[
							-76.32447330671947,
							42.43321049716398,
							0
						],
						[
							-76.32471230678215,
							42.43301849711881,
							0
						],
						[
							-76.32485330682032,
							42.43292149709518,
							0
						],
						[
							-76.32498430685702,
							42.43284849707639,
							0
						],
						[
							-76.32525430693522,
							42.43273249704406,
							0
						],
						[
							-76.32578330708978,
							42.43252349698408,
							0
						],
						[
							-76.32648830729713,
							42.43226349690759,
							0
						],
						[
							-76.32674630737351,
							42.43217549688093,
							0
						],
						[
							-76.32744230758483,
							42.43200949682221,
							0
						],
						[
							-76.32786530771106,
							42.43187849678093,
							0
						],
						[
							-76.32814630779279,
							42.43176249674816,
							0
						],
						[
							-76.32852330790197,
							42.43160049670299,
							0
						],
						[
							-76.33011830835703,
							42.43082149649463,
							0
						],
						[
							-76.33079130854976,
							42.43050249640849,
							0
						],
						[
							-76.33123930867772,
							42.43028549635029,
							0
						],
						[
							-76.33164030879497,
							42.4301284963051,
							0
						],
						[
							-76.33214030894021,
							42.42991949624626,
							0
						],
						[
							-76.33242830902454,
							42.42980849621414,
							0
						],
						[
							-76.33349130933493,
							42.42938649609325,
							0
						],
						[
							-76.33387930944896,
							42.42924249605098,
							0
						],
						[
							-76.33517630982898,
							42.42874549590679,
							0
						],
						[
							-76.33558830994903,
							42.4285784958593,
							0
						],
						[
							-76.33570430998218,
							42.42852249584424,
							0
						],
						[
							-76.33590631003992,
							42.42842549581816,
							0
						],
						[
							-76.3361653101123,
							42.42827849578052,
							0
						],
						[
							-76.33643231018462,
							42.42809549573589,
							0
						],
						[
							-76.33644031018683,
							42.42809049573465,
							0
						],
						[
							-76.33676731027447,
							42.4278534956776,
							0
						],
						[
							-76.33722531039469,
							42.4274874955914,
							0
						],
						[
							-76.33751231047108,
							42.42727249554005,
							0
						],
						[
							-76.33780131054681,
							42.42703949548527,
							0
						],
						[
							-76.33807731061835,
							42.42680649543102,
							0
						],
						[
							-76.33828531067076,
							42.42661049538634,
							0
						],
						[
							-76.33861231074947,
							42.42625149530671,
							0
						],
						[
							-76.33876931078586,
							42.42606049526502,
							0
						],
						[
							-76.33894831082634,
							42.42582849521484,
							0
						],
						[
							-76.33906531085057,
							42.42564649517644,
							0
						],
						[
							-76.33921331087721,
							42.4253614951177,
							0
						],
						[
							-76.33931531089303,
							42.42513049507079,
							0
						],
						[
							-76.33973231104078,
							42.42531949508907,
							0
						],
						[
							-76.34005931114612,
							42.42532449507682,
							0
						],
						[
							-76.3402053111935,
							42.42533149507225,
							0
						],
						[
							-76.34082131139539,
							42.42538749505785,
							0
						],
						[
							-76.3411633115062,
							42.42540149504671,
							0
						],
						[
							-76.34145131159873,
							42.42540249503531,
							0
						],
						[
							-76.34173731168872,
							42.42537749501918,
							0
						],
						[
							-76.34201831177572,
							42.42533349499973,
							0
						],
						[
							-76.34214531181436,
							42.42530449498925,
							0
						],
						[
							-76.34229231185914,
							42.42527149497724,
							0
						],
						[
							-76.34255431193674,
							42.42518249495021,
							0
						],
						[
							-76.34280431200922,
							42.42507649492053,
							0
						],
						[
							-76.34303731207496,
							42.42495249488817,
							0
						],
						[
							-76.34325031213287,
							42.42480949485314,
							0
						],
						[
							-76.3435523122134,
							42.4245854947995,
							0
						],
						[
							-76.34377331227066,
							42.42439849475596,
							0
						],
						[
							-76.34393931231288,
							42.42424749472134,
							0
						],
						[
							-76.34402031233428,
							42.42418449470641,
							0
						],
						[
							-76.34410831235813,
							42.42412449469174,
							0
						],
						[
							-76.34420431238492,
							42.4240694946777,
							0
						],
						[
							-76.34430931241556,
							42.4240274946657,
							0
						],
						[
							-76.34441831244784,
							42.42399049465446,
							0
						],
						[
							-76.34453131248199,
							42.42396149464454,
							0
						],
						[
							-76.34495331261286,
							42.42389849461591,
							0
						],
						[
							-76.3453313127312,
							42.42385749459311,
							0
						],
						[
							-76.34574931286276,
							42.42382149456963,
							0
						],
						[
							-76.34619131300097,
							42.42377149454259,
							0
						],
						[
							-76.34640931306784,
							42.42372849452587,
							0
						],
						[
							-76.34657131311538,
							42.42366749450806,
							0
						],
						[
							-76.34671731315785,
							42.42360749449105,
							0
						],
						[
							-76.34693831322133,
							42.4235054944633,
							0
						],
						[
							-76.34725931331258,
							42.42334449442055,
							0
						],
						[
							-76.34782631347072,
							42.42301849433736,
							0
						],
						[
							-76.34812631355354,
							42.42283449429122,
							0
						],
						[
							-76.3487503137289,
							42.42249349420295,
							0
						],
						[
							-76.34904031381122,
							42.42234649416406,
							0
						],
						[
							-76.3493343138954,
							42.42220749412651,
							0
						],
						[
							-76.34957931396725,
							42.42211449409942,
							0
						],
						[
							-76.34980931403595,
							42.42204449407721,
							0
						],
						[
							-76.35012831413411,
							42.42198649405364,
							0
						],
						[
							-76.35091631438013,
							42.42189149400434,
							0
						],
						[
							-76.35127931449306,
							42.42184249398066,
							0
						],
						[
							-76.35155731458009,
							42.42181249396393,
							0
						],
						[
							-76.35191431469245,
							42.42178149394383,
							0
						],
						[
							-76.35236631483615,
							42.42176249392212,
							0
						],
						[
							-76.35270231494373,
							42.42175849390785,
							0
						],
						[
							-76.3530053150404,
							42.42175049389418,
							0
						],
						[
							-76.35395831534554,
							42.42173949385382,
							0
						],
						[
							-76.35420031542196,
							42.42172249384095,
							0
						],
						[
							-76.35443631549553,
							42.42169249382588,
							0
						],
						[
							-76.35462331555183,
							42.42164149380892,
							0
						],
						[
							-76.35480731560475,
							42.42155749378595,
							0
						],
						[
							-76.35501331566508,
							42.42147849376302,
							0
						],
						[
							-76.35544031579255,
							42.4213474937216,
							0
						],
						[
							-76.35572631588019,
							42.42129049369952,
							0
						],
						[
							-76.35623031603758,
							42.42123049366813,
							0
						],
						[
							-76.35662931616662,
							42.4212434936545,
							0
						],
						[
							-76.3568413162381,
							42.42129049365467,
							0
						],
						[
							-76.35699731629201,
							42.42134249365804,
							0
						],
						[
							-76.35718531635652,
							42.42139949366103,
							0
						],
						[
							-76.35751531647273,
							42.42153949367367,
							0
						],
						[
							-76.35874931691268,
							42.42213749373478,
							0
						],
						[
							-76.35934631712361,
							42.42240049375948,
							0
						],
						[
							-76.35960931721573,
							42.42250549376835,
							0
						],
						[
							-76.35986631730358,
							42.42257849377153,
							0
						],
						[
							-76.3614703178445,
							42.42293349377275,
							0
						],
						[
							-76.36186631797874,
							42.42303049377478,
							0
						],
						[
							-76.36215431807697,
							42.42310949377781,
							0
						],
						[
							-76.36240731816231,
							42.42316549377801,
							0
						],
						[
							-76.36268131825202,
							42.42318949377143,
							0
						],
						[
							-76.36296731834258,
							42.42317249375676,
							0
						],
						[
							-76.36343731848707,
							42.42308549372175,
							0
						],
						[
							-76.36417631871278,
							42.42292849366292,
							0
						],
						[
							-76.36445631879747,
							42.42285749363852,
							0
						],
						[
							-76.36552031911599,
							42.42254349353753,
							0
						],
						[
							-76.36573431917918,
							42.42246849351504,
							0
						],
						[
							-76.36612731929347,
							42.42230649346921,
							0
						],
						[
							-76.36657931942197,
							42.42208049340917,
							0
						],
						[
							-76.36691731951625,
							42.42188649335962,
							0
						],
						[
							-76.36727231961437,
							42.42167049330531,
							0
						],
						[
							-76.36782231976474,
							42.42131349321709,
							0
						],
						[
							-76.36805231982808,
							42.42117049318134,
							0
						],
						[
							-76.36820531986885,
							42.42105649315406,
							0
						],
						[
							-76.36837431991437,
							42.42093749312522,
							0
						],
						[
							-76.36853331995601,
							42.42080949309511,
							0
						],
						[
							-76.36869431999926,
							42.42069449306732,
							0
						],
						[
							-76.36881932003236,
							42.42059849304451,
							0
						],
						[
							-76.36903032008968,
							42.42045649300973,
							0
						],
						[
							-76.36910232011044,
							42.42042449300089,
							0
						],
						[
							-76.36918132013243,
							42.42037849298921,
							0
						],
						[
							-76.36974732029445,
							42.42011049291678,
							0
						],
						[
							-76.37015532041016,
							42.41990249286184,
							0
						],
						[
							-76.37040432048195,
							42.41979149283127,
							0
						],
						[
							-76.370478320504,
							42.41976849282401,
							0
						],
						[
							-76.37054632052481,
							42.41975449281868,
							0
						],
						[
							-76.37068032056638,
							42.4197344928096,
							0
						],
						[
							-76.37086832062525,
							42.41971449279832,
							0
						],
						[
							-76.37123532074068,
							42.41968249277762,
							0
						],
						[
							-76.37244332112677,
							42.41965949272474,
							0
						],
						[
							-76.37310232133639,
							42.41963349269339,
							0
						],
						[
							-76.37354932147716,
							42.41959649266855,
							0
						],
						[
							-76.37409232164535,
							42.41951349263132,
							0
						],
						[
							-76.37421732168306,
							42.41948049262017,
							0
						],
						[
							-76.37394132157196,
							42.41917349257442,
							0
						],
						[
							-76.37359432143346,
							42.41880349251985,
							0
						],
						[
							-76.3734003213535,
							42.41856249248303,
							0
						],
						[
							-76.37325332129093,
							42.41835249245006,
							0
						],
						[
							-76.37308532121574,
							42.4180624924031,
							0
						],
						[
							-76.37286732111028,
							42.41757849232221,
							0
						],
						[
							-76.37275632105231,
							42.41727349227021,
							0
						],
						[
							-76.37271932103022,
							42.41713449224594,
							0
						],
						[
							-76.37269832101293,
							42.4169904922201,
							0
						],
						[
							-76.37267432096469,
							42.41643749211866,
							0
						],
						[
							-76.37266532089971,
							42.41559049196212,
							0
						],
						[
							-76.37263632080197,
							42.4143844917399,
							0
						],
						[
							-76.37259132074628,
							42.4138214916374,
							0
						],
						[
							-76.37257632072769,
							42.41363349160318,
							0
						],
						[
							-76.37246132059776,
							42.41236449137273,
							0
						],
						[
							-76.37233932045446,
							42.4109434911144,
							0
						],
						[
							-76.37217632031415,
							42.40974249089845,
							0
						],
						[
							-76.37212532026582,
							42.40930649081973,
							0
						],
						[
							-76.37201832017118,
							42.40848349067154,
							0
						],
						[
							-76.37198232013597,
							42.40816049061317,
							0
						],
						[
							-76.37184032002385,
							42.40725249045064,
							0
						],
						[
							-76.37179431998966,
							42.4069874904034,
							0
						],
						[
							-76.37174131995589,
							42.4067584903631,
							0
						],
						[
							-76.37168931992505,
							42.40656549032944,
							0
						],
						[
							-76.37162831989362,
							42.40640349030187,
							0
						],
						[
							-76.37155731985837,
							42.40623349027323,
							0
						],
						[
							-76.3714923198277,
							42.40609949025102,
							0
						],
						[
							-76.37141731979476,
							42.40597849023163,
							0
						],
						[
							-76.37136131976594,
							42.40583049020645,
							0
						],
						[
							-76.37118531968653,
							42.40551749015553,
							0
						],
						[
							-76.37099031960233,
							42.40522249010873,
							0
						],
						[
							-76.37085831954694,
							42.40504449008106,
							0
						],
						[
							-76.37071931948759,
							42.40484349004942,
							0
						],
						[
							-76.37059731943636,
							42.40467849002373,
							0
						],
						[
							-76.37046331937789,
							42.40446748999002,
							0
						],
						[
							-76.37027431929636,
							42.40418248994484,
							0
						],
						[
							-76.3697823190778,
							42.40335448981121,
							0
						],
						[
							-76.36906331875338,
							42.40207548960311,
							0
						],
						[
							-76.36881331863843,
							42.40160148952533,
							0
						],
						[
							-76.36853631851379,
							42.40111348944604,
							0
						],
						[
							-76.36827931839723,
							42.40064848937021,
							0
						],
						[
							-76.36773531814761,
							42.39962348920215,
							0
						],
						[
							-76.36763431810047,
							42.39942248916898,
							0
						],
						[
							-76.36763331810009,
							42.39942148916882,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090019001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>86026172</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>131238</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.3885919</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.2988089</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090019001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090019001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1408</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>609</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>21256.98</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.86</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27647</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27309</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28620</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>15177</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14835</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15723</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8907</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8640</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9230</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6269</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6193</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6490</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.8</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.03</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1950</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>76</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2392</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>291</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>4487</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1104</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1216</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>858</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>69</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00001"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.47565235697579,
							42.45670449541606,
							0
						],
						[
							-76.47613935712963,
							42.45667149539025,
							0
						],
						[
							-76.47632735719012,
							42.45667349538302,
							0
						],
						[
							-76.476611357282,
							42.45668349537338,
							0
						],
						[
							-76.47668535730632,
							42.45669149537187,
							0
						],
						[
							-76.4768653573649,
							42.45670249536663,
							0
						],
						[
							-76.47744435755446,
							42.45675349535263,
							0
						],
						[
							-76.47830335783433,
							42.45681049532842,
							0
						],
						[
							-76.478526357907,
							42.45682549532217,
							0
						],
						[
							-76.47864635794544,
							42.45682449531714,
							0
						],
						[
							-76.47899935805731,
							42.45680549529934,
							0
						],
						[
							-76.47934635816506,
							42.45675649527626,
							0
						],
						[
							-76.47964935825772,
							42.45669449525254,
							0
						],
						[
							-76.4798643583228,
							42.45664149523403,
							0
						],
						[
							-76.4806783585703,
							42.45645549516671,
							0
						],
						[
							-76.48111735870313,
							42.45634649512876,
							0
						],
						[
							-76.48130535876093,
							42.45631249511489,
							0
						],
						[
							-76.48082435852567,
							42.45521549493149,
							0
						],
						[
							-76.48080935851509,
							42.45513749491767,
							0
						],
						[
							-76.48081935851313,
							42.45506749490433,
							0
						],
						[
							-76.48084035851647,
							42.45502149489496,
							0
						],
						[
							-76.48088035852561,
							42.4549714948841,
							0
						],
						[
							-76.48093335853962,
							42.45493049487439,
							0
						],
						[
							-76.48099635855709,
							42.45489349486498,
							0
						],
						[
							-76.48129535864345,
							42.45476349482884,
							0
						],
						[
							-76.48136835866349,
							42.45471749481738,
							0
						],
						[
							-76.48142635867804,
							42.45466249480487,
							0
						],
						[
							-76.48146735868654,
							42.45459949479157,
							0
						],
						[
							-76.48148935868859,
							42.45453149477809,
							0
						],
						[
							-76.48156735871585,
							42.45456149478049,
							0
						],
						[
							-76.48170335876205,
							42.45459649478147,
							0
						],
						[
							-76.48194635884343,
							42.45464249478013,
							0
						],
						[
							-76.48211535889884,
							42.45465849477625,
							0
						],
						[
							-76.48230235896196,
							42.45470049477646,
							0
						],
						[
							-76.48312135922431,
							42.45469449474221,
							0
						],
						[
							-76.48335235929726,
							42.45467849472991,
							0
						],
						[
							-76.48341135931544,
							42.45466849472567,
							0
						],
						[
							-76.48347135933435,
							42.4546634947223,
							0
						],
						[
							-76.48363535938482,
							42.45463449471033,
							0
						],
						[
							-76.48369735940331,
							42.45461549470429,
							0
						],
						[
							-76.48379835943263,
							42.45457349469244,
							0
						],
						[
							-76.48375335938299,
							42.45409649460603,
							0
						],
						[
							-76.4837053593391,
							42.4537104945366,
							0
						],
						[
							-76.48367135932325,
							42.45364349452559,
							0
						],
						[
							-76.48362935929119,
							42.4533914944807,
							0
						],
						[
							-76.48359435925805,
							42.45309449442719,
							0
						],
						[
							-76.48358735924886,
							42.45300049441007,
							0
						],
						[
							-76.4835943592478,
							42.45295549440149,
							0
						],
						[
							-76.4840383593812,
							42.45283249436078,
							0
						],
						[
							-76.48439935948709,
							42.4526974943212,
							0
						],
						[
							-76.4846093595496,
							42.45263149430048,
							0
						],
						[
							-76.48477935960133,
							42.45259349428658,
							0
						],
						[
							-76.48519535972973,
							42.45252449425699,
							0
						],
						[
							-76.48537535978632,
							42.45250849424676,
							0
						],
						[
							-76.48543935980683,
							42.45250849424418,
							0
						],
						[
							-76.48551035982918,
							42.45250249424019,
							0
						],
						[
							-76.4856213598654,
							42.45251049423717,
							0
						],
						[
							-76.48573235990219,
							42.45252649423566,
							0
						],
						[
							-76.48578935992145,
							42.45253949423574,
							0
						],
						[
							-76.48597535998593,
							42.45260449424026,
							0
						],
						[
							-76.48604036000906,
							42.45263549424333,
							0
						],
						[
							-76.48611536003638,
							42.45267949424843,
							0
						],
						[
							-76.48616036005207,
							42.45269649424976,
							0
						],
						[
							-76.48630636010179,
							42.45273549425106,
							0
						],
						[
							-76.48640036013387,
							42.45276149425208,
							0
						],
						[
							-76.48661436020433,
							42.45278549424785,
							0
						],
						[
							-76.48677836025745,
							42.4527924942425,
							0
						],
						[
							-76.4874293604657,
							42.4527834942145,
							0
						],
						[
							-76.48798636064427,
							42.45278149419161,
							0
						],
						[
							-76.48816636070151,
							42.45277449418303,
							0
						],
						[
							-76.4886093608399,
							42.45272349415566,
							0
						],
						[
							-76.48875836088689,
							42.45271249414758,
							0
						],
						[
							-76.48884936091602,
							42.45271149414374,
							0
						],
						[
							-76.4890053609666,
							42.4527184941387,
							0
						],
						[
							-76.48910736100088,
							42.45273949413848,
							0
						],
						[
							-76.48917336102369,
							42.45276149413987,
							0
						],
						[
							-76.48932236107666,
							42.45283149414679,
							0
						],
						[
							-76.48939236110104,
							42.45285749414876,
							0
						],
						[
							-76.4894503611206,
							42.45287049414881,
							0
						],
						[
							-76.4895083611398,
							42.45287849414794,
							0
						],
						[
							-76.48956936115901,
							42.45287349414456,
							0
						],
						[
							-76.48962936117752,
							42.45286349414029,
							0
						],
						[
							-76.48968236119283,
							42.45284049413389,
							0
						],
						[
							-76.48972936120585,
							42.45281249412681,
							0
						],
						[
							-76.48978336120649,
							42.45258649408283,
							0
						],
						[
							-76.48979136120266,
							42.45249949406641,
							0
						],
						[
							-76.4897953612012,
							42.4524624940594,
							0
						],
						[
							-76.48980936119581,
							42.45232849403406,
							0
						],
						[
							-76.48894636091654,
							42.45229649406305,
							0
						],
						[
							-76.48850336077328,
							42.4522814940782,
							0
						],
						[
							-76.48819836065297,
							42.45197749403432,
							0
						],
						[
							-76.48732236036828,
							42.45192849406072,
							0
						],
						[
							-76.48605235996392,
							42.45197149412006,
							0
						],
						[
							-76.48478735955256,
							42.45189749415755,
							0
						],
						[
							-76.48421335939979,
							42.45232349425955,
							0
						],
						[
							-76.48380635928342,
							42.45251649431172,
							0
						],
						[
							-76.48324635910174,
							42.45248949432938,
							0
						],
						[
							-76.48220235871953,
							42.45184949425325,
							0
						],
						[
							-76.4816743585299,
							42.45157549422394,
							0
						],
						[
							-76.48156935849222,
							42.4515214942182,
							0
						],
						[
							-76.48118335836487,
							42.45147449422512,
							0
						],
						[
							-76.48038835811502,
							42.45154549427041,
							0
						],
						[
							-76.47956035787145,
							42.4518454943594,
							0
						],
						[
							-76.47894035768186,
							42.45197249440795,
							0
						],
						[
							-76.47841835751782,
							42.45201949443776,
							0
						],
						[
							-76.47785135732569,
							42.45188149443518,
							0
						],
						[
							-76.47702235704102,
							42.45162849442193,
							0
						],
						[
							-76.4762063567546,
							42.45129549439333,
							0
						],
						[
							-76.47544435649387,
							42.45107549438347,
							0
						],
						[
							-76.47504035636297,
							42.45105849439664,
							0
						],
						[
							-76.47495435633618,
							42.45106949440216,
							0
						],
						[
							-76.47484435630184,
							42.45108249440902,
							0
						],
						[
							-76.47467735625172,
							42.45112949442446,
							0
						],
						[
							-76.47402535605909,
							42.45135449449247,
							0
						],
						[
							-76.47365335595187,
							42.451519494538,
							0
						],
						[
							-76.47325535583411,
							42.45165449457907,
							0
						],
						[
							-76.47299535576742,
							42.45188149463158,
							0
						],
						[
							-76.47280135573739,
							42.45231849472023,
							0
						],
						[
							-76.47302835583612,
							42.45266949477598,
							0
						],
						[
							-76.4730393558636,
							42.45299449483564,
							0
						],
						[
							-76.47254135576044,
							42.45376249499782,
							0
						],
						[
							-76.47138735538208,
							42.45365349502432,
							0
						],
						[
							-76.47071835514113,
							42.45329749498554,
							0
						],
						[
							-76.47063835510949,
							42.4532164949738,
							0
						],
						[
							-76.4705593550781,
							42.45313449496183,
							0
						],
						[
							-76.47029035497134,
							42.45285749492147,
							0
						],
						[
							-76.46939935461506,
							42.45190349478105,
							0
						],
						[
							-76.46865835433104,
							42.45127649469505,
							0
						],
						[
							-76.46761535395447,
							42.45070849463218,
							0
						],
						[
							-76.46710635379672,
							42.45078449466679,
							0
						],
						[
							-76.46652035364694,
							42.45130349478648,
							0
						],
						[
							-76.46635935360572,
							42.45144549481927,
							0
						],
						[
							-76.46599535354952,
							42.45226749498601,
							0
						],
						[
							-76.4659463535377,
							42.4523204949978,
							0
						],
						[
							-76.46563635346364,
							42.45266549507414,
							0
						],
						[
							-76.46518135333739,
							42.45293349514211,
							0
						],
						[
							-76.46418935303998,
							42.45321749523474,
							0
						],
						[
							-76.46280035261059,
							42.45343949533194,
							0
						],
						[
							-76.46096135201864,
							42.45341549540185,
							0
						],
						[
							-76.46037435182501,
							42.45334449541245,
							0
						],
						[
							-76.4600113517072,
							42.45332649542378,
							0
						],
						[
							-76.45929935148246,
							42.45337749546199,
							0
						],
						[
							-76.45896435137672,
							42.45340149547997,
							0
						],
						[
							-76.4585033512343,
							42.4534764955125,
							0
						],
						[
							-76.45750435094095,
							42.4538464956213,
							0
						],
						[
							-76.4565783506891,
							42.45446149577246,
							0
						],
						[
							-76.45580335048274,
							42.45503649591016,
							0
						],
						[
							-76.45549735038867,
							42.45509249593287,
							0
						],
						[
							-76.45516935028783,
							42.45515249595723,
							0
						],
						[
							-76.45420434997709,
							42.45513849599362,
							0
						],
						[
							-76.45239434939714,
							42.45515149606919,
							0
						],
						[
							-76.45188234924608,
							42.45533149612317,
							0
						],
						[
							-76.45130234907968,
							42.45559949619616,
							0
						],
						[
							-76.450102348719,
							42.45593149630609,
							0
						],
						[
							-76.4498163486208,
							42.45584449630154,
							0
						],
						[
							-76.44944434849307,
							42.45573149629568,
							0
						],
						[
							-76.44763534783694,
							42.45470649617919,
							0
						],
						[
							-76.44691134757508,
							42.45430649613445,
							0
						],
						[
							-76.44609534729778,
							42.45409749612875,
							0
						],
						[
							-76.44601334727327,
							42.4541214961365,
							0
						],
						[
							-76.44493234694922,
							42.45443249623771,
							0
						],
						[
							-76.44456534684646,
							42.45463649629027,
							0
						],
						[
							-76.44448534682144,
							42.45464549629517,
							0
						],
						[
							-76.44444934680922,
							42.45463649629497,
							0
						],
						[
							-76.44441634679988,
							42.45465349629944,
							0
						],
						[
							-76.44430734676578,
							42.45466549630606,
							0
						],
						[
							-76.44387634662236,
							42.45459649631072,
							0
						],
						[
							-76.44365534654878,
							42.45456049631298,
							0
						],
						[
							-76.44344534648293,
							42.45458149632534,
							0
						],
						[
							-76.44184234599223,
							42.45490449644984,
							0
						],
						[
							-76.44101134572999,
							42.45496549649471,
							0
						],
						[
							-76.4401283454767,
							42.45537449660602,
							0
						],
						[
							-76.43937434524646,
							42.45553449666608,
							0
						],
						[
							-76.43876834507002,
							42.45577949673585,
							0
						],
						[
							-76.43855734505105,
							42.45644149686684,
							0
						],
						[
							-76.43846034505492,
							42.4569164969586,
							0
						],
						[
							-76.43855334508808,
							42.45696149696317,
							0
						],
						[
							-76.43858434509906,
							42.45697549696452,
							0
						],
						[
							-76.43897034523646,
							42.45715849698279,
							0
						],
						[
							-76.43904234526279,
							42.457202496988,
							0
						],
						[
							-76.43910734528757,
							42.45725549699517,
							0
						],
						[
							-76.43916434530976,
							42.45730849700269,
							0
						],
						[
							-76.43921334532976,
							42.45736649701142,
							0
						],
						[
							-76.43925434534756,
							42.45742949702142,
							0
						],
						[
							-76.43939234541597,
							42.45775649707632,
							0
						],
						[
							-76.43940934542664,
							42.45782749708877,
							0
						],
						[
							-76.4394163454339,
							42.45789549710106,
							0
						],
						[
							-76.43941534543887,
							42.45796749711441,
							0
						],
						[
							-76.43940334544033,
							42.45803949712822,
							0
						],
						[
							-76.43938134543828,
							42.4581074971417,
							0
						],
						[
							-76.43915034540187,
							42.45861949724571,
							0
						],
						[
							-76.43914134540161,
							42.45865549725274,
							0
						],
						[
							-76.43913834540359,
							42.45869549726025,
							0
						],
						[
							-76.43914634541147,
							42.45876749727325,
							0
						],
						[
							-76.43917634542639,
							42.45883949728535,
							0
						],
						[
							-76.43922534544707,
							42.45890649729577,
							0
						],
						[
							-76.43926834546345,
							42.4589414973005,
							0
						],
						[
							-76.4393803455033,
							42.45899449730578,
							0
						],
						[
							-76.43949534554213,
							42.45902049730596,
							0
						],
						[
							-76.43961434558085,
							42.45902749730243,
							0
						],
						[
							-76.43967434560004,
							42.45902649729983,
							0
						],
						[
							-76.43979134563618,
							42.45900749729159,
							0
						],
						[
							-76.44055334586346,
							42.45877249721733,
							0
						],
						[
							-76.44064934589251,
							42.45874849720903,
							0
						],
						[
							-76.44074834592286,
							42.4587294972015,
							0
						],
						[
							-76.44085034595487,
							42.45871949719555,
							0
						],
						[
							-76.44095334598786,
							42.45871849719119,
							0
						],
						[
							-76.44105534602112,
							42.45872549718837,
							0
						],
						[
							-76.4411563460545,
							42.45873849718669,
							0
						],
						[
							-76.4412543460875,
							42.45875949718663,
							0
						],
						[
							-76.4413493461202,
							42.45878949718832,
							0
						],
						[
							-76.44143934615167,
							42.45882449719117,
							0
						],
						[
							-76.44152334618187,
							42.45886849719592,
							0
						],
						[
							-76.44160234621086,
							42.45891749720178,
							0
						],
						[
							-76.44167234623723,
							42.45897049720875,
							0
						],
						[
							-76.44210434640895,
							42.45941949727435,
							0
						],
						[
							-76.44231834649135,
							42.4596054973001,
							0
						],
						[
							-76.44373634702086,
							42.4606144974294,
							0
						],
						[
							-76.44381234704953,
							42.46067249743707,
							0
						],
						[
							-76.4439483471023,
							42.4607964974545,
							0
						],
						[
							-76.44405234714424,
							42.46091249747176,
							0
						],
						[
							-76.44414534718398,
							42.46104649749277,
							0
						],
						[
							-76.44421834721764,
							42.46118549751554,
							0
						],
						[
							-76.44474934747917,
							42.46242149772264,
							0
						],
						[
							-76.44513634766376,
							42.46324049785847,
							0
						],
						[
							-76.44586834800258,
							42.46464949808944,
							0
						],
						[
							-76.44603834807758,
							42.46492649813379,
							0
						],
						[
							-76.44627034817344,
							42.46521649817804,
							0
						],
						[
							-76.44841234904686,
							42.46773749855761,
							0
						],
						[
							-76.44864534911582,
							42.46765849853358,
							0
						],
						[
							-76.44888534918866,
							42.46760149851336,
							0
						],
						[
							-76.44913234926506,
							42.46756249849615,
							0
						],
						[
							-76.44938034934303,
							42.46754049848205,
							0
						],
						[
							-76.4497213494519,
							42.46753249846679,
							0
						],
						[
							-76.45010934957543,
							42.46751849844853,
							0
						],
						[
							-76.45081534980034,
							42.46749549841574,
							0
						],
						[
							-76.45518635119596,
							42.46739549822053,
							0
						],
						[
							-76.4579033520628,
							42.46732449809756,
							0
						],
						[
							-76.45843235223141,
							42.46730849807323,
							0
						],
						[
							-76.4585063522548,
							42.4673034980693,
							0
						],
						[
							-76.45866835230665,
							42.46730149806239,
							0
						],
						[
							-76.45996935272164,
							42.46726649800331,
							0
						],
						[
							-76.46161935324837,
							42.46722749792937,
							0
						],
						[
							-76.46322135375974,
							42.46718949785755,
							0
						],
						[
							-76.46550535448831,
							42.46712849775391,
							0
						],
						[
							-76.4660343546573,
							42.46711749773047,
							0
						],
						[
							-76.46619835468682,
							42.46680449766596,
							0
						],
						[
							-76.46660435474963,
							42.46588949748038,
							0
						],
						[
							-76.46665935475532,
							42.46572749744821,
							0
						],
						[
							-76.46669435475889,
							42.46562349742757,
							0
						],
						[
							-76.4667673547576,
							42.46528849736266,
							0
						],
						[
							-76.46694335472687,
							42.464106497137,
							0
						],
						[
							-76.46703135472562,
							42.46370649705949,
							0
						],
						[
							-76.46751435487694,
							42.46365649703072,
							0
						],
						[
							-76.46766235492238,
							42.46362849701956,
							0
						],
						[
							-76.4678113549674,
							42.46359049700649,
							0
						],
						[
							-76.4679963550227,
							42.46353549698884,
							0
						],
						[
							-76.46806335504213,
							42.46350749698097,
							0
						],
						[
							-76.46819635508203,
							42.46346949696854,
							0
						],
						[
							-76.46830735511567,
							42.46344249695908,
							0
						],
						[
							-76.4683303551218,
							42.463425496955,
							0
						],
						[
							-76.46841835514886,
							42.46340949694848,
							0
						],
						[
							-76.46849335517086,
							42.46338149694027,
							0
						],
						[
							-76.46858935519805,
							42.46333249692732,
							0
						],
						[
							-76.46870035523042,
							42.4632884969147,
							0
						],
						[
							-76.46875235524631,
							42.46327749691056,
							0
						],
						[
							-76.46876735524985,
							42.46326049690681,
							0
						],
						[
							-76.4694413554585,
							42.46315649686033,
							0
						],
						[
							-76.46962735551658,
							42.46313449684873,
							0
						],
						[
							-76.4697903555652,
							42.46308449683291,
							0
						],
						[
							-76.46981235557108,
							42.46306849682907,
							0
						],
						[
							-76.46986435558695,
							42.4630574968249,
							0
						],
						[
							-76.46997535561934,
							42.4630134968123,
							0
						],
						[
							-76.47003435563622,
							42.46298549680471,
							0
						],
						[
							-76.47010135565688,
							42.46297449679999,
							0
						],
						[
							-76.47013835566759,
							42.46295849679553,
							0
						],
						[
							-76.47024935570195,
							42.46294149678789,
							0
						],
						[
							-76.47042235575637,
							42.46292649677812,
							0
						],
						[
							-76.47091735591229,
							42.46288649675071,
							0
						],
						[
							-76.4717913561928,
							42.46288649671536,
							0
						],
						[
							-76.47191735623484,
							42.46290849671433,
							0
						],
						[
							-76.4719923562609,
							42.4629354967163,
							0
						],
						[
							-76.47214035631329,
							42.46300149672248,
							0
						],
						[
							-76.47223635634815,
							42.46305649672879,
							0
						],
						[
							-76.47237035639846,
							42.46315549674168,
							0
						],
						[
							-76.47244435642708,
							42.46322149675088,
							0
						],
						[
							-76.47245135643176,
							42.46325449675669,
							0
						],
						[
							-76.47248135644499,
							42.46330349676455,
							0
						],
						[
							-76.47249635645306,
							42.46334749677207,
							0
						],
						[
							-76.47251835646175,
							42.46336949677524,
							0
						],
						[
							-76.47253335647505,
							42.46348449679591,
							0
						],
						[
							-76.47255535648372,
							42.46350649679908,
							0
						],
						[
							-76.4725703564946,
							42.46358849681362,
							0
						],
						[
							-76.47259235650291,
							42.46360549681589,
							0
						],
						[
							-76.47260735651096,
							42.46364949682342,
							0
						],
						[
							-76.47263035652034,
							42.46367649682749,
							0
						],
						[
							-76.47263035652242,
							42.46370449683267,
							0
						],
						[
							-76.47265935653415,
							42.46373749683759,
							0
						],
						[
							-76.47266735653908,
							42.46376949684318,
							0
						],
						[
							-76.4727043565534,
							42.46380249684778,
							0
						],
						[
							-76.47280035658707,
							42.46384149685111,
							0
						],
						[
							-76.47351235683136,
							42.46405549686188,
							0
						],
						[
							-76.47389035695306,
							42.4640604968475,
							0
						],
						[
							-76.47401635699467,
							42.46407649684536,
							0
						],
						[
							-76.47412735703317,
							42.46411549684808,
							0
						],
						[
							-76.47418735705567,
							42.4641594968538,
							0
						],
						[
							-76.4742763570911,
							42.4642524968674,
							0
						],
						[
							-76.4742983571006,
							42.4642854968726,
							0
						],
						[
							-76.47432035711172,
							42.46434049688187,
							0
						],
						[
							-76.47435035712297,
							42.46436249688474,
							0
						],
						[
							-76.47435035712496,
							42.46438949688972,
							0
						],
						[
							-76.47437235713407,
							42.46441749689402,
							0
						],
						[
							-76.47439435714558,
							42.46447749690423,
							0
						],
						[
							-76.47442435715719,
							42.46450449690799,
							0
						],
						[
							-76.47446935717777,
							42.4645874969215,
							0
						],
						[
							-76.47461735723539,
							42.46472449694085,
							0
						],
						[
							-76.47470635726881,
							42.46479049694946,
							0
						],
						[
							-76.47491435734443,
							42.46491049696322,
							0
						],
						[
							-76.47516635742817,
							42.46494949696026,
							0
						],
						[
							-76.47539635750236,
							42.46495449695187,
							0
						],
						[
							-76.47549735753441,
							42.46494949694685,
							0
						],
						[
							-76.47587035765285,
							42.4649324969286,
							0
						],
						[
							-76.47591535766693,
							42.46492749692587,
							0
						],
						[
							-76.47613735773811,
							42.4649264969167,
							0
						],
						[
							-76.47623335776935,
							42.46493249691393,
							0
						],
						[
							-76.47666335790491,
							42.46489949689044,
							0
						],
						[
							-76.47701435801403,
							42.46485149686735,
							0
						],
						[
							-76.47688435794315,
							42.46445649679958,
							0
						],
						[
							-76.47661935780083,
							42.46368049666683,
							0
						],
						[
							-76.47645935770845,
							42.46312449657052,
							0
						],
						[
							-76.47636435765745,
							42.46284649652297,
							0
						],
						[
							-76.47612435754242,
							42.46233149643745,
							0
						],
						[
							-76.4759693574706,
							42.46203249638845,
							0
						],
						[
							-76.4758783574212,
							42.46175849634147,
							0
						],
						[
							-76.47583135738788,
							42.4615114962977,
							0
						],
						[
							-76.47576235733555,
							42.46110249622485,
							0
						],
						[
							-76.47569435729086,
							42.46079249617029,
							0
						],
						[
							-76.47558735723277,
							42.46047049611507,
							0
						],
						[
							-76.47545635716158,
							42.46007549604735,
							0
						],
						[
							-76.47528235707327,
							42.45963549597302,
							0
						],
						[
							-76.47525135705757,
							42.45955749595985,
							0
						],
						[
							-76.47477435681544,
							42.45835049575594,
							0
						],
						[
							-76.47443235664528,
							42.45753149561833,
							0
						],
						[
							-76.47414735650328,
							42.45684649550319,
							0
						],
						[
							-76.47505135678587,
							42.45674449544777,
							0
						],
						[
							-76.47515935682009,
							42.45673849544227,
							0
						],
						[
							-76.47565235697579,
							42.45670449541606,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090004001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>4007689</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>98165</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4571983</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4587169</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090004001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090004001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>4534</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>317</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>990.32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>7.65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>2.45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>20157</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>19819</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>21131</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>11695</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>11354</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>12242</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7060</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6793</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7382</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4571</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4494</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4792</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>48</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>6.3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>8.95</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.32</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>8985</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>11976</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1268</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1391</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>4001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1088</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>90</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00002"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.44768234486334,
							42.41409648866185,
							0
						],
						[
							-76.44726234471095,
							42.41385648863437,
							0
						],
						[
							-76.4468443445595,
							42.41362048860754,
							0
						],
						[
							-76.44606134427688,
							42.41319348856006,
							0
						],
						[
							-76.44565634413175,
							42.41298648853807,
							0
						],
						[
							-76.44515534395218,
							42.4127304885109,
							0
						],
						[
							-76.44411934358085,
							42.41220048845456,
							0
						],
						[
							-76.44295334316728,
							42.41166348840217,
							0
						],
						[
							-76.44156034267318,
							42.4110214883395,
							0
						],
						[
							-76.44073434238406,
							42.41069348831208,
							0
						],
						[
							-76.44014934218308,
							42.41051248830216,
							0
						],
						[
							-76.43952434196689,
							42.41029948828794,
							0
						],
						[
							-76.43905834180225,
							42.41009348826859,
							0
						],
						[
							-76.43831234153646,
							42.409733488232,
							0
						],
						[
							-76.43455534019589,
							42.4078934880428,
							0
						],
						[
							-76.43194533926632,
							42.40663848791561,
							0
						],
						[
							-76.42943533836811,
							42.40537348778254,
							0
						],
						[
							-76.42750333767893,
							42.40442948768558,
							0
						],
						[
							-76.42472733668961,
							42.40308548754854,
							0
						],
						[
							-76.42441833657954,
							42.40293648753339,
							0
						],
						[
							-76.4237073363263,
							42.40259448749871,
							0
						],
						[
							-76.4229803360673,
							42.40224348746298,
							0
						],
						[
							-76.41965833488881,
							42.40070848731252,
							0
						],
						[
							-76.41543133338739,
							42.39872948711623,
							0
						],
						[
							-76.41436033300312,
							42.39817548705675,
							0
						],
						[
							-76.41313533256196,
							42.39751948698457,
							0
						],
						[
							-76.41245933231792,
							42.39714948694323,
							0
						],
						[
							-76.41173233205758,
							42.39678048690416,
							0
						],
						[
							-76.4112323318815,
							42.39656648688465,
							0
						],
						[
							-76.4109263317756,
							42.39646148687753,
							0
						],
						[
							-76.41059133166115,
							42.39636648687342,
							0
						],
						[
							-76.41014633151156,
							42.39627348687412,
							0
						],
						[
							-76.40961333133437,
							42.39618948688001,
							0
						],
						[
							-76.40905133115062,
							42.39614248689394,
							0
						],
						[
							-76.4089023311023,
							42.39613548689865,
							0
						],
						[
							-76.40839833093897,
							42.39611348691489,
							0
						],
						[
							-76.40810833084498,
							42.39610048692416,
							0
						],
						[
							-76.40431732962045,
							42.39598948705629,
							0
						],
						[
							-76.40369932941972,
							42.39595648707507,
							0
						],
						[
							-76.4005833284019,
							42.39571048715497,
							0
						],
						[
							-76.39953232805873,
							42.39562948718228,
							0
						],
						[
							-76.3979643275467,
							42.395508487223,
							0
						],
						[
							-76.39635732702324,
							42.39540148726788,
							0
						],
						[
							-76.39525232666377,
							42.39533448729995,
							0
						],
						[
							-76.39390532622517,
							42.39524748733806,
							0
						],
						[
							-76.3936003261262,
							42.39523248734754,
							0
						],
						[
							-76.39215032565725,
							42.39518248739666,
							0
						],
						[
							-76.39041732511033,
							42.39530748748958,
							0
						],
						[
							-76.39028032506718,
							42.39531848749714,
							0
						],
						[
							-76.38939132478733,
							42.39539248754665,
							0
						],
						[
							-76.38889932463246,
							42.39543348757405,
							0
						],
						[
							-76.38859932453751,
							42.39545148758946,
							0
						],
						[
							-76.38791332432098,
							42.39550048762614,
							0
						],
						[
							-76.38702532403809,
							42.39552848766709,
							0
						],
						[
							-76.38620432377469,
							42.39552948770031,
							0
						],
						[
							-76.38260832261467,
							42.39544648782965,
							0
						],
						[
							-76.38253432259036,
							42.39543848783114,
							0
						],
						[
							-76.38220932248474,
							42.39542048784089,
							0
						],
						[
							-76.38226532253003,
							42.39579348790776,
							0
						],
						[
							-76.3822813225559,
							42.39607648795957,
							0
						],
						[
							-76.38230332260484,
							42.39664848806469,
							0
						],
						[
							-76.3823463226684,
							42.3973274881888,
							0
						],
						[
							-76.38240532276613,
							42.39840348838582,
							0
						],
						[
							-76.38246232285111,
							42.39931348855215,
							0
						],
						[
							-76.3824643228543,
							42.39934848855857,
							0
						],
						[
							-76.38252632292689,
							42.40006748868929,
							0
						],
						[
							-76.38254532293863,
							42.40014448870279,
							0
						],
						[
							-76.38259432296124,
							42.40023848871824,
							0
						],
						[
							-76.38266932299116,
							42.40031848873005,
							0
						],
						[
							-76.38271632300916,
							42.40035848873558,
							0
						],
						[
							-76.38282232304773,
							42.40042048874279,
							0
						],
						[
							-76.38288132306857,
							42.40044648874525,
							0
						],
						[
							-76.38460632365489,
							42.40089348875863,
							0
						],
						[
							-76.38489332375302,
							42.40097548876229,
							0
						],
						[
							-76.38521132386211,
							42.40107148876727,
							0
						],
						[
							-76.38587032408911,
							42.40128348878002,
							0
						],
						[
							-76.38745232464032,
							42.40187748882639,
							0
						],
						[
							-76.38798532482602,
							42.40207748884201,
							0
						],
						[
							-76.3881483248836,
							42.40214948884879,
							0
						],
						[
							-76.38825932492333,
							42.40220548885468,
							0
						],
						[
							-76.3883913249712,
							42.40228048886326,
							0
						],
						[
							-76.38864432506395,
							42.40243848888235,
							0
						],
						[
							-76.38879732511957,
							42.40252748889269,
							0
						],
						[
							-76.38925132528365,
							42.40277848892092,
							0
						],
						[
							-76.39003632556658,
							42.40320148896768,
							0
						],
						[
							-76.3905113257374,
							42.40345248899507,
							0
						],
						[
							-76.39071732581093,
							42.40355348900548,
							0
						],
						[
							-76.39093432588787,
							42.40365348901528,
							0
						],
						[
							-76.3912513259993,
							42.40378548902696,
							0
						],
						[
							-76.39173732616706,
							42.40394648903722,
							0
						],
						[
							-76.39222632633673,
							42.40412048904977,
							0
						],
						[
							-76.39263432648077,
							42.40429948906652,
							0
						],
						[
							-76.39283332655175,
							42.40439648907647,
							0
						],
						[
							-76.39300532661369,
							42.40448848908658,
							0
						],
						[
							-76.39339932675766,
							42.404727489115,
							0
						],
						[
							-76.39408532700918,
							42.40515548916667,
							0
						],
						[
							-76.39460032719644,
							42.4054554892015,
							0
						],
						[
							-76.39519832741327,
							42.40579548924041,
							0
						],
						[
							-76.39670432795593,
							42.40660548932981,
							0
						],
						[
							-76.39684832800663,
							42.40666648933532,
							0
						],
						[
							-76.39692532803295,
							42.4066884893363,
							0
						],
						[
							-76.39710132809127,
							42.40671348933383,
							0
						],
						[
							-76.39774032830101,
							42.40677748931996,
							0
						],
						[
							-76.39781032832437,
							42.40678948931936,
							0
						],
						[
							-76.39794532837091,
							42.40683348932208,
							0
						],
						[
							-76.39800732839308,
							42.40686448932533,
							0
						],
						[
							-76.39811632843319,
							42.4069344893339,
							0
						],
						[
							-76.39820332846764,
							42.4070234893469,
							0
						],
						[
							-76.39823732848214,
							42.4070724893546,
							0
						],
						[
							-76.39826432849448,
							42.40712248936276,
							0
						],
						[
							-76.39866432868753,
							42.40800448951005,
							0
						],
						[
							-76.39902732886408,
							42.40882348964712,
							0
						],
						[
							-76.39911932890776,
							42.40901648967918,
							0
						],
						[
							-76.39936332901885,
							42.40946348975215,
							0
						],
						[
							-76.39964132914217,
							42.40992848982709,
							0
						],
						[
							-76.39983332922638,
							42.41023648987641,
							0
						],
						[
							-76.39998632929192,
							42.41046048991174,
							0
						],
						[
							-76.40003732931217,
							42.4105134899195,
							0
						],
						[
							-76.40010632934055,
							42.41059848993246,
							0
						],
						[
							-76.40021332938237,
							42.41070048994703,
							0
						],
						[
							-76.4003333294277,
							42.41079348995943,
							0
						],
						[
							-76.40054532950484,
							42.41091748997386,
							0
						],
						[
							-76.40065432954268,
							42.4109564899767,
							0
						],
						[
							-76.40086332961472,
							42.41102448998088,
							0
						],
						[
							-76.40117232972129,
							42.41112548998714,
							0
						],
						[
							-76.40267333023505,
							42.41156249000759,
							0
						],
						[
							-76.4031163303877,
							42.41170549001624,
							0
						],
						[
							-76.40412733073437,
							42.41200849003162,
							0
						],
						[
							-76.40429933079301,
							42.41205549003341,
							0
						],
						[
							-76.40482733097193,
							42.41218449003601,
							0
						],
						[
							-76.40558233122675,
							42.41235549003726,
							0
						],
						[
							-76.4062983314674,
							42.41250349003582,
							0
						],
						[
							-76.40716333175811,
							42.41268249003414,
							0
						],
						[
							-76.4075203318789,
							42.4127674900355,
							0
						],
						[
							-76.40779233197125,
							42.41283649003729,
							0
						],
						[
							-76.40847333219742,
							42.41294049002912,
							0
						],
						[
							-76.40913033241691,
							42.4130584900245,
							0
						],
						[
							-76.40933033248322,
							42.4130874900218,
							0
						],
						[
							-76.40949533253735,
							42.41310349001812,
							0
						],
						[
							-76.4097813326322,
							42.41314549001436,
							0
						],
						[
							-76.41013933275273,
							42.41322249001421,
							0
						],
						[
							-76.41045533286045,
							42.4133084900174,
							0
						],
						[
							-76.41064633292585,
							42.41336449002007,
							0
						],
						[
							-76.41073933295826,
							42.4133994900228,
							0
						],
						[
							-76.41079533297814,
							42.41342549002535,
							0
						],
						[
							-76.41090933301957,
							42.413491490033,
							0
						],
						[
							-76.4122903335332,
							42.41445149015512,
							0
						],
						[
							-76.41306833382355,
							42.41500549022637,
							0
						],
						[
							-76.41357133401057,
							42.41535449027072,
							0
						],
						[
							-76.41440933431943,
							42.41589849033768,
							0
						],
						[
							-76.4146933344248,
							42.41609249036216,
							0
						],
						[
							-76.41574533481437,
							42.41680049045087,
							0
						],
						[
							-76.41591133487705,
							42.41692849046788,
							0
						],
						[
							-76.41602033491885,
							42.41702149048069,
							0
						],
						[
							-76.41667533517811,
							42.417689490578,
							0
						],
						[
							-76.41688333525718,
							42.41785749060071,
							0
						],
						[
							-76.4172193353816,
							42.41808349062903,
							0
						],
						[
							-76.41899333601837,
							42.41900249072766,
							0
						],
						[
							-76.41923033610384,
							42.41913049074181,
							0
						],
						[
							-76.41958833622996,
							42.4192834907557,
							0
						],
						[
							-76.42067633661019,
							42.41970649079016,
							0
						],
						[
							-76.42085933667339,
							42.41976749079409,
							0
						],
						[
							-76.42326133750156,
							42.42054849084181,
							0
						],
						[
							-76.42367033764103,
							42.42066049084605,
							0
						],
						[
							-76.42401733775702,
							42.42072349084375,
							0
						],
						[
							-76.42428633784539,
							42.42075149083805,
							0
						],
						[
							-76.4243693378726,
							42.42075949083619,
							0
						],
						[
							-76.425007338083,
							42.42083649082472,
							0
						],
						[
							-76.42588533837261,
							42.42094349080912,
							0
						],
						[
							-76.42604933842706,
							42.42096849080712,
							0
						],
						[
							-76.42623733849018,
							42.42100649080658,
							0
						],
						[
							-76.4264183385524,
							42.42106249080964,
							0
						],
						[
							-76.42659033861274,
							42.42113249081567,
							0
						],
						[
							-76.42706333878192,
							42.42136949084048,
							0
						],
						[
							-76.42717733882239,
							42.4214224908457,
							0
						],
						[
							-76.42729333886285,
							42.42146649084917,
							0
						],
						[
							-76.42743233890997,
							42.42150049084985,
							0
						],
						[
							-76.42741733891808,
							42.42167649088304,
							0
						],
						[
							-76.42754033905433,
							42.42299349112192,
							0
						],
						[
							-76.42760133913322,
							42.42380049126887,
							0
						],
						[
							-76.42760333913715,
							42.42384549127711,
							0
						],
						[
							-76.42760833914252,
							42.42389649128635,
							0
						],
						[
							-76.42787533949492,
							42.42752549194741,
							0
						],
						[
							-76.42795633960151,
							42.42862149214702,
							0
						],
						[
							-76.42808233978288,
							42.43053849249679,
							0
						],
						[
							-76.42811633981164,
							42.43078149254041,
							0
						],
						[
							-76.42811733981328,
							42.43079949254369,
							0
						],
						[
							-76.42815933986802,
							42.43136049264584,
							0
						],
						[
							-76.42823833997116,
							42.43241849283849,
							0
						],
						[
							-76.42840734022035,
							42.43506949332235,
							0
						],
						[
							-76.42856234044969,
							42.43751149376803,
							0
						],
						[
							-76.42881934083704,
							42.44165549452453,
							0
						],
						[
							-76.42884234086229,
							42.44189849456858,
							0
						],
						[
							-76.42886334089177,
							42.4422074946249,
							0
						],
						[
							-76.4289733409284,
							42.4422254946238,
							0
						],
						[
							-76.4291813409972,
							42.44225349462057,
							0
						],
						[
							-76.42924034101732,
							42.44226949462116,
							0
						],
						[
							-76.4293513410542,
							42.44228649461983,
							0
						],
						[
							-76.42952934111169,
							42.44229149461356,
							0
						],
						[
							-76.42966234114834,
							42.44220949459304,
							0
						],
						[
							-76.42972934116781,
							42.44218149458512,
							0
						],
						[
							-76.42976634117804,
							42.44215949457956,
							0
						],
						[
							-76.42981134119248,
							42.44215949457776,
							0
						],
						[
							-76.42991434122717,
							42.44218149457767,
							0
						],
						[
							-76.42997434124885,
							42.44221449458136,
							0
						],
						[
							-76.43004834127665,
							42.44226949458853,
							0
						],
						[
							-76.43015934132036,
							42.44237949460444,
							0
						],
						[
							-76.43016634132665,
							42.44243449461433,
							0
						],
						[
							-76.4301883413357,
							42.44246149461841,
							0
						],
						[
							-76.43019634134116,
							42.44250049462531,
							0
						],
						[
							-76.43022534135288,
							42.44253349463025,
							0
						],
						[
							-76.43023334135788,
							42.44256649463603,
							0
						],
						[
							-76.43029234138486,
							42.44267549465383,
							0
						],
						[
							-76.43031434139316,
							42.44269249465608,
							0
						],
						[
							-76.43035134140621,
							42.44270849465755,
							0
						],
						[
							-76.43044034143477,
							42.44270849465396,
							0
						],
						[
							-76.4304783414466,
							42.4427034946515,
							0
						],
						[
							-76.43064834149108,
							42.44256649461929,
							0
						],
						[
							-76.43075934152384,
							42.44252749460759,
							0
						],
						[
							-76.43091534157308,
							42.44251649459925,
							0
						],
						[
							-76.43117434165747,
							42.44253349459196,
							0
						],
						[
							-76.43125634168335,
							42.44252749458753,
							0
						],
						[
							-76.4313153417011,
							42.44251149458218,
							0
						],
						[
							-76.4314043417248,
							42.44244549456638,
							0
						],
						[
							-76.43146334173852,
							42.44237449455086,
							0
						],
						[
							-76.4315373417594,
							42.44233549454064,
							0
						],
						[
							-76.43164134179402,
							42.44235249453959,
							0
						],
						[
							-76.4316633418027,
							42.44237449454279,
							0
						],
						[
							-76.43169334181593,
							42.44242349455063,
							0
						],
						[
							-76.43170034182062,
							42.44245649455645,
							0
						],
						[
							-76.43167834181878,
							42.4425274945705,
							0
						],
						[
							-76.43160434180106,
							42.44260949458865,
							0
						],
						[
							-76.4315003417754,
							42.44271449461228,
							0
						],
						[
							-76.43135234173764,
							42.44284649464269,
							0
						],
						[
							-76.43134534173736,
							42.44287349464796,
							0
						],
						[
							-76.43136734174641,
							42.44290049465207,
							0
						],
						[
							-76.43153034180484,
							42.44298349466085,
							0
						],
						[
							-76.43163434183982,
							42.44300549466071,
							0
						],
						[
							-76.43175234187807,
							42.44301049465688,
							0
						],
						[
							-76.43201934196053,
							42.44296649463795,
							0
						],
						[
							-76.43207134197722,
							42.44296649463585,
							0
						],
						[
							-76.43227134204345,
							42.44299449463297,
							0
						],
						[
							-76.43238934208132,
							42.4429944946282,
							0
						],
						[
							-76.43249334211347,
							42.44297749462085,
							0
						],
						[
							-76.43257534213572,
							42.44292249460737,
							0
						],
						[
							-76.43264234215165,
							42.4428464945906,
							0
						],
						[
							-76.43266434215745,
							42.44282949458658,
							0
						],
						[
							-76.43273834218003,
							42.44281349458062,
							0
						],
						[
							-76.4328343422112,
							42.44281849457767,
							0
						],
						[
							-76.43293134224604,
							42.442868494583,
							0
						],
						[
							-76.43297534226213,
							42.44289549458621,
							0
						],
						[
							-76.43327134237369,
							42.44312049461592,
							0
						],
						[
							-76.43334634239937,
							42.44314249461696,
							0
						],
						[
							-76.43347934244242,
							42.4431474946125,
							0
						],
						[
							-76.43353834246018,
							42.44313149460717,
							0
						],
						[
							-76.43357534247008,
							42.44310449460067,
							0
						],
						[
							-76.43364934248896,
							42.44303849458548,
							0
						],
						[
							-76.43366434248975,
							42.44298349457468,
							0
						],
						[
							-76.43368634249555,
							42.44296649457066,
							0
						],
						[
							-76.43368634249354,
							42.44293949456569,
							0
						],
						[
							-76.43376134251356,
							42.44288449455246,
							0
						],
						[
							-76.43379834252545,
							42.44288449455097,
							0
						],
						[
							-76.43392434256867,
							42.44292249455291,
							0
						],
						[
							-76.4339833425897,
							42.44295049455572,
							0
						],
						[
							-76.43412434263774,
							42.44298849455704,
							0
						],
						[
							-76.43424234267604,
							42.4429944945534,
							0
						],
						[
							-76.43436834271523,
							42.44297749454516,
							0
						],
						[
							-76.43439834272368,
							42.44296149454099,
							0
						],
						[
							-76.43442134273062,
							42.44295549453896,
							0
						],
						[
							-76.43453134276152,
							42.44289549452339,
							0
						],
						[
							-76.43456834277139,
							42.44286849451692,
							0
						],
						[
							-76.43459134276908,
							42.44273649449156,
							0
						],
						[
							-76.43456834275719,
							42.44267549448121,
							0
						],
						[
							-76.43445734271393,
							42.44257149446645,
							0
						],
						[
							-76.4341833426131,
							42.44239649444513,
							0
						],
						[
							-76.4341463425988,
							42.44236349444052,
							0
						],
						[
							-76.43414634258944,
							42.44223649441702,
							0
						],
						[
							-76.43416834258885,
							42.44213249439688,
							0
						],
						[
							-76.43419834259409,
							42.44207249438457,
							0
						],
						[
							-76.43422034259952,
							42.44205049437962,
							0
						],
						[
							-76.4342353426019,
							42.44201749437291,
							0
						],
						[
							-76.43427934261234,
							42.44196749436188,
							0
						],
						[
							-76.43438334264167,
							42.4419124943475,
							0
						],
						[
							-76.43442034265318,
							42.44190749434505,
							0
						],
						[
							-76.43445734266344,
							42.44188549433952,
							0
						],
						[
							-76.43461334271431,
							42.44189649433525,
							0
						],
						[
							-76.43476134276462,
							42.44193449433631,
							0
						],
						[
							-76.43485034279523,
							42.44196249433789,
							0
						],
						[
							-76.43501334285278,
							42.44203349434444,
							0
						],
						[
							-76.43505834287126,
							42.44208849435282,
							0
						],
						[
							-76.43505834287657,
							42.44216049436614,
							0
						],
						[
							-76.43502034287039,
							42.44224249438284,
							0
						],
						[
							-76.43499834286496,
							42.44226449438779,
							0
						],
						[
							-76.43498334286257,
							42.4422974943945,
							0
						],
						[
							-76.4349243428493,
							42.44237449441115,
							0
						],
						[
							-76.43490934284765,
							42.4424174944197,
							0
						],
						[
							-76.43490934285575,
							42.44252749444006,
							0
						],
						[
							-76.43501334289398,
							42.44259349444808,
							0
						],
						[
							-76.43507234291336,
							42.44259949444681,
							0
						],
						[
							-76.43514734293741,
							42.44259949444378,
							0
						],
						[
							-76.43527334297661,
							42.44258249443554,
							0
						],
						[
							-76.43536934300303,
							42.44252249442056,
							0
						],
						[
							-76.43551734303998,
							42.44237949438814,
							0
						],
						[
							-76.4355913430577,
							42.44229749436997,
							0
						],
						[
							-76.43560634306009,
							42.44226449436324,
							0
						],
						[
							-76.43562834306508,
							42.4422364943572,
							0
						],
						[
							-76.43564334306585,
							42.44218149434639,
							0
						],
						[
							-76.43566534307129,
							42.44215949434144,
							0
						],
						[
							-76.43568034306323,
							42.44198449430846,
							0
						],
						[
							-76.43566534304995,
							42.44186949428778,
							0
						],
						[
							-76.43545834296813,
							42.44166049425747,
							0
						],
						[
							-76.43545834296616,
							42.44163349425246,
							0
						],
						[
							-76.43546534296634,
							42.44160549424702,
							0
						],
						[
							-76.43548034297116,
							42.44160549424641,
							0
						],
						[
							-76.43551734298427,
							42.44162249424805,
							0
						],
						[
							-76.4355913430092,
							42.44163849424801,
							0
						],
						[
							-76.43566534303493,
							42.44166549425004,
							0
						],
						[
							-76.43579134307943,
							42.44172049425512,
							0
						],
						[
							-76.43590234311667,
							42.44174249425471,
							0
						],
						[
							-76.4360143431526,
							42.44174249425019,
							0
						],
						[
							-76.43609534317662,
							42.44171549424193,
							0
						],
						[
							-76.4362803432271,
							42.44159449421206,
							0
						],
						[
							-76.43633234324341,
							42.44158949420905,
							0
						],
						[
							-76.43645834328503,
							42.44160549420693,
							0
						],
						[
							-76.43654034331378,
							42.44163849420969,
							0
						],
						[
							-76.43661434333914,
							42.44166049421079,
							0
						],
						[
							-76.43671834337252,
							42.44166049420659,
							0
						],
						[
							-76.43677734338983,
							42.44163849420013,
							0
						],
						[
							-76.43680734339989,
							42.44164449420003,
							0
						],
						[
							-76.43691834343427,
							42.44162749419242,
							0
						],
						[
							-76.43699934345989,
							42.44162249418822,
							0
						],
						[
							-76.43703634347258,
							42.44163349418875,
							0
						],
						[
							-76.43707334348645,
							42.44166049419226,
							0
						],
						[
							-76.4370883434973,
							42.44174249420682,
							0
						],
						[
							-76.43707334349573,
							42.44178649421558,
							0
						],
						[
							-76.43707334349777,
							42.44181449422076,
							0
						],
						[
							-76.4370513434919,
							42.4418304942246,
							0
						],
						[
							-76.43702934350426,
							42.44209449427434,
							0
						],
						[
							-76.43705134351693,
							42.44217049428752,
							0
						],
						[
							-76.43707334352523,
							42.44218749428977,
							0
						],
						[
							-76.43708134353184,
							42.44224249429963,
							0
						],
						[
							-76.43711034354278,
							42.44226449430252,
							0
						],
						[
							-76.43711834354859,
							42.44230849431035,
							0
						],
						[
							-76.43714734355908,
							42.44232449431214,
							0
						],
						[
							-76.43715534356531,
							42.44237449432107,
							0
						],
						[
							-76.43718534357691,
							42.44240149432485,
							0
						],
						[
							-76.4371923435816,
							42.44243449433068,
							0
						],
						[
							-76.43730334362326,
							42.44251649434137,
							0
						],
						[
							-76.43737034364557,
							42.4425274943407,
							0
						],
						[
							-76.43745134367158,
							42.44252749433742,
							0
						],
						[
							-76.43765134373253,
							42.4424834943212,
							0
						],
						[
							-76.4377403437591,
							42.44245649431261,
							0
						],
						[
							-76.43782934378603,
							42.44243449430496,
							0
						],
						[
							-76.43795534382522,
							42.44241749429672,
							0
						],
						[
							-76.4380373438564,
							42.44248349430561,
							0
						],
						[
							-76.43804434386188,
							42.4425274943135,
							0
						],
						[
							-76.43802234386175,
							42.44262149433177,
							0
						],
						[
							-76.43796334384758,
							42.44268649434619,
							0
						],
						[
							-76.43773334378511,
							42.44284049438395,
							0
						],
						[
							-76.43763734376034,
							42.44292249440299,
							0
						],
						[
							-76.4376003437517,
							42.44296649441264,
							0
						],
						[
							-76.43760034375656,
							42.44303249442486,
							0
						],
						[
							-76.43767434378356,
							42.44307649443001,
							0
						],
						[
							-76.43774034380554,
							42.44308749442936,
							0
						],
						[
							-76.43776334381417,
							42.44310449443159,
							0
						],
						[
							-76.4378593438466,
							42.44312649443179,
							0
						],
						[
							-76.43800734389526,
							42.44314249442877,
							0
						],
						[
							-76.43805934391116,
							42.44313149442464,
							0
						],
						[
							-76.43815534393674,
							42.44306049440763,
							0
						],
						[
							-76.43840734399576,
							42.4427634943425,
							0
						],
						[
							-76.43841534399671,
							42.44274149433809,
							0
						],
						[
							-76.4384443440044,
							42.44271949433285,
							0
						],
						[
							-76.43845234400416,
							42.4426814943255,
							0
						],
						[
							-76.43848134401222,
							42.44266449432119,
							0
						],
						[
							-76.438489344012,
							42.44262649431383,
							0
						],
						[
							-76.43855634402827,
							42.44255549429798,
							0
						],
						[
							-76.43863034404716,
							42.4424894942828,
							0
						],
						[
							-76.43870434406965,
							42.44247249427666,
							0
						],
						[
							-76.4387633440886,
							42.44247249427428,
							0
						],
						[
							-76.43885234412326,
							42.44255549428605,
							0
						],
						[
							-76.43885934413073,
							42.44262649429889,
							0
						],
						[
							-76.43883034412791,
							42.44271449431636,
							0
						],
						[
							-76.43882234412894,
							42.44276349432573,
							0
						],
						[
							-76.43877834412451,
							42.44289549435192,
							0
						],
						[
							-76.4387633441209,
							42.4429114943555,
							0
						],
						[
							-76.4387193441137,
							42.44300549437467,
							0
						],
						[
							-76.43870434412014,
							42.44315849440357,
							0
						],
						[
							-76.4387263441345,
							42.44325749442102,
							0
						],
						[
							-76.43874834414316,
							42.4432794944242,
							0
						],
						[
							-76.4388603441844,
							42.443351494433,
							0
						],
						[
							-76.4389263442056,
							42.44335149443034,
							0
						],
						[
							-76.43898534422372,
							42.44334049442592,
							0
						],
						[
							-76.43904534423811,
							42.44327449441128,
							0
						],
						[
							-76.4390603442397,
							42.44323049440253,
							0
						],
						[
							-76.43911934425333,
							42.44315849438682,
							0
						],
						[
							-76.43914934425898,
							42.44310449437563,
							0
						],
						[
							-76.43917834426058,
							42.44299949435504,
							0
						],
						[
							-76.43919334426377,
							42.44297749435035,
							0
						],
						[
							-76.43920834426454,
							42.44292249433956,
							0
						],
						[
							-76.4392453442708,
							42.44284649432401,
							0
						],
						[
							-76.43928234427864,
							42.44279149431235,
							0
						],
						[
							-76.43928234427658,
							42.44276349430715,
							0
						],
						[
							-76.43938634430147,
							42.44264849428168,
							0
						],
						[
							-76.43943034431597,
							42.44265349428083,
							0
						],
						[
							-76.43951234434877,
							42.4427414942938,
							0
						],
						[
							-76.43952634435487,
							42.44276349429731,
							0
						],
						[
							-76.43954134436257,
							42.44280249430392,
							0
						],
						[
							-76.43957834437967,
							42.44287349431556,
							0
						],
						[
							-76.43960134438905,
							42.44290049431964,
							0
						],
						[
							-76.4396153443964,
							42.44293949432629,
							0
						],
						[
							-76.43966734441712,
							42.44299449433436,
							0
						],
						[
							-76.43969034442568,
							42.44301049433638,
							0
						],
						[
							-76.43970434443388,
							42.44306049434507,
							0
						],
						[
							-76.43978634446542,
							42.44313149435491,
							0
						],
						[
							-76.43989034450284,
							42.44318649436087,
							0
						],
						[
							-76.4399793445322,
							42.44319749435932,
							0
						],
						[
							-76.4400383445507,
							42.44319149435582,
							0
						],
						[
							-76.44015634458452,
							42.44313649434088,
							0
						],
						[
							-76.44026834461326,
							42.44303849431823,
							0
						],
						[
							-76.44028234461533,
							42.44300549431155,
							0
						],
						[
							-76.4403053446211,
							42.44298349430655,
							0
						],
						[
							-76.44031234462045,
							42.44294449429904,
							0
						],
						[
							-76.44033434462428,
							42.44290049429004,
							0
						],
						[
							-76.44035734462526,
							42.44281349427301,
							0
						],
						[
							-76.44037934462828,
							42.44275849426193,
							0
						],
						[
							-76.4404083446347,
							42.44271949425356,
							0
						],
						[
							-76.44045334464715,
							42.44269249424674,
							0
						],
						[
							-76.44047634465409,
							42.44268649424471,
							0
						],
						[
							-76.44077934474855,
							42.44264849422544,
							0
						],
						[
							-76.44082334475979,
							42.44260949421644,
							0
						],
						[
							-76.4408603447685,
							42.44256649420699,
							0
						],
						[
							-76.44091234477423,
							42.44241749417733,
							0
						],
						[
							-76.44090534476953,
							42.4423844941715,
							0
						],
						[
							-76.44089034476312,
							42.44236249416804,
							0
						],
						[
							-76.44087534475432,
							42.44230849415865,
							0
						],
						[
							-76.44083834473919,
							42.44226449415199,
							0
						],
						[
							-76.440690344682,
							42.44213249413355,
							0
						],
						[
							-76.44066834467088,
							42.44207749412426,
							0
						],
						[
							-76.44066834466808,
							42.44203949411724,
							0
						],
						[
							-76.44069034467066,
							42.44197849410506,
							0
						],
						[
							-76.44077234469214,
							42.44191249408954,
							0
						],
						[
							-76.44081634470507,
							42.44189649408479,
							0
						],
						[
							-76.44086034471712,
							42.44186849407786,
							0
						],
						[
							-76.44106034477852,
							42.44183049406273,
							0
						],
						[
							-76.44112034479778,
							42.44183049406031,
							0
						],
						[
							-76.44146834491107,
							42.44185249405031,
							0
						],
						[
							-76.44157934494787,
							42.44186849404881,
							0
						],
						[
							-76.44170534499037,
							42.44189649404888,
							0
						],
						[
							-76.44178734501868,
							42.44192349405057,
							0
						],
						[
							-76.44212034514291,
							42.4421594940808,
							0
						],
						[
							-76.44241734525524,
							42.44239049411154,
							0
						],
						[
							-76.44255834530651,
							42.44247249412105,
							0
						],
						[
							-76.44260234532352,
							42.44251149412647,
							0
						],
						[
							-76.44278034538866,
							42.44262049413943,
							0
						],
						[
							-76.44295034544933,
							42.44270349414795,
							0
						],
						[
							-76.44301034546974,
							42.44271949414848,
							0
						],
						[
							-76.44318034553035,
							42.4428014941568,
							0
						],
						[
							-76.44324234555123,
							42.44281449415668,
							0
						],
						[
							-76.44350634563983,
							42.44286749415583,
							0
						],
						[
							-76.44361834567577,
							42.44286749415132,
							0
						],
						[
							-76.44372934570978,
							42.44284549414275,
							0
						],
						[
							-76.44381034573172,
							42.44279049412931,
							0
						],
						[
							-76.44386234574517,
							42.44274649411906,
							0
						],
						[
							-76.44388434574827,
							42.44269249410819,
							0
						],
						[
							-76.44391434575664,
							42.44267549410382,
							0
						],
						[
							-76.44392134575321,
							42.4425984940893,
							0
						],
						[
							-76.44395134576168,
							42.44258249408514,
							0
						],
						[
							-76.44398134575879,
							42.44241249405246,
							0
						],
						[
							-76.44399534575355,
							42.44228049402746,
							0
						],
						[
							-76.44402534576194,
							42.44226349402311,
							0
						],
						[
							-76.44403234575859,
							42.44218749400876,
							0
						],
						[
							-76.44406234576614,
							42.44215949400236,
							0
						],
						[
							-76.44408434577078,
							42.44212649399539,
							0
						],
						[
							-76.44412134577699,
							42.44204949397964,
							0
						],
						[
							-76.44423234580294,
							42.44191849395094,
							0
						],
						[
							-76.44435834583648,
							42.44182449392843,
							0
						],
						[
							-76.44452134588114,
							42.44172049390262,
							0
						],
						[
							-76.44460334590546,
							42.44169349389431,
							0
						],
						[
							-76.44467734592796,
							42.44167649388817,
							0
						],
						[
							-76.44478834596357,
							42.44167649388369,
							0
						],
						[
							-76.44491434600528,
							42.44169349388175,
							0
						],
						[
							-76.44502534604287,
							42.44172049388225,
							0
						],
						[
							-76.44507734606155,
							42.44174749388515,
							0
						],
						[
							-76.44559334625431,
							42.44211649393258,
							0
						],
						[
							-76.44570034629423,
							42.44219249394234,
							0
						],
						[
							-76.44599634640662,
							42.44242849397404,
							0
						],
						[
							-76.44621934648872,
							42.44257149399149,
							0
						],
						[
							-76.44640434655409,
							42.4426534939992,
							0
						],
						[
							-76.44656734661004,
							42.44270249400167,
							0
						],
						[
							-76.44671534665879,
							42.44271949399885,
							0
						],
						[
							-76.44679734668547,
							42.44272449399644,
							0
						],
						[
							-76.44699734674965,
							42.44272449398837,
							0
						],
						[
							-76.44768634696914,
							42.44270249395648,
							0
						],
						[
							-76.44799034706391,
							42.44266449393717,
							0
						],
						[
							-76.4480643470864,
							42.44264749393102,
							0
						],
						[
							-76.44821234712785,
							42.4425654939099,
							0
						],
						[
							-76.44828634714558,
							42.44248349389171,
							0
						],
						[
							-76.44829434714202,
							42.44240049387604,
							0
						],
						[
							-76.44828634713261,
							42.44230749385916,
							0
						],
						[
							-76.44825734712212,
							42.44229149385736,
							0
						],
						[
							-76.4482493471175,
							42.4422634938525,
							0
						],
						[
							-76.44817534708771,
							42.44218149384032,
							0
						],
						[
							-76.44810834706253,
							42.44213149383378,
							0
						],
						[
							-76.44801234702325,
							42.44201649381638,
							0
						],
						[
							-76.44797534700858,
							42.44197849381084,
							0
						],
						[
							-76.44796034700092,
							42.44193949380423,
							0
						],
						[
							-76.44787934696761,
							42.44184049378919,
							0
						],
						[
							-76.44786434696,
							42.44180249378275,
							0
						],
						[
							-76.44784234695096,
							42.44177549377866,
							0
						],
						[
							-76.44782734694371,
							42.44174249377316,
							0
						],
						[
							-76.44780534693459,
							42.44171449376886,
							0
						],
						[
							-76.44777534691731,
							42.44161049375084,
							0
						],
						[
							-76.44774534688987,
							42.44136849370726,
							0
						],
						[
							-76.44775334688964,
							42.44133049369991,
							0
						],
						[
							-76.44776734689214,
							42.44130349369436,
							0
						],
						[
							-76.44779034689792,
							42.44128149368935,
							0
						],
						[
							-76.44780434689997,
							42.44124849368268,
							0
						],
						[
							-76.44786434691392,
							42.44117649366694,
							0
						],
						[
							-76.44787834691643,
							42.44114949366136,
							0
						],
						[
							-76.44790134692217,
							42.44112749365638,
							0
						],
						[
							-76.44791634692375,
							42.44108349364763,
							0
						],
						[
							-76.44793834692956,
							42.44106649364358,
							0
						],
						[
							-76.44795334693042,
							42.441012493633,
							0
						],
						[
							-76.44797534693583,
							42.44099049362804,
							0
						],
						[
							-76.44799034693742,
							42.44094649361929,
							0
						],
						[
							-76.44803434694748,
							42.44089149360733,
							0
						],
						[
							-76.44810134696694,
							42.44086349359944,
							0
						],
						[
							-76.44813834697881,
							42.44086349359795,
							0
						],
						[
							-76.44833134704398,
							42.44090749359829,
							0
						],
						[
							-76.44838234706239,
							42.44093549360141,
							0
						],
						[
							-76.44857534712757,
							42.44097949360177,
							0
						],
						[
							-76.44871634717364,
							42.44099049359811,
							0
						],
						[
							-76.44873634718006,
							42.44099049359729,
							0
						],
						[
							-76.44922034733494,
							42.44098449357664,
							0
						],
						[
							-76.44924334734276,
							42.44099049357681,
							0
						],
						[
							-76.44939834739404,
							42.44101149357444,
							0
						],
						[
							-76.44953134743915,
							42.44104449357518,
							0
						],
						[
							-76.44986534755849,
							42.44120949359222,
							0
						],
						[
							-76.44999834760316,
							42.44123649359185,
							0
						],
						[
							-76.45002834761402,
							42.44125349359377,
							0
						],
						[
							-76.45023534768326,
							42.44129149359245,
							0
						],
						[
							-76.45030934770702,
							42.44129149358945,
							0
						],
						[
							-76.45044334774884,
							42.44127549358107,
							0
						],
						[
							-76.45053234777453,
							42.44123649357028,
							0
						],
						[
							-76.45064334780572,
							42.44117649355469,
							0
						],
						[
							-76.4507983478498,
							42.44109949353417,
							0
						],
						[
							-76.45084334786226,
							42.44107249352736,
							0
						],
						[
							-76.45092434788582,
							42.44103949351798,
							0
						],
						[
							-76.45113934794672,
							42.44092949348895,
							0
						],
						[
							-76.45162834808058,
							42.44061649341129,
							0
						],
						[
							-76.45196234817644,
							42.44046249336928,
							0
						],
						[
							-76.45200634818976,
							42.44045149336547,
							0
						],
						[
							-76.45203634819819,
							42.44043549336133,
							0
						],
						[
							-76.45208834821406,
							42.44042449335716,
							0
						],
						[
							-76.45211034822032,
							42.44041349335425,
							0
						],
						[
							-76.45222934825644,
							42.44038549334426,
							0
						],
						[
							-76.45251034834419,
							42.44035249332681,
							0
						],
						[
							-76.45266634839426,
							42.4403524933205,
							0
						],
						[
							-76.45309634853062,
							42.44033049329905,
							0
						],
						[
							-76.45325134857836,
							42.44030349328781,
							0
						],
						[
							-76.45349634865455,
							42.4402704932718,
							0
						],
						[
							-76.45354834867126,
							42.44027049326971,
							0
						],
						[
							-76.4538223487608,
							42.44029249326271,
							0
						],
						[
							-76.45426734890557,
							42.44031949324972,
							0
						],
						[
							-76.45442234895694,
							42.44034149324751,
							0
						],
						[
							-76.45448134897713,
							42.44035849324828,
							0
						],
						[
							-76.45463034903297,
							42.44046749326243,
							0
						],
						[
							-76.45480034909922,
							42.44062649328499,
							0
						],
						[
							-76.45490434913908,
							42.44071449329707,
							0
						],
						[
							-76.45494834915725,
							42.44076949330546,
							0
						],
						[
							-76.45497834917057,
							42.44081949331351,
							0
						],
						[
							-76.4550153491856,
							42.44086249331996,
							0
						],
						[
							-76.45523834927337,
							42.44108249335166,
							0
						],
						[
							-76.45538634932815,
							42.441181493364,
							0
						],
						[
							-76.45549734936702,
							42.44122549336765,
							0
						],
						[
							-76.45557834939382,
							42.44123649336643,
							0
						],
						[
							-76.455719349437,
							42.44120849335555,
							0
						],
						[
							-76.45579334945793,
							42.44117049334553,
							0
						],
						[
							-76.4559793495079,
							42.44103849331358,
							0
						],
						[
							-76.45611234954575,
							42.440972493296,
							0
						],
						[
							-76.45622334958054,
							42.44096149328949,
							0
						],
						[
							-76.45635734962516,
							42.44098349328812,
							0
						],
						[
							-76.45653434968601,
							42.44103849329116,
							0
						],
						[
							-76.45660934971207,
							42.44106549329313,
							0
						],
						[
							-76.45683134979096,
							42.44116949330342,
							0
						],
						[
							-76.45698734984714,
							42.44125249331245,
							0
						],
						[
							-76.4570533498703,
							42.44127949331479,
							0
						],
						[
							-76.45718734991537,
							42.44130749331453,
							0
						],
						[
							-76.45741734999116,
							42.44133449331024,
							0
						],
						[
							-76.45760935005359,
							42.44134549330453,
							0
						],
						[
							-76.4582023502439,
							42.44134549328056,
							0
						],
						[
							-76.45875835042024,
							42.44131749325292,
							0
						],
						[
							-76.4591653505484,
							42.44128449323036,
							0
						],
						[
							-76.45971435072215,
							42.44125149320208,
							0
						],
						[
							-76.45995135079819,
							42.4412514931925,
							0
						],
						[
							-76.46038135093825,
							42.4412794931803,
							0
						],
						[
							-76.46060335101103,
							42.44130049317523,
							0
						],
						[
							-76.4608853511052,
							42.44135049317309,
							0
						],
						[
							-76.46121135121226,
							42.44138349316601,
							0
						],
						[
							-76.46135935125976,
							42.44138349316003,
							0
						],
						[
							-76.46171535137236,
							42.44136149314157,
							0
						],
						[
							-76.4619453514441,
							42.4413334931271,
							0
						],
						[
							-76.46215935151034,
							42.44130049311234,
							0
						],
						[
							-76.46223435153279,
							42.44127849310525,
							0
						],
						[
							-76.46245635159475,
							42.44115249307297,
							0
						],
						[
							-76.46256735162831,
							42.44112449306329,
							0
						],
						[
							-76.46263435164899,
							42.44111349305855,
							0
						],
						[
							-76.46288635173111,
							42.44113049305151,
							0
						],
						[
							-76.46322735184333,
							42.44116849304475,
							0
						],
						[
							-76.46351635193525,
							42.44115749303102,
							0
						],
						[
							-76.46371635199618,
							42.44111349301482,
							0
						],
						[
							-76.46427935217118,
							42.44103649297782,
							0
						],
						[
							-76.4647093523079,
							42.44101949295728,
							0
						],
						[
							-76.46506435242227,
							42.44102549294405,
							0
						],
						[
							-76.46547935255704,
							42.44104749293135,
							0
						],
						[
							-76.46568735262497,
							42.44106349292589,
							0
						],
						[
							-76.46616135278074,
							42.441113492916,
							0
						],
						[
							-76.4667023529624,
							42.44122249291429,
							0
						],
						[
							-76.46734035317441,
							42.44132149290682,
							0
						],
						[
							-76.46751835323315,
							42.44134349290369,
							0
						],
						[
							-76.46757735325325,
							42.44135949290428,
							0
						],
						[
							-76.46786635334959,
							42.44140849290166,
							0
						],
						[
							-76.46802935340433,
							42.44144149290118,
							0
						],
						[
							-76.4680883534249,
							42.44146349290286,
							0
						],
						[
							-76.46819435346089,
							42.44149049290358,
							0
						],
						[
							-76.46822235347113,
							42.44150749290558,
							0
						],
						[
							-76.4682593534838,
							42.44151849290613,
							0
						],
						[
							-76.46839235353053,
							42.44157349291093,
							0
						],
						[
							-76.46845935355529,
							42.44161749291636,
							0
						],
						[
							-76.46857035359899,
							42.44172749293222,
							0
						],
						[
							-76.46858535360661,
							42.44176549293865,
							0
						],
						[
							-76.46864435362997,
							42.44182549294736,
							0
						],
						[
							-76.46868135364589,
							42.44188049295603,
							0
						],
						[
							-76.46871835366063,
							42.44191949296177,
							0
						],
						[
							-76.46873335366789,
							42.44195249296727,
							0
						],
						[
							-76.46879335369192,
							42.44201749297686,
							0
						],
						[
							-76.46880435369768,
							42.44204749298196,
							0
						],
						[
							-76.46890635372907,
							42.44202949297451,
							0
						],
						[
							-76.46908035377562,
							42.44190349294417,
							0
						],
						[
							-76.46887135369647,
							42.44173949292227,
							0
						],
						[
							-76.46862935360608,
							42.44156649290006,
							0
						],
						[
							-76.46833735350006,
							42.44139949288095,
							0
						],
						[
							-76.46802235338801,
							42.44125049286611,
							0
						],
						[
							-76.46727835312777,
							42.44095849284218,
							0
						],
						[
							-76.4671343530767,
							42.44089249283577,
							0
						],
						[
							-76.46699835302752,
							42.44081749282741,
							0
						],
						[
							-76.46687535298186,
							42.44073349281683,
							0
						],
						[
							-76.4667643529394,
							42.44064049280412,
							0
						],
						[
							-76.46666835290108,
							42.44053849278912,
							0
						],
						[
							-76.46658635286653,
							42.44042649277171,
							0
						],
						[
							-76.4665203528368,
							42.44031049275292,
							0
						],
						[
							-76.46630735274275,
							42.43996149269697,
							0
						],
						[
							-76.46612835266298,
							42.43965849264814,
							0
						],
						[
							-76.46568235244862,
							42.43869149248724,
							0
						],
						[
							-76.46545135233752,
							42.43818949240372,
							0
						],
						[
							-76.46511835217986,
							42.4374994922895,
							0
						],
						[
							-76.46490735207828,
							42.4370394922129,
							0
						],
						[
							-76.46486335205627,
							42.43693249219489,
							0
						],
						[
							-76.46481435202699,
							42.43674849216282,
							0
						],
						[
							-76.46479135200599,
							42.43656349212951,
							0
						],
						[
							-76.46478835199244,
							42.43639249209799,
							0
						],
						[
							-76.46417135178142,
							42.43621549209018,
							0
						],
						[
							-76.46406335174427,
							42.43618149208825,
							0
						],
						[
							-76.46390435169036,
							42.43614249208746,
							0
						],
						[
							-76.46386635166529,
							42.43596749205661,
							0
						],
						[
							-76.46356235152592,
							42.43539949196379,
							0
						],
						[
							-76.46348135148673,
							42.43522049193394,
							0
						],
						[
							-76.46335335142462,
							42.43493449188619,
							0
						],
						[
							-76.46327535137839,
							42.43464649183605,
							0
						],
						[
							-76.46311835125488,
							42.43365349165864,
							0
						],
						[
							-76.46283935104593,
							42.43203149136976,
							0
						],
						[
							-76.46280335101456,
							42.43176249132142,
							0
						],
						[
							-76.46277435099002,
							42.43155549128427,
							0
						],
						[
							-76.46248135075938,
							42.42969949095265,
							0
						],
						[
							-76.46500035156392,
							42.42964949084162,
							0
						],
						[
							-76.46699535220013,
							42.4295964907512,
							0
						],
						[
							-76.46752635236895,
							42.42957549072585,
							0
						],
						[
							-76.46836135263449,
							42.42954349068619,
							0
						],
						[
							-76.4695493530122,
							42.4294964906295,
							0
						],
						[
							-76.47030535325247,
							42.42946549059319,
							0
						],
						[
							-76.47080035340976,
							42.4294444905693,
							0
						],
						[
							-76.47189135375608,
							42.42939449051597,
							0
						],
						[
							-76.47211935382639,
							42.42935549049953,
							0
						],
						[
							-76.47137135354765,
							42.42882949043242,
							0
						],
						[
							-76.47086135335995,
							42.42850249039252,
							0
						],
						[
							-76.46990935301166,
							42.42792049032327,
							0
						],
						[
							-76.46973935294908,
							42.42781149030996,
							0
						],
						[
							-76.46879435260142,
							42.42720749023636,
							0
						],
						[
							-76.46840935245979,
							42.4269614902064,
							0
						],
						[
							-76.46722435202379,
							42.42620349011398,
							0
						],
						[
							-76.46560835142995,
							42.42517948998974,
							0
						],
						[
							-76.46437335097416,
							42.4243704898899,
							0
						],
						[
							-76.46423335092247,
							42.42427848987853,
							0
						],
						[
							-76.46409035086974,
							42.42418548986711,
							0
						],
						[
							-76.46309035049748,
							42.4234864897781,
							0
						],
						[
							-76.4617903500107,
							42.42253948965531,
							0
						],
						[
							-76.4615653499268,
							42.42238048963498,
							0
						],
						[
							-76.46045034950919,
							42.42156648952934,
							0
						],
						[
							-76.459104349012,
							42.42067848941932,
							0
						],
						[
							-76.45873634887803,
							42.42046248939419,
							0
						],
						[
							-76.45701734825062,
							42.41943048927254,
							0
						],
						[
							-76.45532134763123,
							42.41840748915165,
							0
						],
						[
							-76.45413634720042,
							42.41771948907211,
							0
						],
						[
							-76.45393134712597,
							42.41760148905855,
							0
						],
						[
							-76.44976234561707,
							42.41527148879545,
							0
						],
						[
							-76.44877334525933,
							42.41472148873354,
							0
						],
						[
							-76.44857334518672,
							42.41460648872031,
							0
						],
						[
							-76.4485513451787,
							42.41459348871879,
							0
						],
						[
							-76.44768234486334,
							42.41409648866185,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090013001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>15229120</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>26507</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4178206</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4373372</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090013001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090013001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>2438</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>1017</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>3763.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>75</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>2.65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.74</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22113</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>21775</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23087</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12783</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12443</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13331</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7747</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7479</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8069</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5015</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4938</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5235</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>4127</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>18979</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>99</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2337</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1542</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1487</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1619</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00003"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.41393133227385,
							42.39010748557903,
							0
						],
						[
							-76.41396833228008,
							42.39003048556328,
							0
						],
						[
							-76.41399233228212,
							42.38995348554803,
							0
						],
						[
							-76.41400633228098,
							42.38987648553321,
							0
						],
						[
							-76.41400933227636,
							42.389800485519,
							0
						],
						[
							-76.41400133226816,
							42.38972348550504,
							0
						],
						[
							-76.41398233225648,
							42.38964748549173,
							0
						],
						[
							-76.41395333224162,
							42.38957148547881,
							0
						],
						[
							-76.41392433222836,
							42.38951748546997,
							0
						],
						[
							-76.41354233206005,
							42.38889348536971,
							0
						],
						[
							-76.41346133202455,
							42.38876348534889,
							0
						],
						[
							-76.41344633201797,
							42.38873948534505,
							0
						],
						[
							-76.41339533199663,
							42.38867148533451,
							0
						],
						[
							-76.41319233191162,
							42.38840048529245,
							0
						],
						[
							-76.41278233174381,
							42.38790548521723,
							0
						],
						[
							-76.41268233170226,
							42.38777648519736,
							0
						],
						[
							-76.41259433166356,
							42.38763348517439,
							0
						],
						[
							-76.4125263316306,
							42.38748148514895,
							0
						],
						[
							-76.41248033160433,
							42.3873244851217,
							0
						],
						[
							-76.41245633158512,
							42.3871674850936,
							0
						],
						[
							-76.41245533157293,
							42.3870054850636,
							0
						],
						[
							-76.41247533156776,
							42.38684748503351,
							0
						],
						[
							-76.41251933157059,
							42.3866934850032,
							0
						],
						[
							-76.4125583315752,
							42.3865854849816,
							0
						],
						[
							-76.41292633161893,
							42.38557148477884,
							0
						],
						[
							-76.4129783316168,
							42.38531448472912,
							0
						],
						[
							-76.41299333160275,
							42.38505748468088,
							0
						],
						[
							-76.4129673315588,
							42.38457148459185,
							0
						],
						[
							-76.41296033152389,
							42.38412548450947,
							0
						],
						[
							-76.41309533145625,
							42.3826114842234,
							0
						],
						[
							-76.41308533143551,
							42.38237248417951,
							0
						],
						[
							-76.41304133140396,
							42.38213448413717,
							0
						],
						[
							-76.41292733134028,
							42.38176448407318,
							0
						],
						[
							-76.41274533123705,
							42.38115248396706,
							0
						],
						[
							-76.41243933103227,
							42.37969748370968,
							0
						],
						[
							-76.41221933089423,
							42.3787764835478,
							0
						],
						[
							-76.41174733062414,
							42.3771564832665,
							0
						],
						[
							-76.41124333034422,
							42.37554248298758,
							0
						],
						[
							-76.41123033033311,
							42.37544748297048,
							0
						],
						[
							-76.41123333033012,
							42.37539348296034,
							0
						],
						[
							-76.41124433032999,
							42.37534348295064,
							0
						],
						[
							-76.41122133031969,
							42.37530348294415,
							0
						],
						[
							-76.41128733033615,
							42.37523948292962,
							0
						],
						[
							-76.41135833035227,
							42.37514848290989,
							0
						],
						[
							-76.41139833036247,
							42.3751124829016,
							0
						],
						[
							-76.41188133049259,
							42.3747734828193,
							0
						],
						[
							-76.41229333060123,
							42.37445248274322,
							0
						],
						[
							-76.41261733068592,
							42.37418948268142,
							0
						],
						[
							-76.41290533076109,
							42.37395448262622,
							0
						],
						[
							-76.41296033077566,
							42.37391248261622,
							0
						],
						[
							-76.41309233081067,
							42.37381248259237,
							0
						],
						[
							-76.41331733087311,
							42.37367948255866,
							0
						],
						[
							-76.41509333137061,
							42.37269348230434,
							0
						],
						[
							-76.415046331256,
							42.37133448205427,
							0
						],
						[
							-76.41503933124979,
							42.37128048204453,
							0
						],
						[
							-76.41502633121297,
							42.37083448196235,
							0
						],
						[
							-76.41498833100103,
							42.36810648145806,
							0
						],
						[
							-76.41498733098686,
							42.36791748142305,
							0
						],
						[
							-76.41497033092334,
							42.36712448127669,
							0
						],
						[
							-76.41493033077676,
							42.36529748093949,
							0
						],
						[
							-76.4149203307264,
							42.36465348082049,
							0
						],
						[
							-76.41491233071086,
							42.36447648078798,
							0
						],
						[
							-76.414880330681,
							42.36420848073959,
							0
						],
						[
							-76.41480533063591,
							42.36392148068937,
							0
						],
						[
							-76.41469833058257,
							42.36366148064546,
							0
						],
						[
							-76.4145213304979,
							42.36328048058193,
							0
						],
						[
							-76.4143943304385,
							42.36302548053975,
							0
						],
						[
							-76.41415133033274,
							42.36264548047906,
							0
						],
						[
							-76.41399333026509,
							42.36241348044239,
							0
						],
						[
							-76.41357833008425,
							42.36176148033819,
							0
						],
						[
							-76.4133513299826,
							42.36136748027425,
							0
						],
						[
							-76.41295632979964,
							42.36059848014751,
							0
						],
						[
							-76.41245332954908,
							42.35937947994168,
							0
						],
						[
							-76.41175132919398,
							42.35760347964054,
							0
						],
						[
							-76.41172032917825,
							42.35752447962713,
							0
						],
						[
							-76.41130632897276,
							42.35653047945942,
							0
						],
						[
							-76.41111632888035,
							42.35610047938729,
							0
						],
						[
							-76.41097632881086,
							42.35576447933061,
							0
						],
						[
							-76.41044932856815,
							42.35475747916502,
							0
						],
						[
							-76.40939832810518,
							42.35303647888806,
							0
						],
						[
							-76.40884832785784,
							42.35206647873024,
							0
						],
						[
							-76.40805432749261,
							42.35055447848169,
							0
						],
						[
							-76.40784332739283,
							42.35011547840874,
							0
						],
						[
							-76.40764132729727,
							42.34969447833876,
							0
						],
						[
							-76.40760532727948,
							42.34960947832443,
							0
						],
						[
							-76.4075023272298,
							42.34938147828628,
							0
						],
						[
							-76.40748132721875,
							42.34932247827618,
							0
						],
						[
							-76.40716832706863,
							42.34864247816261,
							0
						],
						[
							-76.4065463267801,
							42.34742447796165,
							0
						],
						[
							-76.4065233267695,
							42.3473804779544,
							0
						],
						[
							-76.40607432656729,
							42.34658447782477,
							0
						],
						[
							-76.4055463263372,
							42.34575347769184,
							0
						],
						[
							-76.40285432518303,
							42.34177447706175,
							0
						],
						[
							-76.40236932497099,
							42.34100147693781,
							0
						],
						[
							-76.40187632474421,
							42.34006147678321,
							0
						],
						[
							-76.40164332464433,
							42.33971747672873,
							0
						],
						[
							-76.40136332453042,
							42.33938747667875,
							0
						],
						[
							-76.40126432449058,
							42.33927647666213,
							0
						],
						[
							-76.4010093243906,
							42.33902747662616,
							0
						],
						[
							-76.40083832432539,
							42.33888547660669,
							0
						],
						[
							-76.39982932394284,
							42.33807847649748,
							0
						],
						[
							-76.3996493238754,
							42.33794547648003,
							0
						],
						[
							-76.39946932380963,
							42.33783547646687,
							0
						],
						[
							-76.39938832378006,
							42.33778647646102,
							0
						],
						[
							-76.39926632373664,
							42.33772747645499,
							0
						],
						[
							-76.39920532371495,
							42.33769847645206,
							0
						],
						[
							-76.39901632364892,
							42.33762447644592,
							0
						],
						[
							-76.39839332342926,
							42.33735247642049,
							0
						],
						[
							-76.39752532311779,
							42.33689947637132,
							0
						],
						[
							-76.39593732254717,
							42.33605947627924,
							0
						],
						[
							-76.3957713224878,
							42.33597547627032,
							0
						],
						[
							-76.39511832225004,
							42.33558747622456,
							0
						],
						[
							-76.39497832219799,
							42.335489476212,
							0
						],
						[
							-76.39464232207013,
							42.33521447617446,
							0
						],
						[
							-76.39437332196371,
							42.33493847613405,
							0
						],
						[
							-76.39328932152895,
							42.33374547595618,
							0
						],
						[
							-76.39298732140537,
							42.33337947590038,
							0
						],
						[
							-76.39260332124083,
							42.33281247581056,
							0
						],
						[
							-76.39174232085236,
							42.33127347555947,
							0
						],
						[
							-76.39157432077955,
							42.33101447551815,
							0
						],
						[
							-76.39137032069661,
							42.3307744754818,
							0
						],
						[
							-76.3911623206156,
							42.33057847545378,
							0
						],
						[
							-76.39055032037912,
							42.33002747537608,
							0
						],
						[
							-76.39035532030424,
							42.32985847535255,
							0
						],
						[
							-76.38923931986584,
							42.32875547519262,
							0
						],
						[
							-76.38905931979285,
							42.32854647516106,
							0
						],
						[
							-76.38874031966122,
							42.32814447509923,
							0
						],
						[
							-76.38850231955651,
							42.32775547503659,
							0
						],
						[
							-76.38806231935796,
							42.32696847490814,
							0
						],
						[
							-76.38759931915206,
							42.32618147478063,
							0
						],
						[
							-76.38697931888318,
							42.32522147462728,
							0
						],
						[
							-76.38668331875826,
							42.3248104745629,
							0
						],
						[
							-76.38617331855211,
							42.32422647447493,
							0
						],
						[
							-76.38566931835452,
							42.32373347440364,
							0
						],
						[
							-76.38546331827415,
							42.32353747437552,
							0
						],
						[
							-76.3853003182118,
							42.32339947435645,
							0
						],
						[
							-76.38506731812512,
							42.32323547433534,
							0
						],
						[
							-76.3844563179038,
							42.32288747429528,
							0
						],
						[
							-76.38340031751481,
							42.32219747420958,
							0
						],
						[
							-76.3824563171571,
							42.32144347410747,
							0
						],
						[
							-76.38193631695636,
							42.32097747404183,
							0
						],
						[
							-76.38187131693157,
							42.32092347403442,
							0
						],
						[
							-76.38165731685199,
							42.32077347401517,
							0
						],
						[
							-76.38144031677338,
							42.32064947400085,
							0
						],
						[
							-76.3812083166913,
							42.32054447399067,
							0
						],
						[
							-76.38096231660607,
							42.3204574739844,
							0
						],
						[
							-76.38054731646548,
							42.32035447398193,
							0
						],
						[
							-76.3804493164328,
							42.32033747398272,
							0
						],
						[
							-76.37974531620047,
							42.32024747399427,
							0
						],
						[
							-76.37967631617738,
							42.32023447399464,
							0
						],
						[
							-76.37850031579312,
							42.32013647402365,
							0
						],
						[
							-76.37815631568112,
							42.32011347403319,
							0
						],
						[
							-76.3778063155688,
							42.32011247404706,
							0
						],
						[
							-76.3772513153936,
							42.32015047407639,
							0
						],
						[
							-76.37703431532422,
							42.32015347408569,
							0
						],
						[
							-76.37689931528041,
							42.3201464740898,
							0
						],
						[
							-76.37668431520964,
							42.32012147409379,
							0
						],
						[
							-76.3764743151392,
							42.32007947409442,
							0
						],
						[
							-76.37627131507004,
							42.32002347409217,
							0
						],
						[
							-76.37607631500241,
							42.31995347408701,
							0
						],
						[
							-76.37589331493729,
							42.31986547407802,
							0
						],
						[
							-76.37572331487542,
							42.31976447406608,
							0
						],
						[
							-76.3756063148317,
							42.319679474055,
							0
						],
						[
							-76.37529331471323,
							42.31943147402151,
							0
						],
						[
							-76.37482631453298,
							42.31901347396262,
							0
						],
						[
							-76.37477231451152,
							42.31895647395422,
							0
						],
						[
							-76.3746303144536,
							42.31878647392834,
							0
						],
						[
							-76.37450231439826,
							42.31859047389708,
							0
						],
						[
							-76.37429831430835,
							42.31825447384286,
							0
						],
						[
							-76.37425831429012,
							42.31818047383073,
							0
						],
						[
							-76.37425531428916,
							42.31818047383086,
							0
						],
						[
							-76.37318931394773,
							42.31818647387478,
							0
						],
						[
							-76.35087330679862,
							42.31829647479074,
							0
						],
						[
							-76.35089730672729,
							42.31721147458825,
							0
						],
						[
							-76.35087230666893,
							42.3165204744609,
							0
						],
						[
							-76.3508503066171,
							42.31590547434754,
							0
						],
						[
							-76.35084230659938,
							42.31569747430921,
							0
						],
						[
							-76.35084030659853,
							42.31569447430874,
							0
						],
						[
							-76.35083530659583,
							42.31567947430617,
							0
						],
						[
							-76.35083130659345,
							42.31566447430353,
							0
						],
						[
							-76.35082730659094,
							42.31564747430053,
							0
						],
						[
							-76.35081330658127,
							42.31557647428792,
							0
						],
						[
							-76.35080730657789,
							42.31555647428445,
							0
						],
						[
							-76.35081130652806,
							42.31485447415388,
							0
						],
						[
							-76.35080330651064,
							42.3146504741163,
							0
						],
						[
							-76.3508033064872,
							42.3143284740565,
							0
						],
						[
							-76.35080030648172,
							42.31426647404508,
							0
						],
						[
							-76.35078730645762,
							42.3139924739947,
							0
						],
						[
							-76.35062130600053,
							42.30844547297087,
							0
						],
						[
							-76.34748830499444,
							42.30842747309315,
							0
						],
						[
							-76.34747530499025,
							42.30842747309367,
							0
						],
						[
							-76.34738530496139,
							42.30842747309728,
							0
						],
						[
							-76.34265430344284,
							42.30841047328382,
							0
						],
						[
							-76.3305772995662,
							42.30836747375987,
							0
						],
						[
							-76.33034429949134,
							42.30836547376884,
							0
						],
						[
							-76.32785129869114,
							42.30835747386725,
							0
						],
						[
							-76.318362295645,
							42.30832347424109,
							0
						],
						[
							-76.31566529477917,
							42.30831347434724,
							0
						],
						[
							-76.31419929430848,
							42.30830747440483,
							0
						],
						[
							-76.30993229293772,
							42.30827947457048,
							0
						],
						[
							-76.3021932904511,
							42.30822347486991,
							0
						],
						[
							-76.30208129041516,
							42.3082234748744,
							0
						],
						[
							-76.30190129035785,
							42.30822947488272,
							0
						],
						[
							-76.30187529034937,
							42.3082274748834,
							0
						],
						[
							-76.30107729009099,
							42.30819447490919,
							0
						],
						[
							-76.30072428997664,
							42.30817947492056,
							0
						],
						[
							-76.30043828988548,
							42.30818747493348,
							0
						],
						[
							-76.30012428978505,
							42.3081914749468,
							0
						],
						[
							-76.29961728962284,
							42.3081974749682,
							0
						],
						[
							-76.29913428946826,
							42.30820247498846,
							0
						],
						[
							-76.29892828940233,
							42.30820447499706,
							0
						],
						[
							-76.29860828929995,
							42.30820847501062,
							0
						],
						[
							-76.29610028849417,
							42.30819147510784,
							0
						],
						[
							-76.2934512876426,
							42.30816747520939,
							0
						],
						[
							-76.29323228757323,
							42.30817947522038,
							0
						],
						[
							-76.29301628750602,
							42.30820847523441,
							0
						],
						[
							-76.29292528747816,
							42.30822647524141,
							0
						],
						[
							-76.2928742874626,
							42.3082374752455,
							0
						],
						[
							-76.29258828737635,
							42.30831347527105,
							0
						],
						[
							-76.28869828612326,
							42.3082424754135,
							0
						],
						[
							-76.28822228597004,
							42.30823547543124,
							0
						],
						[
							-76.28823428583446,
							42.3063154750739,
							0
						],
						[
							-76.2882472856798,
							42.3041274746667,
							0
						],
						[
							-76.28817628512316,
							42.29677247330227,
							0
						],
						[
							-76.28352428363006,
							42.29676147348626,
							0
						],
						[
							-76.28319328352389,
							42.2967614734995,
							0
						],
						[
							-76.28025028257943,
							42.29675647361625,
							0
						],
						[
							-76.27189827989864,
							42.29673647394642,
							0
						],
						[
							-76.27109127963959,
							42.2967344739783,
							0
						],
						[
							-76.27104427962452,
							42.29673447398018,
							0
						],
						[
							-76.25966927597337,
							42.29670947443008,
							0
						],
						[
							-76.25966327597145,
							42.29670947443032,
							0
						],
						[
							-76.25468827437456,
							42.2966994746272,
							0
						],
						[
							-76.25159327338018,
							42.29668047474731,
							0
						],
						[
							-76.25015127291782,
							42.29668447480562,
							0
						],
						[
							-76.25015327291985,
							42.29670347480908,
							0
						],
						[
							-76.25012727292295,
							42.29686147483951,
							0
						],
						[
							-76.24992727287268,
							42.29705347488319,
							0
						],
						[
							-76.24989827286657,
							42.29709747489253,
							0
						],
						[
							-76.24986127285746,
							42.29713547490108,
							0
						],
						[
							-76.24985327285808,
							42.29717947490958,
							0
						],
						[
							-76.24984627287097,
							42.29738847494872,
							0
						],
						[
							-76.24987527288188,
							42.29741047495165,
							0
						],
						[
							-76.24988327289039,
							42.29749247496658,
							0
						],
						[
							-76.24991227290093,
							42.29750947496861,
							0
						],
						[
							-76.24992027290624,
							42.29754747497533,
							0
						],
						[
							-76.24999327293364,
							42.29760247498264,
							0
						],
						[
							-76.25011927298205,
							42.29771247499806,
							0
						],
						[
							-76.25011927298604,
							42.2977674750083,
							0
						],
						[
							-76.2500892729811,
							42.29783247502158,
							0
						],
						[
							-76.24992727294072,
							42.29799247505781,
							0
						],
						[
							-76.24990427293886,
							42.29806847507285,
							0
						],
						[
							-76.24988227293302,
							42.29808547507688,
							0
						],
						[
							-76.24986727293938,
							42.29823947510614,
							0
						],
						[
							-76.24988927295435,
							42.29834847512552,
							0
						],
						[
							-76.24991127296539,
							42.29840347513486,
							0
						],
						[
							-76.24993327298004,
							42.29850847515353,
							0
						],
						[
							-76.24997827300281,
							42.2986234751731,
							0
						],
						[
							-76.24999227301448,
							42.29872247519094,
							0
						],
						[
							-76.24996327301271,
							42.29882647521144,
							0
						],
						[
							-76.24994027300613,
							42.29883747521441,
							0
						],
						[
							-76.24991127300241,
							42.29891447522988,
							0
						],
						[
							-76.24982227298024,
							42.29900247524979,
							0
						],
						[
							-76.24974827296005,
							42.29905147526187,
							0
						],
						[
							-76.24966027293209,
							42.29905547526612,
							0
						],
						[
							-76.24952027289194,
							42.299121475284,
							0
						],
						[
							-76.2493502728414,
							42.299176475301,
							0
						],
						[
							-76.24929127282246,
							42.29917647530336,
							0
						],
						[
							-76.24923927280499,
							42.2991654753034,
							0
						],
						[
							-76.24922427280018,
							42.29916547530399,
							0
						],
						[
							-76.24920927279537,
							42.2991654753046,
							0
						],
						[
							-76.24913527277437,
							42.29920347531463,
							0
						],
						[
							-76.24906227275537,
							42.29926447532888,
							0
						],
						[
							-76.24896627273336,
							42.2993854753552,
							0
						],
						[
							-76.24896527273737,
							42.2994454753664,
							0
						],
						[
							-76.24894327273385,
							42.29949447537639,
							0
						],
						[
							-76.24894327274023,
							42.29958247539276,
							0
						],
						[
							-76.24898127276394,
							42.2997414754208,
							0
						],
						[
							-76.24902527278249,
							42.29980247543038,
							0
						],
						[
							-76.249114272817,
							42.29988447544208,
							0
						],
						[
							-76.24914627282885,
							42.29990647544489,
							0
						],
						[
							-76.24927727287726,
							42.29999447545603,
							0
						],
						[
							-76.24938827292077,
							42.30010347547185,
							0
						],
						[
							-76.24939527292621,
							42.30014747547976,
							0
						],
						[
							-76.24942527293742,
							42.30016947548265,
							0
						],
						[
							-76.24943227294605,
							42.30025747549873,
							0
						],
						[
							-76.24938827293947,
							42.30036147551983,
							0
						],
						[
							-76.24938827294267,
							42.300405475528,
							0
						],
						[
							-76.24935127293318,
							42.30043847553562,
							0
						],
						[
							-76.24935127293521,
							42.30046647554084,
							0
						],
						[
							-76.24920327290279,
							42.30067447558542,
							0
						],
						[
							-76.24917427289508,
							42.30069647559066,
							0
						],
						[
							-76.24916627289534,
							42.30073547559823,
							0
						],
						[
							-76.24912927288587,
							42.30076847560586,
							0
						],
						[
							-76.24909327287787,
							42.30081747561641,
							0
						],
						[
							-76.24907827287704,
							42.30087247562722,
							0
						],
						[
							-76.24901927286767,
							42.30100447565411,
							0
						],
						[
							-76.2490042728688,
							42.30108647566997,
							0
						],
						[
							-76.24901927288717,
							42.30127347570414,
							0
						],
						[
							-76.24905627290818,
							42.30139947572609,
							0
						],
						[
							-76.24909327292526,
							42.30147147573799,
							0
						],
						[
							-76.2491302729399,
							42.30150947574358,
							0
						],
						[
							-76.24916727295532,
							42.30155847575121,
							0
						],
						[
							-76.24920427296959,
							42.30159147575589,
							0
						],
						[
							-76.24921227297453,
							42.30162447576169,
							0
						],
						[
							-76.24924127298544,
							42.30164647576461,
							0
						],
						[
							-76.24924227300171,
							42.30186647580548,
							0
						],
						[
							-76.24920527300411,
							42.3020634758436,
							0
						],
						[
							-76.24920527300932,
							42.30213547585698,
							0
						],
						[
							-76.24916827301297,
							42.30234947589825,
							0
						],
						[
							-76.24916827302253,
							42.3024814759228,
							0
						],
						[
							-76.24913927302511,
							42.30264547595444,
							0
						],
						[
							-76.24916127303537,
							42.30268947596174,
							0
						],
						[
							-76.24916827304125,
							42.30273947597075,
							0
						],
						[
							-76.24920527305905,
							42.30282147598452,
							0
						],
						[
							-76.24921327306677,
							42.3028924759974,
							0
						],
						[
							-76.24924327307843,
							42.30292047600143,
							0
						],
						[
							-76.24925027308466,
							42.30297547601136,
							0
						],
						[
							-76.24928027309544,
							42.30299147601315,
							0
						],
						[
							-76.24928727310363,
							42.3030734760281,
							0
						],
						[
							-76.24931727311484,
							42.303095476031,
							0
						],
						[
							-76.24933227313721,
							42.3033374760754,
							0
						],
						[
							-76.24930227314347,
							42.3035564761173,
							0
						],
						[
							-76.24933227315707,
							42.30361147612633,
							0
						],
						[
							-76.24933927316135,
							42.30363947613126,
							0
						],
						[
							-76.2494282732026,
							42.30381447616024,
							0
						],
						[
							-76.2494512732112,
							42.30383147616249,
							0
						],
						[
							-76.24945127321395,
							42.30386947616955,
							0
						],
						[
							-76.24947327322303,
							42.30389747617389,
							0
						],
						[
							-76.24953127324164,
							42.30389747617155,
							0
						],
						[
							-76.24959427326186,
							42.30389747616904,
							0
						],
						[
							-76.24960627326571,
							42.30389747616857,
							0
						],
						[
							-76.24970627330106,
							42.30394247617294,
							0
						],
						[
							-76.24976527332284,
							42.30398147617783,
							0
						],
						[
							-76.24987627336517,
							42.30407447619069,
							0
						],
						[
							-76.24993527339086,
							42.30416747620562,
							0
						],
						[
							-76.2499722734059,
							42.30421147621232,
							0
						],
						[
							-76.24998027341248,
							42.30426647622222,
							0
						],
						[
							-76.25006127345476,
							42.30449147626083,
							0
						],
						[
							-76.25006127346116,
							42.30457947627719,
							0
						],
						[
							-76.25003827345732,
							42.30462847628721,
							0
						],
						[
							-76.25001627345948,
							42.30475547631171,
							0
						],
						[
							-76.24998727345132,
							42.30477147631584,
							0
						],
						[
							-76.24994927344986,
							42.30491947634486,
							0
						],
						[
							-76.24992027344295,
							42.30495247635216,
							0
						],
						[
							-76.24990527344133,
							42.30499647636094,
							0
						],
						[
							-76.24989827344191,
							42.30503547636846,
							0
						],
						[
							-76.24987527343613,
							42.30505747637347,
							0
						],
						[
							-76.24986027343762,
							42.30514447639025,
							0
						],
						[
							-76.24983827343216,
							42.30516647639523,
							0
						],
						[
							-76.24980127343898,
							42.30542447644468,
							0
						],
						[
							-76.24986727347968,
							42.30569347649205,
							0
						],
						[
							-76.24988227348605,
							42.30571547649553,
							0
						],
						[
							-76.24990427349836,
							42.30578747650803,
							0
						],
						[
							-76.24994127351502,
							42.30585347651883,
							0
						],
						[
							-76.24996327352801,
							42.3059354765332,
							0
						],
						[
							-76.24998527353704,
							42.30596247653735,
							0
						],
						[
							-76.25001527355064,
							42.30601747654637,
							0
						],
						[
							-76.25003727355895,
							42.30603447654864,
							0
						],
						[
							-76.25003727356089,
							42.30606147655367,
							0
						],
						[
							-76.2501112735934,
							42.30618247657321,
							0
						],
						[
							-76.25018527362388,
							42.30627547658754,
							0
						],
						[
							-76.25020627363317,
							42.3063104765932,
							0
						],
						[
							-76.25022227364019,
							42.3063364765974,
							0
						],
						[
							-76.2502592736548,
							42.30637447660299,
							0
						],
						[
							-76.25025927365684,
							42.30640247660818,
							0
						],
						[
							-76.25041827372107,
							42.30658447663569,
							0
						],
						[
							-76.25046127373304,
							42.30655947662931,
							0
						],
						[
							-76.25074627380927,
							42.30634947657889,
							0
						],
						[
							-76.25100227387489,
							42.30612147652628,
							0
						],
						[
							-76.25212427415632,
							42.30503747627992,
							0
						],
						[
							-76.25234527421365,
							42.30485047623633,
							0
						],
						[
							-76.25255927427203,
							42.3047084762014,
							0
						],
						[
							-76.25277527433299,
							42.30459347617136,
							0
						],
						[
							-76.25301927440361,
							42.30448747614192,
							0
						],
						[
							-76.25314227444002,
							42.3044454761292,
							0
						],
						[
							-76.25322727446563,
							42.30442247612153,
							0
						],
						[
							-76.25336627450878,
							42.30440247611226,
							0
						],
						[
							-76.25340527452158,
							42.30440647611143,
							0
						],
						[
							-76.25347527454397,
							42.30440547610846,
							0
						],
						[
							-76.25384827466539,
							42.30442947609802,
							0
						],
						[
							-76.25415027476367,
							42.30444847608948,
							0
						],
						[
							-76.25427927480659,
							42.30446947608824,
							0
						],
						[
							-76.25448527487607,
							42.30451647608874,
							0
						],
						[
							-76.25464427493087,
							42.30456847609205,
							0
						],
						[
							-76.25468927494668,
							42.30458747609378,
							0
						],
						[
							-76.2547622749723,
							42.30461747609646,
							0
						],
						[
							-76.25581027534227,
							42.30508247614103,
							0
						],
						[
							-76.25600727541159,
							42.30516647614876,
							0
						],
						[
							-76.25627627550642,
							42.30528447615996,
							0
						],
						[
							-76.25710127579929,
							42.30567247619912,
							0
						],
						[
							-76.25717527582584,
							42.30571147620342,
							0
						],
						[
							-76.25810827616503,
							42.3062604762682,
							0
						],
						[
							-76.2625252778025,
							42.30929647665602,
							0
						],
						[
							-76.26403127836029,
							42.31032447678692,
							0
						],
						[
							-76.26537127885967,
							42.31128147691123,
							0
						],
						[
							-76.26576527900642,
							42.31156147694752,
							0
						],
						[
							-76.26591127906133,
							42.31167247696232,
							0
						],
						[
							-76.26601627910047,
							42.31174747697206,
							0
						],
						[
							-76.26819727991288,
							42.31329947717332,
							0
						],
						[
							-76.26957828043273,
							42.31435647731453,
							0
						],
						[
							-76.27171928124376,
							42.31606547754653,
							0
						],
						[
							-76.27346728191246,
							42.31755047775258,
							0
						],
						[
							-76.27353628193815,
							42.31759947775892,
							0
						],
						[
							-76.27530728261722,
							42.31912547797166,
							0
						],
						[
							-76.27535828263672,
							42.31916847797761,
							0
						],
						[
							-76.27611728292767,
							42.31982147806858,
							0
						],
						[
							-76.27709828330447,
							42.32067547818802,
							0
						],
						[
							-76.27815028370858,
							42.32159147831612,
							0
						],
						[
							-76.27885728397936,
							42.32219647840025,
							0
						],
						[
							-76.28442028610175,
							42.32683947904025,
							0
						],
						[
							-76.2847832862399,
							42.32713747908109,
							0
						],
						[
							-76.2874082872368,
							42.32926447937113,
							0
						],
						[
							-76.28779928738356,
							42.3295574794099,
							0
						],
						[
							-76.28910128786671,
							42.33045647952478,
							0
						],
						[
							-76.293194289386,
							42.3332884798869,
							0
						],
						[
							-76.29344328947973,
							42.33347847991225,
							0
						],
						[
							-76.29371828958674,
							42.33373647994914,
							0
						],
						[
							-76.29395628968325,
							42.33401347999104,
							0
						],
						[
							-76.29415428976824,
							42.33430848003792,
							0
						],
						[
							-76.29429728983493,
							42.3345944800853,
							0
						],
						[
							-76.29517429026627,
							42.33665548043295,
							0
						],
						[
							-76.29607129071105,
							42.33881248079757,
							0
						],
						[
							-76.29682829108437,
							42.34060448110002,
							0
						],
						[
							-76.29691929112725,
							42.3407924811313,
							0
						],
						[
							-76.29707829119681,
							42.34104748117227,
							0
						],
						[
							-76.2972732912773,
							42.34129348121014,
							0
						],
						[
							-76.2975002913663,
							42.34151548124226,
							0
						],
						[
							-76.29752529137579,
							42.34153548124498,
							0
						],
						[
							-76.29795329153832,
							42.34188148129208,
							0
						],
						[
							-76.29798429155008,
							42.34190648129547,
							0
						],
						[
							-76.29837729169948,
							42.34222648133915,
							0
						],
						[
							-76.29856029176788,
							42.34235948135652,
							0
						],
						[
							-76.29870629182085,
							42.34244348136627,
							0
						],
						[
							-76.29886429187694,
							42.34251748137368,
							0
						],
						[
							-76.29903129193504,
							42.34257948137849,
							0
						],
						[
							-76.2992052919943,
							42.34262648138025,
							0
						],
						[
							-76.29938629205458,
							42.34265648137857,
							0
						],
						[
							-76.29960729212722,
							42.34268048137418,
							0
						],
						[
							-76.30129429267765,
							42.34280548132979,
							0
						],
						[
							-76.30156529276536,
							42.3428154813208,
							0
						],
						[
							-76.30205629292415,
							42.3428324813043,
							0
						],
						[
							-76.3033672933441,
							42.3428224812499,
							0
						],
						[
							-76.30358129341357,
							42.34283348124336,
							0
						],
						[
							-76.30401529355547,
							42.34286948123266,
							0
						],
						[
							-76.30440329368483,
							42.34293648122958,
							0
						],
						[
							-76.30641629436418,
							42.34339548123413,
							0
						],
						[
							-76.30860429510712,
							42.34395648125059,
							0
						],
						[
							-76.31046329574565,
							42.34453348128321,
							0
						],
						[
							-76.3107932958605,
							42.34465648129284,
							0
						],
						[
							-76.31113129598076,
							42.34481848130935,
							0
						],
						[
							-76.3114072960809,
							42.3449774813278,
							0
						],
						[
							-76.31240429644721,
							42.3456144814061,
							0
						],
						[
							-76.31428329713617,
							42.34679548155002,
							0
						],
						[
							-76.31456829724249,
							42.34699948157648,
							0
						],
						[
							-76.31490729737297,
							42.34729748161819,
							0
						],
						[
							-76.31508029744211,
							42.34748448164597,
							0
						],
						[
							-76.31520229749066,
							42.34761348166504,
							0
						],
						[
							-76.31546929760336,
							42.34798448172321,
							0
						],
						[
							-76.31571329770868,
							42.34835548178229,
							0
						],
						[
							-76.31584429776633,
							42.34856948181675,
							0
						],
						[
							-76.31612529789989,
							42.34916548191613,
							0
						],
						[
							-76.31626429796243,
							42.34941148195622,
							0
						],
						[
							-76.31645929804387,
							42.34967048199649,
							0
						],
						[
							-76.31726929837893,
							42.35070148215538,
							0
						],
						[
							-76.31748829846735,
							42.35095048219282,
							0
						],
						[
							-76.3177332985622,
							42.35117348222436,
							0
						],
						[
							-76.31860229889384,
							42.35189748232393,
							0
						],
						[
							-76.318706298935,
							42.35200448233962,
							0
						],
						[
							-76.31884429898803,
							42.35212448235635,
							0
						],
						[
							-76.31924429914685,
							42.3525424824179,
							0
						],
						[
							-76.31953529926362,
							42.35286348246579,
							0
						],
						[
							-76.3198332993849,
							42.35321548251918,
							0
						],
						[
							-76.31993929942868,
							42.35334948253982,
							0
						],
						[
							-76.32028129957166,
							42.35380548261073,
							0
						],
						[
							-76.32040729962317,
							42.35395748263387,
							0
						],
						[
							-76.3204262996309,
							42.35397948263719,
							0
						],
						[
							-76.32062129970737,
							42.35417048266482,
							0
						],
						[
							-76.32084329979159,
							42.35434848268896,
							0
						],
						[
							-76.32119829992322,
							42.35459148271983,
							0
						],
						[
							-76.3216483000873,
							42.35486148275189,
							0
						],
						[
							-76.32206530023679,
							42.35507648277507,
							0
						],
						[
							-76.32236230034209,
							42.35521348278858,
							0
						],
						[
							-76.322656300444,
							42.35531748279608,
							0
						],
						[
							-76.32294930054437,
							42.35540448280047,
							0
						],
						[
							-76.32373230081437,
							42.35566148281678,
							0
						],
						[
							-76.32398430090186,
							42.35575248282355,
							0
						],
						[
							-76.32425730099841,
							42.35587548283542,
							0
						],
						[
							-76.32447330107642,
							42.35599448284884,
							0
						],
						[
							-76.32679330192545,
							42.35742848302191,
							0
						],
						[
							-76.32771230226184,
							42.3579974830906,
							0
						],
						[
							-76.32836730250361,
							42.35843048314469,
							0
						],
						[
							-76.32923330282154,
							42.35897948321183,
							0
						],
						[
							-76.32934630286225,
							42.35904048321861,
							0
						],
						[
							-76.32960730295767,
							42.35920048323781,
							0
						],
						[
							-76.32981230303474,
							42.35935548325836,
							0
						],
						[
							-76.32999330310545,
							42.3595284832832,
							0
						],
						[
							-76.33060730334894,
							42.36016548337675,
							0
						],
						[
							-76.33075930340712,
							42.3602944833946,
							0
						],
						[
							-76.33096430348355,
							42.36044048341345,
							0
						],
						[
							-76.3311883035648,
							42.36056848342822,
							0
						],
						[
							-76.33136730362827,
							42.36065148343644,
							0
						],
						[
							-76.33182130379133,
							42.3608894834624,
							0
						],
						[
							-76.3319103038241,
							42.36094748346957,
							0
						],
						[
							-76.33225030394934,
							42.36116848349694,
							0
						],
						[
							-76.33386330454638,
							42.36225748363427,
							0
						],
						[
							-76.33515130502369,
							42.36313448374528,
							0
						],
						[
							-76.33537830510711,
							42.36327948376308,
							0
						],
						[
							-76.33566530521016,
							42.36342948377939,
							0
						],
						[
							-76.33597130531761,
							42.36355648379067,
							0
						],
						[
							-76.336138305375,
							42.36360848379361,
							0
						],
						[
							-76.33621130540038,
							42.3636354837957,
							0
						],
						[
							-76.33663830554771,
							42.36377648380472,
							0
						],
						[
							-76.33713430571876,
							42.36393948381505,
							0
						],
						[
							-76.33809030604611,
							42.36422148382899,
							0
						],
						[
							-76.33882530629742,
							42.36443348383882,
							0
						],
						[
							-76.33901130635996,
							42.36447248383859,
							0
						],
						[
							-76.33952330653213,
							42.36458048383808,
							0
						],
						[
							-76.34145830718151,
							42.36497048383274,
							0
						],
						[
							-76.34153730720804,
							42.36498648383254,
							0
						],
						[
							-76.34228730746125,
							42.36515848383434,
							0
						],
						[
							-76.34255530754997,
							42.36519548383043,
							0
						],
						[
							-76.34286430765079,
							42.36521848382229,
							0
						],
						[
							-76.34325430777564,
							42.36521448380589,
							0
						],
						[
							-76.34368630790928,
							42.36514648377593,
							0
						],
						[
							-76.34392830798636,
							42.36513848376475,
							0
						],
						[
							-76.34404930802577,
							42.36514648376136,
							0
						],
						[
							-76.34416730806517,
							42.36516748376052,
							0
						],
						[
							-76.34428330810427,
							42.36519348376067,
							0
						],
						[
							-76.34439330814244,
							42.36523248376349,
							0
						],
						[
							-76.34449830817933,
							42.36527648376745,
							0
						],
						[
							-76.34459630821465,
							42.36532948377336,
							0
						],
						[
							-76.34468730824838,
							42.36539148378121,
							0
						],
						[
							-76.34476830827919,
							42.36545748379018,
							0
						],
						[
							-76.34480930829528,
							42.36549748379598,
							0
						],
						[
							-76.34535530851377,
							42.36609048388404,
							0
						],
						[
							-76.34572530865739,
							42.36643148393245,
							0
						],
						[
							-76.34703230916486,
							42.36763748410368,
							0
						],
						[
							-76.3483283096658,
							42.36880248426774,
							0
						],
						[
							-76.34848530972552,
							42.36893048428518,
							0
						],
						[
							-76.3486963098036,
							42.36907248430305,
							0
						],
						[
							-76.34892530988607,
							42.36919548431666,
							0
						],
						[
							-76.34917130997268,
							42.36930048432626,
							0
						],
						[
							-76.34943031006213,
							42.36938748433199,
							0
						],
						[
							-76.35195231091794,
							42.37002448434884,
							0
						],
						[
							-76.35304331128809,
							42.37029948435602,
							0
						],
						[
							-76.35326731136442,
							42.37036048435835,
							0
						],
						[
							-76.35326231137611,
							42.3705424843923,
							0
						],
						[
							-76.35322331147664,
							42.3720894846808,
							0
						],
						[
							-76.35319631155097,
							42.37322548489258,
							0
						],
						[
							-76.35325131162415,
							42.37398548503132,
							0
						],
						[
							-76.35341331173095,
							42.37473548516392,
							0
						],
						[
							-76.35362731185596,
							42.37550648529831,
							0
						],
						[
							-76.35399331206922,
							42.37681748552673,
							0
						],
						[
							-76.35412031213812,
							42.37720248559301,
							0
						],
						[
							-76.35422831219682,
							42.37753148564969,
							0
						],
						[
							-76.35457031235825,
							42.37823848576704,
							0
						],
						[
							-76.3550313125629,
							42.37901448589242,
							0
						],
						[
							-76.35520331263913,
							42.37930248593893,
							0
						],
						[
							-76.35540031272691,
							42.3796384859933,
							0
						],
						[
							-76.35552631278301,
							42.37985248602794,
							0
						],
						[
							-76.35671831331399,
							42.38188348635663,
							0
						],
						[
							-76.35754431367677,
							42.38321948657114,
							0
						],
						[
							-76.35829731400469,
							42.38439948675968,
							0
						],
						[
							-76.35850631409231,
							42.38468048680336,
							0
						],
						[
							-76.35875431419143,
							42.3849474868429,
							0
						],
						[
							-76.35903831430049,
							42.38519248687691,
							0
						],
						[
							-76.35935531441875,
							42.38541848690606,
							0
						],
						[
							-76.35970131454395,
							42.38561248692811,
							0
						],
						[
							-76.3600743146758,
							42.38577848694391,
							0
						],
						[
							-76.36011031469094,
							42.38582748695153,
							0
						],
						[
							-76.36002831468123,
							42.38605448699694,
							0
						],
						[
							-76.36001831468097,
							42.38609448700475,
							0
						],
						[
							-76.36001431468296,
							42.38613948701324,
							0
						],
						[
							-76.3600263146931,
							42.38622548702871,
							0
						],
						[
							-76.36006131471018,
							42.38630548704214,
							0
						],
						[
							-76.36010931473021,
							42.38636848705189,
							0
						],
						[
							-76.36124331517873,
							42.38752548722079,
							0
						],
						[
							-76.36160831532521,
							42.38792648728048,
							0
						],
						[
							-76.36189331544543,
							42.38831948734187,
							0
						],
						[
							-76.36203031550671,
							42.38855648738029,
							0
						],
						[
							-76.36224631560552,
							42.38895948744631,
							0
						],
						[
							-76.36243131569466,
							42.38936648751432,
							0
						],
						[
							-76.36254531576016,
							42.38976148758297,
							0
						],
						[
							-76.36260531580838,
							42.39015748765395,
							0
						],
						[
							-76.36271831597504,
							42.39193948797974,
							0
						],
						[
							-76.3628063161064,
							42.39334848823737,
							0
						],
						[
							-76.36280931611122,
							42.39340148824707,
							0
						],
						[
							-76.36283431614919,
							42.39381048832189,
							0
						],
						[
							-76.3632463162817,
							42.39381448830606,
							0
						],
						[
							-76.36406031654155,
							42.3937954882698,
							0
						],
						[
							-76.36429331661522,
							42.39378048825765,
							0
						],
						[
							-76.36466831673388,
							42.39375748823831,
							0
						],
						[
							-76.36555631701383,
							42.39368848818982,
							0
						],
						[
							-76.36683131741992,
							42.39364648813075,
							0
						],
						[
							-76.36724431755368,
							42.3936634881173,
							0
						],
						[
							-76.36785931775283,
							42.39368748809702,
							0
						],
						[
							-76.37037331857196,
							42.39385648802722,
							0
						],
						[
							-76.37076831870071,
							42.39388348801634,
							0
						],
						[
							-76.37142731891542,
							42.39392748799799,
							0
						],
						[
							-76.37226331918778,
							42.39398348797473,
							0
						],
						[
							-76.3728073193651,
							42.3940204879597,
							0
						],
						[
							-76.37312331946853,
							42.39404848795219,
							0
						],
						[
							-76.37346031957932,
							42.3940844879453,
							0
						],
						[
							-76.37394931974109,
							42.39415048793786,
							0
						],
						[
							-76.37431531986314,
							42.39421348793481,
							0
						],
						[
							-76.37442831990103,
							42.39423548793434,
							0
						],
						[
							-76.37488932005547,
							42.3943244879323,
							0
						],
						[
							-76.37519032015675,
							42.39438848793206,
							0
						],
						[
							-76.37590732039774,
							42.39453748793082,
							0
						],
						[
							-76.37691432073518,
							42.39473248792644,
							0
						],
						[
							-76.37730732086649,
							42.3948034879238,
							0
						],
						[
							-76.37807532112188,
							42.39492548791549,
							0
						],
						[
							-76.38051732193044,
							42.39526548788027,
							0
						],
						[
							-76.3811983221549,
							42.39534648786786,
							0
						],
						[
							-76.38194532239922,
							42.39540948784948,
							0
						],
						[
							-76.38220932248474,
							42.39542048784089,
							0
						],
						[
							-76.38253432259036,
							42.39543848783114,
							0
						],
						[
							-76.38260832261467,
							42.39544648782965,
							0
						],
						[
							-76.38620432377469,
							42.39552948770031,
							0
						],
						[
							-76.38702532403809,
							42.39552848766709,
							0
						],
						[
							-76.38791332432098,
							42.39550048762614,
							0
						],
						[
							-76.38859932453751,
							42.39545148758946,
							0
						],
						[
							-76.38889932463246,
							42.39543348757405,
							0
						],
						[
							-76.38939132478733,
							42.39539248754665,
							0
						],
						[
							-76.39028032506718,
							42.39531848749714,
							0
						],
						[
							-76.39041732511033,
							42.39530748748958,
							0
						],
						[
							-76.39215032565725,
							42.39518248739666,
							0
						],
						[
							-76.3936003261262,
							42.39523248734754,
							0
						],
						[
							-76.39390532622517,
							42.39524748733806,
							0
						],
						[
							-76.39525232666377,
							42.39533448729995,
							0
						],
						[
							-76.39635732702324,
							42.39540148726788,
							0
						],
						[
							-76.3979643275467,
							42.395508487223,
							0
						],
						[
							-76.39953232805873,
							42.39562948718228,
							0
						],
						[
							-76.4005833284019,
							42.39571048715497,
							0
						],
						[
							-76.40369932941972,
							42.39595648707507,
							0
						],
						[
							-76.40431732962045,
							42.39598948705629,
							0
						],
						[
							-76.40810833084498,
							42.39610048692416,
							0
						],
						[
							-76.40839833093897,
							42.39611348691489,
							0
						],
						[
							-76.4089023311023,
							42.39613548689865,
							0
						],
						[
							-76.40905133115062,
							42.39614248689394,
							0
						],
						[
							-76.40961333133437,
							42.39618948688001,
							0
						],
						[
							-76.41014633151156,
							42.39627348687412,
							0
						],
						[
							-76.41016733150934,
							42.39615148685066,
							0
						],
						[
							-76.41016833150108,
							42.39603448682895,
							0
						],
						[
							-76.41016033148861,
							42.39589948680425,
							0
						],
						[
							-76.4101283313938,
							42.39474648659188,
							0
						],
						[
							-76.41006533131758,
							42.39398248645286,
							0
						],
						[
							-76.41000833126168,
							42.3934694863601,
							0
						],
						[
							-76.4099443311831,
							42.3926774862159,
							0
						],
						[
							-76.40992633116089,
							42.39245348617511,
							0
						],
						[
							-76.40988833112063,
							42.39207048610567,
							0
						],
						[
							-76.40986133108,
							42.39163448602596,
							0
						],
						[
							-76.40982533098524,
							42.39049948581707,
							0
						],
						[
							-76.40982833096018,
							42.39014448575117,
							0
						],
						[
							-76.40982833094662,
							42.38995948571688,
							0
						],
						[
							-76.40982133094043,
							42.38990548570715,
							0
						],
						[
							-76.40980733093232,
							42.38985648569865,
							0
						],
						[
							-76.40975733090903,
							42.38975748568229,
							0
						],
						[
							-76.40972233089458,
							42.38971348567556,
							0
						],
						[
							-76.4096403308627,
							42.38963748566477,
							0
						],
						[
							-76.40938533076762,
							42.38945648564152,
							0
						],
						[
							-76.40878633054825,
							42.38908548559687,
							0
						],
						[
							-76.4084713304323,
							42.38888248557195,
							0
						],
						[
							-76.40842933041554,
							42.3888374855653,
							0
						],
						[
							-76.40840033040264,
							42.38878848555736,
							0
						],
						[
							-76.40838633039456,
							42.38873948554885,
							0
						],
						[
							-76.40839133039051,
							42.38866248553438,
							0
						],
						[
							-76.41070833117061,
							42.38916348553391,
							0
						],
						[
							-76.412313331711,
							42.38951048553356,
							0
						],
						[
							-76.41256333179493,
							42.38956148553296,
							0
						],
						[
							-76.41299433194207,
							42.38968248553803,
							0
						],
						[
							-76.41340533208545,
							42.38983948555055,
							0
						],
						[
							-76.41379333222343,
							42.39002348556902,
							0
						],
						[
							-76.41393133227385,
							42.39010748557903,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090019002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>67710036</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>165936</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.3264970</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3420163</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090019002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090019002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1658</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>760</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>16731.57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>72</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.92</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.98</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27255</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26917</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28229</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14994</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14652</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15540</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8813</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8546</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9136</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6181</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6104</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6401</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>5.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.05</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2041</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>83</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3012</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>184</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3615</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1250</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1310</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>919</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>15</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00004"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.41070833117061,
							42.38916348553391,
							0
						],
						[
							-76.40839133039051,
							42.38866248553438,
							0
						],
						[
							-76.40838633039456,
							42.38873948554885,
							0
						],
						[
							-76.40840033040264,
							42.38878848555736,
							0
						],
						[
							-76.40842933041554,
							42.3888374855653,
							0
						],
						[
							-76.4084713304323,
							42.38888248557195,
							0
						],
						[
							-76.40878633054825,
							42.38908548559687,
							0
						],
						[
							-76.40938533076762,
							42.38945648564152,
							0
						],
						[
							-76.4096403308627,
							42.38963748566477,
							0
						],
						[
							-76.40972233089458,
							42.38971348567556,
							0
						],
						[
							-76.40975733090903,
							42.38975748568229,
							0
						],
						[
							-76.40980733093232,
							42.38985648569865,
							0
						],
						[
							-76.40982133094043,
							42.38990548570715,
							0
						],
						[
							-76.40982833094662,
							42.38995948571688,
							0
						],
						[
							-76.40982833096018,
							42.39014448575117,
							0
						],
						[
							-76.40982533098524,
							42.39049948581707,
							0
						],
						[
							-76.40986133108,
							42.39163448602596,
							0
						],
						[
							-76.40988833112063,
							42.39207048610567,
							0
						],
						[
							-76.40992633116089,
							42.39245348617511,
							0
						],
						[
							-76.4099443311831,
							42.3926774862159,
							0
						],
						[
							-76.41000833126168,
							42.3934694863601,
							0
						],
						[
							-76.41006533131758,
							42.39398248645286,
							0
						],
						[
							-76.4101283313938,
							42.39474648659188,
							0
						],
						[
							-76.41016033148861,
							42.39589948680425,
							0
						],
						[
							-76.41016833150108,
							42.39603448682895,
							0
						],
						[
							-76.41016733150934,
							42.39615148685066,
							0
						],
						[
							-76.41014633151156,
							42.39627348687412,
							0
						],
						[
							-76.41059133166115,
							42.39636648687342,
							0
						],
						[
							-76.4109263317756,
							42.39646148687753,
							0
						],
						[
							-76.4112323318815,
							42.39656648688465,
							0
						],
						[
							-76.41173233205758,
							42.39678048690416,
							0
						],
						[
							-76.41245933231792,
							42.39714948694323,
							0
						],
						[
							-76.41313533256196,
							42.39751948698457,
							0
						],
						[
							-76.41436033300312,
							42.39817548705675,
							0
						],
						[
							-76.41543133338739,
							42.39872948711623,
							0
						],
						[
							-76.41965833488881,
							42.40070848731252,
							0
						],
						[
							-76.4229803360673,
							42.40224348746298,
							0
						],
						[
							-76.4237073363263,
							42.40259448749871,
							0
						],
						[
							-76.42441833657954,
							42.40293648753339,
							0
						],
						[
							-76.42472733668961,
							42.40308548754854,
							0
						],
						[
							-76.42750333767893,
							42.40442948768558,
							0
						],
						[
							-76.42943533836811,
							42.40537348778254,
							0
						],
						[
							-76.43194533926632,
							42.40663848791561,
							0
						],
						[
							-76.43455534019589,
							42.4078934880428,
							0
						],
						[
							-76.43831234153646,
							42.409733488232,
							0
						],
						[
							-76.43905834180225,
							42.41009348826859,
							0
						],
						[
							-76.43952434196689,
							42.41029948828794,
							0
						],
						[
							-76.44014934218308,
							42.41051248830216,
							0
						],
						[
							-76.44073434238406,
							42.41069348831208,
							0
						],
						[
							-76.44156034267318,
							42.4110214883395,
							0
						],
						[
							-76.44295334316728,
							42.41166348840217,
							0
						],
						[
							-76.44411934358085,
							42.41220048845456,
							0
						],
						[
							-76.44515534395218,
							42.4127304885109,
							0
						],
						[
							-76.44565634413175,
							42.41298648853807,
							0
						],
						[
							-76.44606134427688,
							42.41319348856006,
							0
						],
						[
							-76.4468443445595,
							42.41362048860754,
							0
						],
						[
							-76.44726234471095,
							42.41385648863437,
							0
						],
						[
							-76.44768234486334,
							42.41409648866185,
							0
						],
						[
							-76.4485513451787,
							42.41459348871879,
							0
						],
						[
							-76.44857334518672,
							42.41460648872031,
							0
						],
						[
							-76.45009834561094,
							42.41372148849489,
							0
						],
						[
							-76.45072834579129,
							42.41342548841465,
							0
						],
						[
							-76.45132034596168,
							42.41315948834151,
							0
						],
						[
							-76.45167734606055,
							42.41294648828766,
							0
						],
						[
							-76.45233834624587,
							42.41258248819356,
							0
						],
						[
							-76.45248834628825,
							42.41250448817307,
							0
						],
						[
							-76.45231834616497,
							42.41156948800681,
							0
						],
						[
							-76.45206634600855,
							42.41054148782662,
							0
						],
						[
							-76.45204134599422,
							42.4104554878117,
							0
						],
						[
							-76.45202834598682,
							42.41041148780408,
							0
						],
						[
							-76.45199934596333,
							42.4102184877695,
							0
						],
						[
							-76.45200034594711,
							42.4099934877278,
							0
						],
						[
							-76.45203734593603,
							42.40968148766853,
							0
						],
						[
							-76.45205134593523,
							42.40960948765461,
							0
						],
						[
							-76.45209134593816,
							42.40947448762802,
							0
						],
						[
							-76.45213934594554,
							42.4093654876059,
							0
						],
						[
							-76.45222034596249,
							42.40924248757983,
							0
						],
						[
							-76.45225634597139,
							42.40920648757172,
							0
						],
						[
							-76.45234134599396,
							42.40914248755644,
							0
						],
						[
							-76.45239034600762,
							42.40911448754928,
							0
						],
						[
							-76.45244334602293,
							42.40909148754289,
							0
						],
						[
							-76.45249934603949,
							42.40907248753711,
							0
						],
						[
							-76.45261634607526,
							42.40904848752794,
							0
						],
						[
							-76.45273834611397,
							42.4090424875219,
							0
						],
						[
							-76.45285934615367,
							42.40905448751924,
							0
						],
						[
							-76.45331334630718,
							42.40916148752073,
							0
						],
						[
							-76.45351234637552,
							42.40922248752399,
							0
						],
						[
							-76.45356234639574,
							42.40927948753253,
							0
						],
						[
							-76.4536013464114,
							42.40932248753891,
							0
						],
						[
							-76.45365534643331,
							42.40938448754822,
							0
						],
						[
							-76.45379034648793,
							42.40953848757129,
							0
						],
						[
							-76.45389334652678,
							42.40961748758173,
							0
						],
						[
							-76.453954346549,
							42.40965348758596,
							0
						],
						[
							-76.45408734659549,
							42.40970548759023,
							0
						],
						[
							-76.45419434663171,
							42.40973148759073,
							0
						],
						[
							-76.4546203467736,
							42.40980248758667,
							0
						],
						[
							-76.45554634708142,
							42.40994848757633,
							0
						],
						[
							-76.45585034716507,
							42.40975948752906,
							0
						],
						[
							-76.45614734724451,
							42.40954448747726,
							0
						],
						[
							-76.45730334754114,
							42.40853448724354,
							0
						],
						[
							-76.45738934756469,
							42.40847948722989,
							0
						],
						[
							-76.45748234759076,
							42.40842848721668,
							0
						],
						[
							-76.45758234761946,
							42.40838248720414,
							0
						],
						[
							-76.45772534766189,
							42.40833548718966,
							0
						],
						[
							-76.45866734793873,
							42.40799048708774,
							0
						],
						[
							-76.4587613479658,
							42.40794848707617,
							0
						],
						[
							-76.45885034799029,
							42.4078934870624,
							0
						],
						[
							-76.45893134801187,
							42.407833487048,
							0
						],
						[
							-76.45900434803029,
							42.40776548703248,
							0
						],
						[
							-76.45906634804481,
							42.40769248701646,
							0
						],
						[
							-76.45911834805612,
							42.40761948700083,
							0
						],
						[
							-76.45917234806552,
							42.40751148697866,
							0
						],
						[
							-76.4594613481106,
							42.40686348684699,
							0
						],
						[
							-76.45954734812649,
							42.40670448681406,
							0
						],
						[
							-76.45967634815456,
							42.40652348677534,
							0
						],
						[
							-76.4598563481979,
							42.40632748673178,
							0
						],
						[
							-76.4607133484088,
							42.40545648653588,
							0
						],
						[
							-76.46077234842397,
							42.40540548652405,
							0
						],
						[
							-76.46099534848176,
							42.40521848648041,
							0
						],
						[
							-76.46126434855454,
							42.40503448643548,
							0
						],
						[
							-76.4613433485762,
							42.40498448642303,
							0
						],
						[
							-76.46174234868296,
							42.40469548635341,
							0
						],
						[
							-76.46259934890679,
							42.40400048619009,
							0
						],
						[
							-76.46298134901042,
							42.40374348612708,
							0
						],
						[
							-76.4630553490308,
							42.40369748611557,
							0
						],
						[
							-76.46357634917652,
							42.40340648604063,
							0
						],
						[
							-76.46333934908984,
							42.40326148602334,
							0
						],
						[
							-76.46322734904972,
							42.40320448601732,
							0
						],
						[
							-76.46250534879306,
							42.4028634859833,
							0
						],
						[
							-76.46168734850221,
							42.40247648594466,
							0
						],
						[
							-76.46126434835152,
							42.40227248592395,
							0
						],
						[
							-76.46002034790845,
							42.40167348586324,
							0
						],
						[
							-76.45895734752911,
							42.40115148580945,
							0
						],
						[
							-76.45898534753573,
							42.4011194858024,
							0
						],
						[
							-76.45902634754388,
							42.40105148578816,
							0
						],
						[
							-76.45905834754915,
							42.40098348577425,
							0
						],
						[
							-76.45911634755615,
							42.40082548574264,
							0
						],
						[
							-76.4592373475627,
							42.40038648565646,
							0
						],
						[
							-76.4593343475587,
							42.39990848556403,
							0
						],
						[
							-76.4593533475429,
							42.39961048550804,
							0
						],
						[
							-76.45929034744569,
							42.39856248531647,
							0
						],
						[
							-76.45928634744108,
							42.39851748530828,
							0
						],
						[
							-76.45916834729384,
							42.39702848503723,
							0
						],
						[
							-76.45916834728393,
							42.39689348501224,
							0
						],
						[
							-76.45918734728039,
							42.39676248498721,
							0
						],
						[
							-76.45922434728264,
							42.39663148496144,
							0
						],
						[
							-76.45927934729096,
							42.3965044849357,
							0
						],
						[
							-76.45935334730574,
							42.39638248491012,
							0
						],
						[
							-76.45961334736275,
							42.39602348483311,
							0
						],
						[
							-76.45965534737152,
							42.39595948481957,
							0
						],
						[
							-76.45975434739196,
							42.39580548478703,
							0
						],
						[
							-76.45999134744125,
							42.39544148471005,
							0
						],
						[
							-76.46005534745349,
							42.39532848468653,
							0
						],
						[
							-76.46021734748112,
							42.39499748461867,
							0
						],
						[
							-76.46025034748538,
							42.39491148460142,
							0
						],
						[
							-76.46028034748775,
							42.39481248458187,
							0
						],
						[
							-76.46033734748943,
							42.3945864845377,
							0
						],
						[
							-76.46037434747977,
							42.39429348448192,
							0
						],
						[
							-76.46037334746755,
							42.39413148445196,
							0
						],
						[
							-76.46032934738629,
							42.39321748428441,
							0
						],
						[
							-76.46034934737186,
							42.39293348423099,
							0
						],
						[
							-76.46040934737024,
							42.39264948417597,
							0
						],
						[
							-76.46085534741333,
							42.39128848390581,
							0
						],
						[
							-76.46093634741146,
							42.39090948383233,
							0
						],
						[
							-76.46095634739005,
							42.3905304837613,
							0
						],
						[
							-76.46087834725202,
							42.38899148347932,
							0
						],
						[
							-76.46088534725028,
							42.38893748346904,
							0
						],
						[
							-76.4608583471897,
							42.38823048333913,
							0
						],
						[
							-76.46086534714732,
							42.38762248322621,
							0
						],
						[
							-76.46085734709754,
							42.38697948310738,
							0
						],
						[
							-76.46086334698602,
							42.38543448282088,
							0
						],
						[
							-76.46085834698043,
							42.38538048281106,
							0
						],
						[
							-76.46086134694639,
							42.38490348272257,
							0
						],
						[
							-76.46309434770511,
							42.38548248273973,
							0
						],
						[
							-76.46351934784832,
							42.38557648274001,
							0
						],
						[
							-76.46386234796199,
							42.38562648273543,
							0
						],
						[
							-76.46521734840863,
							42.38579048271113,
							0
						],
						[
							-76.4654053484706,
							42.38581348270781,
							0
						],
						[
							-76.46689234896002,
							42.3859834826793,
							0
						],
						[
							-76.46723134907242,
							42.38603348267487,
							0
						],
						[
							-76.46759134919346,
							42.38610948267441,
							0
						],
						[
							-76.46793934931272,
							42.38621348267964,
							0
						],
						[
							-76.47063335024896,
							42.38719648275302,
							0
						],
						[
							-76.47079035030313,
							42.38724848275632,
							0
						],
						[
							-76.47103435038777,
							42.38733548276259,
							0
						],
						[
							-76.47174335063103,
							42.38755148277398,
							0
						],
						[
							-76.47181735065601,
							42.38756848277414,
							0
						],
						[
							-76.4729703510485,
							42.38787748278484,
							0
						],
						[
							-76.47502035174442,
							42.38840048279897,
							0
						],
						[
							-76.47715235246228,
							42.38886448279884,
							0
						],
						[
							-76.48003035342589,
							42.38941648278487,
							0
						],
						[
							-76.48100135375294,
							42.38962948278513,
							0
						],
						[
							-76.48281735436542,
							42.39003848278752,
							0
						],
						[
							-76.48294735440867,
							42.39005948278619,
							0
						],
						[
							-76.48379035468975,
							42.39020548277917,
							0
						],
						[
							-76.48448335491796,
							42.39028648276621,
							0
						],
						[
							-76.48490635505487,
							42.39030348275225,
							0
						],
						[
							-76.48703935574122,
							42.39033448267184,
							0
						],
						[
							-76.48880635630886,
							42.39034748260286,
							0
						],
						[
							-76.49062735689476,
							42.39037348253412,
							0
						],
						[
							-76.49265435754621,
							42.39039248245574,
							0
						],
						[
							-76.49556535848225,
							42.3904264823444,
							0
						],
						[
							-76.4956663585139,
							42.39041648233848,
							0
						],
						[
							-76.49575435854037,
							42.39039248233049,
							0
						],
						[
							-76.49559835846533,
							42.39005248227379,
							0
						],
						[
							-76.49464635801195,
							42.38803848193918,
							0
						],
						[
							-76.493913357663,
							42.38648948168184,
							0
						],
						[
							-76.49246535697336,
							42.38342448117253,
							0
						],
						[
							-76.49220935685179,
							42.38288748108337,
							0
						],
						[
							-76.49192835671862,
							42.38230148098617,
							0
						],
						[
							-76.4916243565671,
							42.38156648086226,
							0
						],
						[
							-76.49139035645261,
							42.38102948077222,
							0
						],
						[
							-76.49130335641514,
							42.38089948075163,
							0
						],
						[
							-76.49102235627271,
							42.38018748063107,
							0
						],
						[
							-76.49076435613031,
							42.37937548049104,
							0
						],
						[
							-76.4899893557093,
							42.37702748008724,
							0
						],
						[
							-76.48885735509575,
							42.37361647950087,
							0
						],
						[
							-76.48854635492704,
							42.37267747933941,
							0
						],
						[
							-76.48783035453737,
							42.37049747896428,
							0
						],
						[
							-76.48729335424505,
							42.36886147868275,
							0
						],
						[
							-76.48699135407053,
							42.36780347849884,
							0
						],
						[
							-76.4869543540484,
							42.36766347847439,
							0
						],
						[
							-76.48692135402864,
							42.36753847845253,
							0
						],
						[
							-76.4868183539669,
							42.36714747838423,
							0
						],
						[
							-76.48649935379422,
							42.36618847821936,
							0
						],
						[
							-76.4864773537832,
							42.36613447821022,
							0
						],
						[
							-76.48568535338758,
							42.36420447788445,
							0
						],
						[
							-76.4853423532158,
							42.36336247774221,
							0
						],
						[
							-76.4848373529628,
							42.36212147753253,
							0
						],
						[
							-76.48452135280445,
							42.36134447740125,
							0
						],
						[
							-76.48442535275635,
							42.36110847736136,
							0
						],
						[
							-76.48390935249927,
							42.35985947715064,
							0
						],
						[
							-76.48365435237376,
							42.35926347705042,
							0
						],
						[
							-76.48330035219651,
							42.3583944769036,
							0
						],
						[
							-76.48321735215649,
							42.35821147687302,
							0
						],
						[
							-76.48286435198284,
							42.35738747673449,
							0
						],
						[
							-76.48284535197214,
							42.35732447672357,
							0
						],
						[
							-76.48283535196467,
							42.35726647671325,
							0
						],
						[
							-76.48283435196133,
							42.35722547670567,
							0
						],
						[
							-76.48281835195093,
							42.35715347669296,
							0
						],
						[
							-76.4825973518423,
							42.35663847660639,
							0
						],
						[
							-76.48253435181387,
							42.35652647658818,
							0
						],
						[
							-76.48183935146591,
							42.35482047629989,
							0
						],
						[
							-76.48139735124636,
							42.35375947612097,
							0
						],
						[
							-76.48083435096994,
							42.35245147590116,
							0
						],
						[
							-76.48038335074753,
							42.35139047572259,
							0
						],
						[
							-76.4803383507262,
							42.35129647570699,
							0
						],
						[
							-76.48020535066554,
							42.35105047566673,
							0
						],
						[
							-76.48008535061393,
							42.35087147563839,
							0
						],
						[
							-76.48002535058883,
							42.35079147562597,
							0
						],
						[
							-76.47985435051964,
							42.35059547559652,
							0
						],
						[
							-76.4795883504161,
							42.35034647556106,
							0
						],
						[
							-76.47912735024168,
							42.34998347551236,
							0
						],
						[
							-76.47903435020731,
							42.34992147550462,
							0
						],
						[
							-76.47894435017392,
							42.34985947549674,
							0
						],
						[
							-76.47752234966391,
							42.34912147541724,
							0
						],
						[
							-76.47609234915097,
							42.34837847533711,
							0
						],
						[
							-76.47454234859413,
							42.34756147524813,
							0
						],
						[
							-76.47446834856784,
							42.34752647524461,
							0
						],
						[
							-76.47165734755953,
							42.34606547508699,
							0
						],
						[
							-76.46950934678922,
							42.344951474967,
							0
						],
						[
							-76.46659634574452,
							42.34343947480399,
							0
						],
						[
							-76.46553934536543,
							42.34289047474475,
							0
						],
						[
							-76.46430434492214,
							42.34224447467472,
							0
						],
						[
							-76.46191534406486,
							42.34099747453967,
							0
						],
						[
							-76.45869834291042,
							42.33931747435767,
							0
						],
						[
							-76.45865434289465,
							42.33929447435518,
							0
						],
						[
							-76.45849634283792,
							42.33921147434614,
							0
						],
						[
							-76.4577063425543,
							42.33879747430117,
							0
						],
						[
							-76.45763334252804,
							42.33875847429687,
							0
						],
						[
							-76.45683634223863,
							42.3382954742431,
							0
						],
						[
							-76.45650634211701,
							42.33807947421631,
							0
						],
						[
							-76.45503934157551,
							42.33710747409508,
							0
						],
						[
							-76.45476534147443,
							42.33692647407253,
							0
						],
						[
							-76.45290734078877,
							42.33569747391935,
							0
						],
						[
							-76.45060933993982,
							42.33416447372749,
							0
						],
						[
							-76.4496503395858,
							42.33352847364809,
							0
						],
						[
							-76.44831133909125,
							42.3326364735365,
							0
						],
						[
							-76.44773333887777,
							42.33225147348833,
							0
						],
						[
							-76.44714833866469,
							42.33190247344712,
							0
						],
						[
							-76.44651633843989,
							42.33159947341635,
							0
						],
						[
							-76.44584533820662,
							42.33135147339736,
							0
						],
						[
							-76.44514333796704,
							42.33115347338889,
							0
						],
						[
							-76.44438033771131,
							42.3310014733914,
							0
						],
						[
							-76.44331433735542,
							42.33080847339852,
							0
						],
						[
							-76.44066633647154,
							42.33033147341661,
							0
						],
						[
							-76.43966133613593,
							42.33014847342312,
							0
						],
						[
							-76.43899733591427,
							42.33002847342756,
							0
						],
						[
							-76.43404733426254,
							42.32914447346277,
							0
						],
						[
							-76.43221433365414,
							42.32886147348402,
							0
						],
						[
							-76.4318983335502,
							42.32882547349006,
							0
						],
						[
							-76.43074033316809,
							42.32867747350919,
							0
						],
						[
							-76.42963133280169,
							42.32852947352635,
							0
						],
						[
							-76.42934633270725,
							42.32848747353003,
							0
						],
						[
							-76.427231332009,
							42.3282124735641,
							0
						],
						[
							-76.42715733198433,
							42.32819947356467,
							0
						],
						[
							-76.42640233173474,
							42.32809647357595,
							0
						],
						[
							-76.42487133122118,
							42.32778647358,
							0
						],
						[
							-76.42429833102611,
							42.32763147357429,
							0
						],
						[
							-76.42360233078718,
							42.32741547356219,
							0
						],
						[
							-76.42302233058594,
							42.32720647354673,
							0
						],
						[
							-76.42274633048983,
							42.32710247353852,
							0
						],
						[
							-76.42205633024982,
							42.32684547351859,
							0
						],
						[
							-76.42123332996357,
							42.32653947349488,
							0
						],
						[
							-76.42005932955104,
							42.32604547345041,
							0
						],
						[
							-76.41998532952476,
							42.32601047344689,
							0
						],
						[
							-76.41977732945003,
							42.32590047343484,
							0
						],
						[
							-76.41931232928259,
							42.32564947340696,
							0
						],
						[
							-76.41923832925566,
							42.32560547340176,
							0
						],
						[
							-76.41837732893795,
							42.32503547333057,
							0
						],
						[
							-76.41738732856251,
							42.32424147322301,
							0
						],
						[
							-76.41669132829617,
							42.32365047314127,
							0
						],
						[
							-76.41601132803608,
							42.32307447306168,
							0
						],
						[
							-76.41525532774759,
							42.32244347297494,
							0
						],
						[
							-76.41409632730799,
							42.32151247284872,
							0
						],
						[
							-76.4139753272624,
							42.32141947283631,
							0
						],
						[
							-76.4137263271703,
							42.32125147281512,
							0
						],
						[
							-76.41345432707212,
							42.32110147279822,
							0
						],
						[
							-76.41057432604151,
							42.31963347264146,
							0
						],
						[
							-76.4101293258805,
							42.31938247261274,
							0
						],
						[
							-76.40979532575595,
							42.3191434725818,
							0
						],
						[
							-76.40949732564128,
							42.31888147254513,
							0
						],
						[
							-76.4092623255474,
							42.31862747250742,
							0
						],
						[
							-76.40908632547557,
							42.3184164724753,
							0
						],
						[
							-76.40352132369381,
							42.3184524727057,
							0
						],
						[
							-76.40044032270806,
							42.3184824728351,
							0
						],
						[
							-76.39991332253952,
							42.31848847285741,
							0
						],
						[
							-76.39948632240296,
							42.31849347287548,
							0
						],
						[
							-76.39465232085465,
							42.31851747307419,
							0
						],
						[
							-76.39380532058202,
							42.31850347310562,
							0
						],
						[
							-76.37466031441897,
							42.31817947381441,
							0
						],
						[
							-76.37425831429012,
							42.31818047383073,
							0
						],
						[
							-76.37429831430835,
							42.31825447384286,
							0
						],
						[
							-76.37450231439826,
							42.31859047389708,
							0
						],
						[
							-76.3746303144536,
							42.31878647392834,
							0
						],
						[
							-76.37477231451152,
							42.31895647395422,
							0
						],
						[
							-76.37482631453298,
							42.31901347396262,
							0
						],
						[
							-76.37529331471323,
							42.31943147402151,
							0
						],
						[
							-76.3756063148317,
							42.319679474055,
							0
						],
						[
							-76.37572331487542,
							42.31976447406608,
							0
						],
						[
							-76.37589331493729,
							42.31986547407802,
							0
						],
						[
							-76.37607631500241,
							42.31995347408701,
							0
						],
						[
							-76.37627131507004,
							42.32002347409217,
							0
						],
						[
							-76.3764743151392,
							42.32007947409442,
							0
						],
						[
							-76.37668431520964,
							42.32012147409379,
							0
						],
						[
							-76.37689931528041,
							42.3201464740898,
							0
						],
						[
							-76.37703431532422,
							42.32015347408569,
							0
						],
						[
							-76.3772513153936,
							42.32015047407639,
							0
						],
						[
							-76.3778063155688,
							42.32011247404706,
							0
						],
						[
							-76.37815631568112,
							42.32011347403319,
							0
						],
						[
							-76.37850031579312,
							42.32013647402365,
							0
						],
						[
							-76.37967631617738,
							42.32023447399464,
							0
						],
						[
							-76.37974531620047,
							42.32024747399427,
							0
						],
						[
							-76.3804493164328,
							42.32033747398272,
							0
						],
						[
							-76.38054731646548,
							42.32035447398193,
							0
						],
						[
							-76.38096231660607,
							42.3204574739844,
							0
						],
						[
							-76.3812083166913,
							42.32054447399067,
							0
						],
						[
							-76.38144031677338,
							42.32064947400085,
							0
						],
						[
							-76.38165731685199,
							42.32077347401517,
							0
						],
						[
							-76.38187131693157,
							42.32092347403442,
							0
						],
						[
							-76.38193631695636,
							42.32097747404183,
							0
						],
						[
							-76.3824563171571,
							42.32144347410747,
							0
						],
						[
							-76.38340031751481,
							42.32219747420958,
							0
						],
						[
							-76.3844563179038,
							42.32288747429528,
							0
						],
						[
							-76.38506731812512,
							42.32323547433534,
							0
						],
						[
							-76.3853003182118,
							42.32339947435645,
							0
						],
						[
							-76.38546331827415,
							42.32353747437552,
							0
						],
						[
							-76.38566931835452,
							42.32373347440364,
							0
						],
						[
							-76.38617331855211,
							42.32422647447493,
							0
						],
						[
							-76.38668331875826,
							42.3248104745629,
							0
						],
						[
							-76.38697931888318,
							42.32522147462728,
							0
						],
						[
							-76.38759931915206,
							42.32618147478063,
							0
						],
						[
							-76.38806231935796,
							42.32696847490814,
							0
						],
						[
							-76.38850231955651,
							42.32775547503659,
							0
						],
						[
							-76.38874031966122,
							42.32814447509923,
							0
						],
						[
							-76.38905931979285,
							42.32854647516106,
							0
						],
						[
							-76.38923931986584,
							42.32875547519262,
							0
						],
						[
							-76.39035532030424,
							42.32985847535255,
							0
						],
						[
							-76.39055032037912,
							42.33002747537608,
							0
						],
						[
							-76.3911623206156,
							42.33057847545378,
							0
						],
						[
							-76.39137032069661,
							42.3307744754818,
							0
						],
						[
							-76.39157432077955,
							42.33101447551815,
							0
						],
						[
							-76.39174232085236,
							42.33127347555947,
							0
						],
						[
							-76.39260332124083,
							42.33281247581056,
							0
						],
						[
							-76.39298732140537,
							42.33337947590038,
							0
						],
						[
							-76.39328932152895,
							42.33374547595618,
							0
						],
						[
							-76.39437332196371,
							42.33493847613405,
							0
						],
						[
							-76.39464232207013,
							42.33521447617446,
							0
						],
						[
							-76.39497832219799,
							42.335489476212,
							0
						],
						[
							-76.39511832225004,
							42.33558747622456,
							0
						],
						[
							-76.3957713224878,
							42.33597547627032,
							0
						],
						[
							-76.39593732254717,
							42.33605947627924,
							0
						],
						[
							-76.39752532311779,
							42.33689947637132,
							0
						],
						[
							-76.39839332342926,
							42.33735247642049,
							0
						],
						[
							-76.39901632364892,
							42.33762447644592,
							0
						],
						[
							-76.39920532371495,
							42.33769847645206,
							0
						],
						[
							-76.39926632373664,
							42.33772747645499,
							0
						],
						[
							-76.39938832378006,
							42.33778647646102,
							0
						],
						[
							-76.39946932380963,
							42.33783547646687,
							0
						],
						[
							-76.3996493238754,
							42.33794547648003,
							0
						],
						[
							-76.39982932394284,
							42.33807847649748,
							0
						],
						[
							-76.40083832432539,
							42.33888547660669,
							0
						],
						[
							-76.4010093243906,
							42.33902747662616,
							0
						],
						[
							-76.40126432449058,
							42.33927647666213,
							0
						],
						[
							-76.40136332453042,
							42.33938747667875,
							0
						],
						[
							-76.40164332464433,
							42.33971747672873,
							0
						],
						[
							-76.40187632474421,
							42.34006147678321,
							0
						],
						[
							-76.40236932497099,
							42.34100147693781,
							0
						],
						[
							-76.40285432518303,
							42.34177447706175,
							0
						],
						[
							-76.4055463263372,
							42.34575347769184,
							0
						],
						[
							-76.40607432656729,
							42.34658447782477,
							0
						],
						[
							-76.4065233267695,
							42.3473804779544,
							0
						],
						[
							-76.4065463267801,
							42.34742447796165,
							0
						],
						[
							-76.40716832706863,
							42.34864247816261,
							0
						],
						[
							-76.40748132721875,
							42.34932247827618,
							0
						],
						[
							-76.4075023272298,
							42.34938147828628,
							0
						],
						[
							-76.40760532727948,
							42.34960947832443,
							0
						],
						[
							-76.40764132729727,
							42.34969447833876,
							0
						],
						[
							-76.40784332739283,
							42.35011547840874,
							0
						],
						[
							-76.40805432749261,
							42.35055447848169,
							0
						],
						[
							-76.40884832785784,
							42.35206647873024,
							0
						],
						[
							-76.40939832810518,
							42.35303647888806,
							0
						],
						[
							-76.41044932856815,
							42.35475747916502,
							0
						],
						[
							-76.41097632881086,
							42.35576447933061,
							0
						],
						[
							-76.41111632888035,
							42.35610047938729,
							0
						],
						[
							-76.41130632897276,
							42.35653047945942,
							0
						],
						[
							-76.41172032917825,
							42.35752447962713,
							0
						],
						[
							-76.41175132919398,
							42.35760347964054,
							0
						],
						[
							-76.41245332954908,
							42.35937947994168,
							0
						],
						[
							-76.41295632979964,
							42.36059848014751,
							0
						],
						[
							-76.4133513299826,
							42.36136748027425,
							0
						],
						[
							-76.41357833008425,
							42.36176148033819,
							0
						],
						[
							-76.41399333026509,
							42.36241348044239,
							0
						],
						[
							-76.41415133033274,
							42.36264548047906,
							0
						],
						[
							-76.4143943304385,
							42.36302548053975,
							0
						],
						[
							-76.4145213304979,
							42.36328048058193,
							0
						],
						[
							-76.41469833058257,
							42.36366148064546,
							0
						],
						[
							-76.41480533063591,
							42.36392148068937,
							0
						],
						[
							-76.414880330681,
							42.36420848073959,
							0
						],
						[
							-76.41491233071086,
							42.36447648078798,
							0
						],
						[
							-76.4149203307264,
							42.36465348082049,
							0
						],
						[
							-76.41493033077676,
							42.36529748093949,
							0
						],
						[
							-76.41497033092334,
							42.36712448127669,
							0
						],
						[
							-76.41498733098686,
							42.36791748142305,
							0
						],
						[
							-76.41498833100103,
							42.36810648145806,
							0
						],
						[
							-76.41502633121297,
							42.37083448196235,
							0
						],
						[
							-76.41503933124979,
							42.37128048204453,
							0
						],
						[
							-76.415046331256,
							42.37133448205427,
							0
						],
						[
							-76.41509333137061,
							42.37269348230434,
							0
						],
						[
							-76.41331733087311,
							42.37367948255866,
							0
						],
						[
							-76.41309233081067,
							42.37381248259237,
							0
						],
						[
							-76.41296033077566,
							42.37391248261622,
							0
						],
						[
							-76.41290533076109,
							42.37395448262622,
							0
						],
						[
							-76.41261733068592,
							42.37418948268142,
							0
						],
						[
							-76.41229333060123,
							42.37445248274322,
							0
						],
						[
							-76.41188133049259,
							42.3747734828193,
							0
						],
						[
							-76.41139833036247,
							42.3751124829016,
							0
						],
						[
							-76.41135833035227,
							42.37514848290989,
							0
						],
						[
							-76.41128733033615,
							42.37523948292962,
							0
						],
						[
							-76.41122133031969,
							42.37530348294415,
							0
						],
						[
							-76.41124433032999,
							42.37534348295064,
							0
						],
						[
							-76.41123333033012,
							42.37539348296034,
							0
						],
						[
							-76.41123033033311,
							42.37544748297048,
							0
						],
						[
							-76.41124333034422,
							42.37554248298758,
							0
						],
						[
							-76.41174733062414,
							42.3771564832665,
							0
						],
						[
							-76.41221933089423,
							42.3787764835478,
							0
						],
						[
							-76.41243933103227,
							42.37969748370968,
							0
						],
						[
							-76.41274533123705,
							42.38115248396706,
							0
						],
						[
							-76.41292733134028,
							42.38176448407318,
							0
						],
						[
							-76.41304133140396,
							42.38213448413717,
							0
						],
						[
							-76.41308533143551,
							42.38237248417951,
							0
						],
						[
							-76.41309533145625,
							42.3826114842234,
							0
						],
						[
							-76.41296033152389,
							42.38412548450947,
							0
						],
						[
							-76.4129673315588,
							42.38457148459185,
							0
						],
						[
							-76.41299333160275,
							42.38505748468088,
							0
						],
						[
							-76.4129783316168,
							42.38531448472912,
							0
						],
						[
							-76.41292633161893,
							42.38557148477884,
							0
						],
						[
							-76.4125583315752,
							42.3865854849816,
							0
						],
						[
							-76.41251933157059,
							42.3866934850032,
							0
						],
						[
							-76.41247533156776,
							42.38684748503351,
							0
						],
						[
							-76.41245533157293,
							42.3870054850636,
							0
						],
						[
							-76.41245633158512,
							42.3871674850936,
							0
						],
						[
							-76.41248033160433,
							42.3873244851217,
							0
						],
						[
							-76.4125263316306,
							42.38748148514895,
							0
						],
						[
							-76.41259433166356,
							42.38763348517439,
							0
						],
						[
							-76.41268233170226,
							42.38777648519736,
							0
						],
						[
							-76.41278233174381,
							42.38790548521723,
							0
						],
						[
							-76.41319233191162,
							42.38840048529245,
							0
						],
						[
							-76.41339533199663,
							42.38867148533451,
							0
						],
						[
							-76.41344633201797,
							42.38873948534505,
							0
						],
						[
							-76.41346133202455,
							42.38876348534889,
							0
						],
						[
							-76.41354233206005,
							42.38889348536971,
							0
						],
						[
							-76.41392433222836,
							42.38951748546997,
							0
						],
						[
							-76.41395333224162,
							42.38957148547881,
							0
						],
						[
							-76.41398233225648,
							42.38964748549173,
							0
						],
						[
							-76.41400133226816,
							42.38972348550504,
							0
						],
						[
							-76.41400933227636,
							42.389800485519,
							0
						],
						[
							-76.41400633228098,
							42.38987648553321,
							0
						],
						[
							-76.41399233228212,
							42.38995348554803,
							0
						],
						[
							-76.41396833228008,
							42.39003048556328,
							0
						],
						[
							-76.41393133227385,
							42.39010748557903,
							0
						],
						[
							-76.41379333222343,
							42.39002348556902,
							0
						],
						[
							-76.41340533208545,
							42.38983948555055,
							0
						],
						[
							-76.41299433194207,
							42.38968248553803,
							0
						],
						[
							-76.41256333179493,
							42.38956148553296,
							0
						],
						[
							-76.412313331711,
							42.38951048553356,
							0
						],
						[
							-76.41070833117061,
							42.38916348553391,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090019003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>49077663</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>177130</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.3652021</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4423629</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090019003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090019003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1917</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>759</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>12126.13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>76</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.09</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.76</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.93</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26178</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>25840</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27152</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14544</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14204</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15092</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8602</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8335</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8925</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5936</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5860</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6157</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.15</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.06</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2557</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>4145</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>171</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3312</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1413</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1489</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1188</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>75</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00005"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.4946073614314,
							42.43465149057018,
							0
						],
						[
							-76.49462136145324,
							42.43488649061309,
							0
						],
						[
							-76.49471236148233,
							42.43488549060924,
							0
						],
						[
							-76.49521236164024,
							42.43485149058272,
							0
						],
						[
							-76.49577436181936,
							42.43483549055701,
							0
						],
						[
							-76.49670536211548,
							42.43480049051286,
							0
						],
						[
							-76.49670536212645,
							42.43494949054044,
							0
						],
						[
							-76.49673736218782,
							42.43564249066734,
							0
						],
						[
							-76.4967423621977,
							42.43575449068787,
							0
						],
						[
							-76.49678136227456,
							42.43662749084781,
							0
						],
						[
							-76.49679436230063,
							42.43692449090223,
							0
						],
						[
							-76.4976743625831,
							42.43692649086697,
							0
						],
						[
							-76.49806636270804,
							42.43691549084908,
							0
						],
						[
							-76.49815136273517,
							42.43691349084527,
							0
						],
						[
							-76.49834536275345,
							42.43631749072718,
							0
						],
						[
							-76.49840636274759,
							42.43597249066088,
							0
						],
						[
							-76.49882236284519,
							42.43548649055413,
							0
						],
						[
							-76.49882036283607,
							42.43537149053293,
							0
						],
						[
							-76.4988173628152,
							42.43510149048309,
							0
						],
						[
							-76.49880536278386,
							42.43472849041459,
							0
						],
						[
							-76.4989043628055,
							42.43459149038524,
							0
						],
						[
							-76.49919736287104,
							42.43420549030196,
							0
						],
						[
							-76.49947536293472,
							42.4338594902267,
							0
						],
						[
							-76.49965836297565,
							42.43361849017472,
							0
						],
						[
							-76.49991036302934,
							42.43325049009643,
							0
						],
						[
							-76.50003236305676,
							42.43309149006207,
							0
						],
						[
							-76.50033236312846,
							42.43275848998832,
							0
						],
						[
							-76.50075736323184,
							42.43231148988841,
							0
						],
						[
							-76.50121036334052,
							42.43181448977813,
							0
						],
						[
							-76.50127236335672,
							42.43176448976638,
							0
						],
						[
							-76.50135636338692,
							42.43180848977114,
							0
						],
						[
							-76.50145236342391,
							42.43189248978278,
							0
						],
						[
							-76.50149936343398,
							42.4318244897683,
							0
						],
						[
							-76.50154836344564,
							42.43176948975614,
							0
						],
						[
							-76.50162236346401,
							42.43169648973964,
							0
						],
						[
							-76.501697363484,
							42.43164148972642,
							0
						],
						[
							-76.50177836350629,
							42.4315914897139,
							0
						],
						[
							-76.5019263635478,
							42.43151048969293,
							0
						],
						[
							-76.50309636387563,
							42.43086648952643,
							0
						],
						[
							-76.50331936393805,
							42.43074248949446,
							0
						],
						[
							-76.50348236398384,
							42.43065448947159,
							0
						],
						[
							-76.50559836457562,
							42.42947448916763,
							0
						],
						[
							-76.50567236459693,
							42.42944148915853,
							0
						],
						[
							-76.50581936463766,
							42.42935448913648,
							0
						],
						[
							-76.50604336470066,
							42.42923448910521,
							0
						],
						[
							-76.50628136476713,
							42.42910048907078,
							0
						],
						[
							-76.50645436481615,
							42.42901248904752,
							0
						],
						[
							-76.5068633649304,
							42.4287824889884,
							0
						],
						[
							-76.50704836498257,
							42.42868548896296,
							0
						],
						[
							-76.5075163651136,
							42.42842648889611,
							0
						],
						[
							-76.50767936516013,
							42.42834848887507,
							0
						],
						[
							-76.50783336520674,
							42.4283104888618,
							0
						],
						[
							-76.50788836522392,
							42.42830448885847,
							0
						],
						[
							-76.50816736532249,
							42.42842748886993,
							0
						],
						[
							-76.5082543653417,
							42.42830948884458,
							0
						],
						[
							-76.50833136536015,
							42.42822448882575,
							0
						],
						[
							-76.5084413653865,
							42.4281034887989,
							0
						],
						[
							-76.50869636545251,
							42.42788948874898,
							0
						],
						[
							-76.50886836549884,
							42.42776948871981,
							0
						],
						[
							-76.50998536580596,
							42.4270754885462,
							0
						],
						[
							-76.5107203660118,
							42.42666948844131,
							0
						],
						[
							-76.51117536614028,
							42.42643248837906,
							0
						],
						[
							-76.51144636621672,
							42.42629048834181,
							0
						],
						[
							-76.51179136631374,
							42.42610548829363,
							0
						],
						[
							-76.51250936651384,
							42.42569548818869,
							0
						],
						[
							-76.51276236658347,
							42.42553948814958,
							0
						],
						[
							-76.51304036665871,
							42.42535048810337,
							0
						],
						[
							-76.51361136681142,
							42.42493748800385,
							0
						],
						[
							-76.51376136685073,
							42.42481848797575,
							0
						],
						[
							-76.51427436698395,
							42.42439348787632,
							0
						],
						[
							-76.5142843669865,
							42.42438448787426,
							0
						],
						[
							-76.51473636710168,
							42.42398048778122,
							0
						],
						[
							-76.51480536711925,
							42.42391848776695,
							0
						],
						[
							-76.51877636815293,
							42.42066348700387,
							0
						],
						[
							-76.51944436832602,
							42.42010548687357,
							0
						],
						[
							-76.51978336841485,
							42.41983548680987,
							0
						],
						[
							-76.5201293685059,
							42.41956548674592,
							0
						],
						[
							-76.52052936861121,
							42.41925348667199,
							0
						],
						[
							-76.52093136871815,
							42.41895548660057,
							0
						],
						[
							-76.52125436880581,
							42.41873948654752,
							0
						],
						[
							-76.52162236890727,
							42.41851448649098,
							0
						],
						[
							-76.52196536900438,
							42.41833948644472,
							0
						],
						[
							-76.52218836906748,
							42.41822548641459,
							0
						],
						[
							-76.52253436916467,
							42.41803848636597,
							0
						],
						[
							-76.52292236927511,
							42.4178484863151,
							0
						],
						[
							-76.5231283693343,
							42.41775548628955,
							0
						],
						[
							-76.52318936935202,
							42.41773048628245,
							0
						],
						[
							-76.5233313693933,
							42.41767248626596,
							0
						],
						[
							-76.52363736948215,
							42.41754648623026,
							0
						],
						[
							-76.52408836961426,
							42.41737648618054,
							0
						],
						[
							-76.52400136958474,
							42.41735448618001,
							0
						],
						[
							-76.52393436956126,
							42.41732748617771,
							0
						],
						[
							-76.52389036954634,
							42.41731648617746,
							0
						],
						[
							-76.52384136952871,
							42.41729048617463,
							0
						],
						[
							-76.52381636952055,
							42.41728848617527,
							0
						],
						[
							-76.52379736951355,
							42.41727648617381,
							0
						],
						[
							-76.52363036945682,
							42.41723348617261,
							0
						],
						[
							-76.52360836944816,
							42.41721148616945,
							0
						],
						[
							-76.52357936943886,
							42.41721148617063,
							0
						],
						[
							-76.52350436941279,
							42.41718448616866,
							0
						],
						[
							-76.52343036938781,
							42.41716748616852,
							0
						],
						[
							-76.52340836938002,
							42.41715748616753,
							0
						],
						[
							-76.52321636931676,
							42.41713448617107,
							0
						],
						[
							-76.52316436929888,
							42.4171184861702,
							0
						],
						[
							-76.52307236926863,
							42.41710848617208,
							0
						],
						[
							-76.52305336926167,
							42.41709648617063,
							0
						],
						[
							-76.52300136924462,
							42.4170914861718,
							0
						],
						[
							-76.52288236920403,
							42.41705848617052,
							0
						],
						[
							-76.52285336919347,
							42.41704148616855,
							0
						],
						[
							-76.52277936916855,
							42.41702548616858,
							0
						],
						[
							-76.52275636916038,
							42.41701448616747,
							0
						],
						[
							-76.52262336911484,
							42.41697548616564,
							0
						],
						[
							-76.52257136909735,
							42.4169644861657,
							0
						],
						[
							-76.52255236909022,
							42.41695048616389,
							0
						],
						[
							-76.52252736908207,
							42.41694848616452,
							0
						],
						[
							-76.52250836907508,
							42.41693648616307,
							0
						],
						[
							-76.52246036905895,
							42.41692648616317,
							0
						],
						[
							-76.52243836905065,
							42.41690948616093,
							0
						],
						[
							-76.52241436904272,
							42.41690648616131,
							0
						],
						[
							-76.52229036899956,
							42.41686048615784,
							0
						],
						[
							-76.52220836897001,
							42.416816486153,
							0
						],
						[
							-76.52217936896074,
							42.41681648615418,
							0
						],
						[
							-76.52215636895208,
							42.41679948615198,
							0
						],
						[
							-76.52206836892144,
							42.41676648614942,
							0
						],
						[
							-76.52196936888585,
							42.41671448614381,
							0
						],
						[
							-76.52191236886534,
							42.41668448614055,
							0
						],
						[
							-76.52187536885349,
							42.41668448614205,
							0
						],
						[
							-76.52187536885268,
							42.41667348614002,
							0
						],
						[
							-76.52152036872141,
							42.41643748611072,
							0
						],
						[
							-76.52148336870586,
							42.41638748610296,
							0
						],
						[
							-76.5214603686973,
							42.41637148610093,
							0
						],
						[
							-76.5214453686925,
							42.41637148610153,
							0
						],
						[
							-76.5209793685337,
							42.4162444860969,
							0
						],
						[
							-76.52097136853112,
							42.41624448609722,
							0
						],
						[
							-76.52086936849368,
							42.41618048608952,
							0
						],
						[
							-76.52084636848579,
							42.41617348608914,
							0
						],
						[
							-76.52072736843952,
							42.41606348607359,
							0
						],
						[
							-76.52065336841137,
							42.41600348606548,
							0
						],
						[
							-76.52055736837653,
							42.41594848605919,
							0
						],
						[
							-76.52052736836688,
							42.41594848606039,
							0
						],
						[
							-76.52048336835071,
							42.415920486057,
							0
						],
						[
							-76.5204533683411,
							42.41592048605823,
							0
						],
						[
							-76.52043636833469,
							42.4159074860565,
							0
						],
						[
							-76.52037936831537,
							42.41589348605621,
							0
						],
						[
							-76.52035736830751,
							42.41588248605506,
							0
						],
						[
							-76.52026136827465,
							42.41585448605378,
							0
						],
						[
							-76.52023836826653,
							42.41584448605286,
							0
						],
						[
							-76.52018736824975,
							42.41583848605381,
							0
						],
						[
							-76.52011136822168,
							42.41578848604764,
							0
						],
						[
							-76.52009036821421,
							42.41577848604663,
							0
						],
						[
							-76.51957936801996,
							42.41536648599107,
							0
						],
						[
							-76.51949836798956,
							42.41530648598325,
							0
						],
						[
							-76.51949036798572,
							42.41528948598041,
							0
						],
						[
							-76.51941736795702,
							42.41521748597003,
							0
						],
						[
							-76.51939436794484,
							42.41515248595894,
							0
						],
						[
							-76.51935736793008,
							42.41511348595324,
							0
						],
						[
							-76.51935736792684,
							42.41506948594508,
							0
						],
						[
							-76.51933536791863,
							42.41505348594301,
							0
						],
						[
							-76.51933536791701,
							42.41503148593893,
							0
						],
						[
							-76.5193133679079,
							42.41500348593464,
							0
						],
						[
							-76.51926936788574,
							42.41489448591624,
							0
						],
						[
							-76.51926936788286,
							42.41485548590902,
							0
						],
						[
							-76.51925136787614,
							42.41484248590735,
							0
						],
						[
							-76.51923236786583,
							42.41478548589758,
							0
						],
						[
							-76.51923236786449,
							42.41476748589425,
							0
						],
						[
							-76.51921636785833,
							42.4147534858923,
							0
						],
						[
							-76.51920936785352,
							42.41471848588611,
							0
						],
						[
							-76.51918036783897,
							42.41464748587412,
							0
						],
						[
							-76.51915836783067,
							42.41463048587189,
							0
						],
						[
							-76.51915836782905,
							42.41460848586782,
							0
						],
						[
							-76.51914536782343,
							42.41458848586463,
							0
						],
						[
							-76.51912236781435,
							42.4145654858613,
							0
						],
						[
							-76.51911336781019,
							42.41454848585852,
							0
						],
						[
							-76.51908436779847,
							42.41451548585359,
							0
						],
						[
							-76.51907636779464,
							42.41449848585076,
							0
						],
						[
							-76.5189813677574,
							42.41440648583759,
							0
						],
						[
							-76.51898036775574,
							42.41438848583429,
							0
						],
						[
							-76.51895136774489,
							42.41436748583158,
							0
						],
						[
							-76.51894336774107,
							42.41435048582876,
							0
						],
						[
							-76.5188703677117,
							42.41426948581673,
							0
						],
						[
							-76.51886936771005,
							42.41425148581343,
							0
						],
						[
							-76.51883236769456,
							42.41420248580585,
							0
						],
						[
							-76.51881036768346,
							42.41414748579656,
							0
						],
						[
							-76.51860336760292,
							42.4139554857694,
							0
						],
						[
							-76.51852936757321,
							42.41387448575743,
							0
						],
						[
							-76.51852836757156,
							42.41385648575411,
							0
						],
						[
							-76.51849136755764,
							42.41382848575044,
							0
						],
						[
							-76.51849236755635,
							42.41380648574631,
							0
						],
						[
							-76.5184693675478,
							42.41379048574429,
							0
						],
						[
							-76.51846436754485,
							42.41377248574115,
							0
						],
						[
							-76.51842636752929,
							42.41372648573418,
							0
						],
						[
							-76.51842536752763,
							42.41370848573089,
							0
						],
						[
							-76.5183883675137,
							42.41368048572721,
							0
						],
						[
							-76.51838836751207,
							42.41365848572313,
							0
						],
						[
							-76.51837336750528,
							42.41363148571874,
							0
						],
						[
							-76.51833936749246,
							42.41360548571529,
							0
						],
						[
							-76.51833636749018,
							42.4135874857121,
							0
						],
						[
							-76.518292367472,
							42.4135324857037,
							0
						],
						[
							-76.51826336746115,
							42.41351148570099,
							0
						],
						[
							-76.5182623674595,
							42.4134934856977,
							0
						],
						[
							-76.51808536738992,
							42.41331948567266,
							0
						],
						[
							-76.51808436738827,
							42.41330148566935,
							0
						],
						[
							-76.51801236736046,
							42.41323748566043,
							0
						],
						[
							-76.5180103673585,
							42.41321948565717,
							0
						],
						[
							-76.51798836734982,
							42.41319748565399,
							0
						],
						[
							-76.51796636733869,
							42.41314248564471,
							0
						],
						[
							-76.51795136733273,
							42.41312648564234,
							0
						],
						[
							-76.51789236730488,
							42.41300548562233,
							0
						],
						[
							-76.51787736729881,
							42.41298848561979,
							0
						],
						[
							-76.51785536728691,
							42.41292248560848,
							0
						],
						[
							-76.51782036727302,
							42.41288648560324,
							0
						],
						[
							-76.51781836727105,
							42.41286848559996,
							0
						],
						[
							-76.51778136725629,
							42.41282948559427,
							0
						],
						[
							-76.51778136725432,
							42.41280248558926,
							0
						],
						[
							-76.51775936724601,
							42.41278548558699,
							0
						],
						[
							-76.51773736723291,
							42.41270348557271,
							0
						],
						[
							-76.5177153672246,
							42.41268648557045,
							0
						],
						[
							-76.51771436722268,
							42.41266448556642,
							0
						],
						[
							-76.51769436721536,
							42.41265248556501,
							0
						],
						[
							-76.51767736720845,
							42.412632485562,
							0
						],
						[
							-76.51767836720713,
							42.4126104855579,
							0
						],
						[
							-76.51764236719288,
							42.41257348555249,
							0
						],
						[
							-76.5176403671909,
							42.41255548554924,
							0
						],
						[
							-76.51760536717694,
							42.41251848554379,
							0
						],
						[
							-76.51759536717107,
							42.41248248553755,
							0
						],
						[
							-76.51753036714625,
							42.41242848553019,
							0
						],
						[
							-76.5175293671443,
							42.41240648552616,
							0
						],
						[
							-76.51749336713084,
							42.41238048552281,
							0
						],
						[
							-76.51749236712921,
							42.41236248551952,
							0
						],
						[
							-76.51746436711757,
							42.41232648551398,
							0
						],
						[
							-76.51746336711592,
							42.41230848551069,
							0
						],
						[
							-76.51742636710199,
							42.41228048550699,
							0
						],
						[
							-76.5174263671003,
							42.41225748550274,
							0
						],
						[
							-76.5174113670944,
							42.41224248550058,
							0
						],
						[
							-76.51741036709274,
							42.41222448549728,
							0
						],
						[
							-76.51738936708446,
							42.41220348549424,
							0
						],
						[
							-76.51736736707335,
							42.41214848548496,
							0
						],
						[
							-76.51730036704743,
							42.41208848547655,
							0
						],
						[
							-76.51730736704806,
							42.41206648547221,
							0
						],
						[
							-76.51725636702727,
							42.41200648546316,
							0
						],
						[
							-76.51723436701779,
							42.41197348545794,
							0
						],
						[
							-76.5171973670035,
							42.41194048545334,
							0
						],
						[
							-76.51715936698763,
							42.41189048544562,
							0
						],
						[
							-76.51701136692807,
							42.41172648542126,
							0
						],
						[
							-76.51693036688867,
							42.41154448539084,
							0
						],
						[
							-76.51690836687999,
							42.41152248538765,
							0
						],
						[
							-76.5168863668697,
							42.41147848538041,
							0
						],
						[
							-76.51671536680395,
							42.41133048535992,
							0
						],
						[
							-76.51667836679009,
							42.41130348535642,
							0
						],
						[
							-76.51657536675302,
							42.41124848535042,
							0
						],
						[
							-76.51651636673249,
							42.41122648534871,
							0
						],
						[
							-76.51647136671598,
							42.41119848534536,
							0
						],
						[
							-76.51644136670635,
							42.41119848534657,
							0
						],
						[
							-76.51636736667982,
							42.41116048534254,
							0
						],
						[
							-76.51600536655606,
							42.41105648533794,
							0
						],
						[
							-76.51597836654629,
							42.41104148533626,
							0
						],
						[
							-76.51595336653814,
							42.41103948533689,
							0
						],
						[
							-76.51587936651161,
							42.41100148533283,
							0
						],
						[
							-76.51579036648018,
							42.41096248532924,
							0
						],
						[
							-76.51574836646488,
							42.41093748532631,
							0
						],
						[
							-76.51572336645671,
							42.41093548532695,
							0
						],
						[
							-76.51567136643796,
							42.41090748532388,
							0
						],
						[
							-76.51556036640038,
							42.41088048532336,
							0
						],
						[
							-76.51547136637058,
							42.41086348532382,
							0
						],
						[
							-76.51545236636308,
							42.41084448532106,
							0
						],
						[
							-76.51542736635484,
							42.41084148532152,
							0
						],
						[
							-76.51540836634787,
							42.41082948532007,
							0
						],
						[
							-76.51533136632125,
							42.41080348531838,
							0
						],
						[
							-76.51522736628584,
							42.41077548531739,
							0
						],
						[
							-76.51504536622474,
							42.41073848531792,
							0
						],
						[
							-76.51502036621665,
							42.41073748531874,
							0
						],
						[
							-76.51475336612616,
							42.41067148531732,
							0
						],
						[
							-76.51466436609554,
							42.41064348531574,
							0
						],
						[
							-76.51451636604124,
							42.41055048530451,
							0
						],
						[
							-76.5144133660026,
							42.41047448529462,
							0
						],
						[
							-76.5144053659988,
							42.41045748529179,
							0
						],
						[
							-76.51436936598442,
							42.4104194852862,
							0
						],
						[
							-76.51436136598062,
							42.41040248528337,
							0
						],
						[
							-76.51426636594258,
							42.41029948526816,
							0
						],
						[
							-76.5142643659406,
							42.41028148526492,
							0
						],
						[
							-76.51423536593005,
							42.41026448526294,
							0
						],
						[
							-76.51422736592548,
							42.41023748525827,
							0
						],
						[
							-76.51419236591154,
							42.41020048525283,
							0
						],
						[
							-76.51419036590956,
							42.4101824852496,
							0
						],
						[
							-76.51417536590328,
							42.4101624852465,
							0
						],
						[
							-76.51429936594054,
							42.41012848523517,
							0
						],
						[
							-76.51446736599289,
							42.41010748522449,
							0
						],
						[
							-76.5145533660204,
							42.41010648522083,
							0
						],
						[
							-76.51471336607287,
							42.41012248521732,
							0
						],
						[
							-76.51548536633366,
							42.41030148521921,
							0
						],
						[
							-76.51561336637589,
							42.41031748521701,
							0
						],
						[
							-76.51576536642419,
							42.41031148520973,
							0
						],
						[
							-76.51584136644746,
							42.4102964852039,
							0
						],
						[
							-76.5159823664899,
							42.41025848519115,
							0
						],
						[
							-76.51624636656572,
							42.41013848515824,
							0
						],
						[
							-76.5163273665883,
							42.41009248514645,
							0
						],
						[
							-76.51645136662158,
							42.41000448512516,
							0
						],
						[
							-76.5165043666352,
							42.40995848511448,
							0
						],
						[
							-76.51658636665617,
							42.40988648509785,
							0
						],
						[
							-76.51668136667891,
							42.40978148507455,
							0
						],
						[
							-76.51673536669021,
							42.40969948505719,
							0
						],
						[
							-76.51678536669922,
							42.40960448503759,
							0
						],
						[
							-76.51694036671292,
							42.40911548494079,
							0
						],
						[
							-76.51702136672658,
							42.40894848490661,
							0
						],
						[
							-76.51712436674754,
							42.40878448487208,
							0
						],
						[
							-76.51725036677689,
							42.40863448483921,
							0
						],
						[
							-76.51736336680509,
							42.40852548481446,
							0
						],
						[
							-76.5174183668183,
							42.40846548480113,
							0
						],
						[
							-76.51768036688318,
							42.4082054847424,
							0
						],
						[
							-76.51779236690936,
							42.40807348471343,
							0
						],
						[
							-76.51786036692286,
							42.40796048468977,
							0
						],
						[
							-76.51791336693117,
							42.40784248466576,
							0
						],
						[
							-76.5179483669337,
							42.40772448464251,
							0
						],
						[
							-76.51800436692278,
							42.40733248456767,
							0
						],
						[
							-76.51801536690522,
							42.4070464845143,
							0
						],
						[
							-76.51801936689893,
							42.40694348449505,
							0
						],
						[
							-76.51802336689336,
							42.40685048447767,
							0
						],
						[
							-76.51802736686281,
							42.40641848439756,
							0
						],
						[
							-76.51804036676643,
							42.4050534841443,
							0
						],
						[
							-76.51804936674935,
							42.40478248409378,
							0
						],
						[
							-76.51805836674842,
							42.40473048408379,
							0
						],
						[
							-76.51810136674415,
							42.40448548403666,
							0
						],
						[
							-76.51818636675137,
							42.40421348398289,
							0
						],
						[
							-76.51835836677706,
							42.40381348390186,
							0
						],
						[
							-76.51852136680141,
							42.40343448382511,
							0
						],
						[
							-76.51865136682079,
							42.40313148376376,
							0
						],
						[
							-76.51936036693023,
							42.40153048343866,
							0
						],
						[
							-76.51996936702426,
							42.40015548315942,
							0
						],
						[
							-76.52153736726393,
							42.39658248243438,
							0
						],
						[
							-76.52162436727284,
							42.39632448238309,
							0
						],
						[
							-76.52170136726961,
							42.39594548230978,
							0
						],
						[
							-76.52190736723428,
							42.39456848204647,
							0
						],
						[
							-76.52191136722665,
							42.3944474820239,
							0
						],
						[
							-76.52191736721731,
							42.39429448199531,
							0
						],
						[
							-76.52190936720444,
							42.39415448196971,
							0
						],
						[
							-76.52186736709423,
							42.39284048172807,
							0
						],
						[
							-76.51954736635193,
							42.39286248182599,
							0
						],
						[
							-76.5181193658974,
							42.39290848189229,
							0
						],
						[
							-76.51269936417059,
							42.39306048213962,
							0
						],
						[
							-76.51198536394237,
							42.39307048217035,
							0
						],
						[
							-76.51125636370566,
							42.39303048219242,
							0
						],
						[
							-76.51114636366951,
							42.39301848219463,
							0
						],
						[
							-76.51106636364258,
							42.39300148219473,
							0
						],
						[
							-76.51098836361597,
							42.39297948219381,
							0
						],
						[
							-76.51097236361032,
							42.39297248219317,
							0
						],
						[
							-76.51091536359036,
							42.39294948219123,
							0
						],
						[
							-76.51084636356563,
							42.39291448218752,
							0
						],
						[
							-76.51078236354218,
							42.39287448218269,
							0
						],
						[
							-76.51067336350002,
							42.39277648216896,
							0
						],
						[
							-76.51061936347813,
							42.39271448215965,
							0
						],
						[
							-76.51052236343718,
							42.39258048213876,
							0
						],
						[
							-76.51049236342392,
							42.39253148213091,
							0
						],
						[
							-76.51045536340884,
							42.39248748212425,
							0
						],
						[
							-76.51036436337378,
							42.39240748211313,
							0
						],
						[
							-76.51031136335413,
							42.39237148210859,
							0
						],
						[
							-76.51019136331145,
							42.39231448210289,
							0
						],
						[
							-76.51012636328906,
							42.39229348210161,
							0
						],
						[
							-76.51000336324807,
							42.39227248210271,
							0
						],
						[
							-76.5098263631908,
							42.39226548210856,
							0
						],
						[
							-76.50971136315437,
							42.39227148211434,
							0
						],
						[
							-76.50964136313264,
							42.39228148211901,
							0
						],
						[
							-76.50959036311733,
							42.39229548212366,
							0
						],
						[
							-76.5097313631819,
							42.39255848216667,
							0
						],
						[
							-76.50974636318892,
							42.3925884821716,
							0
						],
						[
							-76.50983936323176,
							42.39276548220062,
							0
						],
						[
							-76.50986836324704,
							42.39284648221446,
							0
						],
						[
							-76.50988636325867,
							42.39292648222856,
							0
						],
						[
							-76.50990336327642,
							42.3930934822588,
							0
						],
						[
							-76.50989736328407,
							42.39322348228312,
							0
						],
						[
							-76.50988336328922,
							42.39335448230794,
							0
						],
						[
							-76.50986136328714,
							42.39342248232143,
							0
						],
						[
							-76.50983136328256,
							42.39349048233525,
							0
						],
						[
							-76.50979136327445,
							42.39355448234871,
							0
						],
						[
							-76.50974236326306,
							42.39361348236162,
							0
						],
						[
							-76.50968536324882,
							42.39366848237411,
							0
						],
						[
							-76.50962136323199,
							42.39371848238595,
							0
						],
						[
							-76.50949736319797,
							42.39379648240542,
							0
						],
						[
							-76.50932736314888,
							42.39387048242599,
							0
						],
						[
							-76.5091493630963,
							42.39393148244449,
							0
						],
						[
							-76.50896336304048,
							42.39398348246163,
							0
						],
						[
							-76.50874736297408,
							42.3940224824776,
							0
						],
						[
							-76.5068393623879,
							42.39437148261938,
							0
						],
						[
							-76.50657636230747,
							42.39442448263983,
							0
						],
						[
							-76.50613236216921,
							42.39448048266816,
							0
						],
						[
							-76.50568236202696,
							42.39450848269153,
							0
						],
						[
							-76.50460436168228,
							42.39452248273769,
							0
						],
						[
							-76.5037933614197,
							42.3944884827642,
							0
						],
						[
							-76.5030923611883,
							42.39439848277586,
							0
						],
						[
							-76.50225536090942,
							42.39425648278341,
							0
						],
						[
							-76.50196336081305,
							42.39421948278836,
							0
						],
						[
							-76.50174136074142,
							42.39421348279623,
							0
						],
						[
							-76.50151936067111,
							42.39422548280741,
							0
						],
						[
							-76.50107136053118,
							42.39427648283495,
							0
						],
						[
							-76.50007336021739,
							42.39436148289105,
							0
						],
						[
							-76.49789535952368,
							42.39442648299112,
							0
						],
						[
							-76.4977923594917,
							42.39444048299787,
							0
						],
						[
							-76.497743359477,
							42.39445448300244,
							0
						],
						[
							-76.49766535945413,
							42.39448348301098,
							0
						],
						[
							-76.49758735941889,
							42.39434448298837,
							0
						],
						[
							-76.4971543592069,
							42.39335048282177,
							0
						],
						[
							-76.49701335913961,
							42.39305048277191,
							0
						],
						[
							-76.49622135876118,
							42.39135848249052,
							0
						],
						[
							-76.49597535864147,
							42.39080348239767,
							0
						],
						[
							-76.49584535857971,
							42.39053048235235,
							0
						],
						[
							-76.49575435854037,
							42.39039248233049,
							0
						],
						[
							-76.4956663585139,
							42.39041648233848,
							0
						],
						[
							-76.49556535848225,
							42.3904264823444,
							0
						],
						[
							-76.49265435754621,
							42.39039248245574,
							0
						],
						[
							-76.49062735689476,
							42.39037348253412,
							0
						],
						[
							-76.48880635630886,
							42.39034748260286,
							0
						],
						[
							-76.48703935574122,
							42.39033448267184,
							0
						],
						[
							-76.48490635505487,
							42.39030348275225,
							0
						],
						[
							-76.48448335491796,
							42.39028648276621,
							0
						],
						[
							-76.48379035468975,
							42.39020548277917,
							0
						],
						[
							-76.48294735440867,
							42.39005948278619,
							0
						],
						[
							-76.48281735436542,
							42.39003848278752,
							0
						],
						[
							-76.48100135375294,
							42.38962948278513,
							0
						],
						[
							-76.48003035342589,
							42.38941648278487,
							0
						],
						[
							-76.47715235246228,
							42.38886448279884,
							0
						],
						[
							-76.47502035174442,
							42.38840048279897,
							0
						],
						[
							-76.4729703510485,
							42.38787748278484,
							0
						],
						[
							-76.47181735065601,
							42.38756848277414,
							0
						],
						[
							-76.47174335063103,
							42.38755148277398,
							0
						],
						[
							-76.47103435038777,
							42.38733548276259,
							0
						],
						[
							-76.47079035030313,
							42.38724848275632,
							0
						],
						[
							-76.47079235031728,
							42.38743248279032,
							0
						],
						[
							-76.47078335037428,
							42.38824748294169,
							0
						],
						[
							-76.47078835038614,
							42.38838748296742,
							0
						],
						[
							-76.4708223504136,
							42.38861248300774,
							0
						],
						[
							-76.47088735045024,
							42.38882748304494,
							0
						],
						[
							-76.47097035049038,
							42.38901148307567,
							0
						],
						[
							-76.4709863504994,
							42.38906448308486,
							0
						],
						[
							-76.47152235074823,
							42.39011148325719,
							0
						],
						[
							-76.47297335142768,
							42.39302448373822,
							0
						],
						[
							-76.47396335190145,
							42.39515048409208,
							0
						],
						[
							-76.47411235197511,
							42.39550248415126,
							0
						],
						[
							-76.47442435212928,
							42.39623848427497,
							0
						],
						[
							-76.47472635227986,
							42.39696948439818,
							0
						],
						[
							-76.47525635253639,
							42.39814648459478,
							0
						],
						[
							-76.47590835282897,
							42.39928148477867,
							0
						],
						[
							-76.47742335348623,
							42.401611485149,
							0
						],
						[
							-76.47743035348923,
							42.40162148515057,
							0
						],
						[
							-76.47753735353963,
							42.4018404851868,
							0
						],
						[
							-76.47763835359314,
							42.40212748523587,
							0
						],
						[
							-76.47769835363424,
							42.40242448528844,
							0
						],
						[
							-76.4777183536658,
							42.40276648535098,
							0
						],
						[
							-76.47772735370111,
							42.40320748543229,
							0
						],
						[
							-76.47777635382805,
							42.40471948571029,
							0
						],
						[
							-76.47783635397903,
							42.40651048603953,
							0
						],
						[
							-76.4778533540517,
							42.40742448620807,
							0
						],
						[
							-76.47800735432595,
							42.4104804867677,
							0
						],
						[
							-76.47806435448432,
							42.41238448711791,
							0
						],
						[
							-76.47810835466703,
							42.41467548754029,
							0
						],
						[
							-76.47811535475016,
							42.41577448774344,
							0
						],
						[
							-76.47914235514689,
							42.41668848787116,
							0
						],
						[
							-76.48035635561669,
							42.41778048802424,
							0
						],
						[
							-76.48046435565792,
							42.41786948803635,
							0
						],
						[
							-76.480525355681,
							42.41791748804276,
							0
						],
						[
							-76.48145835604075,
							42.41873848815703,
							0
						],
						[
							-76.48260535648255,
							42.41974148829632,
							0
						],
						[
							-76.48306235665957,
							42.42015448835429,
							0
						],
						[
							-76.48380435688331,
							42.4199604882884,
							0
						],
						[
							-76.48427135702605,
							42.41986448825175,
							0
						],
						[
							-76.48450335709428,
							42.41978048822683,
							0
						],
						[
							-76.48476735717273,
							42.41969548820043,
							0
						],
						[
							-76.48584135749671,
							42.41941648810536,
							0
						],
						[
							-76.48619735760354,
							42.41931648807245,
							0
						],
						[
							-76.48684035779831,
							42.4191604880176,
							0
						],
						[
							-76.4878103580893,
							42.41888648792765,
							0
						],
						[
							-76.48940435859592,
							42.41882248785137,
							0
						],
						[
							-76.49442136019053,
							42.41862248761148,
							0
						],
						[
							-76.49490636034116,
							42.41855548757948,
							0
						],
						[
							-76.49630636079827,
							42.41866448754304,
							0
						],
						[
							-76.49704536103368,
							42.41864248750908,
							0
						],
						[
							-76.49800836130473,
							42.41812848737499,
							0
						],
						[
							-76.49841436143947,
							42.41818948736987,
							0
						],
						[
							-76.50139636238904,
							42.41809548723185,
							0
						],
						[
							-76.50224536267903,
							42.41833548724194,
							0
						],
						[
							-76.50138836258468,
							42.42078548773004,
							0
						],
						[
							-76.50130936257202,
							42.42095748776509,
							0
						],
						[
							-76.50105736254682,
							42.42171248791501,
							0
						],
						[
							-76.50101736254297,
							42.42183448793919,
							0
						],
						[
							-76.50089736253081,
							42.42219148801011,
							0
						],
						[
							-76.50036136248016,
							42.42383748833642,
							0
						],
						[
							-76.50013336245867,
							42.42453848847536,
							0
						],
						[
							-76.50006236245456,
							42.42479148852507,
							0
						],
						[
							-76.49984436242966,
							42.42540248864695,
							0
						],
						[
							-76.49941036235559,
							42.42628648882808,
							0
						],
						[
							-76.49891536225502,
							42.4270764889943,
							0
						],
						[
							-76.49839336214778,
							42.42789348916659,
							0
						],
						[
							-76.49824536211742,
							42.42812548921553,
							0
						],
						[
							-76.49785136203592,
							42.42873448934414,
							0
						],
						[
							-76.49759836198363,
							42.42912648942691,
							0
						],
						[
							-76.49745436195388,
							42.42934948947401,
							0
						],
						[
							-76.49659836177644,
							42.4306674897525,
							0
						],
						[
							-76.49652436176109,
							42.43078148977659,
							0
						],
						[
							-76.49645936174761,
							42.43088148979773,
							0
						],
						[
							-76.49637136172818,
							42.43100048982331,
							0
						],
						[
							-76.49612236167532,
							42.43136748990128,
							0
						],
						[
							-76.49477036138963,
							42.43337549032751,
							0
						],
						[
							-76.49467136137194,
							42.43356649036686,
							0
						],
						[
							-76.49462836136544,
							42.4336654903869,
							0
						],
						[
							-76.49459536136253,
							42.43376949040749,
							0
						],
						[
							-76.49457536136416,
							42.43387849042846,
							0
						],
						[
							-76.49457036137412,
							42.43403549045772,
							0
						],
						[
							-76.49457236137681,
							42.43406349046281,
							0
						],
						[
							-76.49457636138351,
							42.43413649047615,
							0
						],
						[
							-76.4946073614314,
							42.43465149057018,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090011003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>12206869</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>71788</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4114774</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4937607</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090011003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090011003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>3228</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>1012</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>3016.33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>80</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>2.97</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.76</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22319</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>21981</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23292</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12930</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12590</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13478</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7856</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7588</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8178</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5061</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4985</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5282</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>5761</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>14430</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1886</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1676</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2066</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1103</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00006"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.50879236038479,
							42.35860547591342,
							0
						],
						[
							-76.51052336094178,
							42.35863347584868,
							0
						],
						[
							-76.5105973609658,
							42.35863747584645,
							0
						],
						[
							-76.51378036198972,
							42.35868547572673,
							0
						],
						[
							-76.51610136273676,
							42.35872647564057,
							0
						],
						[
							-76.51724836310564,
							42.35874247559718,
							0
						],
						[
							-76.5180583633662,
							42.35875447556666,
							0
						],
						[
							-76.5193133637693,
							42.35876547551799,
							0
						],
						[
							-76.5217163645419,
							42.35879647542662,
							0
						],
						[
							-76.52238036475606,
							42.35881447540312,
							0
						],
						[
							-76.5235923651467,
							42.35884347535949,
							0
						],
						[
							-76.52367136517292,
							42.35885547535853,
							0
						],
						[
							-76.52374836519884,
							42.35887247535857,
							0
						],
						[
							-76.5238233652245,
							42.35889447535962,
							0
						],
						[
							-76.52389336524914,
							42.35892447536236,
							0
						],
						[
							-76.52396036527327,
							42.35896047536632,
							0
						],
						[
							-76.52407636531625,
							42.35903947537627,
							0
						],
						[
							-76.52412536533556,
							42.35908847538337,
							0
						],
						[
							-76.52416836535332,
							42.35914247539164,
							0
						],
						[
							-76.52420236536811,
							42.35919547540009,
							0
						],
						[
							-76.52422936538102,
							42.35925347540975,
							0
						],
						[
							-76.52424736539112,
							42.35931247541997,
							0
						],
						[
							-76.52426036540221,
							42.35940647543686,
							0
						],
						[
							-76.5243593655308,
							42.36072447567714,
							0
						],
						[
							-76.52488736609868,
							42.36614747666088,
							0
						],
						[
							-76.52502536624311,
							42.36751047690787,
							0
						],
						[
							-76.52507636630912,
							42.36818547703091,
							0
						],
						[
							-76.5250943663334,
							42.36843747707689,
							0
						],
						[
							-76.52513536643089,
							42.36958447728776,
							0
						],
						[
							-76.5251503665685,
							42.37139047762183,
							0
						],
						[
							-76.52517236664477,
							42.37233147779529,
							0
						],
						[
							-76.52514936665355,
							42.37255147783699,
							0
						],
						[
							-76.52509636665319,
							42.372777477881,
							0
						],
						[
							-76.5250113666416,
							42.37299047792391,
							0
						],
						[
							-76.52484936658982,
							42.37299247793081,
							0
						],
						[
							-76.52215736572383,
							42.37295247803226,
							0
						],
						[
							-76.52205136569057,
							42.3729624780384,
							0
						],
						[
							-76.52194836565867,
							42.37297747804534,
							0
						],
						[
							-76.52184736562836,
							42.37300547805462,
							0
						],
						[
							-76.5217513656,
							42.37303847806462,
							0
						],
						[
							-76.52165936557358,
							42.37308047807611,
							0
						],
						[
							-76.52157436554971,
							42.37312647808808,
							0
						],
						[
							-76.52149636552875,
							42.37318147810141,
							0
						],
						[
							-76.52142636551065,
							42.37324047811519,
							0
						],
						[
							-76.5213653654958,
							42.37330447812951,
							0
						],
						[
							-76.52131336548413,
							42.37337247814422,
							0
						],
						[
							-76.52129336548043,
							42.37340947815189,
							0
						],
						[
							-76.52072736536142,
							42.37425847833205,
							0
						],
						[
							-76.52061836533905,
							42.37442947836815,
							0
						],
						[
							-76.520603365336,
							42.37445347837321,
							0
						],
						[
							-76.52039836529403,
							42.37477647844136,
							0
						],
						[
							-76.51978236516433,
							42.37569847863708,
							0
						],
						[
							-76.51924236504902,
							42.37648447880454,
							0
						],
						[
							-76.51895336498586,
							42.37688547889052,
							0
						],
						[
							-76.51865436491441,
							42.37721747896411,
							0
						],
						[
							-76.51725236457125,
							42.3786634792887,
							0
						],
						[
							-76.51721036456183,
							42.3787184793006,
							0
						],
						[
							-76.51717736455522,
							42.37877247931194,
							0
						],
						[
							-76.51714136455,
							42.37885847932933,
							0
						],
						[
							-76.51721436457437,
							42.37887147932878,
							0
						],
						[
							-76.51735736462301,
							42.37890947933005,
							0
						],
						[
							-76.51755936469293,
							42.37897947933485,
							0
						],
						[
							-76.51930036530145,
							42.37966347939118,
							0
						],
						[
							-76.52016036560276,
							42.38001147942086,
							0
						],
						[
							-76.5212783659936,
							42.38045147945717,
							0
						],
						[
							-76.5213383660151,
							42.38048247946048,
							0
						],
						[
							-76.52139336603531,
							42.38051747946473,
							0
						],
						[
							-76.52144436605462,
							42.38055747947007,
							0
						],
						[
							-76.52152636608747,
							42.38064647948326,
							0
						],
						[
							-76.52155736610099,
							42.38069547949107,
							0
						],
						[
							-76.52159936612206,
							42.38079847950846,
							0
						],
						[
							-76.52160936612923,
							42.38085247951806,
							0
						],
						[
							-76.5215623662212,
							42.38230747978951,
							0
						],
						[
							-76.52162936645401,
							42.3851794803188,
							0
						],
						[
							-76.52163836646089,
							42.38523348032844,
							0
						],
						[
							-76.5216423664698,
							42.38533748034753,
							0
						],
						[
							-76.52169736658908,
							42.38671848060111,
							0
						],
						[
							-76.52178836688131,
							42.39029248125938,
							0
						],
						[
							-76.52180036691351,
							42.39067748133019,
							0
						],
						[
							-76.52183536700637,
							42.39178648153418,
							0
						],
						[
							-76.52186736709423,
							42.39284048172807,
							0
						],
						[
							-76.52190936720444,
							42.39415448196971,
							0
						],
						[
							-76.52191736721731,
							42.39429448199531,
							0
						],
						[
							-76.52191136722665,
							42.3944474820239,
							0
						],
						[
							-76.52258836744241,
							42.39442948199319,
							0
						],
						[
							-76.5241913679545,
							42.3944034819235,
							0
						],
						[
							-76.5246853681124,
							42.39439648190223,
							0
						],
						[
							-76.52620636859864,
							42.39437648183697,
							0
						],
						[
							-76.53032236991307,
							42.39430348165691,
							0
						],
						[
							-76.53052336997764,
							42.39430548164913,
							0
						],
						[
							-76.53083437007838,
							42.39431948163914,
							0
						],
						[
							-76.53090737010238,
							42.39432748163767,
							0
						],
						[
							-76.5324573705915,
							42.39422048155514,
							0
						],
						[
							-76.53618737176296,
							42.39388748134251,
							0
						],
						[
							-76.5362213716392,
							42.39205948100263,
							0
						],
						[
							-76.53624537154715,
							42.39070548075092,
							0
						],
						[
							-76.53625537150707,
							42.39011748064161,
							0
						],
						[
							-76.5362803713652,
							42.38808248026373,
							0
						],
						[
							-76.53641337113186,
							42.38433447956419,
							0
						],
						[
							-76.5364413710005,
							42.38242847921003,
							0
						],
						[
							-76.5366473710697,
							42.38247147920966,
							0
						],
						[
							-76.53781837147216,
							42.38283847923024,
							0
						],
						[
							-76.53812937157917,
							42.38293747923599,
							0
						],
						[
							-76.53857037172841,
							42.38304447923797,
							0
						],
						[
							-76.53870637177452,
							42.38307847923876,
							0
						],
						[
							-76.53945537203047,
							42.38329347924829,
							0
						],
						[
							-76.53973337212697,
							42.38339347925554,
							0
						],
						[
							-76.54000637222384,
							42.38352047926801,
							0
						],
						[
							-76.54029637232948,
							42.38369247928815,
							0
						],
						[
							-76.54071737248226,
							42.38393447931593,
							0
						],
						[
							-76.5411503726412,
							42.38420747934896,
							0
						],
						[
							-76.541211372664,
							42.38425147935465,
							0
						],
						[
							-76.54125837268198,
							42.38429147936015,
							0
						],
						[
							-76.54131637270605,
							42.38436547937152,
							0
						],
						[
							-76.54136137272623,
							42.38444347938414,
							0
						],
						[
							-76.54161837287201,
							42.3853044795332,
							0
						],
						[
							-76.54167337289789,
							42.38541647955172,
							0
						],
						[
							-76.54174337292822,
							42.3855234795687,
							0
						],
						[
							-76.54182637296205,
							42.38562147958348,
							0
						],
						[
							-76.54195037301064,
							42.38574147960068,
							0
						],
						[
							-76.54206937305793,
							42.38586547961886,
							0
						],
						[
							-76.54222637312334,
							42.38607047965046,
							0
						],
						[
							-76.54235437318053,
							42.38628947968584,
							0
						],
						[
							-76.54246137323331,
							42.38654047972799,
							0
						],
						[
							-76.54254437327643,
							42.38676447976611,
							0
						],
						[
							-76.54257737328929,
							42.38679547977053,
							0
						],
						[
							-76.54262237330563,
							42.3868214797735,
							0
						],
						[
							-76.54267437332297,
							42.38683047977307,
							0
						],
						[
							-76.54272937334082,
							42.38683347977139,
							0
						],
						[
							-76.54278237335679,
							42.38681947976667,
							0
						],
						[
							-76.54282737336952,
							42.38679647976059,
							0
						],
						[
							-76.54341337352497,
							42.38635647965538,
							0
						],
						[
							-76.54432037376972,
							42.38573147950291,
							0
						],
						[
							-76.5446583738585,
							42.38546547943997,
							0
						],
						[
							-76.54498137393855,
							42.38514647936781,
							0
						],
						[
							-76.54512537397366,
							42.3849964793342,
							0
						],
						[
							-76.54523637400312,
							42.38491347931434,
							0
						],
						[
							-76.5463403742996,
							42.38413347912518,
							0
						],
						[
							-76.5464043743164,
							42.38408247911315,
							0
						],
						[
							-76.54651537434451,
							42.38398147908995,
							0
						],
						[
							-76.54665037437873,
							42.3838584790617,
							0
						],
						[
							-76.54704937447647,
							42.38344847896961,
							0
						],
						[
							-76.5472273745171,
							42.3832254789211,
							0
						],
						[
							-76.54726137452558,
							42.38319247891361,
							0
						],
						[
							-76.54730637453764,
							42.38316047890586,
							0
						],
						[
							-76.54735637455168,
							42.38313347889883,
							0
						],
						[
							-76.54746637458348,
							42.38308647888569,
							0
						],
						[
							-76.54758537461989,
							42.38306247887642,
							0
						],
						[
							-76.5477103746595,
							42.38305647887025,
							0
						],
						[
							-76.54783437470013,
							42.38306847886745,
							0
						],
						[
							-76.54789537472057,
							42.38308047886721,
							0
						],
						[
							-76.54811837479647,
							42.38314047886928,
							0
						],
						[
							-76.54858737495302,
							42.38322447886586,
							0
						],
						[
							-76.5487233749995,
							42.38326347886757,
							0
						],
						[
							-76.54913337513815,
							42.38336147886913,
							0
						],
						[
							-76.54920737516277,
							42.38337347886836,
							0
						],
						[
							-76.54927737518645,
							42.38339047886867,
							0
						],
						[
							-76.54939137522425,
							42.38340747886721,
							0
						],
						[
							-76.54958737528723,
							42.38340947885963,
							0
						],
						[
							-76.54993937539933,
							42.38339947884354,
							0
						],
						[
							-76.5500823754454,
							42.38340247883831,
							0
						],
						[
							-76.55016437547258,
							42.3834144788372,
							0
						],
						[
							-76.55024437549947,
							42.38343147883712,
							0
						],
						[
							-76.55032137552578,
							42.38345347883806,
							0
						],
						[
							-76.55053037559823,
							42.38352747884332,
							0
						],
						[
							-76.5507963756888,
							42.38359947884588,
							0
						],
						[
							-76.55134537587195,
							42.38369647884164,
							0
						],
						[
							-76.5516013759577,
							42.38374647884052,
							0
						],
						[
							-76.55184337604037,
							42.38381547884349,
							0
						],
						[
							-76.55200537609612,
							42.38386747884658,
							0
						],
						[
							-76.55229237619417,
							42.38394947885013,
							0
						],
						[
							-76.55262737630612,
							42.38401147884805,
							0
						],
						[
							-76.55271937633637,
							42.38402147884617,
							0
						],
						[
							-76.55297137641905,
							42.38404747884079,
							0
						],
						[
							-76.5532293765025,
							42.3840574788322,
							0
						],
						[
							-76.55380237668598,
							42.38405447880844,
							0
						],
						[
							-76.55369137654371,
							42.38260647854477,
							0
						],
						[
							-76.55366837651408,
							42.38230447848976,
							0
						],
						[
							-76.55364537648683,
							42.38203447844067,
							0
						],
						[
							-76.55359737644766,
							42.3817114783828,
							0
						],
						[
							-76.55349937636659,
							42.38103747826194,
							0
						],
						[
							-76.55347937635062,
							42.38090747823866,
							0
						],
						[
							-76.55342837631747,
							42.3806794781985,
							0
						],
						[
							-76.55340137629989,
							42.38055847817718,
							0
						],
						[
							-76.55305937607706,
							42.37902147790633,
							0
						],
						[
							-76.55283137593165,
							42.37803947773369,
							0
						],
						[
							-76.55220337553092,
							42.37533147725748,
							0
						],
						[
							-76.5520953754712,
							42.37499047719867,
							0
						],
						[
							-76.551949375402,
							42.37468647714826,
							0
						],
						[
							-76.55184837535748,
							42.37452147712178,
							0
						],
						[
							-76.5515273752191,
							42.37403947704547,
							0
						],
						[
							-76.55136637514974,
							42.37379847700735,
							0
						],
						[
							-76.5511033750329,
							42.37335647693612,
							0
						],
						[
							-76.55090437493547,
							42.37289947685952,
							0
						],
						[
							-76.55077237485818,
							42.37242447677684,
							0
						],
						[
							-76.55070637480162,
							42.37194347669042,
							0
						],
						[
							-76.5507093747671,
							42.371461476601,
							0
						],
						[
							-76.5507473747524,
							42.37109647653183,
							0
						],
						[
							-76.55078837474693,
							42.37084347648329,
							0
						],
						[
							-76.5508813747531,
							42.37052247642007,
							0
						],
						[
							-76.55101837477434,
							42.37021447635745,
							0
						],
						[
							-76.55118337480752,
							42.36994647630112,
							0
						],
						[
							-76.55209437500253,
							42.36862847602005,
							0
						],
						[
							-76.55315237535056,
							42.36874947599966,
							0
						],
						[
							-76.5534023754321,
							42.36876847599304,
							0
						],
						[
							-76.55361637550075,
							42.36876947598457,
							0
						],
						[
							-76.55373237553815,
							42.36877247598044,
							0
						],
						[
							-76.55430137571994,
							42.36876447595593,
							0
						],
						[
							-76.55449437578166,
							42.36876247594774,
							0
						],
						[
							-76.55473037585739,
							42.36876347593837,
							0
						],
						[
							-76.55497837593695,
							42.36876447592852,
							0
						],
						[
							-76.55535137605781,
							42.36878247591675,
							0
						],
						[
							-76.55706937661306,
							42.36884447585869,
							0
						],
						[
							-76.55732237669488,
							42.3688544758503,
							0
						],
						[
							-76.55740537672112,
							42.36884947584602,
							0
						],
						[
							-76.55753537676132,
							42.36882947583707,
							0
						],
						[
							-76.55766337679992,
							42.36879647582577,
							0
						],
						[
							-76.55778637683655,
							42.36875847581375,
							0
						],
						[
							-76.55793337687955,
							42.36870247579742,
							0
						],
						[
							-76.55807237691864,
							42.36862847577808,
							0
						],
						[
							-76.5583103769864,
							42.36851247574696,
							0
						],
						[
							-76.55881337713119,
							42.36828947568527,
							0
						],
						[
							-76.55909337721307,
							42.36818247565411,
							0
						],
						[
							-76.55965937737999,
							42.36798547559469,
							0
						],
						[
							-76.55994437746345,
							42.36787847556334,
							0
						],
						[
							-76.56008737750584,
							42.36783147554883,
							0
						],
						[
							-76.56050637762804,
							42.36766747550148,
							0
						],
						[
							-76.56088237773598,
							42.36749647545457,
							0
						],
						[
							-76.56124737783963,
							42.36731547540627,
							0
						],
						[
							-76.56187837801603,
							42.3669644753157,
							0
						],
						[
							-76.56231937813875,
							42.36671147525096,
							0
						],
						[
							-76.56270137824418,
							42.36648047519268,
							0
						],
						[
							-76.56297037832054,
							42.36634647515697,
							0
						],
						[
							-76.56309337835621,
							42.36629547514254,
							0
						],
						[
							-76.56322137839375,
							42.36624847512865,
							0
						],
						[
							-76.56361337851006,
							42.36612147508925,
							0
						],
						[
							-76.5639153786006,
							42.36603647506128,
							0
						],
						[
							-76.56425937870452,
							42.36595047503142,
							0
						],
						[
							-76.56443437875781,
							42.36591247501729,
							0
						],
						[
							-76.56494337891209,
							42.36579247497446,
							0
						],
						[
							-76.56559537911019,
							42.36564447492061,
							0
						],
						[
							-76.56613937927268,
							42.36548347486877,
							0
						],
						[
							-76.56626337930933,
							42.36544147485597,
							0
						],
						[
							-76.56638237934371,
							42.3653904748417,
							0
						],
						[
							-76.56654937939078,
							42.36530247481863,
							0
						],
						[
							-76.5667613794512,
							42.36520047479115,
							0
						],
						[
							-76.56687137948535,
							42.36518547478392,
							0
						],
						[
							-76.56676337943293,
							42.36494347474344,
							0
						],
						[
							-76.56675837942801,
							42.36489847473532,
							0
						],
						[
							-76.56674337941921,
							42.36484447472591,
							0
						],
						[
							-76.56662537936563,
							42.36463047469103,
							0
						],
						[
							-76.56660437935466,
							42.36457247468115,
							0
						],
						[
							-76.56657437932978,
							42.36436547464402,
							0
						],
						[
							-76.5665803793244,
							42.36426647462544,
							0
						],
						[
							-76.56659937932514,
							42.36419347461113,
							0
						],
						[
							-76.5666243793282,
							42.3641264745977,
							0
						],
						[
							-76.56670237934314,
							42.36398947456915,
							0
						],
						[
							-76.56683337937112,
							42.36379947452866,
							0
						],
						[
							-76.56706737942596,
							42.3635254744684,
							0
						],
						[
							-76.56714537944065,
							42.36338547443931,
							0
						],
						[
							-76.56721237945173,
							42.36324447441047,
							0
						],
						[
							-76.56726337945742,
							42.36309947438153,
							0
						],
						[
							-76.56728337945681,
							42.3630044743631,
							0
						],
						[
							-76.56729437945343,
							42.36291047434525,
							0
						],
						[
							-76.56729937943345,
							42.36261747429075,
							0
						],
						[
							-76.56732337941544,
							42.36226847422511,
							0
						],
						[
							-76.56735937938967,
							42.36176147412972,
							0
						],
						[
							-76.56738637934818,
							42.36108047400244,
							0
						],
						[
							-76.56739437932455,
							42.36072447393615,
							0
						],
						[
							-76.56746137923494,
							42.3592154736538,
							0
						],
						[
							-76.56749537915731,
							42.3580124734295,
							0
						],
						[
							-76.56753637907998,
							42.35678347320009,
							0
						],
						[
							-76.56757437900694,
							42.35562547298392,
							0
						],
						[
							-76.56759537894966,
							42.35475547282185,
							0
						],
						[
							-76.56759137890731,
							42.3541974727186,
							0
						],
						[
							-76.56757237886148,
							42.35365747261928,
							0
						],
						[
							-76.56754537883428,
							42.35340547257367,
							0
						],
						[
							-76.5675443788247,
							42.35327947255036,
							0
						],
						[
							-76.56756037881885,
							42.3531304725221,
							0
						],
						[
							-76.56759937882275,
							42.35301347249882,
							0
						],
						[
							-76.56762437882739,
							42.35296747248928,
							0
						],
						[
							-76.56771237884622,
							42.35284047246218,
							0
						],
						[
							-76.56794537889382,
							42.35247247238456,
							0
						],
						[
							-76.56801437890894,
							42.35237747236415,
							0
						],
						[
							-76.56806237892059,
							42.35232647235274,
							0
						],
						[
							-76.56803837890831,
							42.35226447234224,
							0
						],
						[
							-76.56798137887453,
							42.35205347230543,
							0
						],
						[
							-76.56792537883508,
							42.35176147225357,
							0
						],
						[
							-76.56787237878898,
							42.35136547218232,
							0
						],
						[
							-76.56784737876316,
							42.35112347213848,
							0
						],
						[
							-76.56777837867948,
							42.35028647198613,
							0
						],
						[
							-76.56777337866426,
							42.35010147195204,
							0
						],
						[
							-76.56778237864235,
							42.34976447188922,
							0
						],
						[
							-76.56789637853993,
							42.34787547153446,
							0
						],
						[
							-76.5678963785389,
							42.34786147153185,
							0
						],
						[
							-76.56791337850764,
							42.34736247143866,
							0
						],
						[
							-76.5679153784712,
							42.34685847134517,
							0
						],
						[
							-76.56792737842203,
							42.34613747121103,
							0
						],
						[
							-76.56796837838479,
							42.34545247108238,
							0
						],
						[
							-76.56806537827106,
							42.34348347071344,
							0
						],
						[
							-76.56807137826466,
							42.34337047069224,
							0
						],
						[
							-76.56814437809395,
							42.34073047019984,
							0
						],
						[
							-76.5681603779726,
							42.33901046988031,
							0
						],
						[
							-76.56818437793808,
							42.33843646977289,
							0
						],
						[
							-76.56824937784415,
							42.33687546948083,
							0
						],
						[
							-76.56831237771554,
							42.33485146910299,
							0
						],
						[
							-76.56833237767435,
							42.33420346898202,
							0
						],
						[
							-76.56834937764275,
							42.33369946888786,
							0
						],
						[
							-76.56846437747264,
							42.33088346836098,
							0
						],
						[
							-76.56845637746575,
							42.33082446835037,
							0
						],
						[
							-76.56845837746285,
							42.33077646834141,
							0
						],
						[
							-76.56847737742514,
							42.33018046823011,
							0
						],
						[
							-76.56849637737164,
							42.32936946807892,
							0
						],
						[
							-76.56850737736362,
							42.32921246804936,
							0
						],
						[
							-76.56851037735032,
							42.32901846801327,
							0
						],
						[
							-76.56875037742796,
							42.32902846800542,
							0
						],
						[
							-76.56915037755574,
							42.3290234679883,
							0
						],
						[
							-76.57250137863026,
							42.32903546785492,
							0
						],
						[
							-76.57278337872084,
							42.32903846784409,
							0
						],
						[
							-76.57442737924902,
							42.32905846778127,
							0
						],
						[
							-76.57647937990704,
							42.32906646769973,
							0
						],
						[
							-76.57852938056377,
							42.32906546761657,
							0
						],
						[
							-76.57851638052217,
							42.3285564675227,
							0
						],
						[
							-76.57851938050645,
							42.32832946748047,
							0
						],
						[
							-76.5785353804353,
							42.32729146728733,
							0
						],
						[
							-76.57858338035169,
							42.32594446703557,
							0
						],
						[
							-76.57864838020427,
							42.32365546660839,
							0
						],
						[
							-76.57867038013659,
							42.32263846641889,
							0
						],
						[
							-76.57868138006201,
							42.32157546622128,
							0
						],
						[
							-76.57868938004239,
							42.32127346616492,
							0
						],
						[
							-76.57870938003983,
							42.32115146614149,
							0
						],
						[
							-76.57875638004394,
							42.32100246611196,
							0
						],
						[
							-76.57882338005474,
							42.32085746608234,
							0
						],
						[
							-76.57891938007477,
							42.32071146605137,
							0
						],
						[
							-76.57924838014911,
							42.32028846595959,
							0
						],
						[
							-76.57930238016206,
							42.32022946594647,
							0
						],
						[
							-76.57953338021396,
							42.31992846588128,
							0
						],
						[
							-76.5796763802411,
							42.31967446582839,
							0
						],
						[
							-76.57974138025156,
							42.31953346579961,
							0
						],
						[
							-76.57984438026796,
							42.31930746575352,
							0
						],
						[
							-76.57996938028639,
							42.31901346569392,
							0
						],
						[
							-76.58010738030863,
							42.31871446563288,
							0
						],
						[
							-76.58014838031242,
							42.31858746560766,
							0
						],
						[
							-76.58016738031155,
							42.31849246558926,
							0
						],
						[
							-76.58019238030333,
							42.31827146554725,
							0
						],
						[
							-76.58020338029597,
							42.31812346551936,
							0
						],
						[
							-76.58019938028146,
							42.31794346548612,
							0
						],
						[
							-76.58015138022407,
							42.31737146538196,
							0
						],
						[
							-76.58008038015909,
							42.31679646527817,
							0
						],
						[
							-76.5800153801069,
							42.31636946520159,
							0
						],
						[
							-76.57993638005456,
							42.31600146513651,
							0
						],
						[
							-76.57977637995417,
							42.31533246501887,
							0
						],
						[
							-76.5797323799289,
							42.31518046499246,
							0
						],
						[
							-76.5796133798661,
							42.31484446493495,
							0
						],
						[
							-76.57953837983054,
							42.31468746490885,
							0
						],
						[
							-76.57947937980444,
							42.31458946489306,
							0
						],
						[
							-76.57938437976453,
							42.31446046487297,
							0
						],
						[
							-76.57923137970408,
							42.31430446485021,
							0
						],
						[
							-76.57900637961936,
							42.31413246482741,
							0
						],
						[
							-76.57877137953174,
							42.31396446480575,
							0
						],
						[
							-76.57854537944863,
							42.3138184647878,
							0
						],
						[
							-76.57834937937879,
							42.31372246477792,
							0
						],
						[
							-76.5779423792346,
							42.31353446475951,
							0
						],
						[
							-76.57744637905537,
							42.31325746472818,
							0
						],
						[
							-76.57728937899701,
							42.31314746471413,
							0
						],
						[
							-76.57703537889897,
							42.31292046468229,
							0
						],
						[
							-76.57641737865731,
							42.31232546459691,
							0
						],
						[
							-76.57636337863642,
							42.31227646458999,
							0
						],
						[
							-76.57617937856514,
							42.31210846456627,
							0
						],
						[
							-76.57604337851143,
							42.31197046454616,
							0
						],
						[
							-76.57585537843491,
							42.31174846451258,
							0
						],
						[
							-76.57573537838202,
							42.31155146448088,
							0
						],
						[
							-76.5756373783365,
							42.31135946444922,
							0
						],
						[
							-76.57551837827504,
							42.31104146439501,
							0
						],
						[
							-76.57536437819313,
							42.31059746431887,
							0
						],
						[
							-76.57525737813785,
							42.31031146427012,
							0
						],
						[
							-76.5752173781171,
							42.31020346425172,
							0
						],
						[
							-76.57509537806128,
							42.30997546421435,
							0
						],
						[
							-76.57494737799685,
							42.30974346417728,
							0
						],
						[
							-76.57481037793885,
							42.3095514641472,
							0
						],
						[
							-76.57444937779019,
							42.30910146407831,
							0
						],
						[
							-76.57394337758367,
							42.30849646398651,
							0
						],
						[
							-76.57368537747719,
							42.30817146393664,
							0
						],
						[
							-76.5735253774102,
							42.3079574639034,
							0
						],
						[
							-76.57336437734095,
							42.30771646386517,
							0
						],
						[
							-76.57328437730548,
							42.30758246384356,
							0
						],
						[
							-76.57316137724501,
							42.30729546379526,
							0
						],
						[
							-76.57302037716602,
							42.30683446371544,
							0
						],
						[
							-76.5729803771383,
							42.30663146367939,
							0
						],
						[
							-76.57296037711085,
							42.30634446362693,
							0
						],
						[
							-76.57295837708833,
							42.30604646357171,
							0
						],
						[
							-76.57296737707573,
							42.3058354635322,
							0
						],
						[
							-76.57297037703934,
							42.3053264634376,
							0
						],
						[
							-76.57296037701792,
							42.30507846339202,
							0
						],
						[
							-76.57290137693003,
							42.30413846321995,
							0
						],
						[
							-76.57285837684128,
							42.30311646303201,
							0
						],
						[
							-76.57277837672092,
							42.30182546279566,
							0
						],
						[
							-76.57271337664764,
							42.30111046266559,
							0
						],
						[
							-76.5726523765667,
							42.30027346251271,
							0
						],
						[
							-76.57265837655606,
							42.30010246248072,
							0
						],
						[
							-76.57271537653229,
							42.29952946237208,
							0
						],
						[
							-76.57276837650069,
							42.29886746224705,
							0
						],
						[
							-76.57281737646151,
							42.29811946210625,
							0
						],
						[
							-76.57281837643441,
							42.29774546203679,
							0
						],
						[
							-76.5727803763562,
							42.29684546187128,
							0
						],
						[
							-76.57275037632218,
							42.29651246181067,
							0
						],
						[
							-76.5726783762609,
							42.2959914617169,
							0
						],
						[
							-76.57264037623551,
							42.29581146168501,
							0
						],
						[
							-76.57260737620919,
							42.29559646164643,
							0
						],
						[
							-76.57256337617858,
							42.29537146160644,
							0
						],
						[
							-76.57251237614574,
							42.29514646156674,
							0
						],
						[
							-76.57246737610859,
							42.29483646151102,
							0
						],
						[
							-76.57245037609347,
							42.2947044614872,
							0
						],
						[
							-76.57243737608351,
							42.29462546147306,
							0
						],
						[
							-76.57242637606122,
							42.29436946142597,
							0
						],
						[
							-76.57240437603465,
							42.2941034613775,
							0
						],
						[
							-76.5723853759999,
							42.29371246130568,
							0
						],
						[
							-76.57239337599219,
							42.29357246127938,
							0
						],
						[
							-76.5724123759897,
							42.29345546125689,
							0
						],
						[
							-76.57248137599817,
							42.29326946121957,
							0
						],
						[
							-76.57259037601649,
							42.29304346117321,
							0
						],
						[
							-76.57277337605207,
							42.29272946110753,
							0
						],
						[
							-76.57301637610095,
							42.29233446102437,
							0
						],
						[
							-76.57318437613313,
							42.29203946096281,
							0
						],
						[
							-76.57360837622163,
							42.29139446082593,
							0
						],
						[
							-76.57396637629961,
							42.29089446071865,
							0
						],
						[
							-76.57418637635006,
							42.29062146065909,
							0
						],
						[
							-76.57445737641441,
							42.29031546059132,
							0
						],
						[
							-76.57483137650179,
							42.28987346049413,
							0
						],
						[
							-76.57492837652288,
							42.28973746046498,
							0
						],
						[
							-76.57509937655998,
							42.28949646041332,
							0
						],
						[
							-76.57520737658159,
							42.2893194603761,
							0
						],
						[
							-76.57532637660634,
							42.28913746033747,
							0
						],
						[
							-76.57540137662002,
							42.28899646030827,
							0
						],
						[
							-76.57561737666391,
							42.2886514602355,
							0
						],
						[
							-76.57580437670511,
							42.28839646018061,
							0
						],
						[
							-76.57595937674009,
							42.2881964601372,
							0
						],
						[
							-76.57618937679571,
							42.28795046008223,
							0
						],
						[
							-76.57635137683388,
							42.28776346004096,
							0
						],
						[
							-76.57650637687179,
							42.287603460005,
							0
						],
						[
							-76.57658437689209,
							42.28753945998997,
							0
						],
						[
							-76.57670437692414,
							42.28745245996897,
							0
						],
						[
							-76.57692637698247,
							42.28727845992768,
							0
						],
						[
							-76.57716537704215,
							42.28704845987531,
							0
						],
						[
							-76.57736237708825,
							42.28681645982427,
							0
						],
						[
							-76.5776743771525,
							42.28633045972143,
							0
						],
						[
							-76.57771137715835,
							42.28624845970471,
							0
						],
						[
							-76.5777793771583,
							42.28595045964664,
							0
						],
						[
							-76.5778173771539,
							42.28572445960315,
							0
						],
						[
							-76.57785937715423,
							42.2855454595682,
							0
						],
						[
							-76.57792437716176,
							42.28536445953198,
							0
						],
						[
							-76.57804237718027,
							42.28510145947838,
							0
						],
						[
							-76.57836137724048,
							42.28452945935928,
							0
						],
						[
							-76.5785213772688,
							42.2842164592947,
							0
						],
						[
							-76.57872937731011,
							42.28387145922223,
							0
						],
						[
							-76.57902637737809,
							42.28350145914153,
							0
						],
						[
							-76.57919937741056,
							42.28318845907643,
							0
						],
						[
							-76.5793143774347,
							42.28301545903965,
							0
						],
						[
							-76.5793913774494,
							42.28287945901129,
							0
						],
						[
							-76.57946537746152,
							42.28272145897895,
							0
						],
						[
							-76.57949137746081,
							42.28259845895506,
							0
						],
						[
							-76.5713563748353,
							42.28232245923262,
							0
						],
						[
							-76.57120037478505,
							42.28231845923817,
							0
						],
						[
							-76.56179937175087,
							42.28200045955897,
							0
						],
						[
							-76.56160337168765,
							42.28199445956575,
							0
						],
						[
							-76.56152137166131,
							42.28199345956888,
							0
						],
						[
							-76.55302736893326,
							42.28189045989281,
							0
						],
						[
							-76.54893136761766,
							42.28184046004893,
							0
						],
						[
							-76.54495336634004,
							42.2817934602008,
							0
						],
						[
							-76.54239836552077,
							42.28178146030174,
							0
						],
						[
							-76.54122336514287,
							42.28176046034525,
							0
						],
						[
							-76.54098136506528,
							42.28175946035484,
							0
						],
						[
							-76.53835136422315,
							42.28176346046172,
							0
						],
						[
							-76.53044936168718,
							42.28169846076853,
							0
						],
						[
							-76.53029036163603,
							42.2816954607744,
							0
						],
						[
							-76.5291463612689,
							42.28168646081888,
							0
						],
						[
							-76.52901736122752,
							42.28168546082389,
							0
						],
						[
							-76.5189673580019,
							42.28160146121371,
							0
						],
						[
							-76.51879135794539,
							42.28159946122043,
							0
						],
						[
							-76.51492235670133,
							42.28153646136476,
							0
						],
						[
							-76.51482035666851,
							42.28153446136848,
							0
						],
						[
							-76.51414335645075,
							42.28152246139357,
							0
						],
						[
							-76.51175835568391,
							42.28148446148268,
							0
						],
						[
							-76.50910735483156,
							42.28144246158175,
							0
						],
						[
							-76.50106835224663,
							42.28131346188182,
							0
						],
						[
							-76.50103035223447,
							42.28131346188336,
							0
						],
						[
							-76.49966335179484,
							42.28129046193418,
							0
						],
						[
							-76.49439135010384,
							42.28126446214181,
							0
						],
						[
							-76.4931353496936,
							42.28115746217254,
							0
						],
						[
							-76.49304534966551,
							42.281167462178,
							0
						],
						[
							-76.49299134964872,
							42.28117446218148,
							0
						],
						[
							-76.49295934965232,
							42.28136446221807,
							0
						],
						[
							-76.4929203496481,
							42.28147746224065,
							0
						],
						[
							-76.49284634963526,
							42.2816264622713,
							0
						],
						[
							-76.49231434953577,
							42.28259746247312,
							0
						],
						[
							-76.49214534950414,
							42.28290546253716,
							0
						],
						[
							-76.49207834949063,
							42.2830144625601,
							0
						],
						[
							-76.49199634947138,
							42.28311046258123,
							0
						],
						[
							-76.49188734944508,
							42.28322846260755,
							0
						],
						[
							-76.49176134941247,
							42.2833344626323,
							0
						],
						[
							-76.49162134937461,
							42.2834304626558,
							0
						],
						[
							-76.49146934933196,
							42.28351346267734,
							0
						],
						[
							-76.49128634927946,
							42.28359746270032,
							0
						],
						[
							-76.49120834925654,
							42.28362546270866,
							0
						],
						[
							-76.4907643491242,
							42.28376146275181,
							0
						],
						[
							-76.49032634899511,
							42.28391546279806,
							0
						],
						[
							-76.4900613489187,
							42.2840314628303,
							0
						],
						[
							-76.48998734889769,
							42.28406846284014,
							0
						],
						[
							-76.48987534886656,
							42.28413346285672,
							0
						],
						[
							-76.49020134899335,
							42.28443946290044,
							0
						],
						[
							-76.49049034908633,
							42.28444446288972,
							0
						],
						[
							-76.49102834925161,
							42.28434746285004,
							0
						],
						[
							-76.49129034933901,
							42.28439446284821,
							0
						],
						[
							-76.49256434979002,
							42.28498046290574,
							0
						],
						[
							-76.49257934979526,
							42.28498646290625,
							0
						],
						[
							-76.4937823502193,
							42.28551446295586,
							0
						],
						[
							-76.49445435045142,
							42.28574446297149,
							0
						],
						[
							-76.49471235054497,
							42.28589346298877,
							0
						],
						[
							-76.49481635058713,
							42.28601446300705,
							0
						],
						[
							-76.4952453507689,
							42.28662046310232,
							0
						],
						[
							-76.49529835079538,
							42.28675046312433,
							0
						],
						[
							-76.49531435081036,
							42.28688546314876,
							0
						],
						[
							-76.49532235082542,
							42.28705646318021,
							0
						],
						[
							-76.49530835083381,
							42.28723246321346,
							0
						],
						[
							-76.49524935082646,
							42.28739046324521,
							0
						],
						[
							-76.49509435079806,
							42.2876814633055,
							0
						],
						[
							-76.49495335077569,
							42.28799346336913,
							0
						],
						[
							-76.4948483507672,
							42.28833746343724,
							0
						],
						[
							-76.49480535079063,
							42.28884646353352,
							0
						],
						[
							-76.4947373507877,
							42.2891044635842,
							0
						],
						[
							-76.49467735078069,
							42.28927146361762,
							0
						],
						[
							-76.49462535077922,
							42.28947946365837,
							0
						],
						[
							-76.49458135078524,
							42.28975446371121,
							0
						],
						[
							-76.4945553507941,
							42.2899894637559,
							0
						],
						[
							-76.49414835078089,
							42.29159246407003,
							0
						],
						[
							-76.49406035078376,
							42.29201746415251,
							0
						],
						[
							-76.49396235080083,
							42.29268046427957,
							0
						],
						[
							-76.49381135087113,
							42.29430346458709,
							0
						],
						[
							-76.49377535087875,
							42.2945654646372,
							0
						],
						[
							-76.49371935087761,
							42.29479546468216,
							0
						],
						[
							-76.49363135086595,
							42.29502146472768,
							0
						],
						[
							-76.4935323508495,
							42.29523046477048,
							0
						],
						[
							-76.49326435082148,
							42.29602146492817,
							0
						],
						[
							-76.49308335079492,
							42.29645146501532,
							0
						],
						[
							-76.49295135079892,
							42.29708446513818,
							0
						],
						[
							-76.49286235079914,
							42.29747746521476,
							0
						],
						[
							-76.4928063508013,
							42.29775246526809,
							0
						],
						[
							-76.49275435083247,
							42.29840646539163,
							0
						],
						[
							-76.49271735084795,
							42.29878046546257,
							0
						],
						[
							-76.49271235088625,
							42.29932546556395,
							0
						],
						[
							-76.4927163509333,
							42.29995146568004,
							0
						],
						[
							-76.49270935094911,
							42.3001984657262,
							0
						],
						[
							-76.49283035107247,
							42.30135446593595,
							0
						],
						[
							-76.49283035114166,
							42.30230046611161,
							0
						],
						[
							-76.4928483511688,
							42.3025924661651,
							0
						],
						[
							-76.4929093512097,
							42.30288446621685,
							0
						],
						[
							-76.49301035126307,
							42.30317146626608,
							0
						],
						[
							-76.49361135154537,
							42.30439746646947,
							0
						],
						[
							-76.4936223515641,
							42.30460546650764,
							0
						],
						[
							-76.49362935157711,
							42.30475246653464,
							0
						],
						[
							-76.49356335164266,
							42.30593746675734,
							0
						],
						[
							-76.49344435165276,
							42.30659646688446,
							0
						],
						[
							-76.49325235165335,
							42.30744546704983,
							0
						],
						[
							-76.49317735166926,
							42.3079914671542,
							0
						],
						[
							-76.49315635168236,
							42.30826246720535,
							0
						],
						[
							-76.49311035169434,
							42.30862746727498,
							0
						],
						[
							-76.49310835171478,
							42.30891546732852,
							0
						],
						[
							-76.49312335177302,
							42.30964546746343,
							0
						],
						[
							-76.49309035187544,
							42.31118946775137,
							0
						],
						[
							-76.49313735190432,
							42.31137846778456,
							0
						],
						[
							-76.49329035197563,
							42.31168246783482,
							0
						],
						[
							-76.49357835212068,
							42.31240346795705,
							0
						],
						[
							-76.49364935215202,
							42.3125204679759,
							0
						],
						[
							-76.49373935218898,
							42.31263146799287,
							0
						],
						[
							-76.49384535223079,
							42.31273846800846,
							0
						],
						[
							-76.49396535227635,
							42.31283546802163,
							0
						],
						[
							-76.49466435253329,
							42.31328546807696,
							0
						],
						[
							-76.49483535259785,
							42.31341846809475,
							0
						],
						[
							-76.49496635265652,
							42.31364646813181,
							0
						],
						[
							-76.49497335267428,
							42.31385846817086,
							0
						],
						[
							-76.49487835271711,
							42.3148594683605,
							0
						],
						[
							-76.49493635278807,
							42.31557446849086,
							0
						],
						[
							-76.49500935285195,
							42.31612746859057,
							0
						],
						[
							-76.49502735287844,
							42.31641046864236,
							0
						],
						[
							-76.49503035292129,
							42.31698246874841,
							0
						],
						[
							-76.49505435293887,
							42.31711746877248,
							0
						],
						[
							-76.49509735296216,
							42.31724746879488,
							0
						],
						[
							-76.49535935308312,
							42.31775246887803,
							0
						],
						[
							-76.49538535310292,
							42.31790946890612,
							0
						],
						[
							-76.49536835310906,
							42.31806746893614,
							0
						],
						[
							-76.49530635310016,
							42.31821746896647,
							0
						],
						[
							-76.49525235309378,
							42.31836646899631,
							0
						],
						[
							-76.49521335308398,
							42.31840346900474,
							0
						],
						[
							-76.49514935306875,
							42.3184754690207,
							0
						],
						[
							-76.49511635306185,
							42.31852546903129,
							0
						],
						[
							-76.49509435305815,
							42.31857146904073,
							0
						],
						[
							-76.49507935305863,
							42.31864346905469,
							0
						],
						[
							-76.49507435306265,
							42.31872046906918,
							0
						],
						[
							-76.49507935306946,
							42.31879146908216,
							0
						],
						[
							-76.49509535307986,
							42.31886346909489,
							0
						],
						[
							-76.49512035309313,
							42.31893546910722,
							0
						],
						[
							-76.49515635310959,
							42.31900246911821,
							0
						],
						[
							-76.49520035312831,
							42.31906546912813,
							0
						],
						[
							-76.49525435315014,
							42.31912746913747,
							0
						],
						[
							-76.49543835322083,
							42.31928746915972,
							0
						],
						[
							-76.49553535325873,
							42.31938046917307,
							0
						],
						[
							-76.49563235329795,
							42.31949146918976,
							0
						],
						[
							-76.49572835333956,
							42.31963946921336,
							0
						],
						[
							-76.49588235340856,
							42.31990746925689,
							0
						],
						[
							-76.49609535350166,
							42.32024646931119,
							0
						],
						[
							-76.4965453536959,
							42.3209294694198,
							0
						],
						[
							-76.49686435382853,
							42.32134446948395,
							0
						],
						[
							-76.49752635409118,
							42.32203346958509,
							0
						],
						[
							-76.49780435420708,
							42.3223994696418,
							0
						],
						[
							-76.49799035428859,
							42.32269846968979,
							0
						],
						[
							-76.49812935435145,
							42.32294846973056,
							0
						],
						[
							-76.49828735443037,
							42.32333446979584,
							0
						],
						[
							-76.49839535449583,
							42.32375546986958,
							0
						],
						[
							-76.49855835463899,
							42.32499647009328,
							0
						],
						[
							-76.49856435464854,
							42.32510047011233,
							0
						],
						[
							-76.49855435465454,
							42.32522647013613,
							0
						],
						[
							-76.49852635465483,
							42.32535247016062,
							0
						],
						[
							-76.49847935464906,
							42.3254794701861,
							0
						],
						[
							-76.49841635463751,
							42.32559747021053,
							0
						],
						[
							-76.49825535460423,
							42.32584747026341,
							0
						],
						[
							-76.49798535454693,
							42.32624647034835,
							0
						],
						[
							-76.49794835454006,
							42.32631447036246,
							0
						],
						[
							-76.5002103552715,
							42.32640247028753,
							0
						],
						[
							-76.5006663554192,
							42.326423470273,
							0
						],
						[
							-76.50119935558979,
							42.32642047025096,
							0
						],
						[
							-76.50143735566718,
							42.32643547024413,
							0
						],
						[
							-76.50153535570011,
							42.32645647024407,
							0
						],
						[
							-76.50163035573247,
							42.32648247024504,
							0
						],
						[
							-76.5017213557642,
							42.32651747024788,
							0
						],
						[
							-76.5018073557947,
							42.32655747025184,
							0
						],
						[
							-76.50188635582323,
							42.3266014702568,
							0
						],
						[
							-76.50200535586755,
							42.3266854702676,
							0
						],
						[
							-76.50332735636783,
							42.32773047040814,
							0
						],
						[
							-76.50337835638675,
							42.32776547041257,
							0
						],
						[
							-76.50349235643178,
							42.3278814704295,
							0
						],
						[
							-76.50353635645044,
							42.32794347043922,
							0
						],
						[
							-76.50357135646657,
							42.32801047045024,
							0
						],
						[
							-76.50359735647987,
							42.3280784704618,
							0
						],
						[
							-76.50361335649019,
							42.32814947047432,
							0
						],
						[
							-76.50361735649882,
							42.32824947049272,
							0
						],
						[
							-76.50360235653133,
							42.32875847058777,
							0
						],
						[
							-76.5036253565908,
							42.32946947071874,
							0
						],
						[
							-76.50363935664346,
							42.33012647084007,
							0
						],
						[
							-76.50356935677291,
							42.33219847122729,
							0
						],
						[
							-76.50351335683656,
							42.33331147143603,
							0
						],
						[
							-76.50342135690657,
							42.33466847169147,
							0
						],
						[
							-76.50337835696509,
							42.33565447187611,
							0
						],
						[
							-76.50329935701552,
							42.3366874720709,
							0
						],
						[
							-76.50325835706514,
							42.33754347223134,
							0
						],
						[
							-76.50324135717426,
							42.33910547252174,
							0
						],
						[
							-76.50319135721162,
							42.33983347265879,
							0
						],
						[
							-76.50313335725568,
							42.34068747281953,
							0
						],
						[
							-76.50313135734064,
							42.34185447303605,
							0
						],
						[
							-76.50313935735112,
							42.34196247305576,
							0
						],
						[
							-76.50316835736994,
							42.34209247307869,
							0
						],
						[
							-76.50321535739455,
							42.3422224731009,
							0
						],
						[
							-76.50328135742487,
							42.34234747312144,
							0
						],
						[
							-76.50337935746641,
							42.34248547314306,
							0
						],
						[
							-76.50392535768582,
							42.34309047323323,
							0
						],
						[
							-76.50471235799913,
							42.34392247335575,
							0
						],
						[
							-76.50482035804453,
							42.34406947337865,
							0
						],
						[
							-76.50490835808388,
							42.34422147340329,
							0
						],
						[
							-76.50497335811653,
							42.34438247343051,
							0
						],
						[
							-76.50511035819999,
							42.34492147352495,
							0
						],
						[
							-76.50521235826892,
							42.34541547361245,
							0
						],
						[
							-76.50522835829358,
							42.34568147366112,
							0
						],
						[
							-76.50524735832207,
							42.34598647371691,
							0
						],
						[
							-76.50525535836064,
							42.34647747380765,
							0
						],
						[
							-76.50526135840718,
							42.34708547392015,
							0
						],
						[
							-76.5052603584194,
							42.3472564739519,
							0
						],
						[
							-76.50528235849222,
							42.34815247411716,
							0
						],
						[
							-76.50537235857448,
							42.34888047424852,
							0
						],
						[
							-76.50555135872062,
							42.35008947446546,
							0
						],
						[
							-76.505632358808,
							42.3509264746174,
							0
						],
						[
							-76.50590835920457,
							42.3551234753844,
							0
						],
						[
							-76.50602435937884,
							42.35699047572584,
							0
						],
						[
							-76.50613435952975,
							42.35856547601338,
							0
						],
						[
							-76.5076483600168,
							42.35858847595647,
							0
						],
						[
							-76.50879236038479,
							42.35860547591342,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090018001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>61586962</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>258586</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.3245182</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5334048</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090018001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090018001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>2370</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>808</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>15218.45</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>13.14</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.93</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27470</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27132</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28444</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14821</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14481</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15369</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8582</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8315</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8905</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6229</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6153</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6450</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>11</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.05</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1645</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2538</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>177</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3556</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1300</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1390</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>828</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>84</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00007"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.5076483600168,
							42.35858847595647,
							0
						],
						[
							-76.50613435952975,
							42.35856547601338,
							0
						],
						[
							-76.50602435937884,
							42.35699047572584,
							0
						],
						[
							-76.50590835920457,
							42.3551234753844,
							0
						],
						[
							-76.505632358808,
							42.3509264746174,
							0
						],
						[
							-76.50555135872062,
							42.35008947446546,
							0
						],
						[
							-76.50537235857448,
							42.34888047424852,
							0
						],
						[
							-76.50528235849222,
							42.34815247411716,
							0
						],
						[
							-76.5052603584194,
							42.3472564739519,
							0
						],
						[
							-76.50526135840718,
							42.34708547392015,
							0
						],
						[
							-76.50525535836064,
							42.34647747380765,
							0
						],
						[
							-76.50524735832207,
							42.34598647371691,
							0
						],
						[
							-76.50522835829358,
							42.34568147366112,
							0
						],
						[
							-76.50521235826892,
							42.34541547361245,
							0
						],
						[
							-76.50511035819999,
							42.34492147352495,
							0
						],
						[
							-76.50497335811653,
							42.34438247343051,
							0
						],
						[
							-76.50490835808388,
							42.34422147340329,
							0
						],
						[
							-76.50482035804453,
							42.34406947337865,
							0
						],
						[
							-76.50471235799913,
							42.34392247335575,
							0
						],
						[
							-76.50392535768582,
							42.34309047323323,
							0
						],
						[
							-76.50337935746641,
							42.34248547314306,
							0
						],
						[
							-76.50328135742487,
							42.34234747312144,
							0
						],
						[
							-76.50321535739455,
							42.3422224731009,
							0
						],
						[
							-76.50316835736994,
							42.34209247307869,
							0
						],
						[
							-76.50313935735112,
							42.34196247305576,
							0
						],
						[
							-76.50313135734064,
							42.34185447303605,
							0
						],
						[
							-76.50313335725568,
							42.34068747281953,
							0
						],
						[
							-76.50319135721162,
							42.33983347265879,
							0
						],
						[
							-76.50324135717426,
							42.33910547252174,
							0
						],
						[
							-76.50325835706514,
							42.33754347223134,
							0
						],
						[
							-76.50329935701552,
							42.3366874720709,
							0
						],
						[
							-76.50337835696509,
							42.33565447187611,
							0
						],
						[
							-76.50342135690657,
							42.33466847169147,
							0
						],
						[
							-76.50351335683656,
							42.33331147143603,
							0
						],
						[
							-76.50356935677291,
							42.33219847122729,
							0
						],
						[
							-76.50363935664346,
							42.33012647084007,
							0
						],
						[
							-76.5036253565908,
							42.32946947071874,
							0
						],
						[
							-76.50360235653133,
							42.32875847058777,
							0
						],
						[
							-76.50361735649882,
							42.32824947049272,
							0
						],
						[
							-76.50361335649019,
							42.32814947047432,
							0
						],
						[
							-76.50359735647987,
							42.3280784704618,
							0
						],
						[
							-76.50357135646657,
							42.32801047045024,
							0
						],
						[
							-76.50353635645044,
							42.32794347043922,
							0
						],
						[
							-76.50349235643178,
							42.3278814704295,
							0
						],
						[
							-76.50337835638675,
							42.32776547041257,
							0
						],
						[
							-76.50332735636783,
							42.32773047040814,
							0
						],
						[
							-76.50200535586755,
							42.3266854702676,
							0
						],
						[
							-76.50188635582323,
							42.3266014702568,
							0
						],
						[
							-76.5018073557947,
							42.32655747025184,
							0
						],
						[
							-76.5017213557642,
							42.32651747024788,
							0
						],
						[
							-76.50163035573247,
							42.32648247024504,
							0
						],
						[
							-76.50153535570011,
							42.32645647024407,
							0
						],
						[
							-76.50143735566718,
							42.32643547024413,
							0
						],
						[
							-76.50119935558979,
							42.32642047025096,
							0
						],
						[
							-76.5006663554192,
							42.326423470273,
							0
						],
						[
							-76.5002103552715,
							42.32640247028753,
							0
						],
						[
							-76.49794835454006,
							42.32631447036246,
							0
						],
						[
							-76.49798535454693,
							42.32624647034835,
							0
						],
						[
							-76.49825535460423,
							42.32584747026341,
							0
						],
						[
							-76.49841635463751,
							42.32559747021053,
							0
						],
						[
							-76.49847935464906,
							42.3254794701861,
							0
						],
						[
							-76.49852635465483,
							42.32535247016062,
							0
						],
						[
							-76.49855435465454,
							42.32522647013613,
							0
						],
						[
							-76.49856435464854,
							42.32510047011233,
							0
						],
						[
							-76.49855835463899,
							42.32499647009328,
							0
						],
						[
							-76.49839535449583,
							42.32375546986958,
							0
						],
						[
							-76.49828735443037,
							42.32333446979584,
							0
						],
						[
							-76.49812935435145,
							42.32294846973056,
							0
						],
						[
							-76.49799035428859,
							42.32269846968979,
							0
						],
						[
							-76.49780435420708,
							42.3223994696418,
							0
						],
						[
							-76.49752635409118,
							42.32203346958509,
							0
						],
						[
							-76.49686435382853,
							42.32134446948395,
							0
						],
						[
							-76.4965453536959,
							42.3209294694198,
							0
						],
						[
							-76.49609535350166,
							42.32024646931119,
							0
						],
						[
							-76.49588235340856,
							42.31990746925689,
							0
						],
						[
							-76.49572835333956,
							42.31963946921336,
							0
						],
						[
							-76.49563235329795,
							42.31949146918976,
							0
						],
						[
							-76.49553535325873,
							42.31938046917307,
							0
						],
						[
							-76.49543835322083,
							42.31928746915972,
							0
						],
						[
							-76.49525435315014,
							42.31912746913747,
							0
						],
						[
							-76.49520035312831,
							42.31906546912813,
							0
						],
						[
							-76.49515635310959,
							42.31900246911821,
							0
						],
						[
							-76.49512035309313,
							42.31893546910722,
							0
						],
						[
							-76.49509535307986,
							42.31886346909489,
							0
						],
						[
							-76.49507935306946,
							42.31879146908216,
							0
						],
						[
							-76.49507435306265,
							42.31872046906918,
							0
						],
						[
							-76.49507935305863,
							42.31864346905469,
							0
						],
						[
							-76.49509435305815,
							42.31857146904073,
							0
						],
						[
							-76.49511635306185,
							42.31852546903129,
							0
						],
						[
							-76.49514935306875,
							42.3184754690207,
							0
						],
						[
							-76.49521335308398,
							42.31840346900474,
							0
						],
						[
							-76.49525235309378,
							42.31836646899631,
							0
						],
						[
							-76.49530635310016,
							42.31821746896647,
							0
						],
						[
							-76.49536835310906,
							42.31806746893614,
							0
						],
						[
							-76.49538535310292,
							42.31790946890612,
							0
						],
						[
							-76.49535935308312,
							42.31775246887803,
							0
						],
						[
							-76.49509735296216,
							42.31724746879488,
							0
						],
						[
							-76.49505435293887,
							42.31711746877248,
							0
						],
						[
							-76.49503035292129,
							42.31698246874841,
							0
						],
						[
							-76.49502735287844,
							42.31641046864236,
							0
						],
						[
							-76.49500935285195,
							42.31612746859057,
							0
						],
						[
							-76.49493635278807,
							42.31557446849086,
							0
						],
						[
							-76.49487835271711,
							42.3148594683605,
							0
						],
						[
							-76.49497335267428,
							42.31385846817086,
							0
						],
						[
							-76.49496635265652,
							42.31364646813181,
							0
						],
						[
							-76.49483535259785,
							42.31341846809475,
							0
						],
						[
							-76.49466435253329,
							42.31328546807696,
							0
						],
						[
							-76.49396535227635,
							42.31283546802163,
							0
						],
						[
							-76.49384535223079,
							42.31273846800846,
							0
						],
						[
							-76.49373935218898,
							42.31263146799287,
							0
						],
						[
							-76.49364935215202,
							42.3125204679759,
							0
						],
						[
							-76.49357835212068,
							42.31240346795705,
							0
						],
						[
							-76.49329035197563,
							42.31168246783482,
							0
						],
						[
							-76.49313735190432,
							42.31137846778456,
							0
						],
						[
							-76.49309035187544,
							42.31118946775137,
							0
						],
						[
							-76.49312335177302,
							42.30964546746343,
							0
						],
						[
							-76.49310835171478,
							42.30891546732852,
							0
						],
						[
							-76.49311035169434,
							42.30862746727498,
							0
						],
						[
							-76.49315635168236,
							42.30826246720535,
							0
						],
						[
							-76.49317735166926,
							42.3079914671542,
							0
						],
						[
							-76.49325235165335,
							42.30744546704983,
							0
						],
						[
							-76.49344435165276,
							42.30659646688446,
							0
						],
						[
							-76.49356335164266,
							42.30593746675734,
							0
						],
						[
							-76.49362935157711,
							42.30475246653464,
							0
						],
						[
							-76.4936223515641,
							42.30460546650764,
							0
						],
						[
							-76.49361135154537,
							42.30439746646947,
							0
						],
						[
							-76.49301035126307,
							42.30317146626608,
							0
						],
						[
							-76.4929093512097,
							42.30288446621685,
							0
						],
						[
							-76.4928483511688,
							42.3025924661651,
							0
						],
						[
							-76.49283035114166,
							42.30230046611161,
							0
						],
						[
							-76.49283035107247,
							42.30135446593595,
							0
						],
						[
							-76.49270935094911,
							42.3001984657262,
							0
						],
						[
							-76.4927163509333,
							42.29995146568004,
							0
						],
						[
							-76.49271235088625,
							42.29932546556395,
							0
						],
						[
							-76.49271735084795,
							42.29878046546257,
							0
						],
						[
							-76.49275435083247,
							42.29840646539163,
							0
						],
						[
							-76.4928063508013,
							42.29775246526809,
							0
						],
						[
							-76.49286235079914,
							42.29747746521476,
							0
						],
						[
							-76.49295135079892,
							42.29708446513818,
							0
						],
						[
							-76.49308335079492,
							42.29645146501532,
							0
						],
						[
							-76.49326435082148,
							42.29602146492817,
							0
						],
						[
							-76.4935323508495,
							42.29523046477048,
							0
						],
						[
							-76.49363135086595,
							42.29502146472768,
							0
						],
						[
							-76.49371935087761,
							42.29479546468216,
							0
						],
						[
							-76.49377535087875,
							42.2945654646372,
							0
						],
						[
							-76.49381135087113,
							42.29430346458709,
							0
						],
						[
							-76.49396235080083,
							42.29268046427957,
							0
						],
						[
							-76.49406035078376,
							42.29201746415251,
							0
						],
						[
							-76.49414835078089,
							42.29159246407003,
							0
						],
						[
							-76.4945553507941,
							42.2899894637559,
							0
						],
						[
							-76.49458135078524,
							42.28975446371121,
							0
						],
						[
							-76.49462535077922,
							42.28947946365837,
							0
						],
						[
							-76.49467735078069,
							42.28927146361762,
							0
						],
						[
							-76.4947373507877,
							42.2891044635842,
							0
						],
						[
							-76.49480535079063,
							42.28884646353352,
							0
						],
						[
							-76.4948483507672,
							42.28833746343724,
							0
						],
						[
							-76.49495335077569,
							42.28799346336913,
							0
						],
						[
							-76.49509435079806,
							42.2876814633055,
							0
						],
						[
							-76.49524935082646,
							42.28739046324521,
							0
						],
						[
							-76.49530835083381,
							42.28723246321346,
							0
						],
						[
							-76.49532235082542,
							42.28705646318021,
							0
						],
						[
							-76.49531435081036,
							42.28688546314876,
							0
						],
						[
							-76.49529835079538,
							42.28675046312433,
							0
						],
						[
							-76.4952453507689,
							42.28662046310232,
							0
						],
						[
							-76.49481635058713,
							42.28601446300705,
							0
						],
						[
							-76.49471235054497,
							42.28589346298877,
							0
						],
						[
							-76.49445435045142,
							42.28574446297149,
							0
						],
						[
							-76.4937823502193,
							42.28551446295586,
							0
						],
						[
							-76.49257934979526,
							42.28498646290625,
							0
						],
						[
							-76.49256434979002,
							42.28498046290574,
							0
						],
						[
							-76.49129034933901,
							42.28439446284821,
							0
						],
						[
							-76.49102834925161,
							42.28434746285004,
							0
						],
						[
							-76.49049034908633,
							42.28444446288972,
							0
						],
						[
							-76.49020134899335,
							42.28443946290044,
							0
						],
						[
							-76.48987534886656,
							42.28413346285672,
							0
						],
						[
							-76.48998734889769,
							42.28406846284014,
							0
						],
						[
							-76.4900613489187,
							42.2840314628303,
							0
						],
						[
							-76.49032634899511,
							42.28391546279806,
							0
						],
						[
							-76.4907643491242,
							42.28376146275181,
							0
						],
						[
							-76.49120834925654,
							42.28362546270866,
							0
						],
						[
							-76.49128634927946,
							42.28359746270032,
							0
						],
						[
							-76.49146934933196,
							42.28351346267734,
							0
						],
						[
							-76.49162134937461,
							42.2834304626558,
							0
						],
						[
							-76.49176134941247,
							42.2833344626323,
							0
						],
						[
							-76.49188734944508,
							42.28322846260755,
							0
						],
						[
							-76.49199634947138,
							42.28311046258123,
							0
						],
						[
							-76.49207834949063,
							42.2830144625601,
							0
						],
						[
							-76.49214534950414,
							42.28290546253716,
							0
						],
						[
							-76.49231434953577,
							42.28259746247312,
							0
						],
						[
							-76.49284634963526,
							42.2816264622713,
							0
						],
						[
							-76.4929203496481,
							42.28147746224065,
							0
						],
						[
							-76.49295934965232,
							42.28136446221807,
							0
						],
						[
							-76.49299134964872,
							42.28117446218148,
							0
						],
						[
							-76.49212334937792,
							42.28127446223504,
							0
						],
						[
							-76.49185334929149,
							42.28127546224611,
							0
						],
						[
							-76.48667734763484,
							42.28129946245907,
							0
						],
						[
							-76.48180134605983,
							42.28112546262315,
							0
						],
						[
							-76.48002734548687,
							42.28106346268308,
							0
						],
						[
							-76.47493834386094,
							42.28112746289988,
							0
						],
						[
							-76.47493034385838,
							42.28112746290021,
							0
						],
						[
							-76.4739643435498,
							42.28114046294152,
							0
						],
						[
							-76.47414434317027,
							42.27515146182144,
							0
						],
						[
							-76.47449634245255,
							42.26376945969185,
							0
						],
						[
							-76.47003934102045,
							42.26371245986062,
							0
						],
						[
							-76.46724234012162,
							42.26367545996627,
							0
						],
						[
							-76.462867338714,
							42.26359446012722,
							0
						],
						[
							-76.45887433742932,
							42.26352146027427,
							0
						],
						[
							-76.45534333629476,
							42.2634774604081,
							0
						],
						[
							-76.44506233299137,
							42.26335146079804,
							0
						],
						[
							-76.44193333198598,
							42.26331346091674,
							0
						],
						[
							-76.43929633113837,
							42.26327746101605,
							0
						],
						[
							-76.43270032901812,
							42.26318646126418,
							0
						],
						[
							-76.42437032634123,
							42.26308346157968,
							0
						],
						[
							-76.42244932572397,
							42.26306046165256,
							0
						],
						[
							-76.41620132371614,
							42.26298446188935,
							0
						],
						[
							-76.41607232433032,
							42.27198946356881,
							0
						],
						[
							-76.41602632449145,
							42.27440446401959,
							0
						],
						[
							-76.41602332450032,
							42.27453946404481,
							0
						],
						[
							-76.41602332450067,
							42.27454446404575,
							0
						],
						[
							-76.41602032450947,
							42.27467846407077,
							0
						],
						[
							-76.41595132475541,
							42.27835846475759,
							0
						],
						[
							-76.41573732528177,
							42.28652446628386,
							0
						],
						[
							-76.41568232541967,
							42.28865846668262,
							0
						],
						[
							-76.41565832565325,
							42.29196846729863,
							0
						],
						[
							-76.41557132610045,
							42.29848446851272,
							0
						],
						[
							-76.41547732658827,
							42.30558546983555,
							0
						],
						[
							-76.41530732746732,
							42.31837647221776,
							0
						],
						[
							-76.41524532744741,
							42.31837647222024,
							0
						],
						[
							-76.41009932579985,
							42.31840947243331,
							0
						],
						[
							-76.40908632547557,
							42.3184164724753,
							0
						],
						[
							-76.4092623255474,
							42.31862747250742,
							0
						],
						[
							-76.40949732564128,
							42.31888147254513,
							0
						],
						[
							-76.40979532575595,
							42.3191434725818,
							0
						],
						[
							-76.4101293258805,
							42.31938247261274,
							0
						],
						[
							-76.41057432604151,
							42.31963347264146,
							0
						],
						[
							-76.41345432707212,
							42.32110147279822,
							0
						],
						[
							-76.4137263271703,
							42.32125147281512,
							0
						],
						[
							-76.4139753272624,
							42.32141947283631,
							0
						],
						[
							-76.41409632730799,
							42.32151247284872,
							0
						],
						[
							-76.41525532774759,
							42.32244347297494,
							0
						],
						[
							-76.41601132803608,
							42.32307447306168,
							0
						],
						[
							-76.41669132829617,
							42.32365047314127,
							0
						],
						[
							-76.41738732856251,
							42.32424147322301,
							0
						],
						[
							-76.41837732893795,
							42.32503547333057,
							0
						],
						[
							-76.41923832925566,
							42.32560547340176,
							0
						],
						[
							-76.41931232928259,
							42.32564947340696,
							0
						],
						[
							-76.41977732945003,
							42.32590047343484,
							0
						],
						[
							-76.41998532952476,
							42.32601047344689,
							0
						],
						[
							-76.42005932955104,
							42.32604547345041,
							0
						],
						[
							-76.42123332996357,
							42.32653947349488,
							0
						],
						[
							-76.42205633024982,
							42.32684547351859,
							0
						],
						[
							-76.42274633048983,
							42.32710247353852,
							0
						],
						[
							-76.42302233058594,
							42.32720647354673,
							0
						],
						[
							-76.42360233078718,
							42.32741547356219,
							0
						],
						[
							-76.42429833102611,
							42.32763147357429,
							0
						],
						[
							-76.42487133122118,
							42.32778647358,
							0
						],
						[
							-76.42640233173474,
							42.32809647357595,
							0
						],
						[
							-76.42715733198433,
							42.32819947356467,
							0
						],
						[
							-76.427231332009,
							42.3282124735641,
							0
						],
						[
							-76.42934633270725,
							42.32848747353003,
							0
						],
						[
							-76.42963133280169,
							42.32852947352635,
							0
						],
						[
							-76.43074033316809,
							42.32867747350919,
							0
						],
						[
							-76.4318983335502,
							42.32882547349006,
							0
						],
						[
							-76.43221433365414,
							42.32886147348402,
							0
						],
						[
							-76.43404733426254,
							42.32914447346277,
							0
						],
						[
							-76.43899733591427,
							42.33002847342756,
							0
						],
						[
							-76.43966133613593,
							42.33014847342312,
							0
						],
						[
							-76.44066633647154,
							42.33033147341661,
							0
						],
						[
							-76.44331433735542,
							42.33080847339852,
							0
						],
						[
							-76.44438033771131,
							42.3310014733914,
							0
						],
						[
							-76.44514333796704,
							42.33115347338889,
							0
						],
						[
							-76.44584533820662,
							42.33135147339736,
							0
						],
						[
							-76.44651633843989,
							42.33159947341635,
							0
						],
						[
							-76.44714833866469,
							42.33190247344712,
							0
						],
						[
							-76.44773333887777,
							42.33225147348833,
							0
						],
						[
							-76.44831133909125,
							42.3326364735365,
							0
						],
						[
							-76.4496503395858,
							42.33352847364809,
							0
						],
						[
							-76.45060933993982,
							42.33416447372749,
							0
						],
						[
							-76.45290734078877,
							42.33569747391935,
							0
						],
						[
							-76.45476534147443,
							42.33692647407253,
							0
						],
						[
							-76.45503934157551,
							42.33710747409508,
							0
						],
						[
							-76.45650634211701,
							42.33807947421631,
							0
						],
						[
							-76.45683634223863,
							42.3382954742431,
							0
						],
						[
							-76.45763334252804,
							42.33875847429687,
							0
						],
						[
							-76.4577063425543,
							42.33879747430117,
							0
						],
						[
							-76.45849634283792,
							42.33921147434614,
							0
						],
						[
							-76.45865434289465,
							42.33929447435518,
							0
						],
						[
							-76.45869834291042,
							42.33931747435767,
							0
						],
						[
							-76.46191534406486,
							42.34099747453967,
							0
						],
						[
							-76.46430434492214,
							42.34224447467472,
							0
						],
						[
							-76.46553934536543,
							42.34289047474475,
							0
						],
						[
							-76.46659634574452,
							42.34343947480399,
							0
						],
						[
							-76.46950934678922,
							42.344951474967,
							0
						],
						[
							-76.47165734755953,
							42.34606547508699,
							0
						],
						[
							-76.47446834856784,
							42.34752647524461,
							0
						],
						[
							-76.47454234859413,
							42.34756147524813,
							0
						],
						[
							-76.47609234915097,
							42.34837847533711,
							0
						],
						[
							-76.47752234966391,
							42.34912147541724,
							0
						],
						[
							-76.47894435017392,
							42.34985947549674,
							0
						],
						[
							-76.47903435020731,
							42.34992147550462,
							0
						],
						[
							-76.47912735024168,
							42.34998347551236,
							0
						],
						[
							-76.4795883504161,
							42.35034647556106,
							0
						],
						[
							-76.47985435051964,
							42.35059547559652,
							0
						],
						[
							-76.48002535058883,
							42.35079147562597,
							0
						],
						[
							-76.48008535061393,
							42.35087147563839,
							0
						],
						[
							-76.48020535066554,
							42.35105047566673,
							0
						],
						[
							-76.4803383507262,
							42.35129647570699,
							0
						],
						[
							-76.48038335074753,
							42.35139047572259,
							0
						],
						[
							-76.48083435096994,
							42.35245147590116,
							0
						],
						[
							-76.48139735124636,
							42.35375947612097,
							0
						],
						[
							-76.48183935146591,
							42.35482047629989,
							0
						],
						[
							-76.48253435181387,
							42.35652647658818,
							0
						],
						[
							-76.4825973518423,
							42.35663847660639,
							0
						],
						[
							-76.48281835195093,
							42.35715347669296,
							0
						],
						[
							-76.48283435196133,
							42.35722547670567,
							0
						],
						[
							-76.48283535196467,
							42.35726647671325,
							0
						],
						[
							-76.48284535197214,
							42.35732447672357,
							0
						],
						[
							-76.48286435198284,
							42.35738747673449,
							0
						],
						[
							-76.48321735215649,
							42.35821147687302,
							0
						],
						[
							-76.48330035219651,
							42.3583944769036,
							0
						],
						[
							-76.48365435237376,
							42.35926347705042,
							0
						],
						[
							-76.48390935249927,
							42.35985947715064,
							0
						],
						[
							-76.48442535275635,
							42.36110847736136,
							0
						],
						[
							-76.48452135280445,
							42.36134447740125,
							0
						],
						[
							-76.4848373529628,
							42.36212147753253,
							0
						],
						[
							-76.4853423532158,
							42.36336247774221,
							0
						],
						[
							-76.48568535338758,
							42.36420447788445,
							0
						],
						[
							-76.4864773537832,
							42.36613447821022,
							0
						],
						[
							-76.48649935379422,
							42.36618847821936,
							0
						],
						[
							-76.4868183539669,
							42.36714747838423,
							0
						],
						[
							-76.48692135402864,
							42.36753847845253,
							0
						],
						[
							-76.4869543540484,
							42.36766347847439,
							0
						],
						[
							-76.48699135407053,
							42.36780347849884,
							0
						],
						[
							-76.48729335424505,
							42.36886147868275,
							0
						],
						[
							-76.48783035453737,
							42.37049747896428,
							0
						],
						[
							-76.48854635492704,
							42.37267747933941,
							0
						],
						[
							-76.48885735509575,
							42.37361647950087,
							0
						],
						[
							-76.4899893557093,
							42.37702748008724,
							0
						],
						[
							-76.49076435613031,
							42.37937548049104,
							0
						],
						[
							-76.49102235627271,
							42.38018748063107,
							0
						],
						[
							-76.49130335641514,
							42.38089948075163,
							0
						],
						[
							-76.49139035645261,
							42.38102948077222,
							0
						],
						[
							-76.4916243565671,
							42.38156648086226,
							0
						],
						[
							-76.49192835671862,
							42.38230148098617,
							0
						],
						[
							-76.49220935685179,
							42.38288748108337,
							0
						],
						[
							-76.49246535697336,
							42.38342448117253,
							0
						],
						[
							-76.493913357663,
							42.38648948168184,
							0
						],
						[
							-76.49464635801195,
							42.38803848193918,
							0
						],
						[
							-76.49559835846533,
							42.39005248227379,
							0
						],
						[
							-76.49575435854037,
							42.39039248233049,
							0
						],
						[
							-76.49584535857971,
							42.39053048235235,
							0
						],
						[
							-76.49597535864147,
							42.39080348239767,
							0
						],
						[
							-76.49622135876118,
							42.39135848249052,
							0
						],
						[
							-76.49701335913961,
							42.39305048277191,
							0
						],
						[
							-76.4971543592069,
							42.39335048282177,
							0
						],
						[
							-76.49758735941889,
							42.39434448298837,
							0
						],
						[
							-76.49766535945413,
							42.39448348301098,
							0
						],
						[
							-76.497743359477,
							42.39445448300244,
							0
						],
						[
							-76.4977923594917,
							42.39444048299787,
							0
						],
						[
							-76.49789535952368,
							42.39442648299112,
							0
						],
						[
							-76.50007336021739,
							42.39436148289105,
							0
						],
						[
							-76.50107136053118,
							42.39427648283495,
							0
						],
						[
							-76.50151936067111,
							42.39422548280741,
							0
						],
						[
							-76.50174136074142,
							42.39421348279623,
							0
						],
						[
							-76.50196336081305,
							42.39421948278836,
							0
						],
						[
							-76.50225536090942,
							42.39425648278341,
							0
						],
						[
							-76.5030923611883,
							42.39439848277586,
							0
						],
						[
							-76.5037933614197,
							42.3944884827642,
							0
						],
						[
							-76.50460436168228,
							42.39452248273769,
							0
						],
						[
							-76.50568236202696,
							42.39450848269153,
							0
						],
						[
							-76.50613236216921,
							42.39448048266816,
							0
						],
						[
							-76.50657636230747,
							42.39442448263983,
							0
						],
						[
							-76.5068393623879,
							42.39437148261938,
							0
						],
						[
							-76.50874736297408,
							42.3940224824776,
							0
						],
						[
							-76.50896336304048,
							42.39398348246163,
							0
						],
						[
							-76.5091493630963,
							42.39393148244449,
							0
						],
						[
							-76.50932736314888,
							42.39387048242599,
							0
						],
						[
							-76.50949736319797,
							42.39379648240542,
							0
						],
						[
							-76.50962136323199,
							42.39371848238595,
							0
						],
						[
							-76.50968536324882,
							42.39366848237411,
							0
						],
						[
							-76.50974236326306,
							42.39361348236162,
							0
						],
						[
							-76.50979136327445,
							42.39355448234871,
							0
						],
						[
							-76.50983136328256,
							42.39349048233525,
							0
						],
						[
							-76.50986136328714,
							42.39342248232143,
							0
						],
						[
							-76.50988336328922,
							42.39335448230794,
							0
						],
						[
							-76.50989736328407,
							42.39322348228312,
							0
						],
						[
							-76.50990336327642,
							42.3930934822588,
							0
						],
						[
							-76.50988636325867,
							42.39292648222856,
							0
						],
						[
							-76.50986836324704,
							42.39284648221446,
							0
						],
						[
							-76.50983936323176,
							42.39276548220062,
							0
						],
						[
							-76.50974636318892,
							42.3925884821716,
							0
						],
						[
							-76.5097313631819,
							42.39255848216667,
							0
						],
						[
							-76.50959036311733,
							42.39229548212366,
							0
						],
						[
							-76.50964136313264,
							42.39228148211901,
							0
						],
						[
							-76.50971136315437,
							42.39227148211434,
							0
						],
						[
							-76.5098263631908,
							42.39226548210856,
							0
						],
						[
							-76.51000336324807,
							42.39227248210271,
							0
						],
						[
							-76.51012636328906,
							42.39229348210161,
							0
						],
						[
							-76.51019136331145,
							42.39231448210289,
							0
						],
						[
							-76.51031136335413,
							42.39237148210859,
							0
						],
						[
							-76.51036436337378,
							42.39240748211313,
							0
						],
						[
							-76.51045536340884,
							42.39248748212425,
							0
						],
						[
							-76.51049236342392,
							42.39253148213091,
							0
						],
						[
							-76.51052236343718,
							42.39258048213876,
							0
						],
						[
							-76.51061936347813,
							42.39271448215965,
							0
						],
						[
							-76.51067336350002,
							42.39277648216896,
							0
						],
						[
							-76.51078236354218,
							42.39287448218269,
							0
						],
						[
							-76.51084636356563,
							42.39291448218752,
							0
						],
						[
							-76.51091536359036,
							42.39294948219123,
							0
						],
						[
							-76.51097236361032,
							42.39297248219317,
							0
						],
						[
							-76.51098836361597,
							42.39297948219381,
							0
						],
						[
							-76.51106636364258,
							42.39300148219473,
							0
						],
						[
							-76.51114636366951,
							42.39301848219463,
							0
						],
						[
							-76.51125636370566,
							42.39303048219242,
							0
						],
						[
							-76.51198536394237,
							42.39307048217035,
							0
						],
						[
							-76.51269936417059,
							42.39306048213962,
							0
						],
						[
							-76.5181193658974,
							42.39290848189229,
							0
						],
						[
							-76.51954736635193,
							42.39286248182599,
							0
						],
						[
							-76.52186736709423,
							42.39284048172807,
							0
						],
						[
							-76.52183536700637,
							42.39178648153418,
							0
						],
						[
							-76.52180036691351,
							42.39067748133019,
							0
						],
						[
							-76.52178836688131,
							42.39029248125938,
							0
						],
						[
							-76.52169736658908,
							42.38671848060111,
							0
						],
						[
							-76.5216423664698,
							42.38533748034753,
							0
						],
						[
							-76.52163836646089,
							42.38523348032844,
							0
						],
						[
							-76.52162936645401,
							42.3851794803188,
							0
						],
						[
							-76.5215623662212,
							42.38230747978951,
							0
						],
						[
							-76.52160936612923,
							42.38085247951806,
							0
						],
						[
							-76.52159936612206,
							42.38079847950846,
							0
						],
						[
							-76.52155736610099,
							42.38069547949107,
							0
						],
						[
							-76.52152636608747,
							42.38064647948326,
							0
						],
						[
							-76.52144436605462,
							42.38055747947007,
							0
						],
						[
							-76.52139336603531,
							42.38051747946473,
							0
						],
						[
							-76.5213383660151,
							42.38048247946048,
							0
						],
						[
							-76.5212783659936,
							42.38045147945717,
							0
						],
						[
							-76.52016036560276,
							42.38001147942086,
							0
						],
						[
							-76.51930036530145,
							42.37966347939118,
							0
						],
						[
							-76.51755936469293,
							42.37897947933485,
							0
						],
						[
							-76.51735736462301,
							42.37890947933005,
							0
						],
						[
							-76.51721436457437,
							42.37887147932878,
							0
						],
						[
							-76.51714136455,
							42.37885847932933,
							0
						],
						[
							-76.51717736455522,
							42.37877247931194,
							0
						],
						[
							-76.51721036456183,
							42.3787184793006,
							0
						],
						[
							-76.51725236457125,
							42.3786634792887,
							0
						],
						[
							-76.51865436491441,
							42.37721747896411,
							0
						],
						[
							-76.51895336498586,
							42.37688547889052,
							0
						],
						[
							-76.51924236504902,
							42.37648447880454,
							0
						],
						[
							-76.51978236516433,
							42.37569847863708,
							0
						],
						[
							-76.52039836529403,
							42.37477647844136,
							0
						],
						[
							-76.520603365336,
							42.37445347837321,
							0
						],
						[
							-76.52061836533905,
							42.37442947836815,
							0
						],
						[
							-76.52072736536142,
							42.37425847833205,
							0
						],
						[
							-76.52129336548043,
							42.37340947815189,
							0
						],
						[
							-76.52131336548413,
							42.37337247814422,
							0
						],
						[
							-76.5213653654958,
							42.37330447812951,
							0
						],
						[
							-76.52142636551065,
							42.37324047811519,
							0
						],
						[
							-76.52149636552875,
							42.37318147810141,
							0
						],
						[
							-76.52157436554971,
							42.37312647808808,
							0
						],
						[
							-76.52165936557358,
							42.37308047807611,
							0
						],
						[
							-76.5217513656,
							42.37303847806462,
							0
						],
						[
							-76.52184736562836,
							42.37300547805462,
							0
						],
						[
							-76.52194836565867,
							42.37297747804534,
							0
						],
						[
							-76.52205136569057,
							42.3729624780384,
							0
						],
						[
							-76.52215736572383,
							42.37295247803226,
							0
						],
						[
							-76.52484936658982,
							42.37299247793081,
							0
						],
						[
							-76.5250113666416,
							42.37299047792391,
							0
						],
						[
							-76.52509636665319,
							42.372777477881,
							0
						],
						[
							-76.52514936665355,
							42.37255147783699,
							0
						],
						[
							-76.52517236664477,
							42.37233147779529,
							0
						],
						[
							-76.5251503665685,
							42.37139047762183,
							0
						],
						[
							-76.52513536643089,
							42.36958447728776,
							0
						],
						[
							-76.5250943663334,
							42.36843747707689,
							0
						],
						[
							-76.52507636630912,
							42.36818547703091,
							0
						],
						[
							-76.52502536624311,
							42.36751047690787,
							0
						],
						[
							-76.52488736609868,
							42.36614747666088,
							0
						],
						[
							-76.5243593655308,
							42.36072447567714,
							0
						],
						[
							-76.52426036540221,
							42.35940647543686,
							0
						],
						[
							-76.52424736539112,
							42.35931247541997,
							0
						],
						[
							-76.52422936538102,
							42.35925347540975,
							0
						],
						[
							-76.52420236536811,
							42.35919547540009,
							0
						],
						[
							-76.52416836535332,
							42.35914247539164,
							0
						],
						[
							-76.52412536533556,
							42.35908847538337,
							0
						],
						[
							-76.52407636531625,
							42.35903947537627,
							0
						],
						[
							-76.52396036527327,
							42.35896047536632,
							0
						],
						[
							-76.52389336524914,
							42.35892447536236,
							0
						],
						[
							-76.5238233652245,
							42.35889447535962,
							0
						],
						[
							-76.52374836519884,
							42.35887247535857,
							0
						],
						[
							-76.52367136517292,
							42.35885547535853,
							0
						],
						[
							-76.5235923651467,
							42.35884347535949,
							0
						],
						[
							-76.52238036475606,
							42.35881447540312,
							0
						],
						[
							-76.5217163645419,
							42.35879647542662,
							0
						],
						[
							-76.5193133637693,
							42.35876547551799,
							0
						],
						[
							-76.5180583633662,
							42.35875447556666,
							0
						],
						[
							-76.51724836310564,
							42.35874247559718,
							0
						],
						[
							-76.51610136273676,
							42.35872647564057,
							0
						],
						[
							-76.51378036198972,
							42.35868547572673,
							0
						],
						[
							-76.5105973609658,
							42.35863747584645,
							0
						],
						[
							-76.51052336094178,
							42.35863347584868,
							0
						],
						[
							-76.50879236038479,
							42.35860547591342,
							0
						],
						[
							-76.5076483600168,
							42.35858847595647,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090019004</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>64601644</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>270325</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.2991027</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4683000</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090019004</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090019004</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1323</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>561</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>15964.69</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.44</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>2.01</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27651</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27313</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28625</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>15219</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14878</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15766</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8949</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8681</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9271</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6270</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6194</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6491</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>0.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.15</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.04</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1710</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>83</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2820</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>242</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>4642</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1404</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1404</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>95</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00008"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.3854903303395,
							42.48802350484897,
							0
						],
						[
							-76.38787333109889,
							42.48794350473804,
							0
						],
						[
							-76.38941533158976,
							42.48788450466491,
							0
						],
						[
							-76.39043033191315,
							42.48784950461749,
							0
						],
						[
							-76.39212933245524,
							42.48780150454007,
							0
						],
						[
							-76.39263133261503,
							42.48778250451628,
							0
						],
						[
							-76.39460233324313,
							42.48771650442455,
							0
						],
						[
							-76.3972343340818,
							42.48762750430188,
							0
						],
						[
							-76.39811133436093,
							42.48759350426018,
							0
						],
						[
							-76.4006003351544,
							42.4875145041451,
							0
						],
						[
							-76.40126633536627,
							42.48748750411325,
							0
						],
						[
							-76.40402833624606,
							42.4873905039838,
							0
						],
						[
							-76.40435833635112,
							42.48737850396827,
							0
						],
						[
							-76.40639333699974,
							42.48731250387392,
							0
						],
						[
							-76.40805033752835,
							42.48726550379831,
							0
						],
						[
							-76.408451337656,
							42.48725050377934,
							0
						],
						[
							-76.40860233770407,
							42.48724450377213,
							0
						],
						[
							-76.40935733794554,
							42.48723150373926,
							0
						],
						[
							-76.40962833803198,
							42.48722350372684,
							0
						],
						[
							-76.40917133782551,
							42.48641350359556,
							0
						],
						[
							-76.40914733781354,
							42.48635550358581,
							0
						],
						[
							-76.40896833773004,
							42.48600250352778,
							0
						],
						[
							-76.4088893376914,
							42.48582250349771,
							0
						],
						[
							-76.40887033768169,
							42.48577350348941,
							0
						],
						[
							-76.40881833765573,
							42.48564750346822,
							0
						],
						[
							-76.40878833764083,
							42.48557650345631,
							0
						],
						[
							-76.40871633760351,
							42.48538350342354,
							0
						],
						[
							-76.40867033758113,
							42.48528050340637,
							0
						],
						[
							-76.40845033747716,
							42.48482850333168,
							0
						],
						[
							-76.4083563374338,
							42.48464950330239,
							0
						],
						[
							-76.40823133737325,
							42.48437250325625,
							0
						],
						[
							-76.40816833734041,
							42.48420150322718,
							0
						],
						[
							-76.4081323373153,
							42.48401750319462,
							0
						],
						[
							-76.40810533728909,
							42.48377950315169,
							0
						],
						[
							-76.40806133725742,
							42.48354150310948,
							0
						],
						[
							-76.40800233722094,
							42.48330350306787,
							0
						],
						[
							-76.4079583371979,
							42.48318250304727,
							0
						],
						[
							-76.40788533715758,
							42.48295350300789,
							0
						],
						[
							-76.40747833693803,
							42.48174750280137,
							0
						],
						[
							-76.40695133665115,
							42.48015050252741,
							0
						],
						[
							-76.4067533365413,
							42.47952250241928,
							0
						],
						[
							-76.40669033650788,
							42.47934350238874,
							0
						],
						[
							-76.40661733646728,
							42.4791105023486,
							0
						],
						[
							-76.40655233642917,
							42.47887650230796,
							0
						],
						[
							-76.40642933635336,
							42.47838350222177,
							0
						],
						[
							-76.40635033629881,
							42.47798750215176,
							0
						],
						[
							-76.40630133625427,
							42.47759650208144,
							0
						],
						[
							-76.40625233619744,
							42.47703850198025,
							0
						],
						[
							-76.406075336109,
							42.47660950190807,
							0
						],
						[
							-76.40603233608762,
							42.47650650189075,
							0
						],
						[
							-76.406062336096,
							42.47648950188641,
							0
						],
						[
							-76.40629733616319,
							42.47637750185623,
							0
						],
						[
							-76.4067843362968,
							42.47606850177942,
							0
						],
						[
							-76.40713533639516,
							42.4758735017292,
							0
						],
						[
							-76.40724433642765,
							42.47583950171852,
							0
						],
						[
							-76.40780933659595,
							42.47566150166281,
							0
						],
						[
							-76.40889633694643,
							42.47568150162262,
							0
						],
						[
							-76.4109943376352,
							42.47588750157601,
							0
						],
						[
							-76.41219733803776,
							42.47610850156832,
							0
						],
						[
							-76.41247733813495,
							42.4762075015753,
							0
						],
						[
							-76.4131363383458,
							42.47619750154686,
							0
						],
						[
							-76.41366433850257,
							42.47602450149356,
							0
						],
						[
							-76.41404033860671,
							42.47579950143678,
							0
						],
						[
							-76.41436733868252,
							42.47540350135034,
							0
						],
						[
							-76.41461533871389,
							42.47474850121924,
							0
						],
						[
							-76.41448533859443,
							42.4736935010294,
							0
						],
						[
							-76.41434533848224,
							42.47278050086622,
							0
						],
						[
							-76.4142983384446,
							42.47247450081155,
							0
						],
						[
							-76.4142533384143,
							42.47225950077361,
							0
						],
						[
							-76.41424433840722,
							42.47220250076343,
							0
						],
						[
							-76.41438633842836,
							42.47187050069632,
							0
						],
						[
							-76.41457533845221,
							42.47137050059622,
							0
						],
						[
							-76.4153403386992,
							42.47138950056885,
							0
						],
						[
							-76.41609033895136,
							42.47154350056706,
							0
						],
						[
							-76.41723433936673,
							42.4721965006416,
							0
						],
						[
							-76.41848033976123,
							42.47212150057743,
							0
						],
						[
							-76.418727339839,
							42.47210050056357,
							0
						],
						[
							-76.41921133999165,
							42.47206350053719,
							0
						],
						[
							-76.41971334012555,
							42.4716935004485,
							0
						],
						[
							-76.41987634016904,
							42.47157350041972,
							0
						],
						[
							-76.4207123403452,
							42.47032150015446,
							0
						],
						[
							-76.42141034054579,
							42.4700025000673,
							0
						],
						[
							-76.42232834082725,
							42.46982249999694,
							0
						],
						[
							-76.42304334105943,
							42.46985849997472,
							0
						],
						[
							-76.42397034138135,
							42.47018849999832,
							0
						],
						[
							-76.42491934171143,
							42.47053350002377,
							0
						],
						[
							-76.42596034205565,
							42.47066950000688,
							0
						],
						[
							-76.42617334211873,
							42.47059749998497,
							0
						],
						[
							-76.42660934224786,
							42.47045049994017,
							0
						],
						[
							-76.4265993422084,
							42.4699584998496,
							0
						],
						[
							-76.42609134199034,
							42.46921249973217,
							0
						],
						[
							-76.42531434170951,
							42.46878649968478,
							0
						],
						[
							-76.42446134139405,
							42.46822149961476,
							0
						],
						[
							-76.42424634128894,
							42.46773149953281,
							0
						],
						[
							-76.42446534134473,
							42.46753449948756,
							0
						],
						[
							-76.42462734136446,
							42.46709649940001,
							0
						],
						[
							-76.42429634119985,
							42.46630449926692,
							0
						],
						[
							-76.42403134108922,
							42.46595749921344,
							0
						],
						[
							-76.42374734097051,
							42.46558349915576,
							0
						],
						[
							-76.42370834092492,
							42.46513449907429,
							0
						],
						[
							-76.42440734111342,
							42.464647498956,
							0
						],
						[
							-76.42564934149534,
							42.46441949886369,
							0
						],
						[
							-76.42595434159782,
							42.46448149886284,
							0
						],
						[
							-76.42662634182369,
							42.46461949886121,
							0
						],
						[
							-76.42690634193626,
							42.46492749890685,
							0
						],
						[
							-76.42693034194714,
							42.46497049891386,
							0
						],
						[
							-76.4275033422069,
							42.465999499081,
							0
						],
						[
							-76.4277143423114,
							42.46649849916476,
							0
						],
						[
							-76.42796434243071,
							42.46702849925266,
							0
						],
						[
							-76.42814934253312,
							42.4676124993532,
							0
						],
						[
							-76.42856734268506,
							42.46785349938088,
							0
						],
						[
							-76.42878534275867,
							42.46790249938113,
							0
						],
						[
							-76.42907634285687,
							42.46796749938141,
							0
						],
						[
							-76.429523342996,
							42.46790849935243,
							0
						],
						[
							-76.43011734317034,
							42.4676864992874,
							0
						],
						[
							-76.43046034326181,
							42.46743349922677,
							0
						],
						[
							-76.4303383432099,
							42.46726049919969,
							0
						],
						[
							-76.4301853431154,
							42.46664449909196,
							0
						],
						[
							-76.4303573431387,
							42.46621149900494,
							0
						],
						[
							-76.43108434335514,
							42.46598149893305,
							0
						],
						[
							-76.43195534360392,
							42.46556349882057,
							0
						],
						[
							-76.43236834371545,
							42.46527749875101,
							0
						],
						[
							-76.43274934383706,
							42.46526849873395,
							0
						],
						[
							-76.43302434393625,
							42.46541649875019,
							0
						],
						[
							-76.43321834401895,
							42.46569349879359,
							0
						],
						[
							-76.43375734423277,
							42.46624749887426,
							0
						],
						[
							-76.43420234438663,
							42.46639649888385,
							0
						],
						[
							-76.43465934452124,
							42.46623249883505,
							0
						],
						[
							-76.43488034458629,
							42.46615249881135,
							0
						],
						[
							-76.43562134480322,
							42.46586849872888,
							0
						],
						[
							-76.43605034490636,
							42.46539949862483,
							0
						],
						[
							-76.43657334499886,
							42.46437649841452,
							0
						],
						[
							-76.43682834506951,
							42.46422449837612,
							0
						],
						[
							-76.43771534536987,
							42.46443649837947,
							0
						],
						[
							-76.43929434590537,
							42.46482549838763,
							0
						],
						[
							-76.44068834637245,
							42.46509149838048,
							0
						],
						[
							-76.44120634653719,
							42.46507049835567,
							0
						],
						[
							-76.4418253466898,
							42.46444549821509,
							0
						],
						[
							-76.44223234677585,
							42.46384049808675,
							0
						],
						[
							-76.44246634676075,
							42.46261649785096,
							0
						],
						[
							-76.44239134668022,
							42.46185049771234,
							0
						],
						[
							-76.44182734645513,
							42.46125249762454,
							0
						],
						[
							-76.44101534613694,
							42.46047149751288,
							0
						],
						[
							-76.44005834581014,
							42.46020549750238,
							0
						],
						[
							-76.4384803452898,
							42.46001749753135,
							0
						],
						[
							-76.43751034495412,
							42.4596874975095,
							0
						],
						[
							-76.43694034474272,
							42.45930149746112,
							0
						],
						[
							-76.43717734480245,
							42.4590794974105,
							0
						],
						[
							-76.43781234495094,
							42.45832849724594,
							0
						],
						[
							-76.43787634494421,
							42.45795849717494,
							0
						],
						[
							-76.43840234505701,
							42.45719749701291,
							0
						],
						[
							-76.43846034505492,
							42.4569164969586,
							0
						],
						[
							-76.43836634502136,
							42.45687049695391,
							0
						],
						[
							-76.43815334494539,
							42.45676749694346,
							0
						],
						[
							-76.43770634478543,
							42.45654349692007,
							0
						],
						[
							-76.43735434466014,
							42.45637649690342,
							0
						],
						[
							-76.43703834454875,
							42.45624149689119,
							0
						],
						[
							-76.43627534427897,
							42.4559034968595,
							0
						],
						[
							-76.43566934411619,
							42.45633449696368,
							0
						],
						[
							-76.43379534362353,
							42.45781249731275,
							0
						],
						[
							-76.43345834353327,
							42.45805549737131,
							0
						],
						[
							-76.43308834343043,
							42.4582714974262,
							0
						],
						[
							-76.43268934331606,
							42.45845749747672,
							0
						],
						[
							-76.43200534311468,
							42.45870449755002,
							0
						],
						[
							-76.42813134197154,
							42.46006749795856,
							0
						],
						[
							-76.42805734194948,
							42.46009049796582,
							0
						],
						[
							-76.42757134180754,
							42.46028149802076,
							0
						],
						[
							-76.42740634176002,
							42.4603554980411,
							0
						],
						[
							-76.4274173417503,
							42.46017549800737,
							0
						],
						[
							-76.42744034174207,
							42.45996349796722,
							0
						],
						[
							-76.4276543416282,
							42.45748449750005,
							0
						],
						[
							-76.42773334161961,
							42.45702349741161,
							0
						],
						[
							-76.42791634162747,
							42.4563324972764,
							0
						],
						[
							-76.42855334165831,
							42.4539744968145,
							0
						],
						[
							-76.42859734166443,
							42.45386549679257,
							0
						],
						[
							-76.4286563416757,
							42.45376149677094,
							0
						],
						[
							-76.42872934169176,
							42.45366149674949,
							0
						],
						[
							-76.42881734171294,
							42.45356549672818,
							0
						],
						[
							-76.42892534174091,
							42.45347449670699,
							0
						],
						[
							-76.42929434183814,
							42.45318649663882,
							0
						],
						[
							-76.42759534127912,
							42.45300049667299,
							0
						],
						[
							-76.42691234105223,
							42.45289649668133,
							0
						],
						[
							-76.4266913409785,
							42.45285849668322,
							0
						],
						[
							-76.4263413408635,
							42.45282249669069,
							0
						],
						[
							-76.42598934074947,
							42.45280849670232,
							0
						],
						[
							-76.42563734063782,
							42.45282649671986,
							0
						],
						[
							-76.42532734054126,
							42.45286649673977,
							0
						],
						[
							-76.42399834012879,
							42.45305849682894,
							0
						],
						[
							-76.42258733969385,
							42.45330249693103,
							0
						],
						[
							-76.42147833935199,
							42.45349449701131,
							0
						],
						[
							-76.42110133923599,
							42.4535624970391,
							0
						],
						[
							-76.42079833914232,
							42.45361149706041,
							0
						],
						[
							-76.42009533892394,
							42.45371049710709,
							0
						],
						[
							-76.41864833846807,
							42.45382749718714,
							0
						],
						[
							-76.41760333813691,
							42.45388549724004,
							0
						],
						[
							-76.41650533778723,
							42.45392349729139,
							0
						],
						[
							-76.41580233756342,
							42.45394849732437,
							0
						],
						[
							-76.41540233743665,
							42.45397049734457,
							0
						],
						[
							-76.41522633738043,
							42.45397449735243,
							0
						],
						[
							-76.41469333721035,
							42.45398849737654,
							0
						],
						[
							-76.41215033640133,
							42.45408749749748,
							0
						],
						[
							-76.40686333471986,
							42.45430149775034,
							0
						],
						[
							-76.40466533402021,
							42.45438249785401,
							0
						],
						[
							-76.40446333395573,
							42.45438749786308,
							0
						],
						[
							-76.40310133352084,
							42.45441949792395,
							0
						],
						[
							-76.40184933312172,
							42.45445749798146,
							0
						],
						[
							-76.40156833303261,
							42.45447249799559,
							0
						],
						[
							-76.40071233276103,
							42.45451649803824,
							0
						],
						[
							-76.40080833280268,
							42.45466349806156,
							0
						],
						[
							-76.40100733289354,
							42.45503049812145,
							0
						],
						[
							-76.40198333333913,
							42.45682849841471,
							0
						],
						[
							-76.40214033340992,
							42.45710549845963,
							0
						],
						[
							-76.40405933425053,
							42.46015749894681,
							0
						],
						[
							-76.40430633435345,
							42.46047849899622,
							0
						],
						[
							-76.40634433517361,
							42.46273249933091,
							0
						],
						[
							-76.40701833544314,
							42.46345449943727,
							0
						],
						[
							-76.4074833356291,
							42.4639524995106,
							0
						],
						[
							-76.40800633583488,
							42.46446749958476,
							0
						],
						[
							-76.40841633599538,
							42.46485949964072,
							0
						],
						[
							-76.40930733634234,
							42.46568649975772,
							0
						],
						[
							-76.41040833677097,
							42.46670749990211,
							0
						],
						[
							-76.41047533679638,
							42.46676049990921,
							0
						],
						[
							-76.41080633692431,
							42.46705449995022,
							0
						],
						[
							-76.41111433704211,
							42.46731149998533,
							0
						],
						[
							-76.40990333669255,
							42.46784450013276,
							0
						],
						[
							-76.40971933663997,
							42.46793250015646,
							0
						],
						[
							-76.40958733660163,
							42.46798750017197,
							0
						],
						[
							-76.40933733653323,
							42.46814850021184,
							0
						],
						[
							-76.40926533651445,
							42.46820750022565,
							0
						],
						[
							-76.40921333650182,
							42.4682625002379,
							0
						],
						[
							-76.40914433648668,
							42.46835750025826,
							0
						],
						[
							-76.40896833645648,
							42.46871550033158,
							0
						],
						[
							-76.40842733628863,
							42.46879450036803,
							0
						],
						[
							-76.4080513361741,
							42.46887850039872,
							0
						],
						[
							-76.40749033600325,
							42.46900450044467,
							0
						],
						[
							-76.40678533579245,
							42.46921550051216,
							0
						],
						[
							-76.40622733562758,
							42.46940950057055,
							0
						],
						[
							-76.4055373354237,
							42.46964950064278,
							0
						],
						[
							-76.40439333509093,
							42.47011850077568,
							0
						],
						[
							-76.40424733504821,
							42.47017450079193,
							0
						],
						[
							-76.4034313348091,
							42.47048550088237,
							0
						],
						[
							-76.40299433468138,
							42.47065650093162,
							0
						],
						[
							-76.40279033462176,
							42.47073650095464,
							0
						],
						[
							-76.40214433443217,
							42.47097850102547,
							0
						],
						[
							-76.4017583343189,
							42.47112350106785,
							0
						],
						[
							-76.40143733422504,
							42.47124850110394,
							0
						],
						[
							-76.40136433420403,
							42.47128150111298,
							0
						],
						[
							-76.40108833412307,
							42.47138550114334,
							0
						],
						[
							-76.4007343340192,
							42.47151850118222,
							0
						],
						[
							-76.40065933399748,
							42.47155050119117,
							0
						],
						[
							-76.39972033372175,
							42.47190050129378,
							0
						],
						[
							-76.39964533370002,
							42.47193250130273,
							0
						],
						[
							-76.39880233345248,
							42.47224650139481,
							0
						],
						[
							-76.398596333392,
							42.47232350141734,
							0
						],
						[
							-76.39755233308622,
							42.47272350153346,
							0
						],
						[
							-76.39712533296046,
							42.47287750157917,
							0
						],
						[
							-76.39705233293938,
							42.47290950158801,
							0
						],
						[
							-76.39593133260962,
							42.47331950170906,
							0
						],
						[
							-76.39446433217803,
							42.47385550186737,
							0
						],
						[
							-76.39324933181949,
							42.47428450199572,
							0
						],
						[
							-76.39317533179808,
							42.47431650200461,
							0
						],
						[
							-76.3915743313239,
							42.47485850216943,
							0
						],
						[
							-76.39091933113006,
							42.47508250223729,
							0
						],
						[
							-76.39040933097968,
							42.47526450229149,
							0
						],
						[
							-76.39038233097072,
							42.47526050229186,
							0
						],
						[
							-76.38952633071645,
							42.47554050237817,
							0
						],
						[
							-76.38854133042327,
							42.47585450247595,
							0
						],
						[
							-76.38846733040091,
							42.47587350248247,
							0
						],
						[
							-76.38771633017845,
							42.47612750255972,
							0
						],
						[
							-76.38744633009846,
							42.47621850258744,
							0
						],
						[
							-76.3870843299912,
							42.47634050262459,
							0
						],
						[
							-76.38689132993436,
							42.47641050264533,
							0
						],
						[
							-76.38665732986505,
							42.47648950266937,
							0
						],
						[
							-76.3844503292133,
							42.47726350290152,
							0
						],
						[
							-76.38207832851172,
							42.47808050314824,
							0
						],
						[
							-76.38064332808695,
							42.47857050329673,
							0
						],
						[
							-76.37947432774143,
							42.47897650341894,
							0
						],
						[
							-76.37651032686743,
							42.4800345037341,
							0
						],
						[
							-76.37627532679741,
							42.48010850375727,
							0
						],
						[
							-76.37591032668851,
							42.48022150379288,
							0
						],
						[
							-76.3756163266,
							42.48030150381952,
							0
						],
						[
							-76.37484632636566,
							42.48047750388312,
							0
						],
						[
							-76.37366632600596,
							42.48073950397912,
							0
						],
						[
							-76.3736703260202,
							42.48091550401151,
							0
						],
						[
							-76.37368032603194,
							42.48103150403258,
							0
						],
						[
							-76.37369732606295,
							42.48137850409606,
							0
						],
						[
							-76.37379232618383,
							42.48260650431927,
							0
						],
						[
							-76.37381832621602,
							42.48293050437811,
							0
						],
						[
							-76.37382832623513,
							42.48314650441767,
							0
						],
						[
							-76.37385532628582,
							42.48371750452215,
							0
						],
						[
							-76.37392332641336,
							42.48515350478491,
							0
						],
						[
							-76.37393132643057,
							42.48535250482139,
							0
						],
						[
							-76.37403532665243,
							42.4879125052905,
							0
						],
						[
							-76.37408432672147,
							42.48863650542236,
							0
						],
						[
							-76.37412732678393,
							42.48929750554284,
							0
						],
						[
							-76.37417832684935,
							42.4899635056639,
							0
						],
						[
							-76.37420932688235,
							42.49027650572051,
							0
						],
						[
							-76.37422832690628,
							42.49051850576447,
							0
						],
						[
							-76.37426732695612,
							42.49102550585662,
							0
						],
						[
							-76.37429732696872,
							42.49106550586281,
							0
						],
						[
							-76.3742653269644,
							42.49114650587907,
							0
						],
						[
							-76.37239632654547,
							42.49360950640975,
							0
						],
						[
							-76.37217932649851,
							42.49391850647563,
							0
						],
						[
							-76.37207632647753,
							42.49408250651008,
							0
						],
						[
							-76.3719803264567,
							42.49421850653909,
							0
						],
						[
							-76.37180132641959,
							42.49449550659752,
							0
						],
						[
							-76.37167532639614,
							42.49472650664529,
							0
						],
						[
							-76.37156532637715,
							42.49494850669077,
							0
						],
						[
							-76.37141532635394,
							42.49528750675948,
							0
						],
						[
							-76.37140132635179,
							42.49531950676595,
							0
						],
						[
							-76.3713783263481,
							42.49536950677613,
							0
						],
						[
							-76.37132032633905,
							42.4954995068025,
							0
						],
						[
							-76.37121132632177,
							42.49574050685143,
							0
						],
						[
							-76.37110032630544,
							42.49600250690435,
							0
						],
						[
							-76.37098232628652,
							42.49626050695679,
							0
						],
						[
							-76.37141332640972,
							42.49605350690113,
							0
						],
						[
							-76.3715393264451,
							42.4959845068833,
							0
						],
						[
							-76.37163032647014,
							42.49592750686912,
							0
						],
						[
							-76.37191232654762,
							42.49574950682482,
							0
						],
						[
							-76.3722433266394,
							42.49555250677507,
							0
						],
						[
							-76.37259332673563,
							42.49533250672028,
							0
						],
						[
							-76.37284532680273,
							42.49514450667536,
							0
						],
						[
							-76.37299532684146,
							42.49501650664566,
							0
						],
						[
							-76.37309432686591,
							42.49491650662318,
							0
						],
						[
							-76.37313832687636,
							42.49486650661217,
							0
						],
						[
							-76.37317432688519,
							42.49482950660386,
							0
						],
						[
							-76.37328032691018,
							42.49470650657687,
							0
						],
						[
							-76.37333232692187,
							42.4946385065622,
							0
						],
						[
							-76.37348032695468,
							42.49443850651926,
							0
						],
						[
							-76.37368432699886,
							42.49414850645743,
							0
						],
						[
							-76.37412832709431,
							42.49350850632122,
							0
						],
						[
							-76.37448832717247,
							42.49299950621261,
							0
						],
						[
							-76.37539032736623,
							42.49169650593536,
							0
						],
						[
							-76.37555632740377,
							42.49148250588912,
							0
						],
						[
							-76.37570632744188,
							42.49134550585774,
							0
						],
						[
							-76.37583132747494,
							42.49124950583496,
							0
						],
						[
							-76.37597032751356,
							42.49116750581418,
							0
						],
						[
							-76.37611932755595,
							42.49109350579451,
							0
						],
						[
							-76.37645332765233,
							42.49094550575367,
							0
						],
						[
							-76.37743632793763,
							42.49053250563768,
							0
						],
						[
							-76.37798232809892,
							42.49034150558035,
							0
						],
						[
							-76.37847032824358,
							42.49017750553035,
							0
						],
						[
							-76.37959632857871,
							42.48981750541838,
							0
						],
						[
							-76.38036132880717,
							42.48958350534426,
							0
						],
						[
							-76.3806733289011,
							42.48949850531596,
							0
						],
						[
							-76.38083132894882,
							42.48945750530201,
							0
						],
						[
							-76.38155532916767,
							42.48927150523842,
							0
						],
						[
							-76.38199632930058,
							42.48915350519883,
							0
						],
						[
							-76.38225932937858,
							42.48906550517193,
							0
						],
						[
							-76.38272132951391,
							42.48888850512059,
							0
						],
						[
							-76.3833733297038,
							42.48862350504528,
							0
						],
						[
							-76.38435432999063,
							42.48824050493491,
							0
						],
						[
							-76.38441733000904,
							42.48821550492774,
							0
						],
						[
							-76.38485833013895,
							42.48805650488058,
							0
						],
						[
							-76.38492133015845,
							42.48804650487618,
							0
						],
						[
							-76.38498233017768,
							42.4880415048728,
							0
						],
						[
							-76.3854903303395,
							42.48802350484897,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090014001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>8459229</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>228335</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4713834</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4065102</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090014001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090014001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1149</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>568</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>2091.01</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.61</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>2.61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>23702</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>23364</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>24675</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13094</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12753</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13641</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7716</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7449</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8039</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5375</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5298</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5596</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>4.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>3269</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>4086</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1897</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1172</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1576</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>703</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00009"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.3789903243262,
							42.43462449523227,
							0
						],
						[
							-76.37886332428955,
							42.43468049524775,
							0
						],
						[
							-76.37866932423505,
							42.4347864952752,
							0
						],
						[
							-76.37849132418664,
							42.4349054953044,
							0
						],
						[
							-76.3783433241475,
							42.43501949533146,
							0
						],
						[
							-76.37818732410852,
							42.43517049536568,
							0
						],
						[
							-76.37767532398395,
							42.43571249548666,
							0
						],
						[
							-76.37701632382121,
							42.43637749563631,
							0
						],
						[
							-76.37657832371171,
							42.43680149573245,
							0
						],
						[
							-76.37633132364753,
							42.43700749578055,
							0
						],
						[
							-76.37440032312946,
							42.43839449611508,
							0
						],
						[
							-76.3739013229975,
							42.43877949620643,
							0
						],
						[
							-76.373703322946,
							42.43894349624477,
							0
						],
						[
							-76.37344132288162,
							42.43921249630511,
							0
						],
						[
							-76.37313632281138,
							42.43958949638719,
							0
						],
						[
							-76.37291432276317,
							42.43990349645426,
							0
						],
						[
							-76.37255032268396,
							42.44041649656388,
							0
						],
						[
							-76.37244732266332,
							42.44058549659932,
							0
						],
						[
							-76.37211032259563,
							42.44113749671507,
							0
						],
						[
							-76.37191132255774,
							42.44149149678862,
							0
						],
						[
							-76.37175132252493,
							42.44174449684189,
							0
						],
						[
							-76.37172732251996,
							42.44178149684969,
							0
						],
						[
							-76.37149932246878,
							42.44208149691443,
							0
						],
						[
							-76.37136732243778,
							42.44223649694843,
							0
						],
						[
							-76.37124432240665,
							42.44235049697448,
							0
						],
						[
							-76.37104932235579,
							42.44251049701195,
							0
						],
						[
							-76.37081932229269,
							42.44265649704823,
							0
						],
						[
							-76.37057332222288,
							42.44278149708129,
							0
						],
						[
							-76.37049132219904,
							42.44281549709088,
							0
						],
						[
							-76.37017332210672,
							42.44294849712831,
							0
						],
						[
							-76.36989132202405,
							42.44305549715946,
							0
						],
						[
							-76.36938332187592,
							42.44325949721767,
							0
						],
						[
							-76.36883432171471,
							42.44346449727774,
							0
						],
						[
							-76.36857632163878,
							42.44355849730553,
							0
						],
						[
							-76.36823032153717,
							42.44368749734334,
							0
						],
						[
							-76.36804332148293,
							42.4437664973655,
							0
						],
						[
							-76.36788232143697,
							42.44384449738642,
							0
						],
						[
							-76.36775132140033,
							42.4439184974054,
							0
						],
						[
							-76.36744532131694,
							42.4441204974551,
							0
						],
						[
							-76.36724232126248,
							42.44426649749029,
							0
						],
						[
							-76.36706332121504,
							42.44440349752286,
							0
						],
						[
							-76.36687032116454,
							42.44455949755952,
							0
						],
						[
							-76.36668732111747,
							42.44471849759631,
							0
						],
						[
							-76.36655832108647,
							42.44486049762779,
							0
						],
						[
							-76.36630932102885,
							42.44516449769409,
							0
						],
						[
							-76.36622032101033,
							42.44530149772302,
							0
						],
						[
							-76.36607232098233,
							42.44556749777824,
							0
						],
						[
							-76.36604432097708,
							42.44561849778879,
							0
						],
						[
							-76.36588332094765,
							42.44592149785137,
							0
						],
						[
							-76.36573132091948,
							42.44620249790949,
							0
						],
						[
							-76.36566732090662,
							42.44630749793151,
							0
						],
						[
							-76.3655853208883,
							42.44641649795499,
							0
						],
						[
							-76.36547832086225,
							42.44652949798021,
							0
						],
						[
							-76.36532432082323,
							42.44667149801268,
							0
						],
						[
							-76.36449232060147,
							42.44728949816058,
							0
						],
						[
							-76.36432632055853,
							42.44743049819336,
							0
						],
						[
							-76.36417132051983,
							42.44758149822756,
							0
						],
						[
							-76.3639253204645,
							42.44790349829706,
							0
						],
						[
							-76.36382632044541,
							42.44807649833307,
							0
						],
						[
							-76.36375732043523,
							42.448239498366,
							0
						],
						[
							-76.36370532043146,
							42.44841549840069,
							0
						],
						[
							-76.3636663204365,
							42.44865449844647,
							0
						],
						[
							-76.363605320455,
							42.44917349854501,
							0
						],
						[
							-76.3635273204561,
							42.44952949861401,
							0
						],
						[
							-76.36335732045225,
							42.45022049874876,
							0
						],
						[
							-76.36318732044377,
							42.45084849887183,
							0
						],
						[
							-76.36307832044065,
							42.45128249895653,
							0
						],
						[
							-76.3630033204356,
							42.4515414990075,
							0
						],
						[
							-76.36298132043402,
							42.45161649902227,
							0
						],
						[
							-76.36294132042919,
							42.45172549904405,
							0
						],
						[
							-76.36286432041577,
							42.45187949907565,
							0
						],
						[
							-76.3627433203919,
							42.45208349911827,
							0
						],
						[
							-76.36262732036464,
							42.45221949914811,
							0
						],
						[
							-76.36251532033668,
							42.45232849917279,
							0
						],
						[
							-76.36238832030362,
							42.45243349919734,
							0
						],
						[
							-76.36224732026481,
							42.4525214992193,
							0
						],
						[
							-76.36209432022174,
							42.45260449924083,
							0
						],
						[
							-76.36171832011162,
							42.45274849928261,
							0
						],
						[
							-76.36136832000774,
							42.45286449931817,
							0
						],
						[
							-76.36094431988026,
							42.45298249935708,
							0
						],
						[
							-76.36017431965041,
							42.45321949943196,
							0
						],
						[
							-76.35984731955277,
							42.45331949946364,
							0
						],
						[
							-76.35971431951351,
							42.45336649947769,
							0
						],
						[
							-76.35921231936561,
							42.45354749953139,
							0
						],
						[
							-76.35897531929767,
							42.45365849956149,
							0
						],
						[
							-76.358897319276,
							42.45370449957314,
							0
						],
						[
							-76.35861931920054,
							42.45389249961911,
							0
						],
						[
							-76.35846831916012,
							42.45400249964555,
							0
						],
						[
							-76.35835031912957,
							42.45410249966881,
							0
						],
						[
							-76.3581143190709,
							42.45433549972143,
							0
						],
						[
							-76.35736331888762,
							42.4551234998975,
							0
						],
						[
							-76.35676131874146,
							42.45576550004053,
							0
						],
						[
							-76.3564303186619,
							42.45612950012121,
							0
						],
						[
							-76.35514131835527,
							42.45759050044349,
							0
						],
						[
							-76.35467731824431,
							42.45810850055804,
							0
						],
						[
							-76.35406731810028,
							42.45881450071322,
							0
						],
						[
							-76.35389531806237,
							42.45905050076382,
							0
						],
						[
							-76.35382531804791,
							42.45915950078681,
							0
						],
						[
							-76.35382231805289,
							42.45924050080191,
							0
						],
						[
							-76.35377431803944,
							42.45926750080884,
							0
						],
						[
							-76.35373331803562,
							42.45939450083399,
							0
						],
						[
							-76.35370731803688,
							42.45952550085929,
							0
						],
						[
							-76.35369631804159,
							42.45963750088044,
							0
						],
						[
							-76.35369331806514,
							42.45997150094237,
							0
						],
						[
							-76.3537183181776,
							42.46139350120449,
							0
						],
						[
							-76.35380331834342,
							42.46327950155001,
							0
						],
						[
							-76.35382431839153,
							42.46384250165335,
							0
						],
						[
							-76.35385331844213,
							42.46440450175614,
							0
						],
						[
							-76.35386431848865,
							42.46498950186392,
							0
						],
						[
							-76.35391631858843,
							42.46612050207107,
							0
						],
						[
							-76.3539193185946,
							42.4661915020841,
							0
						],
						[
							-76.35394531863736,
							42.46665950216962,
							0
						],
						[
							-76.35406831885966,
							42.46914750262495,
							0
						],
						[
							-76.35407831887747,
							42.46934650266135,
							0
						],
						[
							-76.35412131896338,
							42.47032750284109,
							0
						],
						[
							-76.35415331900107,
							42.47070050290879,
							0
						],
						[
							-76.35418631903313,
							42.47099250296147,
							0
						],
						[
							-76.35420531906803,
							42.47138450303323,
							0
						],
						[
							-76.35422131911088,
							42.47189750312748,
							0
						],
						[
							-76.35422631914791,
							42.47237950321644,
							0
						],
						[
							-76.35425131920783,
							42.47308550334602,
							0
						],
						[
							-76.35427931924232,
							42.47343250340908,
							0
						],
						[
							-76.35431931928258,
							42.47380550347644,
							0
						],
						[
							-76.35437531932696,
							42.4741645035406,
							0
						],
						[
							-76.35439931934921,
							42.47436250357627,
							0
						],
						[
							-76.35441231936942,
							42.47458050361605,
							0
						],
						[
							-76.35443931941235,
							42.47504650370115,
							0
						],
						[
							-76.35447531952087,
							42.47636550394366,
							0
						],
						[
							-76.35448431958979,
							42.47726350410939,
							0
						],
						[
							-76.35446831963155,
							42.47790150422803,
							0
						],
						[
							-76.3544273196661,
							42.47855050434969,
							0
						],
						[
							-76.35441031969967,
							42.4790815044486,
							0
						],
						[
							-76.35442431975085,
							42.47971650456548,
							0
						],
						[
							-76.3544253197561,
							42.47978350457782,
							0
						],
						[
							-76.35445431978461,
							42.48004450462491,
							0
						],
						[
							-76.3545153198353,
							42.48046750470069,
							0
						],
						[
							-76.35461231990308,
							42.48096550478888,
							0
						],
						[
							-76.35467731995534,
							42.48139250486522,
							0
						],
						[
							-76.35472232002274,
							42.48211250499656,
							0
						],
						[
							-76.35478032014404,
							42.48350850525237,
							0
						],
						[
							-76.35481732020257,
							42.4841425053681,
							0
						],
						[
							-76.35482332022274,
							42.48439050541371,
							0
						],
						[
							-76.35483532024277,
							42.48461050545392,
							0
						],
						[
							-76.35483432027723,
							42.48508350554142,
							0
						],
						[
							-76.35511832036418,
							42.48502550551925,
							0
						],
						[
							-76.35607432065521,
							42.48480750544042,
							0
						],
						[
							-76.35909932157185,
							42.48406050518042,
							0
						],
						[
							-76.35950332169433,
							42.48396150514581,
							0
						],
						[
							-76.36126232222759,
							42.48353050499522,
							0
						],
						[
							-76.36339832287698,
							42.48303250481705,
							0
						],
						[
							-76.36579232360666,
							42.48249950462201,
							0
						],
						[
							-76.36589932363962,
							42.48248050461418,
							0
						],
						[
							-76.36753232413746,
							42.48211850448142,
							0
						],
						[
							-76.36805032429521,
							42.48200150443888,
							0
						],
						[
							-76.36951132474023,
							42.48167250431916,
							0
						],
						[
							-76.37133032529422,
							42.48126250417003,
							0
						],
						[
							-76.37342732593312,
							42.48079250399857,
							0
						],
						[
							-76.37366632600596,
							42.48073950397912,
							0
						],
						[
							-76.37484632636566,
							42.48047750388312,
							0
						],
						[
							-76.3756163266,
							42.48030150381952,
							0
						],
						[
							-76.37591032668851,
							42.48022150379288,
							0
						],
						[
							-76.37627532679741,
							42.48010850375727,
							0
						],
						[
							-76.37651032686743,
							42.4800345037341,
							0
						],
						[
							-76.37947432774143,
							42.47897650341894,
							0
						],
						[
							-76.38064332808695,
							42.47857050329673,
							0
						],
						[
							-76.38207832851172,
							42.47808050314824,
							0
						],
						[
							-76.3844503292133,
							42.47726350290152,
							0
						],
						[
							-76.38665732986505,
							42.47648950266937,
							0
						],
						[
							-76.38689132993436,
							42.47641050264533,
							0
						],
						[
							-76.3870843299912,
							42.47634050262459,
							0
						],
						[
							-76.38744633009846,
							42.47621850258744,
							0
						],
						[
							-76.38771633017845,
							42.47612750255972,
							0
						],
						[
							-76.38846733040091,
							42.47587350248247,
							0
						],
						[
							-76.38854133042327,
							42.47585450247595,
							0
						],
						[
							-76.38952633071645,
							42.47554050237817,
							0
						],
						[
							-76.39038233097072,
							42.47526050229186,
							0
						],
						[
							-76.39040933097968,
							42.47526450229149,
							0
						],
						[
							-76.39091933113006,
							42.47508250223729,
							0
						],
						[
							-76.3915743313239,
							42.47485850216943,
							0
						],
						[
							-76.39317533179808,
							42.47431650200461,
							0
						],
						[
							-76.39324933181949,
							42.47428450199572,
							0
						],
						[
							-76.39446433217803,
							42.47385550186737,
							0
						],
						[
							-76.39593133260962,
							42.47331950170906,
							0
						],
						[
							-76.39705233293938,
							42.47290950158801,
							0
						],
						[
							-76.39712533296046,
							42.47287750157917,
							0
						],
						[
							-76.39755233308622,
							42.47272350153346,
							0
						],
						[
							-76.398596333392,
							42.47232350141734,
							0
						],
						[
							-76.39880233345248,
							42.47224650139481,
							0
						],
						[
							-76.39964533370002,
							42.47193250130273,
							0
						],
						[
							-76.39972033372175,
							42.47190050129378,
							0
						],
						[
							-76.40065933399748,
							42.47155050119117,
							0
						],
						[
							-76.4007343340192,
							42.47151850118222,
							0
						],
						[
							-76.40108833412307,
							42.47138550114334,
							0
						],
						[
							-76.40136433420403,
							42.47128150111298,
							0
						],
						[
							-76.40143733422504,
							42.47124850110394,
							0
						],
						[
							-76.4017583343189,
							42.47112350106785,
							0
						],
						[
							-76.40214433443217,
							42.47097850102547,
							0
						],
						[
							-76.40279033462176,
							42.47073650095464,
							0
						],
						[
							-76.40299433468138,
							42.47065650093162,
							0
						],
						[
							-76.4034313348091,
							42.47048550088237,
							0
						],
						[
							-76.40424733504821,
							42.47017450079193,
							0
						],
						[
							-76.40439333509093,
							42.47011850077568,
							0
						],
						[
							-76.4055373354237,
							42.46964950064278,
							0
						],
						[
							-76.40622733562758,
							42.46940950057055,
							0
						],
						[
							-76.40678533579245,
							42.46921550051216,
							0
						],
						[
							-76.40749033600325,
							42.46900450044467,
							0
						],
						[
							-76.4080513361741,
							42.46887850039872,
							0
						],
						[
							-76.40842733628863,
							42.46879450036803,
							0
						],
						[
							-76.40896833645648,
							42.46871550033158,
							0
						],
						[
							-76.40914433648668,
							42.46835750025826,
							0
						],
						[
							-76.40921333650182,
							42.4682625002379,
							0
						],
						[
							-76.40926533651445,
							42.46820750022565,
							0
						],
						[
							-76.40933733653323,
							42.46814850021184,
							0
						],
						[
							-76.40958733660163,
							42.46798750017197,
							0
						],
						[
							-76.40971933663997,
							42.46793250015646,
							0
						],
						[
							-76.40990333669255,
							42.46784450013276,
							0
						],
						[
							-76.41111433704211,
							42.46731149998533,
							0
						],
						[
							-76.41080633692431,
							42.46705449995022,
							0
						],
						[
							-76.41047533679638,
							42.46676049990921,
							0
						],
						[
							-76.41040833677097,
							42.46670749990211,
							0
						],
						[
							-76.40930733634234,
							42.46568649975772,
							0
						],
						[
							-76.40841633599538,
							42.46485949964072,
							0
						],
						[
							-76.40800633583488,
							42.46446749958476,
							0
						],
						[
							-76.4074833356291,
							42.4639524995106,
							0
						],
						[
							-76.40701833544314,
							42.46345449943727,
							0
						],
						[
							-76.40634433517361,
							42.46273249933091,
							0
						],
						[
							-76.40430633435345,
							42.46047849899622,
							0
						],
						[
							-76.40405933425053,
							42.46015749894681,
							0
						],
						[
							-76.40214033340992,
							42.45710549845963,
							0
						],
						[
							-76.40198333333913,
							42.45682849841471,
							0
						],
						[
							-76.40100733289354,
							42.45503049812145,
							0
						],
						[
							-76.40080833280268,
							42.45466349806156,
							0
						],
						[
							-76.40071233276103,
							42.45451649803824,
							0
						],
						[
							-76.40156833303261,
							42.45447249799559,
							0
						],
						[
							-76.40184933312172,
							42.45445749798146,
							0
						],
						[
							-76.40310133352084,
							42.45441949792395,
							0
						],
						[
							-76.40446333395573,
							42.45438749786308,
							0
						],
						[
							-76.40466533402021,
							42.45438249785401,
							0
						],
						[
							-76.40686333471986,
							42.45430149775034,
							0
						],
						[
							-76.41215033640133,
							42.45408749749748,
							0
						],
						[
							-76.41469333721035,
							42.45398849737654,
							0
						],
						[
							-76.41522633738043,
							42.45397449735243,
							0
						],
						[
							-76.41540233743665,
							42.45397049734457,
							0
						],
						[
							-76.41580233756342,
							42.45394849732437,
							0
						],
						[
							-76.41650533778723,
							42.45392349729139,
							0
						],
						[
							-76.41760333813691,
							42.45388549724004,
							0
						],
						[
							-76.41864833846807,
							42.45382749718714,
							0
						],
						[
							-76.42009533892394,
							42.45371049710709,
							0
						],
						[
							-76.42079833914232,
							42.45361149706041,
							0
						],
						[
							-76.42110133923599,
							42.4535624970391,
							0
						],
						[
							-76.42147833935199,
							42.45349449701131,
							0
						],
						[
							-76.42258733969385,
							42.45330249693103,
							0
						],
						[
							-76.42399834012879,
							42.45305849682894,
							0
						],
						[
							-76.42532734054126,
							42.45286649673977,
							0
						],
						[
							-76.42563734063782,
							42.45282649671986,
							0
						],
						[
							-76.42598934074947,
							42.45280849670232,
							0
						],
						[
							-76.4263413408635,
							42.45282249669069,
							0
						],
						[
							-76.4266913409785,
							42.45285849668322,
							0
						],
						[
							-76.42691234105223,
							42.45289649668133,
							0
						],
						[
							-76.42759534127912,
							42.45300049667299,
							0
						],
						[
							-76.42929434183814,
							42.45318649663882,
							0
						],
						[
							-76.42892534174091,
							42.45347449670699,
							0
						],
						[
							-76.42881734171294,
							42.45356549672818,
							0
						],
						[
							-76.42872934169176,
							42.45366149674949,
							0
						],
						[
							-76.4286563416757,
							42.45376149677094,
							0
						],
						[
							-76.42859734166443,
							42.45386549679257,
							0
						],
						[
							-76.42855334165831,
							42.4539744968145,
							0
						],
						[
							-76.42791634162747,
							42.4563324972764,
							0
						],
						[
							-76.42773334161961,
							42.45702349741161,
							0
						],
						[
							-76.4276543416282,
							42.45748449750005,
							0
						],
						[
							-76.42744034174207,
							42.45996349796722,
							0
						],
						[
							-76.4274173417503,
							42.46017549800737,
							0
						],
						[
							-76.42740634176002,
							42.4603554980411,
							0
						],
						[
							-76.42757134180754,
							42.46028149802076,
							0
						],
						[
							-76.42805734194948,
							42.46009049796582,
							0
						],
						[
							-76.42813134197154,
							42.46006749795856,
							0
						],
						[
							-76.43200534311468,
							42.45870449755002,
							0
						],
						[
							-76.43268934331606,
							42.45845749747672,
							0
						],
						[
							-76.43308834343043,
							42.4582714974262,
							0
						],
						[
							-76.43345834353327,
							42.45805549737131,
							0
						],
						[
							-76.43379534362353,
							42.45781249731275,
							0
						],
						[
							-76.43566934411619,
							42.45633449696368,
							0
						],
						[
							-76.43627534427897,
							42.4559034968595,
							0
						],
						[
							-76.43703834454875,
							42.45624149689119,
							0
						],
						[
							-76.43735434466014,
							42.45637649690342,
							0
						],
						[
							-76.43770634478543,
							42.45654349692007,
							0
						],
						[
							-76.43815334494539,
							42.45676749694346,
							0
						],
						[
							-76.43836634502136,
							42.45687049695391,
							0
						],
						[
							-76.43846034505492,
							42.4569164969586,
							0
						],
						[
							-76.43855734505105,
							42.45644149686684,
							0
						],
						[
							-76.43876834507002,
							42.45577949673585,
							0
						],
						[
							-76.43937434524646,
							42.45553449666608,
							0
						],
						[
							-76.4401283454767,
							42.45537449660602,
							0
						],
						[
							-76.44101134572999,
							42.45496549649471,
							0
						],
						[
							-76.44184234599223,
							42.45490449644984,
							0
						],
						[
							-76.44344534648293,
							42.45458149632534,
							0
						],
						[
							-76.44365534654878,
							42.45456049631298,
							0
						],
						[
							-76.44387634662236,
							42.45459649631072,
							0
						],
						[
							-76.44430734676578,
							42.45466549630606,
							0
						],
						[
							-76.44441634679988,
							42.45465349629944,
							0
						],
						[
							-76.44444934680922,
							42.45463649629497,
							0
						],
						[
							-76.44448534682144,
							42.45464549629517,
							0
						],
						[
							-76.44456534684646,
							42.45463649629027,
							0
						],
						[
							-76.44493234694922,
							42.45443249623771,
							0
						],
						[
							-76.44601334727327,
							42.4541214961365,
							0
						],
						[
							-76.44609534729778,
							42.45409749612875,
							0
						],
						[
							-76.44691134757508,
							42.45430649613445,
							0
						],
						[
							-76.44763534783694,
							42.45470649617919,
							0
						],
						[
							-76.44944434849307,
							42.45573149629568,
							0
						],
						[
							-76.4498163486208,
							42.45584449630154,
							0
						],
						[
							-76.44981434861499,
							42.45577449628866,
							0
						],
						[
							-76.44981134860895,
							42.45570549627604,
							0
						],
						[
							-76.44974534846463,
							42.45403449596964,
							0
						],
						[
							-76.44947934815242,
							42.45095549541085,
							0
						],
						[
							-76.44945034813948,
							42.45090649540296,
							0
						],
						[
							-76.44942534812749,
							42.45085249539399,
							0
						],
						[
							-76.44940734811782,
							42.45079949538491,
							0
						],
						[
							-76.44937434808733,
							42.45052949533631,
							0
						],
						[
							-76.44926734795389,
							42.44918449509182,
							0
						],
						[
							-76.44913934781044,
							42.44779449483985,
							0
						],
						[
							-76.44912934779853,
							42.44767649481843,
							0
						],
						[
							-76.4490743477333,
							42.44703049470114,
							0
						],
						[
							-76.44900934763982,
							42.44604449452135,
							0
						],
						[
							-76.44893234751606,
							42.44469949427563,
							0
						],
						[
							-76.4489113474826,
							42.4443364942093,
							0
						],
						[
							-76.44890034746565,
							42.44415449417608,
							0
						],
						[
							-76.44884834739766,
							42.44345749404923,
							0
						],
						[
							-76.4487843472956,
							42.442350493847,
							0
						],
						[
							-76.44877934728802,
							42.4422694938322,
							0
						],
						[
							-76.44876134722702,
							42.44151949369419,
							0
						],
						[
							-76.44873934718454,
							42.44103849360607,
							0
						],
						[
							-76.44873634718006,
							42.44099049359729,
							0
						],
						[
							-76.44871634717364,
							42.44099049359811,
							0
						],
						[
							-76.44857534712757,
							42.44097949360177,
							0
						],
						[
							-76.44838234706239,
							42.44093549360141,
							0
						],
						[
							-76.44833134704398,
							42.44090749359829,
							0
						],
						[
							-76.44813834697881,
							42.44086349359795,
							0
						],
						[
							-76.44810134696694,
							42.44086349359944,
							0
						],
						[
							-76.44803434694748,
							42.44089149360733,
							0
						],
						[
							-76.44799034693742,
							42.44094649361929,
							0
						],
						[
							-76.44797534693583,
							42.44099049362804,
							0
						],
						[
							-76.44795334693042,
							42.441012493633,
							0
						],
						[
							-76.44793834692956,
							42.44106649364358,
							0
						],
						[
							-76.44791634692375,
							42.44108349364763,
							0
						],
						[
							-76.44790134692217,
							42.44112749365638,
							0
						],
						[
							-76.44787834691643,
							42.44114949366136,
							0
						],
						[
							-76.44786434691392,
							42.44117649366694,
							0
						],
						[
							-76.44780434689997,
							42.44124849368268,
							0
						],
						[
							-76.44779034689792,
							42.44128149368935,
							0
						],
						[
							-76.44776734689214,
							42.44130349369436,
							0
						],
						[
							-76.44775334688964,
							42.44133049369991,
							0
						],
						[
							-76.44774534688987,
							42.44136849370726,
							0
						],
						[
							-76.44777534691731,
							42.44161049375084,
							0
						],
						[
							-76.44780534693459,
							42.44171449376886,
							0
						],
						[
							-76.44782734694371,
							42.44174249377316,
							0
						],
						[
							-76.44784234695096,
							42.44177549377866,
							0
						],
						[
							-76.44786434696,
							42.44180249378275,
							0
						],
						[
							-76.44787934696761,
							42.44184049378919,
							0
						],
						[
							-76.44796034700092,
							42.44193949380423,
							0
						],
						[
							-76.44797534700858,
							42.44197849381084,
							0
						],
						[
							-76.44801234702325,
							42.44201649381638,
							0
						],
						[
							-76.44810834706253,
							42.44213149383378,
							0
						],
						[
							-76.44817534708771,
							42.44218149384032,
							0
						],
						[
							-76.4482493471175,
							42.4422634938525,
							0
						],
						[
							-76.44825734712212,
							42.44229149385736,
							0
						],
						[
							-76.44828634713261,
							42.44230749385916,
							0
						],
						[
							-76.44829434714202,
							42.44240049387604,
							0
						],
						[
							-76.44828634714558,
							42.44248349389171,
							0
						],
						[
							-76.44821234712785,
							42.4425654939099,
							0
						],
						[
							-76.4480643470864,
							42.44264749393102,
							0
						],
						[
							-76.44799034706391,
							42.44266449393717,
							0
						],
						[
							-76.44768634696914,
							42.44270249395648,
							0
						],
						[
							-76.44699734674965,
							42.44272449398837,
							0
						],
						[
							-76.44679734668547,
							42.44272449399644,
							0
						],
						[
							-76.44671534665879,
							42.44271949399885,
							0
						],
						[
							-76.44656734661004,
							42.44270249400167,
							0
						],
						[
							-76.44640434655409,
							42.4426534939992,
							0
						],
						[
							-76.44621934648872,
							42.44257149399149,
							0
						],
						[
							-76.44599634640662,
							42.44242849397404,
							0
						],
						[
							-76.44570034629423,
							42.44219249394234,
							0
						],
						[
							-76.44559334625431,
							42.44211649393258,
							0
						],
						[
							-76.44507734606155,
							42.44174749388515,
							0
						],
						[
							-76.44502534604287,
							42.44172049388225,
							0
						],
						[
							-76.44491434600528,
							42.44169349388175,
							0
						],
						[
							-76.44478834596357,
							42.44167649388369,
							0
						],
						[
							-76.44467734592796,
							42.44167649388817,
							0
						],
						[
							-76.44460334590546,
							42.44169349389431,
							0
						],
						[
							-76.44452134588114,
							42.44172049390262,
							0
						],
						[
							-76.44435834583648,
							42.44182449392843,
							0
						],
						[
							-76.44423234580294,
							42.44191849395094,
							0
						],
						[
							-76.44412134577699,
							42.44204949397964,
							0
						],
						[
							-76.44408434577078,
							42.44212649399539,
							0
						],
						[
							-76.44406234576614,
							42.44215949400236,
							0
						],
						[
							-76.44403234575859,
							42.44218749400876,
							0
						],
						[
							-76.44402534576194,
							42.44226349402311,
							0
						],
						[
							-76.44399534575355,
							42.44228049402746,
							0
						],
						[
							-76.44398134575879,
							42.44241249405246,
							0
						],
						[
							-76.44395134576168,
							42.44258249408514,
							0
						],
						[
							-76.44392134575321,
							42.4425984940893,
							0
						],
						[
							-76.44391434575664,
							42.44267549410382,
							0
						],
						[
							-76.44388434574827,
							42.44269249410819,
							0
						],
						[
							-76.44386234574517,
							42.44274649411906,
							0
						],
						[
							-76.44381034573172,
							42.44279049412931,
							0
						],
						[
							-76.44372934570978,
							42.44284549414275,
							0
						],
						[
							-76.44361834567577,
							42.44286749415132,
							0
						],
						[
							-76.44350634563983,
							42.44286749415583,
							0
						],
						[
							-76.44324234555123,
							42.44281449415668,
							0
						],
						[
							-76.44318034553035,
							42.4428014941568,
							0
						],
						[
							-76.44301034546974,
							42.44271949414848,
							0
						],
						[
							-76.44295034544933,
							42.44270349414795,
							0
						],
						[
							-76.44278034538866,
							42.44262049413943,
							0
						],
						[
							-76.44260234532352,
							42.44251149412647,
							0
						],
						[
							-76.44255834530651,
							42.44247249412105,
							0
						],
						[
							-76.44241734525524,
							42.44239049411154,
							0
						],
						[
							-76.44212034514291,
							42.4421594940808,
							0
						],
						[
							-76.44178734501868,
							42.44192349405057,
							0
						],
						[
							-76.44170534499037,
							42.44189649404888,
							0
						],
						[
							-76.44157934494787,
							42.44186849404881,
							0
						],
						[
							-76.44146834491107,
							42.44185249405031,
							0
						],
						[
							-76.44112034479778,
							42.44183049406031,
							0
						],
						[
							-76.44106034477852,
							42.44183049406273,
							0
						],
						[
							-76.44086034471712,
							42.44186849407786,
							0
						],
						[
							-76.44081634470507,
							42.44189649408479,
							0
						],
						[
							-76.44077234469214,
							42.44191249408954,
							0
						],
						[
							-76.44069034467066,
							42.44197849410506,
							0
						],
						[
							-76.44066834466808,
							42.44203949411724,
							0
						],
						[
							-76.44066834467088,
							42.44207749412426,
							0
						],
						[
							-76.440690344682,
							42.44213249413355,
							0
						],
						[
							-76.44083834473919,
							42.44226449415199,
							0
						],
						[
							-76.44087534475432,
							42.44230849415865,
							0
						],
						[
							-76.44089034476312,
							42.44236249416804,
							0
						],
						[
							-76.44090534476953,
							42.4423844941715,
							0
						],
						[
							-76.44091234477423,
							42.44241749417733,
							0
						],
						[
							-76.4408603447685,
							42.44256649420699,
							0
						],
						[
							-76.44082334475979,
							42.44260949421644,
							0
						],
						[
							-76.44077934474855,
							42.44264849422544,
							0
						],
						[
							-76.44047634465409,
							42.44268649424471,
							0
						],
						[
							-76.44045334464715,
							42.44269249424674,
							0
						],
						[
							-76.4404083446347,
							42.44271949425356,
							0
						],
						[
							-76.44037934462828,
							42.44275849426193,
							0
						],
						[
							-76.44035734462526,
							42.44281349427301,
							0
						],
						[
							-76.44033434462428,
							42.44290049429004,
							0
						],
						[
							-76.44031234462045,
							42.44294449429904,
							0
						],
						[
							-76.4403053446211,
							42.44298349430655,
							0
						],
						[
							-76.44028234461533,
							42.44300549431155,
							0
						],
						[
							-76.44026834461326,
							42.44303849431823,
							0
						],
						[
							-76.44015634458452,
							42.44313649434088,
							0
						],
						[
							-76.4400383445507,
							42.44319149435582,
							0
						],
						[
							-76.4399793445322,
							42.44319749435932,
							0
						],
						[
							-76.43989034450284,
							42.44318649436087,
							0
						],
						[
							-76.43978634446542,
							42.44313149435491,
							0
						],
						[
							-76.43970434443388,
							42.44306049434507,
							0
						],
						[
							-76.43969034442568,
							42.44301049433638,
							0
						],
						[
							-76.43966734441712,
							42.44299449433436,
							0
						],
						[
							-76.4396153443964,
							42.44293949432629,
							0
						],
						[
							-76.43960134438905,
							42.44290049431964,
							0
						],
						[
							-76.43957834437967,
							42.44287349431556,
							0
						],
						[
							-76.43954134436257,
							42.44280249430392,
							0
						],
						[
							-76.43952634435487,
							42.44276349429731,
							0
						],
						[
							-76.43951234434877,
							42.4427414942938,
							0
						],
						[
							-76.43943034431597,
							42.44265349428083,
							0
						],
						[
							-76.43938634430147,
							42.44264849428168,
							0
						],
						[
							-76.43928234427658,
							42.44276349430715,
							0
						],
						[
							-76.43928234427864,
							42.44279149431235,
							0
						],
						[
							-76.4392453442708,
							42.44284649432401,
							0
						],
						[
							-76.43920834426454,
							42.44292249433956,
							0
						],
						[
							-76.43919334426377,
							42.44297749435035,
							0
						],
						[
							-76.43917834426058,
							42.44299949435504,
							0
						],
						[
							-76.43914934425898,
							42.44310449437563,
							0
						],
						[
							-76.43911934425333,
							42.44315849438682,
							0
						],
						[
							-76.4390603442397,
							42.44323049440253,
							0
						],
						[
							-76.43904534423811,
							42.44327449441128,
							0
						],
						[
							-76.43898534422372,
							42.44334049442592,
							0
						],
						[
							-76.4389263442056,
							42.44335149443034,
							0
						],
						[
							-76.4388603441844,
							42.443351494433,
							0
						],
						[
							-76.43874834414316,
							42.4432794944242,
							0
						],
						[
							-76.4387263441345,
							42.44325749442102,
							0
						],
						[
							-76.43870434412014,
							42.44315849440357,
							0
						],
						[
							-76.4387193441137,
							42.44300549437467,
							0
						],
						[
							-76.4387633441209,
							42.4429114943555,
							0
						],
						[
							-76.43877834412451,
							42.44289549435192,
							0
						],
						[
							-76.43882234412894,
							42.44276349432573,
							0
						],
						[
							-76.43883034412791,
							42.44271449431636,
							0
						],
						[
							-76.43885934413073,
							42.44262649429889,
							0
						],
						[
							-76.43885234412326,
							42.44255549428605,
							0
						],
						[
							-76.4387633440886,
							42.44247249427428,
							0
						],
						[
							-76.43870434406965,
							42.44247249427666,
							0
						],
						[
							-76.43863034404716,
							42.4424894942828,
							0
						],
						[
							-76.43855634402827,
							42.44255549429798,
							0
						],
						[
							-76.438489344012,
							42.44262649431383,
							0
						],
						[
							-76.43848134401222,
							42.44266449432119,
							0
						],
						[
							-76.43845234400416,
							42.4426814943255,
							0
						],
						[
							-76.4384443440044,
							42.44271949433285,
							0
						],
						[
							-76.43841534399671,
							42.44274149433809,
							0
						],
						[
							-76.43840734399576,
							42.4427634943425,
							0
						],
						[
							-76.43815534393674,
							42.44306049440763,
							0
						],
						[
							-76.43805934391116,
							42.44313149442464,
							0
						],
						[
							-76.43800734389526,
							42.44314249442877,
							0
						],
						[
							-76.4378593438466,
							42.44312649443179,
							0
						],
						[
							-76.43776334381417,
							42.44310449443159,
							0
						],
						[
							-76.43774034380554,
							42.44308749442936,
							0
						],
						[
							-76.43767434378356,
							42.44307649443001,
							0
						],
						[
							-76.43760034375656,
							42.44303249442486,
							0
						],
						[
							-76.4376003437517,
							42.44296649441264,
							0
						],
						[
							-76.43763734376034,
							42.44292249440299,
							0
						],
						[
							-76.43773334378511,
							42.44284049438395,
							0
						],
						[
							-76.43796334384758,
							42.44268649434619,
							0
						],
						[
							-76.43802234386175,
							42.44262149433177,
							0
						],
						[
							-76.43804434386188,
							42.4425274943135,
							0
						],
						[
							-76.4380373438564,
							42.44248349430561,
							0
						],
						[
							-76.43795534382522,
							42.44241749429672,
							0
						],
						[
							-76.43782934378603,
							42.44243449430496,
							0
						],
						[
							-76.4377403437591,
							42.44245649431261,
							0
						],
						[
							-76.43765134373253,
							42.4424834943212,
							0
						],
						[
							-76.43745134367158,
							42.44252749433742,
							0
						],
						[
							-76.43737034364557,
							42.4425274943407,
							0
						],
						[
							-76.43730334362326,
							42.44251649434137,
							0
						],
						[
							-76.4371923435816,
							42.44243449433068,
							0
						],
						[
							-76.43718534357691,
							42.44240149432485,
							0
						],
						[
							-76.43715534356531,
							42.44237449432107,
							0
						],
						[
							-76.43714734355908,
							42.44232449431214,
							0
						],
						[
							-76.43711834354859,
							42.44230849431035,
							0
						],
						[
							-76.43711034354278,
							42.44226449430252,
							0
						],
						[
							-76.43708134353184,
							42.44224249429963,
							0
						],
						[
							-76.43707334352523,
							42.44218749428977,
							0
						],
						[
							-76.43705134351693,
							42.44217049428752,
							0
						],
						[
							-76.43702934350426,
							42.44209449427434,
							0
						],
						[
							-76.4370513434919,
							42.4418304942246,
							0
						],
						[
							-76.43707334349777,
							42.44181449422076,
							0
						],
						[
							-76.43707334349573,
							42.44178649421558,
							0
						],
						[
							-76.4370883434973,
							42.44174249420682,
							0
						],
						[
							-76.43707334348645,
							42.44166049419226,
							0
						],
						[
							-76.43703634347258,
							42.44163349418875,
							0
						],
						[
							-76.43699934345989,
							42.44162249418822,
							0
						],
						[
							-76.43691834343427,
							42.44162749419242,
							0
						],
						[
							-76.43680734339989,
							42.44164449420003,
							0
						],
						[
							-76.43677734338983,
							42.44163849420013,
							0
						],
						[
							-76.43671834337252,
							42.44166049420659,
							0
						],
						[
							-76.43661434333914,
							42.44166049421079,
							0
						],
						[
							-76.43654034331378,
							42.44163849420969,
							0
						],
						[
							-76.43645834328503,
							42.44160549420693,
							0
						],
						[
							-76.43633234324341,
							42.44158949420905,
							0
						],
						[
							-76.4362803432271,
							42.44159449421206,
							0
						],
						[
							-76.43609534317662,
							42.44171549424193,
							0
						],
						[
							-76.4360143431526,
							42.44174249425019,
							0
						],
						[
							-76.43590234311667,
							42.44174249425471,
							0
						],
						[
							-76.43579134307943,
							42.44172049425512,
							0
						],
						[
							-76.43566534303493,
							42.44166549425004,
							0
						],
						[
							-76.4355913430092,
							42.44163849424801,
							0
						],
						[
							-76.43551734298427,
							42.44162249424805,
							0
						],
						[
							-76.43548034297116,
							42.44160549424641,
							0
						],
						[
							-76.43546534296634,
							42.44160549424702,
							0
						],
						[
							-76.43545834296616,
							42.44163349425246,
							0
						],
						[
							-76.43545834296813,
							42.44166049425747,
							0
						],
						[
							-76.43566534304995,
							42.44186949428778,
							0
						],
						[
							-76.43568034306323,
							42.44198449430846,
							0
						],
						[
							-76.43566534307129,
							42.44215949434144,
							0
						],
						[
							-76.43564334306585,
							42.44218149434639,
							0
						],
						[
							-76.43562834306508,
							42.4422364943572,
							0
						],
						[
							-76.43560634306009,
							42.44226449436324,
							0
						],
						[
							-76.4355913430577,
							42.44229749436997,
							0
						],
						[
							-76.43551734303998,
							42.44237949438814,
							0
						],
						[
							-76.43536934300303,
							42.44252249442056,
							0
						],
						[
							-76.43527334297661,
							42.44258249443554,
							0
						],
						[
							-76.43514734293741,
							42.44259949444378,
							0
						],
						[
							-76.43507234291336,
							42.44259949444681,
							0
						],
						[
							-76.43501334289398,
							42.44259349444808,
							0
						],
						[
							-76.43490934285575,
							42.44252749444006,
							0
						],
						[
							-76.43490934284765,
							42.4424174944197,
							0
						],
						[
							-76.4349243428493,
							42.44237449441115,
							0
						],
						[
							-76.43498334286257,
							42.4422974943945,
							0
						],
						[
							-76.43499834286496,
							42.44226449438779,
							0
						],
						[
							-76.43502034287039,
							42.44224249438284,
							0
						],
						[
							-76.43505834287657,
							42.44216049436614,
							0
						],
						[
							-76.43505834287126,
							42.44208849435282,
							0
						],
						[
							-76.43501334285278,
							42.44203349434444,
							0
						],
						[
							-76.43485034279523,
							42.44196249433789,
							0
						],
						[
							-76.43476134276462,
							42.44193449433631,
							0
						],
						[
							-76.43461334271431,
							42.44189649433525,
							0
						],
						[
							-76.43445734266344,
							42.44188549433952,
							0
						],
						[
							-76.43442034265318,
							42.44190749434505,
							0
						],
						[
							-76.43438334264167,
							42.4419124943475,
							0
						],
						[
							-76.43427934261234,
							42.44196749436188,
							0
						],
						[
							-76.4342353426019,
							42.44201749437291,
							0
						],
						[
							-76.43422034259952,
							42.44205049437962,
							0
						],
						[
							-76.43419834259409,
							42.44207249438457,
							0
						],
						[
							-76.43416834258885,
							42.44213249439688,
							0
						],
						[
							-76.43414634258944,
							42.44223649441702,
							0
						],
						[
							-76.4341463425988,
							42.44236349444052,
							0
						],
						[
							-76.4341833426131,
							42.44239649444513,
							0
						],
						[
							-76.43445734271393,
							42.44257149446645,
							0
						],
						[
							-76.43456834275719,
							42.44267549448121,
							0
						],
						[
							-76.43459134276908,
							42.44273649449156,
							0
						],
						[
							-76.43456834277139,
							42.44286849451692,
							0
						],
						[
							-76.43453134276152,
							42.44289549452339,
							0
						],
						[
							-76.43442134273062,
							42.44295549453896,
							0
						],
						[
							-76.43439834272368,
							42.44296149454099,
							0
						],
						[
							-76.43436834271523,
							42.44297749454516,
							0
						],
						[
							-76.43424234267604,
							42.4429944945534,
							0
						],
						[
							-76.43412434263774,
							42.44298849455704,
							0
						],
						[
							-76.4339833425897,
							42.44295049455572,
							0
						],
						[
							-76.43392434256867,
							42.44292249455291,
							0
						],
						[
							-76.43379834252545,
							42.44288449455097,
							0
						],
						[
							-76.43376134251356,
							42.44288449455246,
							0
						],
						[
							-76.43368634249354,
							42.44293949456569,
							0
						],
						[
							-76.43368634249555,
							42.44296649457066,
							0
						],
						[
							-76.43366434248975,
							42.44298349457468,
							0
						],
						[
							-76.43364934248896,
							42.44303849458548,
							0
						],
						[
							-76.43357534247008,
							42.44310449460067,
							0
						],
						[
							-76.43353834246018,
							42.44313149460717,
							0
						],
						[
							-76.43347934244242,
							42.4431474946125,
							0
						],
						[
							-76.43334634239937,
							42.44314249461696,
							0
						],
						[
							-76.43327134237369,
							42.44312049461592,
							0
						],
						[
							-76.43297534226213,
							42.44289549458621,
							0
						],
						[
							-76.43293134224604,
							42.442868494583,
							0
						],
						[
							-76.4328343422112,
							42.44281849457767,
							0
						],
						[
							-76.43273834218003,
							42.44281349458062,
							0
						],
						[
							-76.43266434215745,
							42.44282949458658,
							0
						],
						[
							-76.43264234215165,
							42.4428464945906,
							0
						],
						[
							-76.43257534213572,
							42.44292249460737,
							0
						],
						[
							-76.43249334211347,
							42.44297749462085,
							0
						],
						[
							-76.43238934208132,
							42.4429944946282,
							0
						],
						[
							-76.43227134204345,
							42.44299449463297,
							0
						],
						[
							-76.43207134197722,
							42.44296649463585,
							0
						],
						[
							-76.43201934196053,
							42.44296649463795,
							0
						],
						[
							-76.43175234187807,
							42.44301049465688,
							0
						],
						[
							-76.43163434183982,
							42.44300549466071,
							0
						],
						[
							-76.43153034180484,
							42.44298349466085,
							0
						],
						[
							-76.43136734174641,
							42.44290049465207,
							0
						],
						[
							-76.43134534173736,
							42.44287349464796,
							0
						],
						[
							-76.43135234173764,
							42.44284649464269,
							0
						],
						[
							-76.4315003417754,
							42.44271449461228,
							0
						],
						[
							-76.43160434180106,
							42.44260949458865,
							0
						],
						[
							-76.43167834181878,
							42.4425274945705,
							0
						],
						[
							-76.43170034182062,
							42.44245649455645,
							0
						],
						[
							-76.43169334181593,
							42.44242349455063,
							0
						],
						[
							-76.4316633418027,
							42.44237449454279,
							0
						],
						[
							-76.43164134179402,
							42.44235249453959,
							0
						],
						[
							-76.4315373417594,
							42.44233549454064,
							0
						],
						[
							-76.43146334173852,
							42.44237449455086,
							0
						],
						[
							-76.4314043417248,
							42.44244549456638,
							0
						],
						[
							-76.4313153417011,
							42.44251149458218,
							0
						],
						[
							-76.43125634168335,
							42.44252749458753,
							0
						],
						[
							-76.43117434165747,
							42.44253349459196,
							0
						],
						[
							-76.43091534157308,
							42.44251649459925,
							0
						],
						[
							-76.43075934152384,
							42.44252749460759,
							0
						],
						[
							-76.43064834149108,
							42.44256649461929,
							0
						],
						[
							-76.4304783414466,
							42.4427034946515,
							0
						],
						[
							-76.43044034143477,
							42.44270849465396,
							0
						],
						[
							-76.43035134140621,
							42.44270849465755,
							0
						],
						[
							-76.43031434139316,
							42.44269249465608,
							0
						],
						[
							-76.43029234138486,
							42.44267549465383,
							0
						],
						[
							-76.43023334135788,
							42.44256649463603,
							0
						],
						[
							-76.43022534135288,
							42.44253349463025,
							0
						],
						[
							-76.43019634134116,
							42.44250049462531,
							0
						],
						[
							-76.4301883413357,
							42.44246149461841,
							0
						],
						[
							-76.43016634132665,
							42.44243449461433,
							0
						],
						[
							-76.43015934132036,
							42.44237949460444,
							0
						],
						[
							-76.43004834127665,
							42.44226949458853,
							0
						],
						[
							-76.42997434124885,
							42.44221449458136,
							0
						],
						[
							-76.42991434122717,
							42.44218149457767,
							0
						],
						[
							-76.42981134119248,
							42.44215949457776,
							0
						],
						[
							-76.42976634117804,
							42.44215949457956,
							0
						],
						[
							-76.42972934116781,
							42.44218149458512,
							0
						],
						[
							-76.42966234114834,
							42.44220949459304,
							0
						],
						[
							-76.42952934111169,
							42.44229149461356,
							0
						],
						[
							-76.4293513410542,
							42.44228649461983,
							0
						],
						[
							-76.42924034101732,
							42.44226949462116,
							0
						],
						[
							-76.4291813409972,
							42.44225349462057,
							0
						],
						[
							-76.4289733409284,
							42.4422254946238,
							0
						],
						[
							-76.42886334089177,
							42.4422074946249,
							0
						],
						[
							-76.4288673408974,
							42.44226649463566,
							0
						],
						[
							-76.42888334091916,
							42.44249249467683,
							0
						],
						[
							-76.42870834086152,
							42.4424724946802,
							0
						],
						[
							-76.42855934081184,
							42.4424474946816,
							0
						],
						[
							-76.42841434076244,
							42.44240849468022,
							0
						],
						[
							-76.42751134044893,
							42.44208649465709,
							0
						],
						[
							-76.42727434036715,
							42.4420084946522,
							0
						],
						[
							-76.42706634029692,
							42.44196149465191,
							0
						],
						[
							-76.42685334022642,
							42.44193249465514,
							0
						],
						[
							-76.42655334012875,
							42.44191349466374,
							0
						],
						[
							-76.42392033928948,
							42.44199249478462,
							0
						],
						[
							-76.42321833906571,
							42.44201349481683,
							0
						],
						[
							-76.42280233893257,
							42.44201849483453,
							0
						],
						[
							-76.42242633880997,
							42.4419924948449,
							0
						],
						[
							-76.42205533868655,
							42.44193349484895,
							0
						],
						[
							-76.4218313386109,
							42.44188249484856,
							0
						],
						[
							-76.42075033824425,
							42.44161449484257,
							0
						],
						[
							-76.41984233793625,
							42.44138949483757,
							0
						],
						[
							-76.41930333775345,
							42.4412564948347,
							0
						],
						[
							-76.41890633761876,
							42.4411574948324,
							0
						],
						[
							-76.41819433737597,
							42.44096349482523,
							0
						],
						[
							-76.41777333722997,
							42.44081549481482,
							0
						],
						[
							-76.41687233691246,
							42.44043049477993,
							0
						],
						[
							-76.41306233555865,
							42.43864949460398,
							0
						],
						[
							-76.41284633548224,
							42.43855349459494,
							0
						],
						[
							-76.41269433542793,
							42.43847849458719,
							0
						],
						[
							-76.41132133498122,
							42.43839649462741,
							0
						],
						[
							-76.41053933472861,
							42.43837449465485,
							0
						],
						[
							-76.41019533461812,
							42.43837349466856,
							0
						],
						[
							-76.40988033451701,
							42.43837349468126,
							0
						],
						[
							-76.40945733438257,
							42.43839149470163,
							0
						],
						[
							-76.40805133393562,
							42.43845049476926,
							0
						],
						[
							-76.40715333365313,
							42.43852849481992,
							0
						],
						[
							-76.40614033332827,
							42.43853249486151,
							0
						],
						[
							-76.40554033313816,
							42.438566494892,
							0
						],
						[
							-76.4049253329443,
							42.43861449492567,
							0
						],
						[
							-76.40421533272199,
							42.43869049496837,
							0
						],
						[
							-76.40332933244605,
							42.43880549502538,
							0
						],
						[
							-76.40284933229573,
							42.43885649505418,
							0
						],
						[
							-76.40195233201192,
							42.43891249510072,
							0
						],
						[
							-76.40130133180354,
							42.43892049512844,
							0
						],
						[
							-76.4006843316044,
							42.43890549515053,
							0
						],
						[
							-76.39968633127567,
							42.43879149516967,
							0
						],
						[
							-76.39848033087901,
							42.43866149519422,
							0
						],
						[
							-76.39544932988072,
							42.43831649525252,
							0
						],
						[
							-76.39402632941197,
							42.43815349527972,
							0
						],
						[
							-76.39392632937863,
							42.43813649528061,
							0
						],
						[
							-76.39383832934884,
							42.43811549528027,
							0
						],
						[
							-76.39375332931927,
							42.43808449527796,
							0
						],
						[
							-76.39367232929071,
							42.43804949527475,
							0
						],
						[
							-76.39359832926402,
							42.43800949527032,
							0
						],
						[
							-76.39346732921483,
							42.43791249525766,
							0
						],
						[
							-76.393167329094,
							42.43757849520792,
							0
						],
						[
							-76.39297932901957,
							42.43738649517994,
							0
						],
						[
							-76.3929583290112,
							42.43736449517673,
							0
						],
						[
							-76.39263832888592,
							42.4370574951328,
							0
						],
						[
							-76.39211432868782,
							42.43665049507857,
							0
						],
						[
							-76.39207832867393,
							42.43661849507409,
							0
						],
						[
							-76.39128132837453,
							42.43602549499644,
							0
						],
						[
							-76.39079932819146,
							42.4356394949444,
							0
						],
						[
							-76.39012932793601,
							42.43508949486959,
							0
						],
						[
							-76.3892893276135,
							42.43436949477016,
							0
						],
						[
							-76.38911232754566,
							42.43421949474953,
							0
						],
						[
							-76.38846632729815,
							42.43367249467428,
							0
						],
						[
							-76.38728132684516,
							42.43268349453892,
							0
						],
						[
							-76.38642432651821,
							42.43197749444275,
							0
						],
						[
							-76.38642732652646,
							42.43207649446097,
							0
						],
						[
							-76.38645032653942,
							42.4321524944741,
							0
						],
						[
							-76.38646232654894,
							42.43222949448787,
							0
						],
						[
							-76.38646232655451,
							42.43230549450195,
							0
						],
						[
							-76.38645332655726,
							42.43238249451657,
							0
						],
						[
							-76.38643232655618,
							42.43245949453166,
							0
						],
						[
							-76.38640132655152,
							42.43253149454624,
							0
						],
						[
							-76.38635932654338,
							42.43260449456145,
							0
						],
						[
							-76.38630832653163,
							42.43266749457517,
							0
						],
						[
							-76.38624832651708,
							42.43273149458942,
							0
						],
						[
							-76.386178326499,
							42.43279149460336,
							0
						],
						[
							-76.38610132647798,
							42.43284149461571,
							0
						],
						[
							-76.38601832645472,
							42.43288749462759,
							0
						],
						[
							-76.38592832642891,
							42.43292949463898,
							0
						],
						[
							-76.38583332640076,
							42.43296149464876,
							0
						],
						[
							-76.38443332598139,
							42.43337049478085,
							0
						],
						[
							-76.38358432572741,
							42.43362349486188,
							0
						],
						[
							-76.38308432557729,
							42.43376449490815,
							0
						],
						[
							-76.38258932542647,
							42.43387449494844,
							0
						],
						[
							-76.3817873251803,
							42.43402849500927,
							0
						],
						[
							-76.38094832492133,
							42.43416949506916,
							0
						],
						[
							-76.38015732467866,
							42.43432249512934,
							0
						],
						[
							-76.37985832458743,
							42.43438749515342,
							0
						],
						[
							-76.37973732455052,
							42.43441349516312,
							0
						],
						[
							-76.37968032453308,
							42.43442549516762,
							0
						],
						[
							-76.37949832447761,
							42.43446549518237,
							0
						],
						[
							-76.37929032441465,
							42.43451749520038,
							0
						],
						[
							-76.37907132434987,
							42.43459249522309,
							0
						],
						[
							-76.3789903243262,
							42.43462449523227,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090014002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>22900507</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>56010</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4537560</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3885629</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090014002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090014002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1310</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>626</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>5658.43</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>37</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.95</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.74</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>23478</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>23139</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>24451</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13077</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12736</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13624</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7735</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7468</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8058</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5324</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5247</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5545</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.16</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.11</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>3443</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>5436</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>126</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2649</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1271</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1618</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>871</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00010"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.47529436188412,
							42.52466550798665,
							0
						],
						[
							-76.47497936178378,
							42.52467650800143,
							0
						],
						[
							-76.4726773610506,
							42.52475750810967,
							0
						],
						[
							-76.47261736095936,
							42.52378550793268,
							0
						],
						[
							-76.47246236069954,
							42.52094850741526,
							0
						],
						[
							-76.47231436043683,
							42.51804150688457,
							0
						],
						[
							-76.47213936012602,
							42.51460150625653,
							0
						],
						[
							-76.47196535983342,
							42.51140250567289,
							0
						],
						[
							-76.47186235966116,
							42.50952150532971,
							0
						],
						[
							-76.47181135957457,
							42.50857250515652,
							0
						],
						[
							-76.47175935949863,
							42.50777150501072,
							0
						],
						[
							-76.47172135944317,
							42.50718650490423,
							0
						],
						[
							-76.47169235940092,
							42.50674150482321,
							0
						],
						[
							-76.47160935928825,
							42.50557850461179,
							0
						],
						[
							-76.47157335923929,
							42.5050725045198,
							0
						],
						[
							-76.47150835914739,
							42.50411250434512,
							0
						],
						[
							-76.47143935905046,
							42.5031015041612,
							0
						],
						[
							-76.47130735885672,
							42.50105450378845,
							0
						],
						[
							-76.47114735862641,
							42.49863450334794,
							0
						],
						[
							-76.4710883585816,
							42.49828450328566,
							0
						],
						[
							-76.47098035852201,
							42.49794750322779,
							0
						],
						[
							-76.47082535844778,
							42.49761650317292,
							0
						],
						[
							-76.47064835837018,
							42.49733550312817,
							0
						],
						[
							-76.47058635834364,
							42.49724550311407,
							0
						],
						[
							-76.46999935810912,
							42.49662250302274,
							0
						],
						[
							-76.46897535770299,
							42.49557550287078,
							0
						],
						[
							-76.46891335767836,
							42.49551150286146,
							0
						],
						[
							-76.4686793575858,
							42.49527550282732,
							0
						],
						[
							-76.46858835754867,
							42.49516850281126,
							0
						],
						[
							-76.46846535749766,
							42.49501250278742,
							0
						],
						[
							-76.46835035744854,
							42.4948475027616,
							0
						],
						[
							-76.46824535740198,
							42.4946735027337,
							0
						],
						[
							-76.46818935737637,
							42.49457050271693,
							0
						],
						[
							-76.46811235734006,
							42.49441350269104,
							0
						],
						[
							-76.46805235731021,
							42.49427050266705,
							0
						],
						[
							-76.46797935727318,
							42.49408650263601,
							0
						],
						[
							-76.46792135724067,
							42.49389850260364,
							0
						],
						[
							-76.4678863572185,
							42.4937505025777,
							0
						],
						[
							-76.46786235720046,
							42.49361050255281,
							0
						],
						[
							-76.46784135717877,
							42.49340850251635,
							0
						],
						[
							-76.46784635717248,
							42.49330150249637,
							0
						],
						[
							-76.46785635715995,
							42.49308850245662,
							0
						],
						[
							-76.46783735713336,
							42.49281150240622,
							0
						],
						[
							-76.46778535706008,
							42.49204550226678,
							0
						],
						[
							-76.46773235695359,
							42.49083450204519,
							0
						],
						[
							-76.46770635692248,
							42.49052650198934,
							0
						],
						[
							-76.46766835687784,
							42.49008750190977,
							0
						],
						[
							-76.46766035686308,
							42.48992250187961,
							0
						],
						[
							-76.46763735681971,
							42.48943550179055,
							0
						],
						[
							-76.46752635663971,
							42.487481501434,
							0
						],
						[
							-76.4675143566196,
							42.48726150139382,
							0
						],
						[
							-76.46751035661374,
							42.48719950138255,
							0
						],
						[
							-76.46745535652494,
							42.48623650120681,
							0
						],
						[
							-76.467428356482,
							42.48577250112216,
							0
						],
						[
							-76.4673793564048,
							42.48494050097042,
							0
						],
						[
							-76.46733835633049,
							42.48411250081905,
							0
						],
						[
							-76.46733335627763,
							42.48341850069101,
							0
						],
						[
							-76.46732635621319,
							42.48257650053569,
							0
						],
						[
							-76.4673173561967,
							42.48239250050205,
							0
						],
						[
							-76.46657835596282,
							42.48243750054026,
							0
						],
						[
							-76.46633835588608,
							42.48244150055071,
							0
						],
						[
							-76.46546335561096,
							42.48251950060053,
							0
						],
						[
							-76.46516635551725,
							42.48254150061661,
							0
						],
						[
							-76.46416835520014,
							42.48258550066513,
							0
						],
						[
							-76.46319335488974,
							42.48262050071105,
							0
						],
						[
							-76.46011835391056,
							42.48272750085522,
							0
						],
						[
							-76.456159352646,
							42.48281350103125,
							0
						],
						[
							-76.45483535222392,
							42.48285350109221,
							0
						],
						[
							-76.45481135220531,
							42.48270550106581,
							0
						],
						[
							-76.4547933521756,
							42.48238150100666,
							0
						],
						[
							-76.45478235216773,
							42.48232250099619,
							0
						],
						[
							-76.45475835215677,
							42.48227850098905,
							0
						],
						[
							-76.45472135214186,
							42.48223750098295,
							0
						],
						[
							-76.45467435212419,
							42.4822025009784,
							0
						],
						[
							-76.45461835210429,
							42.48217650097585,
							0
						],
						[
							-76.45455635208307,
							42.48215850097504,
							0
						],
						[
							-76.45449035206128,
							42.48215050097623,
							0
						],
						[
							-76.45442935204214,
							42.4821565009798,
							0
						],
						[
							-76.45366235179725,
							42.48217450101414,
							0
						],
						[
							-76.45358835177394,
							42.48218050101825,
							0
						],
						[
							-76.45286335154188,
							42.48218950104923,
							0
						],
						[
							-76.45240335139596,
							42.48221350107228,
							0
						],
						[
							-76.4523293513719,
							42.48220950107453,
							0
						],
						[
							-76.4522333513385,
							42.48217450107194,
							0
						],
						[
							-76.4521943513237,
							42.48214350106779,
							0
						],
						[
							-76.45216535131212,
							42.48211250106323,
							0
						],
						[
							-76.45214535130303,
							42.48207650105739,
							0
						],
						[
							-76.45213535129686,
							42.4820365010504,
							0
						],
						[
							-76.45212035127412,
							42.48179350100607,
							0
						],
						[
							-76.452107351267,
							42.48175350099922,
							0
						],
						[
							-76.45208335125662,
							42.48171750099355,
							0
						],
						[
							-76.4520483512431,
							42.48168650098922,
							0
						],
						[
							-76.45200635122762,
							42.48165950098594,
							0
						],
						[
							-76.45195635121003,
							42.48163850098408,
							0
						],
						[
							-76.45190235119175,
							42.48162550098387,
							0
						],
						[
							-76.45070535080954,
							42.48165350103743,
							0
						],
						[
							-76.45066335072868,
							42.48074050087038,
							0
						],
						[
							-76.45058135057208,
							42.47897550054746,
							0
						],
						[
							-76.45052035044618,
							42.47753450028358,
							0
						],
						[
							-76.45050135040599,
							42.47707250019894,
							0
						],
						[
							-76.45044335029655,
							42.47584149997375,
							0
						],
						[
							-76.45037535016701,
							42.4743814997066,
							0
						],
						[
							-76.45031335003371,
							42.47284449942497,
							0
						],
						[
							-76.45029034997536,
							42.47215349929815,
							0
						],
						[
							-76.4502333498502,
							42.47070449903256,
							0
						],
						[
							-76.45020634978975,
							42.47000249890388,
							0
						],
						[
							-76.45014834968484,
							42.46883249868989,
							0
						],
						[
							-76.45010934957543,
							42.46751849844853,
							0
						],
						[
							-76.4497213494519,
							42.46753249846679,
							0
						],
						[
							-76.44938034934303,
							42.46754049848205,
							0
						],
						[
							-76.44913234926506,
							42.46756249849615,
							0
						],
						[
							-76.44888534918866,
							42.46760149851336,
							0
						],
						[
							-76.44864534911582,
							42.46765849853358,
							0
						],
						[
							-76.44841234904686,
							42.46773749855761,
							0
						],
						[
							-76.44627034817344,
							42.46521649817804,
							0
						],
						[
							-76.44603834807758,
							42.46492649813379,
							0
						],
						[
							-76.44586834800258,
							42.46464949808944,
							0
						],
						[
							-76.44513634766376,
							42.46324049785847,
							0
						],
						[
							-76.44474934747917,
							42.46242149772264,
							0
						],
						[
							-76.44421834721764,
							42.46118549751554,
							0
						],
						[
							-76.44414534718398,
							42.46104649749277,
							0
						],
						[
							-76.44405234714424,
							42.46091249747176,
							0
						],
						[
							-76.4439483471023,
							42.4607964974545,
							0
						],
						[
							-76.44381234704953,
							42.46067249743707,
							0
						],
						[
							-76.44373634702086,
							42.4606144974294,
							0
						],
						[
							-76.44231834649135,
							42.4596054973001,
							0
						],
						[
							-76.44210434640895,
							42.45941949727435,
							0
						],
						[
							-76.44167234623723,
							42.45897049720875,
							0
						],
						[
							-76.44160234621086,
							42.45891749720178,
							0
						],
						[
							-76.44152334618187,
							42.45886849719592,
							0
						],
						[
							-76.44143934615167,
							42.45882449719117,
							0
						],
						[
							-76.4413493461202,
							42.45878949718832,
							0
						],
						[
							-76.4412543460875,
							42.45875949718663,
							0
						],
						[
							-76.4411563460545,
							42.45873849718669,
							0
						],
						[
							-76.44105534602112,
							42.45872549718837,
							0
						],
						[
							-76.44095334598786,
							42.45871849719119,
							0
						],
						[
							-76.44085034595487,
							42.45871949719555,
							0
						],
						[
							-76.44074834592286,
							42.4587294972015,
							0
						],
						[
							-76.44064934589251,
							42.45874849720903,
							0
						],
						[
							-76.44055334586346,
							42.45877249721733,
							0
						],
						[
							-76.43979134563618,
							42.45900749729159,
							0
						],
						[
							-76.43967434560004,
							42.45902649729983,
							0
						],
						[
							-76.43961434558085,
							42.45902749730243,
							0
						],
						[
							-76.43949534554213,
							42.45902049730596,
							0
						],
						[
							-76.4393803455033,
							42.45899449730578,
							0
						],
						[
							-76.43926834546345,
							42.4589414973005,
							0
						],
						[
							-76.43922534544707,
							42.45890649729577,
							0
						],
						[
							-76.43917634542639,
							42.45883949728535,
							0
						],
						[
							-76.43914634541147,
							42.45876749727325,
							0
						],
						[
							-76.43913834540359,
							42.45869549726025,
							0
						],
						[
							-76.43914134540161,
							42.45865549725274,
							0
						],
						[
							-76.43915034540187,
							42.45861949724571,
							0
						],
						[
							-76.43938134543828,
							42.4581074971417,
							0
						],
						[
							-76.43940334544033,
							42.45803949712822,
							0
						],
						[
							-76.43941534543887,
							42.45796749711441,
							0
						],
						[
							-76.4394163454339,
							42.45789549710106,
							0
						],
						[
							-76.43940934542664,
							42.45782749708877,
							0
						],
						[
							-76.43939234541597,
							42.45775649707632,
							0
						],
						[
							-76.43925434534756,
							42.45742949702142,
							0
						],
						[
							-76.43921334532976,
							42.45736649701142,
							0
						],
						[
							-76.43916434530976,
							42.45730849700269,
							0
						],
						[
							-76.43910734528757,
							42.45725549699517,
							0
						],
						[
							-76.43904234526279,
							42.457202496988,
							0
						],
						[
							-76.43897034523646,
							42.45715849698279,
							0
						],
						[
							-76.43858434509906,
							42.45697549696452,
							0
						],
						[
							-76.43855334508808,
							42.45696149696317,
							0
						],
						[
							-76.43846034505492,
							42.4569164969586,
							0
						],
						[
							-76.43840234505701,
							42.45719749701291,
							0
						],
						[
							-76.43787634494421,
							42.45795849717494,
							0
						],
						[
							-76.43781234495094,
							42.45832849724594,
							0
						],
						[
							-76.43717734480245,
							42.4590794974105,
							0
						],
						[
							-76.43694034474272,
							42.45930149746112,
							0
						],
						[
							-76.43751034495412,
							42.4596874975095,
							0
						],
						[
							-76.4384803452898,
							42.46001749753135,
							0
						],
						[
							-76.44005834581014,
							42.46020549750238,
							0
						],
						[
							-76.44101534613694,
							42.46047149751288,
							0
						],
						[
							-76.44182734645513,
							42.46125249762454,
							0
						],
						[
							-76.44239134668022,
							42.46185049771234,
							0
						],
						[
							-76.44246634676075,
							42.46261649785096,
							0
						],
						[
							-76.44223234677585,
							42.46384049808675,
							0
						],
						[
							-76.4418253466898,
							42.46444549821509,
							0
						],
						[
							-76.44120634653719,
							42.46507049835567,
							0
						],
						[
							-76.44068834637245,
							42.46509149838048,
							0
						],
						[
							-76.43929434590537,
							42.46482549838763,
							0
						],
						[
							-76.43771534536987,
							42.46443649837947,
							0
						],
						[
							-76.43682834506951,
							42.46422449837612,
							0
						],
						[
							-76.43657334499886,
							42.46437649841452,
							0
						],
						[
							-76.43605034490636,
							42.46539949862483,
							0
						],
						[
							-76.43562134480322,
							42.46586849872888,
							0
						],
						[
							-76.43488034458629,
							42.46615249881135,
							0
						],
						[
							-76.43465934452124,
							42.46623249883505,
							0
						],
						[
							-76.43420234438663,
							42.46639649888385,
							0
						],
						[
							-76.43375734423277,
							42.46624749887426,
							0
						],
						[
							-76.43321834401895,
							42.46569349879359,
							0
						],
						[
							-76.43302434393625,
							42.46541649875019,
							0
						],
						[
							-76.43274934383706,
							42.46526849873395,
							0
						],
						[
							-76.43236834371545,
							42.46527749875101,
							0
						],
						[
							-76.43195534360392,
							42.46556349882057,
							0
						],
						[
							-76.43108434335514,
							42.46598149893305,
							0
						],
						[
							-76.4303573431387,
							42.46621149900494,
							0
						],
						[
							-76.4301853431154,
							42.46664449909196,
							0
						],
						[
							-76.4303383432099,
							42.46726049919969,
							0
						],
						[
							-76.43046034326181,
							42.46743349922677,
							0
						],
						[
							-76.43011734317034,
							42.4676864992874,
							0
						],
						[
							-76.429523342996,
							42.46790849935243,
							0
						],
						[
							-76.42907634285687,
							42.46796749938141,
							0
						],
						[
							-76.42878534275867,
							42.46790249938113,
							0
						],
						[
							-76.42856734268506,
							42.46785349938088,
							0
						],
						[
							-76.42814934253312,
							42.4676124993532,
							0
						],
						[
							-76.42796434243071,
							42.46702849925266,
							0
						],
						[
							-76.4277143423114,
							42.46649849916476,
							0
						],
						[
							-76.4275033422069,
							42.465999499081,
							0
						],
						[
							-76.42693034194714,
							42.46497049891386,
							0
						],
						[
							-76.42690634193626,
							42.46492749890685,
							0
						],
						[
							-76.42662634182369,
							42.46461949886121,
							0
						],
						[
							-76.42595434159782,
							42.46448149886284,
							0
						],
						[
							-76.42564934149534,
							42.46441949886369,
							0
						],
						[
							-76.42440734111342,
							42.464647498956,
							0
						],
						[
							-76.42370834092492,
							42.46513449907429,
							0
						],
						[
							-76.42374734097051,
							42.46558349915576,
							0
						],
						[
							-76.42403134108922,
							42.46595749921344,
							0
						],
						[
							-76.42429634119985,
							42.46630449926692,
							0
						],
						[
							-76.42462734136446,
							42.46709649940001,
							0
						],
						[
							-76.42446534134473,
							42.46753449948756,
							0
						],
						[
							-76.42424634128894,
							42.46773149953281,
							0
						],
						[
							-76.42446134139405,
							42.46822149961476,
							0
						],
						[
							-76.42531434170951,
							42.46878649968478,
							0
						],
						[
							-76.42609134199034,
							42.46921249973217,
							0
						],
						[
							-76.4265993422084,
							42.4699584998496,
							0
						],
						[
							-76.42660934224786,
							42.47045049994017,
							0
						],
						[
							-76.42617334211873,
							42.47059749998497,
							0
						],
						[
							-76.42596034205565,
							42.47066950000688,
							0
						],
						[
							-76.42491934171143,
							42.47053350002377,
							0
						],
						[
							-76.42397034138135,
							42.47018849999832,
							0
						],
						[
							-76.42304334105943,
							42.46985849997472,
							0
						],
						[
							-76.42232834082725,
							42.46982249999694,
							0
						],
						[
							-76.42141034054579,
							42.4700025000673,
							0
						],
						[
							-76.4207123403452,
							42.47032150015446,
							0
						],
						[
							-76.41987634016904,
							42.47157350041972,
							0
						],
						[
							-76.41971334012555,
							42.4716935004485,
							0
						],
						[
							-76.41921133999165,
							42.47206350053719,
							0
						],
						[
							-76.418727339839,
							42.47210050056357,
							0
						],
						[
							-76.41848033976123,
							42.47212150057743,
							0
						],
						[
							-76.41723433936673,
							42.4721965006416,
							0
						],
						[
							-76.41609033895136,
							42.47154350056706,
							0
						],
						[
							-76.4153403386992,
							42.47138950056885,
							0
						],
						[
							-76.41457533845221,
							42.47137050059622,
							0
						],
						[
							-76.41438633842836,
							42.47187050069632,
							0
						],
						[
							-76.41424433840722,
							42.47220250076343,
							0
						],
						[
							-76.4142533384143,
							42.47225950077361,
							0
						],
						[
							-76.4142983384446,
							42.47247450081155,
							0
						],
						[
							-76.41434533848224,
							42.47278050086622,
							0
						],
						[
							-76.41448533859443,
							42.4736935010294,
							0
						],
						[
							-76.41461533871389,
							42.47474850121924,
							0
						],
						[
							-76.41436733868252,
							42.47540350135034,
							0
						],
						[
							-76.41404033860671,
							42.47579950143678,
							0
						],
						[
							-76.41366433850257,
							42.47602450149356,
							0
						],
						[
							-76.4131363383458,
							42.47619750154686,
							0
						],
						[
							-76.41247733813495,
							42.4762075015753,
							0
						],
						[
							-76.41219733803776,
							42.47610850156832,
							0
						],
						[
							-76.4109943376352,
							42.47588750157601,
							0
						],
						[
							-76.40889633694643,
							42.47568150162262,
							0
						],
						[
							-76.40780933659595,
							42.47566150166281,
							0
						],
						[
							-76.40724433642765,
							42.47583950171852,
							0
						],
						[
							-76.40713533639516,
							42.4758735017292,
							0
						],
						[
							-76.4067843362968,
							42.47606850177942,
							0
						],
						[
							-76.40629733616319,
							42.47637750185623,
							0
						],
						[
							-76.406062336096,
							42.47648950188641,
							0
						],
						[
							-76.40603233608762,
							42.47650650189075,
							0
						],
						[
							-76.406075336109,
							42.47660950190807,
							0
						],
						[
							-76.40625233619744,
							42.47703850198025,
							0
						],
						[
							-76.40630133625427,
							42.47759650208144,
							0
						],
						[
							-76.40635033629881,
							42.47798750215176,
							0
						],
						[
							-76.40642933635336,
							42.47838350222177,
							0
						],
						[
							-76.40655233642917,
							42.47887650230796,
							0
						],
						[
							-76.40661733646728,
							42.4791105023486,
							0
						],
						[
							-76.40669033650788,
							42.47934350238874,
							0
						],
						[
							-76.4067533365413,
							42.47952250241928,
							0
						],
						[
							-76.40695133665115,
							42.48015050252741,
							0
						],
						[
							-76.40747833693803,
							42.48174750280137,
							0
						],
						[
							-76.40788533715758,
							42.48295350300789,
							0
						],
						[
							-76.4079583371979,
							42.48318250304727,
							0
						],
						[
							-76.40800233722094,
							42.48330350306787,
							0
						],
						[
							-76.40806133725742,
							42.48354150310948,
							0
						],
						[
							-76.40810533728909,
							42.48377950315169,
							0
						],
						[
							-76.4081323373153,
							42.48401750319462,
							0
						],
						[
							-76.40816833734041,
							42.48420150322718,
							0
						],
						[
							-76.40823133737325,
							42.48437250325625,
							0
						],
						[
							-76.4083563374338,
							42.48464950330239,
							0
						],
						[
							-76.40845033747716,
							42.48482850333168,
							0
						],
						[
							-76.40867033758113,
							42.48528050340637,
							0
						],
						[
							-76.40871633760351,
							42.48538350342354,
							0
						],
						[
							-76.40878833764083,
							42.48557650345631,
							0
						],
						[
							-76.40881833765573,
							42.48564750346822,
							0
						],
						[
							-76.40887033768169,
							42.48577350348941,
							0
						],
						[
							-76.4088893376914,
							42.48582250349771,
							0
						],
						[
							-76.40896833773004,
							42.48600250352778,
							0
						],
						[
							-76.40914733781354,
							42.48635550358581,
							0
						],
						[
							-76.40917133782551,
							42.48641350359556,
							0
						],
						[
							-76.40962833803198,
							42.48722350372684,
							0
						],
						[
							-76.41191533876125,
							42.48715450362172,
							0
						],
						[
							-76.4151973398073,
							42.48704850346958,
							0
						],
						[
							-76.41619734012603,
							42.48701650342328,
							0
						],
						[
							-76.41962034121799,
							42.48691950326708,
							0
						],
						[
							-76.41969434124137,
							42.48691450326317,
							0
						],
						[
							-76.42094134163897,
							42.48687650320577,
							0
						],
						[
							-76.42101634166261,
							42.48687050320163,
							0
						],
						[
							-76.42661134344633,
							42.48669750294361,
							0
						],
						[
							-76.43137434496593,
							42.48656650272692,
							0
						],
						[
							-76.43168434545481,
							42.49184350368964,
							0
						],
						[
							-76.43200734596506,
							42.49735150469434,
							0
						],
						[
							-76.43202734600101,
							42.49775150476746,
							0
						],
						[
							-76.43204134602308,
							42.49798950481085,
							0
						],
						[
							-76.43204434602899,
							42.49805650482312,
							0
						],
						[
							-76.4320553460458,
							42.49823650485594,
							0
						],
						[
							-76.43225334636566,
							42.50170750548919,
							0
						],
						[
							-76.43229634643647,
							42.5024795056301,
							0
						],
						[
							-76.43231734646989,
							42.50284050569594,
							0
						],
						[
							-76.43252734681352,
							42.50658050637833,
							0
						],
						[
							-76.43271034711655,
							42.50988750698178,
							0
						],
						[
							-76.43282734728314,
							42.51163350729951,
							0
						],
						[
							-76.43283434728937,
							42.51168750730921,
							0
						],
						[
							-76.43289034737533,
							42.51260750747686,
							0
						],
						[
							-76.43293634744576,
							42.51336050761407,
							0
						],
						[
							-76.43310134772591,
							42.51643450817511,
							0
						],
						[
							-76.44082735019057,
							42.5162115078214,
							0
						],
						[
							-76.44084035020805,
							42.5163915078541,
							0
						],
						[
							-76.44079035022298,
							42.51681050793349,
							0
						],
						[
							-76.44079135022994,
							42.51690050795008,
							0
						],
						[
							-76.44080335024016,
							42.51698650796546,
							0
						],
						[
							-76.44083035025541,
							42.5170755079808,
							0
						],
						[
							-76.44087935027875,
							42.51717850799785,
							0
						],
						[
							-76.44089835028686,
							42.51720550800206,
							0
						],
						[
							-76.4415843505774,
							42.51815550814973,
							0
						],
						[
							-76.4417333506381,
							42.51832950817584,
							0
						],
						[
							-76.44193335071645,
							42.51852050820302,
							0
						],
						[
							-76.4421593508022,
							42.51869850822673,
							0
						],
						[
							-76.44439235162771,
							42.52016450840707,
							0
						],
						[
							-76.44787335290626,
							42.5223365086672,
							0
						],
						[
							-76.44993235366218,
							42.52361650882018,
							0
						],
						[
							-76.45256035462158,
							42.52517650900178,
							0
						],
						[
							-76.45266635465954,
							42.52522950900728,
							0
						],
						[
							-76.45278135470002,
							42.52527750901148,
							0
						],
						[
							-76.45290235474377,
							42.52534350901875,
							0
						],
						[
							-76.45304635497516,
							42.52784550947479,
							0
						],
						[
							-76.45314635514517,
							42.52970850981465,
							0
						],
						[
							-76.45319335521539,
							42.53045350995024,
							0
						],
						[
							-76.45335535545746,
							42.53302051041749,
							0
						],
						[
							-76.45347435563517,
							42.53490451076038,
							0
						],
						[
							-76.45347435563916,
							42.53495851077034,
							0
						],
						[
							-76.45354935575457,
							42.53619151099488,
							0
						],
						[
							-76.45360335584868,
							42.53722851118405,
							0
						],
						[
							-76.45367035596269,
							42.53847751141184,
							0
						],
						[
							-76.45376635609381,
							42.53983151165781,
							0
						],
						[
							-76.45519235654479,
							42.53973651158253,
							0
						],
						[
							-76.45861135763265,
							42.53959851141856,
							0
						],
						[
							-76.46063635827726,
							42.53952051132212,
							0
						],
						[
							-76.46332935913452,
							42.53941751119401,
							0
						],
						[
							-76.4634553591747,
							42.53941351118817,
							0
						],
						[
							-76.46354735920394,
							42.53940951118371,
							0
						],
						[
							-76.46474335958524,
							42.53937151112825,
							0
						],
						[
							-76.46489235963294,
							42.53936951112183,
							0
						],
						[
							-76.46533335977382,
							42.53935951110212,
							0
						],
						[
							-76.46540735979721,
							42.5393545110982,
							0
						],
						[
							-76.467477360458,
							42.53930051100434,
							0
						],
						[
							-76.46751636047254,
							42.53932751100775,
							0
						],
						[
							-76.46755136048141,
							42.53929551100043,
							0
						],
						[
							-76.47127736167046,
							42.5391935108306,
							0
						],
						[
							-76.4714163616536,
							42.53836351067182,
							0
						],
						[
							-76.47153836162823,
							42.53749251050616,
							0
						],
						[
							-76.4718273615786,
							42.53557051013978,
							0
						],
						[
							-76.47203636158187,
							42.53470850997224,
							0
						],
						[
							-76.47205936158421,
							42.53464050995875,
							0
						],
						[
							-76.47239436163238,
							42.53383850979716,
							0
						],
						[
							-76.47249036165017,
							42.53366250976082,
							0
						],
						[
							-76.47290036173368,
							42.53301250962424,
							0
						],
						[
							-76.47303236175829,
							42.53277250957459,
							0
						],
						[
							-76.47344236182852,
							42.53194350940497,
							0
						],
						[
							-76.47402936192671,
							42.53072450915624,
							0
						],
						[
							-76.47419036194589,
							42.53028550906868,
							0
						],
						[
							-76.47428936194427,
							42.52983450898143,
							0
						],
						[
							-76.47482036184977,
							42.52625650829953,
							0
						],
						[
							-76.47495436184235,
							42.52557550816841,
							0
						],
						[
							-76.47500936184593,
							42.5253855081311,
							0
						],
						[
							-76.47504236184815,
							42.52527250810891,
							0
						],
						[
							-76.47509336185313,
							42.52511850807841,
							0
						],
						[
							-76.47529436188412,
							42.52466550798665,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>11</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090015001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>22694708</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>362025</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4979696</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4394090</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090015001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090015001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1643</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>620</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>5607.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>48</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.97</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>23138</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>22800</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>24112</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13117</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12773</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13660</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7870</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7603</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8192</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5247</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5170</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5468</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.11</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>3551</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>6853</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>82</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2179</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>999</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1234</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>847</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00011"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.33532531377828,
							42.48192050574227,
							0
						],
						[
							-76.33629431408646,
							42.48187850569549,
							0
						],
						[
							-76.33832131473189,
							42.48180150559963,
							0
						],
						[
							-76.33975831518987,
							42.48175250553271,
							0
						],
						[
							-76.34179131583936,
							42.48170450544197,
							0
						],
						[
							-76.34303631623706,
							42.48167450538627,
							0
						],
						[
							-76.34301031619364,
							42.48119750529912,
							0
						],
						[
							-76.34297731610225,
							42.4800985050972,
							0
						],
						[
							-76.34293331599325,
							42.47880750486018,
							0
						],
						[
							-76.34286831587016,
							42.47741650460552,
							0
						],
						[
							-76.34283731582882,
							42.47698950452779,
							0
						],
						[
							-76.34284431581526,
							42.47677450448776,
							0
						],
						[
							-76.34285031580353,
							42.47658850445311,
							0
						],
						[
							-76.34286331579308,
							42.47638950441577,
							0
						],
						[
							-76.34286831578015,
							42.47619150437896,
							0
						],
						[
							-76.34285931574513,
							42.47575450429851,
							0
						],
						[
							-76.3428683157279,
							42.47548050424744,
							0
						],
						[
							-76.34290031569871,
							42.47494350414682,
							0
						],
						[
							-76.34301431570815,
							42.4745735040738,
							0
						],
						[
							-76.34319431574598,
							42.47430150401623,
							0
						],
						[
							-76.34362631585026,
							42.4738325039121,
							0
						],
						[
							-76.34385331590812,
							42.47362750386504,
							0
						],
						[
							-76.34408931596914,
							42.47342650381835,
							0
						],
						[
							-76.34429831602218,
							42.47323450377441,
							0
						],
						[
							-76.34442931605122,
							42.4730575037364,
							0
						],
						[
							-76.3444993160452,
							42.47266950366181,
							0
						],
						[
							-76.34445931599467,
							42.47215650356851,
							0
						],
						[
							-76.34441031595483,
							42.47182850350983,
							0
						],
						[
							-76.34437431591455,
							42.47143750343894,
							0
						],
						[
							-76.34439131589019,
							42.47103150336314,
							0
						],
						[
							-76.34436931586328,
							42.47076150331408,
							0
						],
						[
							-76.34427931581168,
							42.47045250326055,
							0
						],
						[
							-76.34414931574686,
							42.47013850320769,
							0
						],
						[
							-76.34400031567661,
							42.46983350315728,
							0
						],
						[
							-76.34349731545797,
							42.46905650303378,
							0
						],
						[
							-76.34322331534207,
							42.4686765029745,
							0
						],
						[
							-76.34315231531207,
							42.46857850295924,
							0
						],
						[
							-76.34269931512229,
							42.46797550286591,
							0
						],
						[
							-76.34245231501808,
							42.46763650281314,
							0
						],
						[
							-76.34232531495891,
							42.46738650277202,
							0
						],
						[
							-76.34222131487897,
							42.46675250265887,
							0
						],
						[
							-76.34220831484863,
							42.46639650259356,
							0
						],
						[
							-76.34223131482894,
							42.46602750252435,
							0
						],
						[
							-76.34221431479835,
							42.46568550246175,
							0
						],
						[
							-76.34216031475361,
							42.46531250239492,
							0
						],
						[
							-76.34213231471621,
							42.46492550232445,
							0
						],
						[
							-76.34211031467903,
							42.46451550224947,
							0
						],
						[
							-76.34210531464701,
							42.46410150217308,
							0
						],
						[
							-76.34207131459382,
							42.46352550206787,
							0
						],
						[
							-76.34207431456073,
							42.4630615019819,
							0
						],
						[
							-76.34205931452522,
							42.46264350190515,
							0
						],
						[
							-76.34201331443937,
							42.46167550172788,
							0
						],
						[
							-76.34201931440592,
							42.46119350163846,
							0
						],
						[
							-76.34193931431847,
							42.46035250148605,
							0
						],
						[
							-76.34193131428881,
							42.45998350141809,
							0
						],
						[
							-76.3419453142669,
							42.45962350135092,
							0
						],
						[
							-76.34197731426028,
							42.45939350130706,
							0
						],
						[
							-76.34206531427452,
							42.45920250126818,
							0
						],
						[
							-76.34229731432275,
							42.45884450119259,
							0
						],
						[
							-76.34252731436732,
							42.4584455011095,
							0
						],
						[
							-76.34297331444374,
							42.45753550092315,
							0
						],
						[
							-76.34309131446074,
							42.45725050086568,
							0
						],
						[
							-76.34310631444565,
							42.4569795008149,
							0
						],
						[
							-76.34309031439163,
							42.45631350069229,
							0
						],
						[
							-76.3430553143553,
							42.45597150063041,
							0
						],
						[
							-76.34302531431764,
							42.45558950056092,
							0
						],
						[
							-76.34300731426458,
							42.45494550044246,
							0
						],
						[
							-76.34301531423347,
							42.45448650035718,
							0
						],
						[
							-76.34295231414295,
							42.45352850018242,
							0
						],
						[
							-76.34294331409176,
							42.452870500061,
							0
						],
						[
							-76.34289431403873,
							42.45236249996896,
							0
						],
						[
							-76.34283931397157,
							42.45168749984624,
							0
						],
						[
							-76.34281331394736,
							42.45147149980729,
							0
						],
						[
							-76.34280431392729,
							42.45123749976436,
							0
						],
						[
							-76.34280631389588,
							42.45080049968338,
							0
						],
						[
							-76.34279831388369,
							42.45066949965946,
							0
						],
						[
							-76.34277831385526,
							42.45036949960475,
							0
						],
						[
							-76.342738313813,
							42.44996849953213,
							0
						],
						[
							-76.34258131365834,
							42.44854749927541,
							0
						],
						[
							-76.34257031363732,
							42.4483094992318,
							0
						],
						[
							-76.34258031360945,
							42.44788549915291,
							0
						],
						[
							-76.3425673135782,
							42.44751649908513,
							0
						],
						[
							-76.34256831353032,
							42.44685949896348,
							0
						],
						[
							-76.34266431353525,
							42.44650649889427,
							0
						],
						[
							-76.34304531359987,
							42.44571949873325,
							0
						],
						[
							-76.34328631364394,
							42.44526549863951,
							0
						],
						[
							-76.34355531368853,
							42.44469549852318,
							0
						],
						[
							-76.34374931371032,
							42.44414349841318,
							0
						],
						[
							-76.34385631371887,
							42.44379149834372,
							0
						],
						[
							-76.34398531373968,
							42.44351049828649,
							0
						],
						[
							-76.3443933138459,
							42.44317249820752,
							0
						],
						[
							-76.34574131424917,
							42.44276949807866,
							0
						],
						[
							-76.34586831428716,
							42.44273149806653,
							0
						],
						[
							-76.34645131445939,
							42.44252749800531,
							0
						],
						[
							-76.34672731454178,
							42.44244249797846,
							0
						],
						[
							-76.3476013148035,
							42.44218449789553,
							0
						],
						[
							-76.34703731457897,
							42.44159249780863,
							0
						],
						[
							-76.34684531449899,
							42.44134249777007,
							0
						],
						[
							-76.34671631444415,
							42.44115949774137,
							0
						],
						[
							-76.34663231440565,
							42.4410024977157,
							0
						],
						[
							-76.34657231437495,
							42.44084649768923,
							0
						],
						[
							-76.3465373143515,
							42.4406794976597,
							0
						],
						[
							-76.3464923143192,
							42.44043649761653,
							0
						],
						[
							-76.3464843143134,
							42.4403924976087,
							0
						],
						[
							-76.3460133139875,
							42.43801049718664,
							0
						],
						[
							-76.34590331391142,
							42.43745449708813,
							0
						],
						[
							-76.34588131389812,
							42.43736949707326,
							0
						],
						[
							-76.34578531383401,
							42.43691549699307,
							0
						],
						[
							-76.34568931377386,
							42.43651549692287,
							0
						],
						[
							-76.34562831373285,
							42.43622349687125,
							0
						],
						[
							-76.34557431369251,
							42.43590949681528,
							0
						],
						[
							-76.34554631366598,
							42.43567049677217,
							0
						],
						[
							-76.34553531364304,
							42.43540549672352,
							0
						],
						[
							-76.34554331359575,
							42.43472549659731,
							0
						],
						[
							-76.34553731356347,
							42.43431149652088,
							0
						],
						[
							-76.34548831352097,
							42.43394649645527,
							0
						],
						[
							-76.34543931348186,
							42.43362749639817,
							0
						],
						[
							-76.34534731342903,
							42.43330949634297,
							0
						],
						[
							-76.34528631339623,
							42.4331294963121,
							0
						],
						[
							-76.34523231336709,
							42.43296849628446,
							0
						],
						[
							-76.34509731329811,
							42.43261849622508,
							0
						],
						[
							-76.3449153132085,
							42.43219349615369,
							0
						],
						[
							-76.34464731307645,
							42.43156549604818,
							0
						],
						[
							-76.34408231279588,
							42.43021249582034,
							0
						],
						[
							-76.3438703126914,
							42.42971549573683,
							0
						],
						[
							-76.34370331261081,
							42.4293474956754,
							0
						],
						[
							-76.34351131252528,
							42.42902149562274,
							0
						],
						[
							-76.34323731241274,
							42.42868649557171,
							0
						],
						[
							-76.34294631229523,
							42.42835749552248,
							0
						],
						[
							-76.34261631216347,
							42.42800549547056,
							0
						],
						[
							-76.34156131173889,
							42.42683349529593,
							0
						],
						[
							-76.34127131162491,
							42.42654849525481,
							0
						],
						[
							-76.34097731151161,
							42.42629049521884,
							0
						],
						[
							-76.34067831139745,
							42.42604249518493,
							0
						],
						[
							-76.34036031127778,
							42.42580249515326,
							0
						],
						[
							-76.33978131106073,
							42.42537749509782,
							0
						],
						[
							-76.33973231104078,
							42.42531949508907,
							0
						],
						[
							-76.33931531089303,
							42.42513049507079,
							0
						],
						[
							-76.33921331087721,
							42.4253614951177,
							0
						],
						[
							-76.33906531085057,
							42.42564649517644,
							0
						],
						[
							-76.33894831082634,
							42.42582849521484,
							0
						],
						[
							-76.33876931078586,
							42.42606049526502,
							0
						],
						[
							-76.33861231074947,
							42.42625149530671,
							0
						],
						[
							-76.33828531067076,
							42.42661049538634,
							0
						],
						[
							-76.33807731061835,
							42.42680649543102,
							0
						],
						[
							-76.33780131054681,
							42.42703949548527,
							0
						],
						[
							-76.33751231047108,
							42.42727249554005,
							0
						],
						[
							-76.33722531039469,
							42.4274874955914,
							0
						],
						[
							-76.33676731027447,
							42.4278534956776,
							0
						],
						[
							-76.33644031018683,
							42.42809049573465,
							0
						],
						[
							-76.33643231018462,
							42.42809549573589,
							0
						],
						[
							-76.3361653101123,
							42.42827849578052,
							0
						],
						[
							-76.33590631003992,
							42.42842549581816,
							0
						],
						[
							-76.33570430998218,
							42.42852249584424,
							0
						],
						[
							-76.33558830994903,
							42.4285784958593,
							0
						],
						[
							-76.33517630982898,
							42.42874549590679,
							0
						],
						[
							-76.33387930944896,
							42.42924249605098,
							0
						],
						[
							-76.33349130933493,
							42.42938649609325,
							0
						],
						[
							-76.33242830902454,
							42.42980849621414,
							0
						],
						[
							-76.33214030894021,
							42.42991949624626,
							0
						],
						[
							-76.33164030879497,
							42.4301284963051,
							0
						],
						[
							-76.33123930867772,
							42.43028549635029,
							0
						],
						[
							-76.33079130854976,
							42.43050249640849,
							0
						],
						[
							-76.33011830835703,
							42.43082149649463,
							0
						],
						[
							-76.32852330790197,
							42.43160049670299,
							0
						],
						[
							-76.32814630779279,
							42.43176249674816,
							0
						],
						[
							-76.32786530771106,
							42.43187849678093,
							0
						],
						[
							-76.32744230758483,
							42.43200949682221,
							0
						],
						[
							-76.32674630737351,
							42.43217549688093,
							0
						],
						[
							-76.32648830729713,
							42.43226349690759,
							0
						],
						[
							-76.32578330708978,
							42.43252349698408,
							0
						],
						[
							-76.32525430693522,
							42.43273249704406,
							0
						],
						[
							-76.32498430685702,
							42.43284849707639,
							0
						],
						[
							-76.32485330682032,
							42.43292149709518,
							0
						],
						[
							-76.32471230678215,
							42.43301849711881,
							0
						],
						[
							-76.32447330671947,
							42.43321049716398,
							0
						],
						[
							-76.32424030666063,
							42.4334284972137,
							0
						],
						[
							-76.32397630659328,
							42.4336664972684,
							0
						],
						[
							-76.32369530651975,
							42.43389449732192,
							0
						],
						[
							-76.3233533064284,
							42.43414649738232,
							0
						],
						[
							-76.32317730638023,
							42.43426049741051,
							0
						],
						[
							-76.32278430627117,
							42.43449449746964,
							0
						],
						[
							-76.32250830619405,
							42.43465149750982,
							0
						],
						[
							-76.32242230617112,
							42.43471549752513,
							0
						],
						[
							-76.32205030606616,
							42.43491349757674,
							0
						],
						[
							-76.3215363059233,
							42.43521649765351,
							0
						],
						[
							-76.32088330574051,
							42.43558349774774,
							0
						],
						[
							-76.32022230555556,
							42.43595649784336,
							0
						],
						[
							-76.31982330544524,
							42.43619949790439,
							0
						],
						[
							-76.31967730540575,
							42.43630049792896,
							0
						],
						[
							-76.31954130537007,
							42.43640949795463,
							0
						],
						[
							-76.31937130532654,
							42.43656049798941,
							0
						],
						[
							-76.31904830524648,
							42.43688349806222,
							0
						],
						[
							-76.31767830491654,
							42.43838549839542,
							0
						],
						[
							-76.31595230449942,
							42.44025749881143,
							0
						],
						[
							-76.31499230426738,
							42.44129849904277,
							0
						],
						[
							-76.31483430422996,
							42.44148049908282,
							0
						],
						[
							-76.31439830413025,
							42.44203049920219,
							0
						],
						[
							-76.31437130412493,
							42.44207649921179,
							0
						],
						[
							-76.3143593041227,
							42.44209849921635,
							0
						],
						[
							-76.31421530409929,
							42.4424104992799,
							0
						],
						[
							-76.31413830409245,
							42.44265449932819,
							0
						],
						[
							-76.31380130398087,
							42.4426084993332,
							0
						],
						[
							-76.31372430395591,
							42.44260549933573,
							0
						],
						[
							-76.31268730362574,
							42.44264449938464,
							0
						],
						[
							-76.31256030358438,
							42.44263649938826,
							0
						],
						[
							-76.31243530354297,
							42.44261949939015,
							0
						],
						[
							-76.31229930349747,
							42.44259449939096,
							0
						],
						[
							-76.3121923034588,
							42.44253549938433,
							0
						],
						[
							-76.31191630335894,
							42.44238249936711,
							0
						],
						[
							-76.31048130283267,
							42.4414894992594,
							0
						],
						[
							-76.31041730280891,
							42.44144549925384,
							0
						],
						[
							-76.3095993025106,
							42.44095949919671,
							0
						],
						[
							-76.30930530240427,
							42.44079649917834,
							0
						],
						[
							-76.30921230237014,
							42.44073849917133,
							0
						],
						[
							-76.3087053022041,
							42.44069449918356,
							0
						],
						[
							-76.30847930213108,
							42.44068849919152,
							0
						],
						[
							-76.30829230207118,
							42.4406904991994,
							0
						],
						[
							-76.3078773019392,
							42.44070849921942,
							0
						],
						[
							-76.30745930180798,
							42.44074949924379,
							0
						],
						[
							-76.30659830153125,
							42.44074649927783,
							0
						],
						[
							-76.30628630143191,
							42.44075849929259,
							0
						],
						[
							-76.30566630123397,
							42.44077449932046,
							0
						],
						[
							-76.30473630093611,
							42.44078549935987,
							0
						],
						[
							-76.30390630066692,
							42.44074949938653,
							0
						],
						[
							-76.30321230044264,
							42.44073049941088,
							0
						],
						[
							-76.3029743003654,
							42.44071949941841,
							0
						],
						[
							-76.30245330019822,
							42.4407214994397,
							0
						],
						[
							-76.30109029976224,
							42.44074549949891,
							0
						],
						[
							-76.30079329966838,
							42.44076649951472,
							0
						],
						[
							-76.30003929942889,
							42.44080249955167,
							0
						],
						[
							-76.29954829927257,
							42.44082149957492,
							0
						],
						[
							-76.29888929906151,
							42.44082949960286,
							0
						],
						[
							-76.29861229897342,
							42.44084149961621,
							0
						],
						[
							-76.29739729858548,
							42.44087249967074,
							0
						],
						[
							-76.29572529805354,
							42.44094149975065,
							0
						],
						[
							-76.29501829782704,
							42.44094949978054,
							0
						],
						[
							-76.2945462976762,
							42.44095949980133,
							0
						],
						[
							-76.29437629761975,
							42.44093449980353,
							0
						],
						[
							-76.29357129735398,
							42.44083549981752,
							0
						],
						[
							-76.29350429733245,
							42.44083549982022,
							0
						],
						[
							-76.29343729731167,
							42.44084549982475,
							0
						],
						[
							-76.29262929706928,
							42.44107949990054,
							0
						],
						[
							-76.29202929688367,
							42.4411764999426,
							0
						],
						[
							-76.29129529665613,
							42.44128849999279,
							0
						],
						[
							-76.29117129661843,
							42.44131750000314,
							0
						],
						[
							-76.29054529643003,
							42.44149050006033,
							0
						],
						[
							-76.28992429624198,
							42.44164650011417,
							0
						],
						[
							-76.2895222961188,
							42.44172750014528,
							0
						],
						[
							-76.28943329609056,
							42.44173250014979,
							0
						],
						[
							-76.2893482960624,
							42.44172050015099,
							0
						],
						[
							-76.28934529606012,
							42.44170250014776,
							0
						],
						[
							-76.28850429580172,
							42.44186250021116,
							0
						],
						[
							-76.28788629561683,
							42.44204850027042,
							0
						],
						[
							-76.28678129527378,
							42.44221050034479,
							0
						],
						[
							-76.28672929525692,
							42.4422085003465,
							0
						],
						[
							-76.28653829519516,
							42.44220250035306,
							0
						],
						[
							-76.28617329507095,
							42.44210750035011,
							0
						],
						[
							-76.2847192946016,
							42.44207550040255,
							0
						],
						[
							-76.28350529425134,
							42.44261750055166,
							0
						],
						[
							-76.28272829402891,
							42.44298850065155,
							0
						],
						[
							-76.28217029387609,
							42.4433495007408,
							0
						],
						[
							-76.28122229361732,
							42.44397450089461,
							0
						],
						[
							-76.28109329358014,
							42.44403250091052,
							0
						],
						[
							-76.2808972935237,
							42.44412150093488,
							0
						],
						[
							-76.28077729348902,
							42.44417450094949,
							0
						],
						[
							-76.28074529347985,
							42.44418950095356,
							0
						],
						[
							-76.28068729346164,
							42.44419550095701,
							0
						],
						[
							-76.28055129341898,
							42.44420950096506,
							0
						],
						[
							-76.2773582923982,
							42.44427550110542,
							0
						],
						[
							-76.27617129201867,
							42.44429950115751,
							0
						],
						[
							-76.27242229082579,
							42.44445450133664,
							0
						],
						[
							-76.2712532904546,
							42.44451350139449,
							0
						],
						[
							-76.27118229043208,
							42.44451750139807,
							0
						],
						[
							-76.27098029036821,
							42.44453150140878,
							0
						],
						[
							-76.27082829032268,
							42.4445765014232,
							0
						],
						[
							-76.27063529026718,
							42.44466550144744,
							0
						],
						[
							-76.27047229022361,
							42.4447855014762,
							0
						],
						[
							-76.27013629013264,
							42.44501750153265,
							0
						],
						[
							-76.26905028984108,
							42.44580050172122,
							0
						],
						[
							-76.26907028984793,
							42.44580650172154,
							0
						],
						[
							-76.27045729036904,
							42.44683950185718,
							0
						],
						[
							-76.27203829097017,
							42.44811450202987,
							0
						],
						[
							-76.27260829118606,
							42.44856250208994,
							0
						],
						[
							-76.27328829144182,
							42.44907250215708,
							0
						],
						[
							-76.27376129161681,
							42.44938750219642,
							0
						],
						[
							-76.27429729181392,
							42.44972850223807,
							0
						],
						[
							-76.27454129190329,
							42.44987850225605,
							0
						],
						[
							-76.27483429201001,
							42.45005050227613,
							0
						],
						[
							-76.27540429222033,
							42.45042250232214,
							0
						],
						[
							-76.27569029232713,
							42.45062650234843,
							0
						],
						[
							-76.27580129237126,
							42.45074250236546,
							0
						],
						[
							-76.27602129245233,
							42.45088450238292,
							0
						],
						[
							-76.2762612925453,
							42.45110150241347,
							0
						],
						[
							-76.27628729255534,
							42.45112450241668,
							0
						],
						[
							-76.27679029275872,
							42.45169550250223,
							0
						],
						[
							-76.27841329341717,
							42.45356850278385,
							0
						],
						[
							-76.27909629369933,
							42.45442550291511,
							0
						],
						[
							-76.2793242937964,
							42.45475150296632,
							0
						],
						[
							-76.27962129392785,
							42.45524350304547,
							0
						],
						[
							-76.28025929421833,
							42.45641150323609,
							0
						],
						[
							-76.28045929430893,
							42.45677150329471,
							0
						],
						[
							-76.28097129454078,
							42.45769150344446,
							0
						],
						[
							-76.2822442951142,
							42.45993750380912,
							0
						],
						[
							-76.2822692951253,
							42.45997950381589,
							0
						],
						[
							-76.28230129513939,
							42.46003150382423,
							0
						],
						[
							-76.28237829517394,
							42.46016550384594,
							0
						],
						[
							-76.28251629523629,
							42.46041150388594,
							0
						],
						[
							-76.28264529529216,
							42.46060850391721,
							0
						],
						[
							-76.2827732953467,
							42.46079150394595,
							0
						],
						[
							-76.28292529540856,
							42.4609695039728,
							0
						],
						[
							-76.28305329545987,
							42.46110850399341,
							0
						],
						[
							-76.28325229553778,
							42.46129950402074,
							0
						],
						[
							-76.28350029563407,
							42.4615265040528,
							0
						],
						[
							-76.2839902958221,
							42.46194450411051,
							0
						],
						[
							-76.28438229597376,
							42.46229550415973,
							0
						],
						[
							-76.28459629605385,
							42.46245050417982,
							0
						],
						[
							-76.28481429613495,
							42.46260150419901,
							0
						],
						[
							-76.28499529620247,
							42.46272950421544,
							0
						],
						[
							-76.28662529679899,
							42.46372450433415,
							0
						],
						[
							-76.28758929714849,
							42.46426750439591,
							0
						],
						[
							-76.28814329734777,
							42.46455850442751,
							0
						],
						[
							-76.28842429745137,
							42.46474050444991,
							0
						],
						[
							-76.2889242976386,
							42.46510350449701,
							0
						],
						[
							-76.28932829779544,
							42.46547250454908,
							0
						],
						[
							-76.28963729792284,
							42.46585650460771,
							0
						],
						[
							-76.29035129823077,
							42.46692850477742,
							0
						],
						[
							-76.29076229840811,
							42.46754650487529,
							0
						],
						[
							-76.29127129862566,
							42.46828350499122,
							0
						],
						[
							-76.2915532987474,
							42.46870850505855,
							0
						],
						[
							-76.29172429881999,
							42.46894950509628,
							0
						],
						[
							-76.29214929899774,
							42.46951150518321,
							0
						],
						[
							-76.29227929905159,
							42.46967650520852,
							0
						],
						[
							-76.29242229910932,
							42.46983750523256,
							0
						],
						[
							-76.29263229919249,
							42.47005150526373,
							0
						],
						[
							-76.29311929938692,
							42.47056950534002,
							0
						],
						[
							-76.293420299507,
							42.47088850538695,
							0
						],
						[
							-76.29379829965718,
							42.4712805054443,
							0
						],
						[
							-76.29432129986576,
							42.4718335055256,
							0
						],
						[
							-76.29490830009838,
							42.47243450561322,
							0
						],
						[
							-76.29539030028947,
							42.47292850568525,
							0
						],
						[
							-76.29575330043416,
							42.47331150574154,
							0
						],
						[
							-76.29584030046968,
							42.47341450575709,
							0
						],
						[
							-76.29592330050323,
							42.47350850577115,
							0
						],
						[
							-76.29603530055014,
							42.47365750579421,
							0
						],
						[
							-76.29620730062229,
							42.47388750582987,
							0
						],
						[
							-76.29640730071226,
							42.47423850588676,
							0
						],
						[
							-76.29644430072892,
							42.47430350589729,
							0
						],
						[
							-76.29669030084904,
							42.47486350599102,
							0
						],
						[
							-76.29673630087531,
							42.47502050601823,
							0
						],
						[
							-76.29681930092441,
							42.4753265060715,
							0
						],
						[
							-76.29691130099785,
							42.47592450617844,
							0
						],
						[
							-76.29697630111211,
							42.47719750641134,
							0
						],
						[
							-76.29700230117561,
							42.47794950654944,
							0
						],
						[
							-76.297014301194,
							42.47814750658557,
							0
						],
						[
							-76.2970993013299,
							42.47962750685597,
							0
						],
						[
							-76.29710530134076,
							42.47974950687829,
							0
						],
						[
							-76.29712230137199,
							42.48010050694255,
							0
						],
						[
							-76.29711930137498,
							42.48015450695264,
							0
						],
						[
							-76.29712830138543,
							42.48025750697136,
							0
						],
						[
							-76.29714030139324,
							42.48031150698085,
							0
						],
						[
							-76.29719130149152,
							42.48142750718524,
							0
						],
						[
							-76.29719930149841,
							42.48148650719585,
							0
						],
						[
							-76.29721130152566,
							42.48180550725437,
							0
						],
						[
							-76.29721330152998,
							42.48185550726354,
							0
						],
						[
							-76.29723130156711,
							42.4822825073418,
							0
						],
						[
							-76.29724130158968,
							42.48254650739024,
							0
						],
						[
							-76.29724630160068,
							42.48267450741371,
							0
						],
						[
							-76.29727630165362,
							42.48326450752164,
							0
						],
						[
							-76.29727530166913,
							42.48348050756164,
							0
						],
						[
							-76.29730330170742,
							42.48387950763432,
							0
						],
						[
							-76.2974043018476,
							42.48534750790181,
							0
						],
						[
							-76.29741530186632,
							42.48555450793965,
							0
						],
						[
							-76.29741930187224,
							42.48561750795113,
							0
						],
						[
							-76.29742130187618,
							42.48566250795938,
							0
						],
						[
							-76.29753430203792,
							42.48737150827093,
							0
						],
						[
							-76.29759130212004,
							42.48824050842936,
							0
						],
						[
							-76.2976523022126,
							42.48923450861075,
							0
						],
						[
							-76.29767530226,
							42.48977950871062,
							0
						],
						[
							-76.29770730232812,
							42.49056750885508,
							0
						],
						[
							-76.2981353024646,
							42.49055350883528,
							0
						],
						[
							-76.29820930248795,
							42.49054750883119,
							0
						],
						[
							-76.29926930282566,
							42.49050850878136,
							0
						],
						[
							-76.2996403029443,
							42.49050050876495,
							0
						],
						[
							-76.29974930297917,
							42.4904985087602,
							0
						],
						[
							-76.29982430300288,
							42.49049350875627,
							0
						],
						[
							-76.30090230334669,
							42.49045850870643,
							0
						],
						[
							-76.30170030360148,
							42.49043650867026,
							0
						],
						[
							-76.30201030370048,
							42.49042850865632,
							0
						],
						[
							-76.30358130420159,
							42.49037850858388,
							0
						],
						[
							-76.30368130423349,
							42.49037550857932,
							0
						],
						[
							-76.30389130430059,
							42.49037050856995,
							0
						],
						[
							-76.30396530432398,
							42.49036550856605,
							0
						],
						[
							-76.30556730483505,
							42.49031550849234,
							0
						],
						[
							-76.30594330495511,
							42.49030550847538,
							0
						],
						[
							-76.30604330498709,
							42.49030350847099,
							0
						],
						[
							-76.3060663049944,
							42.49030250846989,
							0
						],
						[
							-76.30614530501948,
							42.49029850846596,
							0
						],
						[
							-76.30622230504395,
							42.49029450846213,
							0
						],
						[
							-76.30732330539512,
							42.49025950841138,
							0
						],
						[
							-76.3090703059523,
							42.49020350833073,
							0
						],
						[
							-76.30918430598884,
							42.49020250832596,
							0
						],
						[
							-76.31043830638893,
							42.49016450826849,
							0
						],
						[
							-76.31059230643804,
							42.49015950826136,
							0
						],
						[
							-76.31062030644696,
							42.49015850826006,
							0
						],
						[
							-76.31146230671551,
							42.49013150822119,
							0
						],
						[
							-76.31154530674173,
							42.49012550821674,
							0
						],
						[
							-76.31189730685425,
							42.49011750820108,
							0
						],
						[
							-76.31238330700796,
							42.49008450817544,
							0
						],
						[
							-76.31354030737636,
							42.49003950812057,
							0
						],
						[
							-76.31533430794893,
							42.48998750803877,
							0
						],
						[
							-76.31572030807293,
							42.48998750802324,
							0
						],
						[
							-76.31806530882243,
							42.48993450791907,
							0
						],
						[
							-76.32038530956248,
							42.48986250781241,
							0
						],
						[
							-76.32184231002697,
							42.48981350774469,
							0
						],
						[
							-76.32810031202513,
							42.4896465074619,
							0
						],
						[
							-76.32813031203476,
							42.48964650746068,
							0
						],
						[
							-76.3281923120546,
							42.489645507458,
							0
						],
						[
							-76.3279213116445,
							42.485249506656,
							0
						],
						[
							-76.3277713114089,
							42.48269850619024,
							0
						],
						[
							-76.32775431139879,
							42.48263550617928,
							0
						],
						[
							-76.32772831138581,
							42.48257250616867,
							0
						],
						[
							-76.32769331137003,
							42.48251050615862,
							0
						],
						[
							-76.32764931135164,
							42.48245250614965,
							0
						],
						[
							-76.32783731140688,
							42.48238250612914,
							0
						],
						[
							-76.32795731144432,
							42.48236750612154,
							0
						],
						[
							-76.32933331188134,
							42.48229950605357,
							0
						],
						[
							-76.3294863119299,
							42.48229150604593,
							0
						],
						[
							-76.3313103125103,
							42.48221650595865,
							0
						],
						[
							-76.33259431291835,
							42.48215650589587,
							0
						],
						[
							-76.33348231319947,
							42.48210050584977,
							0
						],
						[
							-76.33442531349336,
							42.48197750578906,
							0
						],
						[
							-76.33515731372489,
							42.48192850575052,
							0
						],
						[
							-76.33532531377828,
							42.48192050574227,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090020003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>26330508</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>37269</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4595542</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3122810</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090020003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090020003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1197</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>530</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>6506.97</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>74</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.66</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.95</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.92</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26400</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26062</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27374</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14533</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14190</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15078</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8546</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8279</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8868</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5987</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5910</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6207</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>5.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.08</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2694</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3357</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>151</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2783</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1348</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1471</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>927</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00012"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.30347730524163,
							42.50499151128999,
							0
						],
						[
							-76.30353430526158,
							42.50501351129178,
							0
						],
						[
							-76.30414330547727,
							42.50528551131756,
							0
						],
						[
							-76.30429230553064,
							42.50536051132543,
							0
						],
						[
							-76.3093243073119,
							42.50759551153607,
							0
						],
						[
							-76.3098163074858,
							42.50781051155602,
							0
						],
						[
							-76.31062030777393,
							42.50821551159852,
							0
						],
						[
							-76.31169330815982,
							42.50877451165866,
							0
						],
						[
							-76.3129423086111,
							42.50945351173388,
							0
						],
						[
							-76.3143533091243,
							42.51026651182733,
							0
						],
						[
							-76.31631530983987,
							42.51142351196219,
							0
						],
						[
							-76.31755131028366,
							42.5120575120296,
							0
						],
						[
							-76.31769031033448,
							42.51214151203953,
							0
						],
						[
							-76.3178673103936,
							42.51217151203795,
							0
						],
						[
							-76.31803531045038,
							42.51220951203819,
							0
						],
						[
							-76.3184363105812,
							42.51223651202704,
							0
						],
						[
							-76.31904531077639,
							42.51222951200123,
							0
						],
						[
							-76.32021631115097,
							42.51220651194981,
							0
						],
						[
							-76.32029031117438,
							42.51220151194591,
							0
						],
						[
							-76.32233631183145,
							42.5121965118626,
							0
						],
						[
							-76.32265231193269,
							42.51219251184914,
							0
						],
						[
							-76.32261831186614,
							42.51143651171079,
							0
						],
						[
							-76.32259231182734,
							42.51102251163533,
							0
						],
						[
							-76.32239631171285,
							42.51032251151386,
							0
						],
						[
							-76.32235731168613,
							42.51012951147973,
							0
						],
						[
							-76.32235931168242,
							42.51007051146876,
							0
						],
						[
							-76.32241431168215,
							42.50982651142146,
							0
						],
						[
							-76.32242131168043,
							42.50977251141119,
							0
						],
						[
							-76.3224483116841,
							42.50970451139754,
							0
						],
						[
							-76.32253631169839,
							42.50951451135886,
							0
						],
						[
							-76.32258031170193,
							42.50937051133049,
							0
						],
						[
							-76.32260331169836,
							42.50922151130202,
							0
						],
						[
							-76.32259131166339,
							42.50879851122433,
							0
						],
						[
							-76.32258231160019,
							42.50797851107313,
							0
						],
						[
							-76.32257531159065,
							42.50787951105512,
							0
						],
						[
							-76.32255131155978,
							42.50756451099787,
							0
						],
						[
							-76.32249231143292,
							42.50609751072908,
							0
						],
						[
							-76.32247131136424,
							42.50525551057431,
							0
						],
						[
							-76.32242331128299,
							42.50436051041078,
							0
						],
						[
							-76.3223033110025,
							42.50107050980744,
							0
						],
						[
							-76.32225931091953,
							42.5001345096362,
							0
						],
						[
							-76.32296431115604,
							42.50027050963295,
							0
						],
						[
							-76.32429731159941,
							42.50047550961718,
							0
						],
						[
							-76.32556031201865,
							42.50065850960014,
							0
						],
						[
							-76.32713831254418,
							42.50091050958321,
							0
						],
						[
							-76.32872631307187,
							42.50114850956325,
							0
						],
						[
							-76.3286883130031,
							42.50037950942262,
							0
						],
						[
							-76.3286503129565,
							42.49991150933764,
							0
						],
						[
							-76.32862931291731,
							42.49947050925695,
							0
						],
						[
							-76.32861531288104,
							42.49903850917765,
							0
						],
						[
							-76.32859231284718,
							42.49867850911204,
							0
						],
						[
							-76.32860231282393,
							42.49831850904506,
							0
						],
						[
							-76.32861431281549,
							42.49815150901372,
							0
						],
						[
							-76.32864131280034,
							42.49782750895273,
							0
						],
						[
							-76.32865731279078,
							42.49762750891512,
							0
						],
						[
							-76.3286833127787,
							42.49734950886267,
							0
						],
						[
							-76.32869631275271,
							42.49693950878635,
							0
						],
						[
							-76.32868031269162,
							42.4961785086463,
							0
						],
						[
							-76.32867931267815,
							42.49599950861325,
							0
						],
						[
							-76.32867831267437,
							42.4959525086046,
							0
						],
						[
							-76.32867931267248,
							42.49592250859902,
							0
						],
						[
							-76.32867831266951,
							42.49588650859239,
							0
						],
						[
							-76.32867831266562,
							42.49583350858261,
							0
						],
						[
							-76.32867631265991,
							42.49576450856992,
							0
						],
						[
							-76.32866131262598,
							42.49536850849732,
							0
						],
						[
							-76.3286323125812,
							42.49488650840935,
							0
						],
						[
							-76.32857631244347,
							42.49325750811043,
							0
						],
						[
							-76.32854731238717,
							42.49261850799345,
							0
						],
						[
							-76.32852731236187,
							42.49236150794673,
							0
						],
						[
							-76.32840531214411,
							42.48993250750251,
							0
						],
						[
							-76.32840231213846,
							42.4898685074908,
							0
						],
						[
							-76.32838831212999,
							42.48981450748138,
							0
						],
						[
							-76.32836531211872,
							42.48976150747251,
							0
						],
						[
							-76.32832431210223,
							42.48971650746585,
							0
						],
						[
							-76.32829831209254,
							42.48969850746354,
							0
						],
						[
							-76.3281923120546,
							42.489645507458,
							0
						],
						[
							-76.32813031203476,
							42.48964650746068,
							0
						],
						[
							-76.32810031202513,
							42.4896465074619,
							0
						],
						[
							-76.32184231002697,
							42.48981350774469,
							0
						],
						[
							-76.32038530956248,
							42.48986250781241,
							0
						],
						[
							-76.31806530882243,
							42.48993450791907,
							0
						],
						[
							-76.31572030807293,
							42.48998750802324,
							0
						],
						[
							-76.31533430794893,
							42.48998750803877,
							0
						],
						[
							-76.31354030737636,
							42.49003950812057,
							0
						],
						[
							-76.31238330700796,
							42.49008450817544,
							0
						],
						[
							-76.31189730685425,
							42.49011750820108,
							0
						],
						[
							-76.31154530674173,
							42.49012550821674,
							0
						],
						[
							-76.31146230671551,
							42.49013150822119,
							0
						],
						[
							-76.31062030644696,
							42.49015850826006,
							0
						],
						[
							-76.31059230643804,
							42.49015950826136,
							0
						],
						[
							-76.31043830638893,
							42.49016450826849,
							0
						],
						[
							-76.30918430598884,
							42.49020250832596,
							0
						],
						[
							-76.3090703059523,
							42.49020350833073,
							0
						],
						[
							-76.30732330539512,
							42.49025950841138,
							0
						],
						[
							-76.30622230504395,
							42.49029450846213,
							0
						],
						[
							-76.30614530501948,
							42.49029850846596,
							0
						],
						[
							-76.3060663049944,
							42.49030250846989,
							0
						],
						[
							-76.30604330498709,
							42.49030350847099,
							0
						],
						[
							-76.30594330495511,
							42.49030550847538,
							0
						],
						[
							-76.30556730483505,
							42.49031550849234,
							0
						],
						[
							-76.30396530432398,
							42.49036550856605,
							0
						],
						[
							-76.30389130430059,
							42.49037050856995,
							0
						],
						[
							-76.30368130423349,
							42.49037550857932,
							0
						],
						[
							-76.30358130420159,
							42.49037850858388,
							0
						],
						[
							-76.30201030370048,
							42.49042850865632,
							0
						],
						[
							-76.30170030360148,
							42.49043650867026,
							0
						],
						[
							-76.30090230334669,
							42.49045850870643,
							0
						],
						[
							-76.29982430300288,
							42.49049350875627,
							0
						],
						[
							-76.29974930297917,
							42.4904985087602,
							0
						],
						[
							-76.2996403029443,
							42.49050050876495,
							0
						],
						[
							-76.29926930282566,
							42.49050850878136,
							0
						],
						[
							-76.29820930248795,
							42.49054750883119,
							0
						],
						[
							-76.2981353024646,
							42.49055350883528,
							0
						],
						[
							-76.29770730232812,
							42.49056750885508,
							0
						],
						[
							-76.2969483020855,
							42.49058450888873,
							0
						],
						[
							-76.29464330135046,
							42.49066050899547,
							0
						],
						[
							-76.29289130079162,
							42.49071650907628,
							0
						],
						[
							-76.29258530069397,
							42.49072550909024,
							0
						],
						[
							-76.29222030057757,
							42.49073750910712,
							0
						],
						[
							-76.29002329987706,
							42.49081150920915,
							0
						],
						[
							-76.28970229977489,
							42.49082450922445,
							0
						],
						[
							-76.2896282997511,
							42.49082450922742,
							0
						],
						[
							-76.28816129928332,
							42.49087350929545,
							0
						],
						[
							-76.28810229926451,
							42.4908755092982,
							0
						],
						[
							-76.28776129915589,
							42.49088850931431,
							0
						],
						[
							-76.28752529908078,
							42.49089850932565,
							0
						],
						[
							-76.28745129905701,
							42.49089850932862,
							0
						],
						[
							-76.28612129863286,
							42.49094250939022,
							0
						],
						[
							-76.28576829852025,
							42.49095350940644,
							0
						],
						[
							-76.28563529847789,
							42.49095850941271,
							0
						],
						[
							-76.28553929844716,
							42.49096050941694,
							0
						],
						[
							-76.2784612961892,
							42.49118450974283,
							0
						],
						[
							-76.27462529496688,
							42.49132550992304,
							0
						],
						[
							-76.2735472946237,
							42.49136950997448,
							0
						],
						[
							-76.27337729456856,
							42.49136250998002,
							0
						],
						[
							-76.27320729451237,
							42.49134150998297,
							0
						],
						[
							-76.27307829446909,
							42.49131650998351,
							0
						],
						[
							-76.27266429432747,
							42.49119950997851,
							0
						],
						[
							-76.27222229417325,
							42.49103350996558,
							0
						],
						[
							-76.27203529410869,
							42.49097250996179,
							0
						],
						[
							-76.27023829348282,
							42.4903125099119,
							0
						],
						[
							-76.2698582933503,
							42.49017050990091,
							0
						],
						[
							-76.26860529291346,
							42.48970450986504,
							0
						],
						[
							-76.26585829195828,
							42.4887165097926,
							0
						],
						[
							-76.2645462915008,
							42.48822750975485,
							0
						],
						[
							-76.26285529091214,
							42.4876105097086,
							0
						],
						[
							-76.26122129034484,
							42.48703450966764,
							0
						],
						[
							-76.26088629022918,
							42.48692550966094,
							0
						],
						[
							-76.26025329001281,
							42.48674850965362,
							0
						],
						[
							-76.25934328972996,
							42.48687950971438,
							0
						],
						[
							-76.25834128942196,
							42.48707050978994,
							0
						],
						[
							-76.25806428933682,
							42.48712350981086,
							0
						],
						[
							-76.25846228995125,
							42.49376051102262,
							0
						],
						[
							-76.25906229060746,
							42.50007951216721,
							0
						],
						[
							-76.25911429082267,
							42.50278551266556,
							0
						],
						[
							-76.25914929097058,
							42.50464851300864,
							0
						],
						[
							-76.2591692910572,
							42.50574151320996,
							0
						],
						[
							-76.25916129106622,
							42.50589951323947,
							0
						],
						[
							-76.25915929106941,
							42.50595151324917,
							0
						],
						[
							-76.25918729111935,
							42.50650951335123,
							0
						],
						[
							-76.25924029118627,
							42.50718951347483,
							0
						],
						[
							-76.25927229122723,
							42.50760751355083,
							0
						],
						[
							-76.25934829136027,
							42.50908751382141,
							0
						],
						[
							-76.2594702915288,
							42.51084951414227,
							0
						],
						[
							-76.25950129158748,
							42.51151351426379,
							0
						],
						[
							-76.25954629162999,
							42.51189551433262,
							0
						],
						[
							-76.25961529173166,
							42.51297851453004,
							0
						],
						[
							-76.25965429181636,
							42.51396151471021,
							0
						],
						[
							-76.25980629211286,
							42.51733451532761,
							0
						],
						[
							-76.25987429222407,
							42.51855151554982,
							0
						],
						[
							-76.25993529234339,
							42.5199095157984,
							0
						],
						[
							-76.25996629238391,
							42.52032551587404,
							0
						],
						[
							-76.26052229337715,
							42.53141351790081,
							0
						],
						[
							-76.26069629354252,
							42.53290251816893,
							0
						],
						[
							-76.26071529356575,
							42.53313551821121,
							0
						],
						[
							-76.2608822938367,
							42.53609151875066,
							0
						],
						[
							-76.26090029386367,
							42.53637951880314,
							0
						],
						[
							-76.26090429387017,
							42.5364505188161,
							0
						],
						[
							-76.26099929401016,
							42.53793951908737,
							0
						],
						[
							-76.26101029403384,
							42.53821351913754,
							0
						],
						[
							-76.26101129403511,
							42.5382265191399,
							0
						],
						[
							-76.26100129409063,
							42.53902551928792,
							0
						],
						[
							-76.26100029409615,
							42.53910451930256,
							0
						],
						[
							-76.260998294106,
							42.53924751932904,
							0
						],
						[
							-76.26099429411398,
							42.53937351935247,
							0
						],
						[
							-76.26095929419617,
							42.54064451958868,
							0
						],
						[
							-76.26113629424316,
							42.54050951955663,
							0
						],
						[
							-76.26136629430344,
							42.54032351951301,
							0
						],
						[
							-76.26224129453534,
							42.53965151935368,
							0
						],
						[
							-76.263056294752,
							42.53903451920694,
							0
						],
						[
							-76.26408429502442,
							42.53824451901966,
							0
						],
						[
							-76.26478429521019,
							42.53771051889287,
							0
						],
						[
							-76.26679829574475,
							42.53617451852814,
							0
						],
						[
							-76.26727529587025,
							42.53579551843892,
							0
						],
						[
							-76.26749929592914,
							42.53561751839705,
							0
						],
						[
							-76.26823229612481,
							42.53507351826706,
							0
						],
						[
							-76.26905529634138,
							42.53442051811331,
							0
						],
						[
							-76.26929829640481,
							42.53422051806659,
							0
						],
						[
							-76.26979429653072,
							42.5337645179624,
							0
						],
						[
							-76.27004129659204,
							42.53351851790703,
							0
						],
						[
							-76.2702812966498,
							42.53325451784859,
							0
						],
						[
							-76.27056729671703,
							42.53291851777501,
							0
						],
						[
							-76.2717332969876,
							42.53150051746614,
							0
						],
						[
							-76.27373329745049,
							42.52905151693321,
							0
						],
						[
							-76.27563429788957,
							42.52671151642436,
							0
						],
						[
							-76.27667029812967,
							42.52544751614912,
							0
						],
						[
							-76.27789029840832,
							42.52390351581476,
							0
						],
						[
							-76.27946829876987,
							42.52192151538502,
							0
						],
						[
							-76.27962529880591,
							42.52172551534249,
							0
						],
						[
							-76.279765298838,
							42.52154951530434,
							0
						],
						[
							-76.28010729891095,
							42.52104651519762,
							0
						],
						[
							-76.2802102989317,
							42.52087851516243,
							0
						],
						[
							-76.28027929894654,
							42.52077851514117,
							0
						],
						[
							-76.28037829896373,
							42.52057951510042,
							0
						],
						[
							-76.28112529909183,
							42.51905551478871,
							0
						],
						[
							-76.28183329921342,
							42.51761351449373,
							0
						],
						[
							-76.2819242992287,
							42.51742351445495,
							0
						],
						[
							-76.28204329924864,
							42.51717451440415,
							0
						],
						[
							-76.28219729927656,
							42.51688051434362,
							0
						],
						[
							-76.28236729930886,
							42.5165765142806,
							0
						],
						[
							-76.28257529935205,
							42.51625451421272,
							0
						],
						[
							-76.28269229937796,
							42.51609551417863,
							0
						],
						[
							-76.28300429945025,
							42.51571451409566,
							0
						],
						[
							-76.28330129952197,
							42.51539151402402,
							0
						],
						[
							-76.28348229956772,
							42.51522251398551,
							0
						],
						[
							-76.2836902996215,
							42.51504451394423,
							0
						],
						[
							-76.28400329970299,
							42.51478451388359,
							0
						],
						[
							-76.28415629974342,
							42.51466551385543,
							0
						],
						[
							-76.29029230137259,
							42.50999951274618,
							0
						],
						[
							-76.29277830203192,
							42.50809951229498,
							0
						],
						[
							-76.29326930216207,
							42.50772351220571,
							0
						],
						[
							-76.29647030300939,
							42.50525551162072,
							0
						],
						[
							-76.29704830316125,
							42.50479451151224,
							0
						],
						[
							-76.29734630323622,
							42.50451151144793,
							0
						],
						[
							-76.29760230329616,
							42.50420751138142,
							0
						],
						[
							-76.29781430334026,
							42.50388051131245,
							0
						],
						[
							-76.29784930334621,
							42.50380851129773,
							0
						],
						[
							-76.29797930336866,
							42.50354551124387,
							0
						],
						[
							-76.29804330337659,
							42.50337351120952,
							0
						],
						[
							-76.29816130339424,
							42.50309751115373,
							0
						],
						[
							-76.29823930339843,
							42.50281351109808,
							0
						],
						[
							-76.2982863033923,
							42.50252451104277,
							0
						],
						[
							-76.29834330345719,
							42.5031585111577,
							0
						],
						[
							-76.29835030347407,
							42.5033575111942,
							0
						],
						[
							-76.29838030354522,
							42.50419451134774,
							0
						],
						[
							-76.29840730360745,
							42.50492351148141,
							0
						],
						[
							-76.29937630391765,
							42.50490751143947,
							0
						],
						[
							-76.3004193042506,
							42.50487751139198,
							0
						],
						[
							-76.3013653045535,
							42.50486251135112,
							0
						],
						[
							-76.3014393045769,
							42.50485751134723,
							0
						],
						[
							-76.30198530475126,
							42.50484251132249,
							0
						],
						[
							-76.30255130493234,
							42.50483151129769,
							0
						],
						[
							-76.30281830501923,
							42.50484651128971,
							0
						],
						[
							-76.3029953050772,
							42.50486151128538,
							0
						],
						[
							-76.30315130512953,
							42.50489151128463,
							0
						],
						[
							-76.30334730519634,
							42.50494351128637,
							0
						],
						[
							-76.30340330521581,
							42.50496351128782,
							0
						],
						[
							-76.30347730524163,
							42.50499151128999,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090020001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>15938040</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>65594</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5052891</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.2882253</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090020001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090020001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1482</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>604</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>3938.41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.96</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.78</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>24131</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>23793</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>25104</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13415</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13074</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13963</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7926</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7659</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8249</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5472</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5395</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5693</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>15</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.15</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>3032</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>4552</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>92</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2155</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1027</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1227</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>777</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00013"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.2784612961892,
							42.49118450974283,
							0
						],
						[
							-76.28553929844716,
							42.49096050941694,
							0
						],
						[
							-76.28563529847789,
							42.49095850941271,
							0
						],
						[
							-76.28576829852025,
							42.49095350940644,
							0
						],
						[
							-76.28612129863286,
							42.49094250939022,
							0
						],
						[
							-76.28745129905701,
							42.49089850932862,
							0
						],
						[
							-76.28752529908078,
							42.49089850932565,
							0
						],
						[
							-76.28776129915589,
							42.49088850931431,
							0
						],
						[
							-76.28810229926451,
							42.4908755092982,
							0
						],
						[
							-76.28816129928332,
							42.49087350929545,
							0
						],
						[
							-76.2896282997511,
							42.49082450922742,
							0
						],
						[
							-76.28970229977489,
							42.49082450922445,
							0
						],
						[
							-76.29002329987706,
							42.49081150920915,
							0
						],
						[
							-76.29222030057757,
							42.49073750910712,
							0
						],
						[
							-76.29258530069397,
							42.49072550909024,
							0
						],
						[
							-76.29289130079162,
							42.49071650907628,
							0
						],
						[
							-76.29464330135046,
							42.49066050899547,
							0
						],
						[
							-76.2969483020855,
							42.49058450888873,
							0
						],
						[
							-76.29770730232812,
							42.49056750885508,
							0
						],
						[
							-76.29767530226,
							42.48977950871062,
							0
						],
						[
							-76.2976523022126,
							42.48923450861075,
							0
						],
						[
							-76.29759130212004,
							42.48824050842936,
							0
						],
						[
							-76.29753430203792,
							42.48737150827093,
							0
						],
						[
							-76.29742130187618,
							42.48566250795938,
							0
						],
						[
							-76.29741930187224,
							42.48561750795113,
							0
						],
						[
							-76.29741530186632,
							42.48555450793965,
							0
						],
						[
							-76.2974043018476,
							42.48534750790181,
							0
						],
						[
							-76.29730330170742,
							42.48387950763432,
							0
						],
						[
							-76.29727530166913,
							42.48348050756164,
							0
						],
						[
							-76.29727630165362,
							42.48326450752164,
							0
						],
						[
							-76.29724630160068,
							42.48267450741371,
							0
						],
						[
							-76.29724130158968,
							42.48254650739024,
							0
						],
						[
							-76.29723130156711,
							42.4822825073418,
							0
						],
						[
							-76.29721330152998,
							42.48185550726354,
							0
						],
						[
							-76.29721130152566,
							42.48180550725437,
							0
						],
						[
							-76.29719930149841,
							42.48148650719585,
							0
						],
						[
							-76.29719130149152,
							42.48142750718524,
							0
						],
						[
							-76.29714030139324,
							42.48031150698085,
							0
						],
						[
							-76.29712830138543,
							42.48025750697136,
							0
						],
						[
							-76.29711930137498,
							42.48015450695264,
							0
						],
						[
							-76.29712230137199,
							42.48010050694255,
							0
						],
						[
							-76.29710530134076,
							42.47974950687829,
							0
						],
						[
							-76.2970993013299,
							42.47962750685597,
							0
						],
						[
							-76.297014301194,
							42.47814750658557,
							0
						],
						[
							-76.29700230117561,
							42.47794950654944,
							0
						],
						[
							-76.29697630111211,
							42.47719750641134,
							0
						],
						[
							-76.29691130099785,
							42.47592450617844,
							0
						],
						[
							-76.29681930092441,
							42.4753265060715,
							0
						],
						[
							-76.29673630087531,
							42.47502050601823,
							0
						],
						[
							-76.29669030084904,
							42.47486350599102,
							0
						],
						[
							-76.29644430072892,
							42.47430350589729,
							0
						],
						[
							-76.29640730071226,
							42.47423850588676,
							0
						],
						[
							-76.29620730062229,
							42.47388750582987,
							0
						],
						[
							-76.29603530055014,
							42.47365750579421,
							0
						],
						[
							-76.29592330050323,
							42.47350850577115,
							0
						],
						[
							-76.29584030046968,
							42.47341450575709,
							0
						],
						[
							-76.29575330043416,
							42.47331150574154,
							0
						],
						[
							-76.29539030028947,
							42.47292850568525,
							0
						],
						[
							-76.29490830009838,
							42.47243450561322,
							0
						],
						[
							-76.29432129986576,
							42.4718335055256,
							0
						],
						[
							-76.29379829965718,
							42.4712805054443,
							0
						],
						[
							-76.293420299507,
							42.47088850538695,
							0
						],
						[
							-76.29311929938692,
							42.47056950534002,
							0
						],
						[
							-76.29263229919249,
							42.47005150526373,
							0
						],
						[
							-76.29242229910932,
							42.46983750523256,
							0
						],
						[
							-76.29227929905159,
							42.46967650520852,
							0
						],
						[
							-76.29214929899774,
							42.46951150518321,
							0
						],
						[
							-76.29172429881999,
							42.46894950509628,
							0
						],
						[
							-76.2915532987474,
							42.46870850505855,
							0
						],
						[
							-76.29127129862566,
							42.46828350499122,
							0
						],
						[
							-76.29076229840811,
							42.46754650487529,
							0
						],
						[
							-76.29035129823077,
							42.46692850477742,
							0
						],
						[
							-76.28963729792284,
							42.46585650460771,
							0
						],
						[
							-76.28932829779544,
							42.46547250454908,
							0
						],
						[
							-76.2889242976386,
							42.46510350449701,
							0
						],
						[
							-76.28842429745137,
							42.46474050444991,
							0
						],
						[
							-76.28814329734777,
							42.46455850442751,
							0
						],
						[
							-76.28758929714849,
							42.46426750439591,
							0
						],
						[
							-76.28662529679899,
							42.46372450433415,
							0
						],
						[
							-76.28499529620247,
							42.46272950421544,
							0
						],
						[
							-76.28481429613495,
							42.46260150419901,
							0
						],
						[
							-76.28459629605385,
							42.46245050417982,
							0
						],
						[
							-76.28438229597376,
							42.46229550415973,
							0
						],
						[
							-76.2839902958221,
							42.46194450411051,
							0
						],
						[
							-76.28350029563407,
							42.4615265040528,
							0
						],
						[
							-76.28325229553778,
							42.46129950402074,
							0
						],
						[
							-76.28305329545987,
							42.46110850399341,
							0
						],
						[
							-76.28292529540856,
							42.4609695039728,
							0
						],
						[
							-76.2827732953467,
							42.46079150394595,
							0
						],
						[
							-76.28264529529216,
							42.46060850391721,
							0
						],
						[
							-76.28251629523629,
							42.46041150388594,
							0
						],
						[
							-76.28237829517394,
							42.46016550384594,
							0
						],
						[
							-76.28230129513939,
							42.46003150382423,
							0
						],
						[
							-76.2822692951253,
							42.45997950381589,
							0
						],
						[
							-76.2822442951142,
							42.45993750380912,
							0
						],
						[
							-76.28097129454078,
							42.45769150344446,
							0
						],
						[
							-76.28045929430893,
							42.45677150329471,
							0
						],
						[
							-76.28025929421833,
							42.45641150323609,
							0
						],
						[
							-76.27962129392785,
							42.45524350304547,
							0
						],
						[
							-76.2793242937964,
							42.45475150296632,
							0
						],
						[
							-76.27909629369933,
							42.45442550291511,
							0
						],
						[
							-76.27841329341717,
							42.45356850278385,
							0
						],
						[
							-76.27679029275872,
							42.45169550250223,
							0
						],
						[
							-76.27628729255534,
							42.45112450241668,
							0
						],
						[
							-76.2762612925453,
							42.45110150241347,
							0
						],
						[
							-76.27602129245233,
							42.45088450238292,
							0
						],
						[
							-76.27580129237126,
							42.45074250236546,
							0
						],
						[
							-76.27569029232713,
							42.45062650234843,
							0
						],
						[
							-76.27540429222033,
							42.45042250232214,
							0
						],
						[
							-76.27483429201001,
							42.45005050227613,
							0
						],
						[
							-76.27454129190329,
							42.44987850225605,
							0
						],
						[
							-76.27429729181392,
							42.44972850223807,
							0
						],
						[
							-76.27376129161681,
							42.44938750219642,
							0
						],
						[
							-76.27328829144182,
							42.44907250215708,
							0
						],
						[
							-76.27260829118606,
							42.44856250208994,
							0
						],
						[
							-76.27203829097017,
							42.44811450202987,
							0
						],
						[
							-76.27045729036904,
							42.44683950185718,
							0
						],
						[
							-76.26907028984793,
							42.44580650172154,
							0
						],
						[
							-76.26905028984108,
							42.44580050172122,
							0
						],
						[
							-76.26900928982565,
							42.44576950171713,
							0
						],
						[
							-76.26897328981201,
							42.44574150171339,
							0
						],
						[
							-76.26851128963779,
							42.44538850166654,
							0
						],
						[
							-76.26613328874052,
							42.44356450142413,
							0
						],
						[
							-76.26493328828352,
							42.44258650129112,
							0
						],
						[
							-76.26266028742127,
							42.44077950104762,
							0
						],
						[
							-76.26208628720538,
							42.44034850099079,
							0
						],
						[
							-76.26170328706458,
							42.44010550096115,
							0
						],
						[
							-76.26142928696522,
							42.43995050094343,
							0
						],
						[
							-76.26065628669157,
							42.43960350091015,
							0
						],
						[
							-76.25944628627555,
							42.4392295008894,
							0
						],
						[
							-76.25785728572923,
							42.43873850086215,
							0
						],
						[
							-76.25536828487473,
							42.43798650082265,
							0
						],
						[
							-76.25529728485002,
							42.43796050082067,
							0
						],
						[
							-76.25519928481569,
							42.43792150081739,
							0
						],
						[
							-76.25571228559839,
							42.44637550236272,
							0
						],
						[
							-76.25575128565787,
							42.44701750248006,
							0
						],
						[
							-76.25576528567919,
							42.44724750252208,
							0
						],
						[
							-76.25576528574192,
							42.44810550268098,
							0
						],
						[
							-76.25581028579045,
							42.44857150276548,
							0
						],
						[
							-76.25582228580285,
							42.44868850278665,
							0
						],
						[
							-76.25587928586401,
							42.4492745028929,
							0
						],
						[
							-76.25598128603029,
							42.45110050322696,
							0
						],
						[
							-76.25598628603821,
							42.45118650324269,
							0
						],
						[
							-76.25680228735426,
							42.46559150587695,
							0
						],
						[
							-76.25688928749406,
							42.46711950615629,
							0
						],
						[
							-76.25691528753536,
							42.46756950623854,
							0
						],
						[
							-76.25728928813766,
							42.47415450744231,
							0
						],
						[
							-76.25736528825634,
							42.47544150767743,
							0
						],
						[
							-76.25753128851271,
							42.47821350818373,
							0
						],
						[
							-76.25806428933682,
							42.48712350981086,
							0
						],
						[
							-76.25834128942196,
							42.48707050978994,
							0
						],
						[
							-76.25934328972996,
							42.48687950971438,
							0
						],
						[
							-76.26025329001281,
							42.48674850965362,
							0
						],
						[
							-76.26088629022918,
							42.48692550966094,
							0
						],
						[
							-76.26122129034484,
							42.48703450966764,
							0
						],
						[
							-76.26285529091214,
							42.4876105097086,
							0
						],
						[
							-76.2645462915008,
							42.48822750975485,
							0
						],
						[
							-76.26585829195828,
							42.4887165097926,
							0
						],
						[
							-76.26860529291346,
							42.48970450986504,
							0
						],
						[
							-76.2698582933503,
							42.49017050990091,
							0
						],
						[
							-76.27023829348282,
							42.4903125099119,
							0
						],
						[
							-76.27203529410869,
							42.49097250996179,
							0
						],
						[
							-76.27222229417325,
							42.49103350996558,
							0
						],
						[
							-76.27266429432747,
							42.49119950997851,
							0
						],
						[
							-76.27307829446909,
							42.49131650998351,
							0
						],
						[
							-76.27320729451237,
							42.49134150998297,
							0
						],
						[
							-76.27337729456856,
							42.49136250998002,
							0
						],
						[
							-76.2735472946237,
							42.49136950997448,
							0
						],
						[
							-76.27462529496688,
							42.49132550992304,
							0
						],
						[
							-76.2784612961892,
							42.49118450974283,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090020002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>12821499</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>483735</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4684596</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.2738158</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090020002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090020002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1037</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>455</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>3168.65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>25908</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>25570</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>26882</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14120</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13779</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14667</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8244</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7977</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8566</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5875</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5799</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6096</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>5.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2685</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3382</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2027</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1286</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1503</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>564</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00014"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.43252734681352,
							42.50658050637833,
							0
						],
						[
							-76.43231734646989,
							42.50284050569594,
							0
						],
						[
							-76.43229634643647,
							42.5024795056301,
							0
						],
						[
							-76.43225334636566,
							42.50170750548919,
							0
						],
						[
							-76.4320553460458,
							42.49823650485594,
							0
						],
						[
							-76.43204434602899,
							42.49805650482312,
							0
						],
						[
							-76.43204134602308,
							42.49798950481085,
							0
						],
						[
							-76.43202734600101,
							42.49775150476746,
							0
						],
						[
							-76.43200734596506,
							42.49735150469434,
							0
						],
						[
							-76.43168434545481,
							42.49184350368964,
							0
						],
						[
							-76.43137434496593,
							42.48656650272692,
							0
						],
						[
							-76.42661134344633,
							42.48669750294361,
							0
						],
						[
							-76.42101634166261,
							42.48687050320163,
							0
						],
						[
							-76.42094134163897,
							42.48687650320577,
							0
						],
						[
							-76.41969434124137,
							42.48691450326317,
							0
						],
						[
							-76.41962034121799,
							42.48691950326708,
							0
						],
						[
							-76.41619734012603,
							42.48701650342328,
							0
						],
						[
							-76.4151973398073,
							42.48704850346958,
							0
						],
						[
							-76.41191533876125,
							42.48715450362172,
							0
						],
						[
							-76.40962833803198,
							42.48722350372684,
							0
						],
						[
							-76.40935733794554,
							42.48723150373926,
							0
						],
						[
							-76.40860233770407,
							42.48724450377213,
							0
						],
						[
							-76.408451337656,
							42.48725050377934,
							0
						],
						[
							-76.40805033752835,
							42.48726550379831,
							0
						],
						[
							-76.40639333699974,
							42.48731250387392,
							0
						],
						[
							-76.40435833635112,
							42.48737850396827,
							0
						],
						[
							-76.40402833624606,
							42.4873905039838,
							0
						],
						[
							-76.40126633536627,
							42.48748750411325,
							0
						],
						[
							-76.4006003351544,
							42.4875145041451,
							0
						],
						[
							-76.39811133436093,
							42.48759350426018,
							0
						],
						[
							-76.3972343340818,
							42.48762750430188,
							0
						],
						[
							-76.39460233324313,
							42.48771650442455,
							0
						],
						[
							-76.39263133261503,
							42.48778250451628,
							0
						],
						[
							-76.39212933245524,
							42.48780150454007,
							0
						],
						[
							-76.39043033191315,
							42.48784950461749,
							0
						],
						[
							-76.38941533158976,
							42.48788450466491,
							0
						],
						[
							-76.38787333109889,
							42.48794350473804,
							0
						],
						[
							-76.3854903303395,
							42.48802350484897,
							0
						],
						[
							-76.38498233017768,
							42.4880415048728,
							0
						],
						[
							-76.38492133015845,
							42.48804650487618,
							0
						],
						[
							-76.38485833013895,
							42.48805650488058,
							0
						],
						[
							-76.38441733000904,
							42.48821550492774,
							0
						],
						[
							-76.38435432999063,
							42.48824050493491,
							0
						],
						[
							-76.3833733297038,
							42.48862350504528,
							0
						],
						[
							-76.38272132951391,
							42.48888850512059,
							0
						],
						[
							-76.38225932937858,
							42.48906550517193,
							0
						],
						[
							-76.38199632930058,
							42.48915350519883,
							0
						],
						[
							-76.38155532916767,
							42.48927150523842,
							0
						],
						[
							-76.38083132894882,
							42.48945750530201,
							0
						],
						[
							-76.3806733289011,
							42.48949850531596,
							0
						],
						[
							-76.38036132880717,
							42.48958350534426,
							0
						],
						[
							-76.37959632857871,
							42.48981750541838,
							0
						],
						[
							-76.37847032824358,
							42.49017750553035,
							0
						],
						[
							-76.37798232809892,
							42.49034150558035,
							0
						],
						[
							-76.37743632793763,
							42.49053250563768,
							0
						],
						[
							-76.37645332765233,
							42.49094550575367,
							0
						],
						[
							-76.37611932755595,
							42.49109350579451,
							0
						],
						[
							-76.37597032751356,
							42.49116750581418,
							0
						],
						[
							-76.37583132747494,
							42.49124950583496,
							0
						],
						[
							-76.37570632744188,
							42.49134550585774,
							0
						],
						[
							-76.37555632740377,
							42.49148250588912,
							0
						],
						[
							-76.37539032736623,
							42.49169650593536,
							0
						],
						[
							-76.37448832717247,
							42.49299950621261,
							0
						],
						[
							-76.37412832709431,
							42.49350850632122,
							0
						],
						[
							-76.37368432699886,
							42.49414850645743,
							0
						],
						[
							-76.37348032695468,
							42.49443850651926,
							0
						],
						[
							-76.37333232692187,
							42.4946385065622,
							0
						],
						[
							-76.37328032691018,
							42.49470650657687,
							0
						],
						[
							-76.37317432688519,
							42.49482950660386,
							0
						],
						[
							-76.37313832687636,
							42.49486650661217,
							0
						],
						[
							-76.37309432686591,
							42.49491650662318,
							0
						],
						[
							-76.37299532684146,
							42.49501650664566,
							0
						],
						[
							-76.37284532680273,
							42.49514450667536,
							0
						],
						[
							-76.37259332673563,
							42.49533250672028,
							0
						],
						[
							-76.3722433266394,
							42.49555250677507,
							0
						],
						[
							-76.37191232654762,
							42.49574950682482,
							0
						],
						[
							-76.37163032647014,
							42.49592750686912,
							0
						],
						[
							-76.3715393264451,
							42.4959845068833,
							0
						],
						[
							-76.37141332640972,
							42.49605350690113,
							0
						],
						[
							-76.37098232628652,
							42.49626050695679,
							0
						],
						[
							-76.37110032630544,
							42.49600250690435,
							0
						],
						[
							-76.37121132632177,
							42.49574050685143,
							0
						],
						[
							-76.37132032633905,
							42.4954995068025,
							0
						],
						[
							-76.3713783263481,
							42.49536950677613,
							0
						],
						[
							-76.3707283261357,
							42.49532050679328,
							0
						],
						[
							-76.36952632573932,
							42.49518050681587,
							0
						],
						[
							-76.3689603255629,
							42.49525350685219,
							0
						],
						[
							-76.368465325431,
							42.49562150694018,
							0
						],
						[
							-76.36836632542712,
							42.49600050701423,
							0
						],
						[
							-76.36843932548267,
							42.49643650709186,
							0
						],
						[
							-76.36864132559063,
							42.49702150719186,
							0
						],
						[
							-76.36857532561008,
							42.49757350729657,
							0
						],
						[
							-76.36805432548124,
							42.49809650741421,
							0
						],
						[
							-76.36667032507034,
							42.4985535075545,
							0
						],
						[
							-76.3662393249442,
							42.49872050760275,
							0
						],
						[
							-76.36617132492508,
							42.49875750761233,
							0
						],
						[
							-76.3656883247893,
							42.49902050768041,
							0
						],
						[
							-76.36490332459172,
							42.49976150784903,
							0
						],
						[
							-76.36447232447514,
							42.5000585079213,
							0
						],
						[
							-76.36445432447098,
							42.50008050792609,
							0
						],
						[
							-76.36420232439004,
							42.50008050793625,
							0
						],
						[
							-76.36402032433084,
							42.50007050794175,
							0
						],
						[
							-76.36397932431979,
							42.50009950794875,
							0
						],
						[
							-76.36319032410171,
							42.50057950806929,
							0
						],
						[
							-76.36238632390692,
							42.50144150826103,
							0
						],
						[
							-76.36144732360117,
							42.50138550828854,
							0
						],
						[
							-76.36063632330058,
							42.5008415082207,
							0
						],
						[
							-76.36010832312995,
							42.5008275082394,
							0
						],
						[
							-76.35902832285797,
							42.50184550847109,
							0
						],
						[
							-76.35879232279858,
							42.50206850852182,
							0
						],
						[
							-76.35877232282492,
							42.50251350860487,
							0
						],
						[
							-76.35924532304314,
							42.50341350875213,
							0
						],
						[
							-76.3594213231399,
							42.50395950884595,
							0
						],
						[
							-76.35944932318809,
							42.50449150894313,
							0
						],
						[
							-76.35971732330687,
							42.50493550901437,
							0
						],
						[
							-76.35965432329428,
							42.50503950903613,
							0
						],
						[
							-76.35954832327342,
							42.50521850907348,
							0
						],
						[
							-76.3585883230875,
							42.50688150941953,
							0
						],
						[
							-76.35831432303462,
							42.5073585095187,
							0
						],
						[
							-76.35808332298913,
							42.5077485096001,
							0
						],
						[
							-76.35801232297493,
							42.50786550962459,
							0
						],
						[
							-76.35776332291844,
							42.50818450969356,
							0
						],
						[
							-76.35743032283762,
							42.50853950977261,
							0
						],
						[
							-76.35718432277501,
							42.50876250982374,
							0
						],
						[
							-76.35679132267137,
							42.5090695098963,
							0
						],
						[
							-76.35632132254099,
							42.509349509967,
							0
						],
						[
							-76.35606132246669,
							42.50947451000059,
							0
						],
						[
							-76.35600332244981,
							42.50949851000735,
							0
						],
						[
							-76.35527832223968,
							42.50980751009369,
							0
						],
						[
							-76.35361532175659,
							42.51050251028916,
							0
						],
						[
							-76.3540523219328,
							42.51098851036134,
							0
						],
						[
							-76.35412832196177,
							42.51105051036974,
							0
						],
						[
							-76.3542143219933,
							42.51110351037607,
							0
						],
						[
							-76.3544803220865,
							42.51120851038475,
							0
						],
						[
							-76.35492132223906,
							42.5113565103943,
							0
						],
						[
							-76.35595432259437,
							42.5116745104114,
							0
						],
						[
							-76.35611332264914,
							42.51172451041423,
							0
						],
						[
							-76.35625032269638,
							42.51176851041684,
							0
						],
						[
							-76.35679932288484,
							42.51193251042501,
							0
						],
						[
							-76.35722732302965,
							42.51203151042606,
							0
						],
						[
							-76.35778032321474,
							42.51213251042241,
							0
						],
						[
							-76.35836532341153,
							42.51225251042099,
							0
						],
						[
							-76.35878432355601,
							42.51238651042884,
							0
						],
						[
							-76.3589293236064,
							42.5124385104326,
							0
						],
						[
							-76.35925232372222,
							42.51260151044969,
							0
						],
						[
							-76.35938632377128,
							42.51268351045945,
							0
						],
						[
							-76.3594203237837,
							42.51270351046176,
							0
						],
						[
							-76.35939532377633,
							42.51271251046444,
							0
						],
						[
							-76.35920332372298,
							42.51282551049305,
							0
						],
						[
							-76.35901332368697,
							42.51316551056353,
							0
						],
						[
							-76.3584223234893,
							42.51305951056779,
							0
						],
						[
							-76.35769532328513,
							42.51345851067082,
							0
						],
						[
							-76.35713532310236,
							42.51341951068621,
							0
						],
						[
							-76.35648332289486,
							42.51344651071749,
							0
						],
						[
							-76.35619832279704,
							42.51336151071329,
							0
						],
						[
							-76.35587732268692,
							42.51326651070868,
							0
						],
						[
							-76.35529632251138,
							42.51341751076,
							0
						],
						[
							-76.35519432246366,
							42.5132145107266,
							0
						],
						[
							-76.35565632256302,
							42.51254851058492,
							0
						],
						[
							-76.35531832240315,
							42.51185251046994,
							0
						],
						[
							-76.35468832218484,
							42.51163651045543,
							0
						],
						[
							-76.35344432180817,
							42.51194851056324,
							0
						],
						[
							-76.35286332163122,
							42.51208051061105,
							0
						],
						[
							-76.35272832164625,
							42.51287351076306,
							0
						],
						[
							-76.35344032194104,
							42.51376951089988,
							0
						],
						[
							-76.35391732217222,
							42.51482751107612,
							0
						],
						[
							-76.35394532222226,
							42.51538451117791,
							0
						],
						[
							-76.35407932228297,
							42.51562451121685,
							0
						],
						[
							-76.35398432228887,
							42.51611851131196,
							0
						],
						[
							-76.35359832218518,
							42.51639451137851,
							0
						],
						[
							-76.3530083219842,
							42.51623951137364,
							0
						],
						[
							-76.35243632176014,
							42.51569251129568,
							0
						],
						[
							-76.35194032153092,
							42.51474451114051,
							0
						],
						[
							-76.35157132138137,
							42.5143235110776,
							0
						],
						[
							-76.35095332115739,
							42.51397851103877,
							0
						],
						[
							-76.35052732101242,
							42.51386851103563,
							0
						],
						[
							-76.34953132068506,
							42.51376851105731,
							0
						],
						[
							-76.34815932025494,
							42.51391351113941,
							0
						],
						[
							-76.34768732010815,
							42.51397951117063,
							0
						],
						[
							-76.34706831992327,
							42.51416951123069,
							0
						],
						[
							-76.3467733198352,
							42.51426051125939,
							0
						],
						[
							-76.34650531976227,
							42.51443951130327,
							0
						],
						[
							-76.34614331966814,
							42.51474051137348,
							0
						],
						[
							-76.3460663196996,
							42.51550351151757,
							0
						],
						[
							-76.34577131964812,
							42.5160915116381,
							0
						],
						[
							-76.34490031938402,
							42.51630551171275,
							0
						],
						[
							-76.34473431933459,
							42.51635851172924,
							0
						],
						[
							-76.34398631911188,
							42.51659751180354,
							0
						],
						[
							-76.34387231909497,
							42.51686551185765,
							0
						],
						[
							-76.34416031923871,
							42.51756051197445,
							0
						],
						[
							-76.34431631936552,
							42.5186015121605,
							0
						],
						[
							-76.34449031944065,
							42.5188625122017,
							0
						],
						[
							-76.3447373195472,
							42.51923151225991,
							0
						],
						[
							-76.3443653194318,
							42.51928751228526,
							0
						],
						[
							-76.34384931925415,
							42.51912651227631,
							0
						],
						[
							-76.34369731921731,
							42.51928951231256,
							0
						],
						[
							-76.3435683192149,
							42.51981951241567,
							0
						],
						[
							-76.3428803190035,
							42.5199505124676,
							0
						],
						[
							-76.3423653188257,
							42.51978351245751,
							0
						],
						[
							-76.34174631860273,
							42.51945651242206,
							0
						],
						[
							-76.3416383185477,
							42.51918051237542,
							0
						],
						[
							-76.341601318518,
							42.51893851233219,
							0
						],
						[
							-76.34153131846139,
							42.51847551224947,
							0
						],
						[
							-76.34124731835725,
							42.51830051222859,
							0
						],
						[
							-76.34014431799717,
							42.51822351225882,
							0
						],
						[
							-76.33968631783085,
							42.51796351222924,
							0
						],
						[
							-76.33955831778435,
							42.51789051222091,
							0
						],
						[
							-76.33875331751767,
							42.51778151223322,
							0
						],
						[
							-76.33837631737917,
							42.51754551220481,
							0
						],
						[
							-76.33832531736049,
							42.51751451220115,
							0
						],
						[
							-76.33824731733617,
							42.51752451220613,
							0
						],
						[
							-76.33759731713333,
							42.51760651224748,
							0
						],
						[
							-76.33674531686835,
							42.51772551230379,
							0
						],
						[
							-76.33558831650711,
							42.51786851237685,
							0
						],
						[
							-76.33563331661149,
							42.51908951260064,
							0
						],
						[
							-76.33564331663494,
							42.51936451265103,
							0
						],
						[
							-76.3356783167144,
							42.52029051282071,
							0
						],
						[
							-76.33572931687897,
							42.52230251319035,
							0
						],
						[
							-76.33575931696154,
							42.52329251337205,
							0
						],
						[
							-76.3358143170913,
							42.524814513651,
							0
						],
						[
							-76.3358813172302,
							42.52640751394258,
							0
						],
						[
							-76.33596931736791,
							42.52789251421334,
							0
						],
						[
							-76.33599831744183,
							42.52876951437414,
							0
						],
						[
							-76.33603431751679,
							42.52962951453155,
							0
						],
						[
							-76.33604931757436,
							42.5303455146632,
							0
						],
						[
							-76.33609331763788,
							42.53101551478516,
							0
						],
						[
							-76.33620331784341,
							42.53332451520719,
							0
						],
						[
							-76.34319232008191,
							42.53322351490673,
							0
						],
						[
							-76.34927332202297,
							42.5330465146288,
							0
						],
						[
							-76.3537353234471,
							42.53291551442462,
							0
						],
						[
							-76.3549493238346,
							42.53288051436918,
							0
						],
						[
							-76.35992432542243,
							42.53273451414148,
							0
						],
						[
							-76.359927325526,
							42.53412551439823,
							0
						],
						[
							-76.36002632560896,
							42.5348185145222,
							0
						],
						[
							-76.36026832575288,
							42.53571551467808,
							0
						],
						[
							-76.36105732621243,
							42.53850751516177,
							0
						],
						[
							-76.3613053263753,
							42.53963451535983,
							0
						],
						[
							-76.36133532640156,
							42.53985951540017,
							0
						],
						[
							-76.36137832647914,
							42.54072351555794,
							0
						],
						[
							-76.36144032660764,
							42.54219451582701,
							0
						],
						[
							-76.36149432670804,
							42.54331951603253,
							0
						],
						[
							-76.36158132688887,
							42.54539051641134,
							0
						],
						[
							-76.36162032701039,
							42.54686651668224,
							0
						],
						[
							-76.36164732706396,
							42.54747451679337,
							0
						],
						[
							-76.36166032711066,
							42.54805051689917,
							0
						],
						[
							-76.3616683271255,
							42.54821651692949,
							0
						],
						[
							-76.36749232898298,
							42.5480255166591,
							0
						],
						[
							-76.36946332961229,
							42.54797051656935,
							0
						],
						[
							-76.37124733018335,
							42.54794051649176,
							0
						],
						[
							-76.37607533172952,
							42.54786951628367,
							0
						],
						[
							-76.37628433179611,
							42.54786151627375,
							0
						],
						[
							-76.37690433199481,
							42.54785451624741,
							0
						],
						[
							-76.37957133284812,
							42.54780451613046,
							0
						],
						[
							-76.38174433354236,
							42.54775051603269,
							0
						],
						[
							-76.38488933454781,
							42.54768151589289,
							0
						],
						[
							-76.38747233537083,
							42.54758751577117,
							0
						],
						[
							-76.3901023362102,
							42.54751051565069,
							0
						],
						[
							-76.39037133629574,
							42.54749851563759,
							0
						],
						[
							-76.3942903375474,
							42.54739651546038,
							0
						],
						[
							-76.39574433801229,
							42.54736551539588,
							0
						],
						[
							-76.39896333904065,
							42.547285515251,
							0
						],
						[
							-76.40097933968458,
							42.54723451516009,
							0
						],
						[
							-76.40357434051263,
							42.54715751504094,
							0
						],
						[
							-76.4067373415213,
							42.54705551489423,
							0
						],
						[
							-76.40943734238367,
							42.54698651477231,
							0
						],
						[
							-76.409511342407,
							42.54698051476821,
							0
						],
						[
							-76.41204634321713,
							42.54692251465498,
							0
						],
						[
							-76.41531934426236,
							42.5468375145069,
							0
						],
						[
							-76.4163793446006,
							42.54680651445829,
							0
						],
						[
							-76.41618634430992,
							42.54371551389568,
							0
						],
						[
							-76.41610934421075,
							42.54270951371314,
							0
						],
						[
							-76.41602634410377,
							42.54162351351605,
							0
						],
						[
							-76.41589834390906,
							42.53954651313787,
							0
						],
						[
							-76.41585734384712,
							42.53888751301791,
							0
						],
						[
							-76.4157273436347,
							42.53657951259714,
							0
						],
						[
							-76.41550434332957,
							42.53342151202322,
							0
						],
						[
							-76.4153573431104,
							42.53109551159976,
							0
						],
						[
							-76.4153403430943,
							42.53095151157385,
							0
						],
						[
							-76.41532334307819,
							42.53080751154794,
							0
						],
						[
							-76.41531634305798,
							42.53056451150338,
							0
						],
						[
							-76.41526734298702,
							42.52981751136745,
							0
						],
						[
							-76.41526434298304,
							42.52977651135999,
							0
						],
						[
							-76.41501034259231,
							42.52559351059793,
							0
						],
						[
							-76.41491334244338,
							42.52399951030753,
							0
						],
						[
							-76.41487034236174,
							42.52308151013975,
							0
						],
						[
							-76.41486134235389,
							42.52301451012776,
							0
						],
						[
							-76.41477234221159,
							42.52147550984716,
							0
						],
						[
							-76.41465434203711,
							42.51962650951047,
							0
						],
						[
							-76.41444534178127,
							42.51707150904708,
							0
						],
						[
							-76.41533534206431,
							42.51703350900407,
							0
						],
						[
							-76.41871734314138,
							42.51690950884446,
							0
						],
						[
							-76.42137134398743,
							42.51682350872128,
							0
						],
						[
							-76.42144534401082,
							42.51681850871736,
							0
						],
						[
							-76.42334234461535,
							42.51675450862885,
							0
						],
						[
							-76.42872834633155,
							42.51657050837708,
							0
						],
						[
							-76.43043034687386,
							42.51651250829754,
							0
						],
						[
							-76.43310134772591,
							42.51643450817511,
							0
						],
						[
							-76.43293634744576,
							42.51336050761407,
							0
						],
						[
							-76.43289034737533,
							42.51260750747686,
							0
						],
						[
							-76.43283434728937,
							42.51168750730921,
							0
						],
						[
							-76.43282734728314,
							42.51163350729951,
							0
						],
						[
							-76.43271034711655,
							42.50988750698178,
							0
						],
						[
							-76.43252734681352,
							42.50658050637833,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>15</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090021003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>37131910</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>183880</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5147201</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3848544</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090021003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090021003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1704</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>737</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>9174.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.92</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.87</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>25972</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>25634</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>26945</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14201</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13857</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14744</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8311</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8044</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8634</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5890</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5813</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6110</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.08</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2331</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2963</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>164</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3685</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1088</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1174</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>759</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>79</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00015"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.32933331188134,
							42.48229950605357,
							0
						],
						[
							-76.32795731144432,
							42.48236750612154,
							0
						],
						[
							-76.32783731140688,
							42.48238250612914,
							0
						],
						[
							-76.32764931135164,
							42.48245250614965,
							0
						],
						[
							-76.32769331137003,
							42.48251050615862,
							0
						],
						[
							-76.32772831138581,
							42.48257250616867,
							0
						],
						[
							-76.32775431139879,
							42.48263550617928,
							0
						],
						[
							-76.3277713114089,
							42.48269850619024,
							0
						],
						[
							-76.3279213116445,
							42.485249506656,
							0
						],
						[
							-76.3281923120546,
							42.489645507458,
							0
						],
						[
							-76.32829831209254,
							42.48969850746354,
							0
						],
						[
							-76.32832431210223,
							42.48971650746585,
							0
						],
						[
							-76.32836531211872,
							42.48976150747251,
							0
						],
						[
							-76.32838831212999,
							42.48981450748138,
							0
						],
						[
							-76.32840231213846,
							42.4898685074908,
							0
						],
						[
							-76.32840531214411,
							42.48993250750251,
							0
						],
						[
							-76.32852731236187,
							42.49236150794673,
							0
						],
						[
							-76.32854731238717,
							42.49261850799345,
							0
						],
						[
							-76.32857631244347,
							42.49325750811043,
							0
						],
						[
							-76.3286323125812,
							42.49488650840935,
							0
						],
						[
							-76.32866131262598,
							42.49536850849732,
							0
						],
						[
							-76.32867631265991,
							42.49576450856992,
							0
						],
						[
							-76.32867831266562,
							42.49583350858261,
							0
						],
						[
							-76.32867831266951,
							42.49588650859239,
							0
						],
						[
							-76.32867931267248,
							42.49592250859902,
							0
						],
						[
							-76.32867831267437,
							42.4959525086046,
							0
						],
						[
							-76.32867931267815,
							42.49599950861325,
							0
						],
						[
							-76.32868031269162,
							42.4961785086463,
							0
						],
						[
							-76.32869631275271,
							42.49693950878635,
							0
						],
						[
							-76.3286833127787,
							42.49734950886267,
							0
						],
						[
							-76.32865731279078,
							42.49762750891512,
							0
						],
						[
							-76.32864131280034,
							42.49782750895273,
							0
						],
						[
							-76.32861431281549,
							42.49815150901372,
							0
						],
						[
							-76.32860231282393,
							42.49831850904506,
							0
						],
						[
							-76.32859231284718,
							42.49867850911204,
							0
						],
						[
							-76.32861531288104,
							42.49903850917765,
							0
						],
						[
							-76.32862931291731,
							42.49947050925695,
							0
						],
						[
							-76.3286503129565,
							42.49991150933764,
							0
						],
						[
							-76.3286883130031,
							42.50037950942262,
							0
						],
						[
							-76.32872631307187,
							42.50114850956325,
							0
						],
						[
							-76.330186313557,
							42.50136650954475,
							0
						],
						[
							-76.33046531365031,
							42.50141650954276,
							0
						],
						[
							-76.33103431384222,
							42.50154050954277,
							0
						],
						[
							-76.33147931399513,
							42.50167550954978,
							0
						],
						[
							-76.3316743140632,
							42.50174950955562,
							0
						],
						[
							-76.33210231421529,
							42.50194750957498,
							0
						],
						[
							-76.33217731424227,
							42.50198650957917,
							0
						],
						[
							-76.33232631429698,
							42.50207950959035,
							0
						],
						[
							-76.33238331431792,
							42.50211550959471,
							0
						],
						[
							-76.33256631438717,
							42.50225750961361,
							0
						],
						[
							-76.33296631454348,
							42.50263550966734,
							0
						],
						[
							-76.33355331478256,
							42.50332150977051,
							0
						],
						[
							-76.33416831503429,
							42.50405750988177,
							0
						],
						[
							-76.33456831519892,
							42.50454850995642,
							0
						],
						[
							-76.33465831523733,
							42.50467750997665,
							0
						],
						[
							-76.33470031525546,
							42.5047405099866,
							0
						],
						[
							-76.33488131533893,
							42.50508451004287,
							0
						],
						[
							-76.3348993153484,
							42.50513451005139,
							0
						],
						[
							-76.33492931536495,
							42.50522851006758,
							0
						],
						[
							-76.33505531543369,
							42.50561251013347,
							0
						],
						[
							-76.33506131543709,
							42.50563251013691,
							0
						],
						[
							-76.33509231548274,
							42.50611751022531,
							0
						],
						[
							-76.3351173155392,
							42.5067755103459,
							0
						],
						[
							-76.3352933158852,
							42.51070851106569,
							0
						],
						[
							-76.33531931594558,
							42.5114155111953,
							0
						],
						[
							-76.33533331598254,
							42.51185651127621,
							0
						],
						[
							-76.33553131639056,
							42.51653451213267,
							0
						],
						[
							-76.3355323163922,
							42.51655251213595,
							0
						],
						[
							-76.33553431639588,
							42.51659351214345,
							0
						],
						[
							-76.33553831640393,
							42.51668551216029,
							0
						],
						[
							-76.33558831650711,
							42.51786851237685,
							0
						],
						[
							-76.33674531686835,
							42.51772551230379,
							0
						],
						[
							-76.33759731713333,
							42.51760651224748,
							0
						],
						[
							-76.33824731733617,
							42.51752451220613,
							0
						],
						[
							-76.33832531736049,
							42.51751451220115,
							0
						],
						[
							-76.33837631737917,
							42.51754551220481,
							0
						],
						[
							-76.33875331751767,
							42.51778151223322,
							0
						],
						[
							-76.33955831778435,
							42.51789051222091,
							0
						],
						[
							-76.33968631783085,
							42.51796351222924,
							0
						],
						[
							-76.34014431799717,
							42.51822351225882,
							0
						],
						[
							-76.34124731835725,
							42.51830051222859,
							0
						],
						[
							-76.34153131846139,
							42.51847551224947,
							0
						],
						[
							-76.341601318518,
							42.51893851233219,
							0
						],
						[
							-76.3416383185477,
							42.51918051237542,
							0
						],
						[
							-76.34174631860273,
							42.51945651242206,
							0
						],
						[
							-76.3423653188257,
							42.51978351245751,
							0
						],
						[
							-76.3428803190035,
							42.5199505124676,
							0
						],
						[
							-76.3435683192149,
							42.51981951241567,
							0
						],
						[
							-76.34369731921731,
							42.51928951231256,
							0
						],
						[
							-76.34384931925415,
							42.51912651227631,
							0
						],
						[
							-76.3443653194318,
							42.51928751228526,
							0
						],
						[
							-76.3447373195472,
							42.51923151225991,
							0
						],
						[
							-76.34449031944065,
							42.5188625122017,
							0
						],
						[
							-76.34431631936552,
							42.5186015121605,
							0
						],
						[
							-76.34416031923871,
							42.51756051197445,
							0
						],
						[
							-76.34387231909497,
							42.51686551185765,
							0
						],
						[
							-76.34398631911188,
							42.51659751180354,
							0
						],
						[
							-76.34473431933459,
							42.51635851172924,
							0
						],
						[
							-76.34490031938402,
							42.51630551171275,
							0
						],
						[
							-76.34577131964812,
							42.5160915116381,
							0
						],
						[
							-76.3460663196996,
							42.51550351151757,
							0
						],
						[
							-76.34614331966814,
							42.51474051137348,
							0
						],
						[
							-76.34650531976227,
							42.51443951130327,
							0
						],
						[
							-76.3467733198352,
							42.51426051125939,
							0
						],
						[
							-76.34706831992327,
							42.51416951123069,
							0
						],
						[
							-76.34768732010815,
							42.51397951117063,
							0
						],
						[
							-76.34815932025494,
							42.51391351113941,
							0
						],
						[
							-76.34953132068506,
							42.51376851105731,
							0
						],
						[
							-76.35052732101242,
							42.51386851103563,
							0
						],
						[
							-76.35095332115739,
							42.51397851103877,
							0
						],
						[
							-76.35157132138137,
							42.5143235110776,
							0
						],
						[
							-76.35194032153092,
							42.51474451114051,
							0
						],
						[
							-76.35243632176014,
							42.51569251129568,
							0
						],
						[
							-76.3530083219842,
							42.51623951137364,
							0
						],
						[
							-76.35359832218518,
							42.51639451137851,
							0
						],
						[
							-76.35398432228887,
							42.51611851131196,
							0
						],
						[
							-76.35407932228297,
							42.51562451121685,
							0
						],
						[
							-76.35394532222226,
							42.51538451117791,
							0
						],
						[
							-76.35391732217222,
							42.51482751107612,
							0
						],
						[
							-76.35344032194104,
							42.51376951089988,
							0
						],
						[
							-76.35272832164625,
							42.51287351076306,
							0
						],
						[
							-76.35286332163122,
							42.51208051061105,
							0
						],
						[
							-76.35344432180817,
							42.51194851056324,
							0
						],
						[
							-76.35468832218484,
							42.51163651045543,
							0
						],
						[
							-76.35531832240315,
							42.51185251046994,
							0
						],
						[
							-76.35565632256302,
							42.51254851058492,
							0
						],
						[
							-76.35519432246366,
							42.5132145107266,
							0
						],
						[
							-76.35529632251138,
							42.51341751076,
							0
						],
						[
							-76.35587732268692,
							42.51326651070868,
							0
						],
						[
							-76.35619832279704,
							42.51336151071329,
							0
						],
						[
							-76.35648332289486,
							42.51344651071749,
							0
						],
						[
							-76.35713532310236,
							42.51341951068621,
							0
						],
						[
							-76.35769532328513,
							42.51345851067082,
							0
						],
						[
							-76.3584223234893,
							42.51305951056779,
							0
						],
						[
							-76.35901332368697,
							42.51316551056353,
							0
						],
						[
							-76.35920332372298,
							42.51282551049305,
							0
						],
						[
							-76.35939532377633,
							42.51271251046444,
							0
						],
						[
							-76.3594203237837,
							42.51270351046176,
							0
						],
						[
							-76.35938632377128,
							42.51268351045945,
							0
						],
						[
							-76.35925232372222,
							42.51260151044969,
							0
						],
						[
							-76.3589293236064,
							42.5124385104326,
							0
						],
						[
							-76.35878432355601,
							42.51238651042884,
							0
						],
						[
							-76.35836532341153,
							42.51225251042099,
							0
						],
						[
							-76.35778032321474,
							42.51213251042241,
							0
						],
						[
							-76.35722732302965,
							42.51203151042606,
							0
						],
						[
							-76.35679932288484,
							42.51193251042501,
							0
						],
						[
							-76.35625032269638,
							42.51176851041684,
							0
						],
						[
							-76.35611332264914,
							42.51172451041423,
							0
						],
						[
							-76.35595432259437,
							42.5116745104114,
							0
						],
						[
							-76.35492132223906,
							42.5113565103943,
							0
						],
						[
							-76.3544803220865,
							42.51120851038475,
							0
						],
						[
							-76.3542143219933,
							42.51110351037607,
							0
						],
						[
							-76.35412832196177,
							42.51105051036974,
							0
						],
						[
							-76.3540523219328,
							42.51098851036134,
							0
						],
						[
							-76.35361532175659,
							42.51050251028916,
							0
						],
						[
							-76.35527832223968,
							42.50980751009369,
							0
						],
						[
							-76.35600332244981,
							42.50949851000735,
							0
						],
						[
							-76.35606132246669,
							42.50947451000059,
							0
						],
						[
							-76.35632132254099,
							42.509349509967,
							0
						],
						[
							-76.35679132267137,
							42.5090695098963,
							0
						],
						[
							-76.35718432277501,
							42.50876250982374,
							0
						],
						[
							-76.35743032283762,
							42.50853950977261,
							0
						],
						[
							-76.35776332291844,
							42.50818450969356,
							0
						],
						[
							-76.35801232297493,
							42.50786550962459,
							0
						],
						[
							-76.35808332298913,
							42.5077485096001,
							0
						],
						[
							-76.35831432303462,
							42.5073585095187,
							0
						],
						[
							-76.3585883230875,
							42.50688150941953,
							0
						],
						[
							-76.35954832327342,
							42.50521850907348,
							0
						],
						[
							-76.35965432329428,
							42.50503950903613,
							0
						],
						[
							-76.35971732330687,
							42.50493550901437,
							0
						],
						[
							-76.35944932318809,
							42.50449150894313,
							0
						],
						[
							-76.3594213231399,
							42.50395950884595,
							0
						],
						[
							-76.35924532304314,
							42.50341350875213,
							0
						],
						[
							-76.35877232282492,
							42.50251350860487,
							0
						],
						[
							-76.35879232279858,
							42.50206850852182,
							0
						],
						[
							-76.35902832285797,
							42.50184550847109,
							0
						],
						[
							-76.36010832312995,
							42.5008275082394,
							0
						],
						[
							-76.36063632330058,
							42.5008415082207,
							0
						],
						[
							-76.36144732360117,
							42.50138550828854,
							0
						],
						[
							-76.36238632390692,
							42.50144150826103,
							0
						],
						[
							-76.36319032410171,
							42.50057950806929,
							0
						],
						[
							-76.36397932431979,
							42.50009950794875,
							0
						],
						[
							-76.36402032433084,
							42.50007050794175,
							0
						],
						[
							-76.36420232439004,
							42.50008050793625,
							0
						],
						[
							-76.36445432447098,
							42.50008050792609,
							0
						],
						[
							-76.36447232447514,
							42.5000585079213,
							0
						],
						[
							-76.36490332459172,
							42.49976150784903,
							0
						],
						[
							-76.3656883247893,
							42.49902050768041,
							0
						],
						[
							-76.36617132492508,
							42.49875750761233,
							0
						],
						[
							-76.3662393249442,
							42.49872050760275,
							0
						],
						[
							-76.36667032507034,
							42.4985535075545,
							0
						],
						[
							-76.36805432548124,
							42.49809650741421,
							0
						],
						[
							-76.36857532561008,
							42.49757350729657,
							0
						],
						[
							-76.36864132559063,
							42.49702150719186,
							0
						],
						[
							-76.36843932548267,
							42.49643650709186,
							0
						],
						[
							-76.36836632542712,
							42.49600050701423,
							0
						],
						[
							-76.368465325431,
							42.49562150694018,
							0
						],
						[
							-76.3689603255629,
							42.49525350685219,
							0
						],
						[
							-76.36952632573932,
							42.49518050681587,
							0
						],
						[
							-76.3707283261357,
							42.49532050679328,
							0
						],
						[
							-76.3713783263481,
							42.49536950677613,
							0
						],
						[
							-76.37140132635179,
							42.49531950676595,
							0
						],
						[
							-76.37141532635394,
							42.49528750675948,
							0
						],
						[
							-76.37156532637715,
							42.49494850669077,
							0
						],
						[
							-76.37167532639614,
							42.49472650664529,
							0
						],
						[
							-76.37180132641959,
							42.49449550659752,
							0
						],
						[
							-76.3719803264567,
							42.49421850653909,
							0
						],
						[
							-76.37207632647753,
							42.49408250651008,
							0
						],
						[
							-76.37217932649851,
							42.49391850647563,
							0
						],
						[
							-76.37239632654547,
							42.49360950640975,
							0
						],
						[
							-76.3742653269644,
							42.49114650587907,
							0
						],
						[
							-76.37429732696872,
							42.49106550586281,
							0
						],
						[
							-76.37426732695612,
							42.49102550585662,
							0
						],
						[
							-76.37422832690628,
							42.49051850576447,
							0
						],
						[
							-76.37420932688235,
							42.49027650572051,
							0
						],
						[
							-76.37417832684935,
							42.4899635056639,
							0
						],
						[
							-76.37412732678393,
							42.48929750554284,
							0
						],
						[
							-76.37408432672147,
							42.48863650542236,
							0
						],
						[
							-76.37403532665243,
							42.4879125052905,
							0
						],
						[
							-76.37393132643057,
							42.48535250482139,
							0
						],
						[
							-76.37392332641336,
							42.48515350478491,
							0
						],
						[
							-76.37385532628582,
							42.48371750452215,
							0
						],
						[
							-76.37382832623513,
							42.48314650441767,
							0
						],
						[
							-76.37381832621602,
							42.48293050437811,
							0
						],
						[
							-76.37379232618383,
							42.48260650431927,
							0
						],
						[
							-76.37369732606295,
							42.48137850409606,
							0
						],
						[
							-76.37368032603194,
							42.48103150403258,
							0
						],
						[
							-76.3736703260202,
							42.48091550401151,
							0
						],
						[
							-76.37366632600596,
							42.48073950397912,
							0
						],
						[
							-76.37342732593312,
							42.48079250399857,
							0
						],
						[
							-76.37133032529422,
							42.48126250417003,
							0
						],
						[
							-76.36951132474023,
							42.48167250431916,
							0
						],
						[
							-76.36805032429521,
							42.48200150443888,
							0
						],
						[
							-76.36753232413746,
							42.48211850448142,
							0
						],
						[
							-76.36589932363962,
							42.48248050461418,
							0
						],
						[
							-76.36579232360666,
							42.48249950462201,
							0
						],
						[
							-76.36339832287698,
							42.48303250481705,
							0
						],
						[
							-76.36126232222759,
							42.48353050499522,
							0
						],
						[
							-76.35950332169433,
							42.48396150514581,
							0
						],
						[
							-76.35909932157185,
							42.48406050518042,
							0
						],
						[
							-76.35607432065521,
							42.48480750544042,
							0
						],
						[
							-76.35511832036418,
							42.48502550551925,
							0
						],
						[
							-76.35483432027723,
							42.48508350554142,
							0
						],
						[
							-76.35483532024277,
							42.48461050545392,
							0
						],
						[
							-76.35482332022274,
							42.48439050541371,
							0
						],
						[
							-76.35481732020257,
							42.4841425053681,
							0
						],
						[
							-76.35478032014404,
							42.48350850525237,
							0
						],
						[
							-76.35472232002274,
							42.48211250499656,
							0
						],
						[
							-76.35467731995534,
							42.48139250486522,
							0
						],
						[
							-76.35461231990308,
							42.48096550478888,
							0
						],
						[
							-76.3545153198353,
							42.48046750470069,
							0
						],
						[
							-76.35445431978461,
							42.48004450462491,
							0
						],
						[
							-76.3544253197561,
							42.47978350457782,
							0
						],
						[
							-76.35442431975085,
							42.47971650456548,
							0
						],
						[
							-76.35441031969967,
							42.4790815044486,
							0
						],
						[
							-76.3544273196661,
							42.47855050434969,
							0
						],
						[
							-76.35446831963155,
							42.47790150422803,
							0
						],
						[
							-76.35448431958979,
							42.47726350410939,
							0
						],
						[
							-76.35447531952087,
							42.47636550394366,
							0
						],
						[
							-76.35443931941235,
							42.47504650370115,
							0
						],
						[
							-76.35441231936942,
							42.47458050361605,
							0
						],
						[
							-76.35439931934921,
							42.47436250357627,
							0
						],
						[
							-76.35437531932696,
							42.4741645035406,
							0
						],
						[
							-76.35431931928258,
							42.47380550347644,
							0
						],
						[
							-76.35427931924232,
							42.47343250340908,
							0
						],
						[
							-76.35425131920783,
							42.47308550334602,
							0
						],
						[
							-76.35422631914791,
							42.47237950321644,
							0
						],
						[
							-76.35422131911088,
							42.47189750312748,
							0
						],
						[
							-76.35420531906803,
							42.47138450303323,
							0
						],
						[
							-76.35418631903313,
							42.47099250296147,
							0
						],
						[
							-76.35415331900107,
							42.47070050290879,
							0
						],
						[
							-76.35412131896338,
							42.47032750284109,
							0
						],
						[
							-76.35407831887747,
							42.46934650266135,
							0
						],
						[
							-76.35406831885966,
							42.46914750262495,
							0
						],
						[
							-76.35394531863736,
							42.46665950216962,
							0
						],
						[
							-76.3539193185946,
							42.4661915020841,
							0
						],
						[
							-76.35391631858843,
							42.46612050207107,
							0
						],
						[
							-76.35386431848865,
							42.46498950186392,
							0
						],
						[
							-76.35385331844213,
							42.46440450175614,
							0
						],
						[
							-76.35382431839153,
							42.46384250165335,
							0
						],
						[
							-76.35380331834342,
							42.46327950155001,
							0
						],
						[
							-76.3537183181776,
							42.46139350120449,
							0
						],
						[
							-76.35369331806514,
							42.45997150094237,
							0
						],
						[
							-76.35369631804159,
							42.45963750088044,
							0
						],
						[
							-76.35370731803688,
							42.45952550085929,
							0
						],
						[
							-76.35373331803562,
							42.45939450083399,
							0
						],
						[
							-76.35377431803944,
							42.45926750080884,
							0
						],
						[
							-76.35382231805289,
							42.45924050080191,
							0
						],
						[
							-76.35382531804791,
							42.45915950078681,
							0
						],
						[
							-76.35389531806237,
							42.45905050076382,
							0
						],
						[
							-76.35406731810028,
							42.45881450071322,
							0
						],
						[
							-76.35467731824431,
							42.45810850055804,
							0
						],
						[
							-76.35514131835527,
							42.45759050044349,
							0
						],
						[
							-76.3564303186619,
							42.45612950012121,
							0
						],
						[
							-76.35676131874146,
							42.45576550004053,
							0
						],
						[
							-76.35736331888762,
							42.4551234998975,
							0
						],
						[
							-76.3581143190709,
							42.45433549972143,
							0
						],
						[
							-76.35835031912957,
							42.45410249966881,
							0
						],
						[
							-76.35846831916012,
							42.45400249964555,
							0
						],
						[
							-76.35861931920054,
							42.45389249961911,
							0
						],
						[
							-76.358897319276,
							42.45370449957314,
							0
						],
						[
							-76.35897531929767,
							42.45365849956149,
							0
						],
						[
							-76.35921231936561,
							42.45354749953139,
							0
						],
						[
							-76.35971431951351,
							42.45336649947769,
							0
						],
						[
							-76.35963031947207,
							42.45316949944463,
							0
						],
						[
							-76.35955631942093,
							42.45279649937856,
							0
						],
						[
							-76.35945931935748,
							42.45235649930105,
							0
						],
						[
							-76.3594043193286,
							42.45220349927492,
							0
						],
						[
							-76.35932531929177,
							42.45204749924924,
							0
						],
						[
							-76.35915431922182,
							42.4518424992182,
							0
						],
						[
							-76.35894131913865,
							42.45164149918957,
							0
						],
						[
							-76.35826131888125,
							42.4511094991185,
							0
						],
						[
							-76.35779531870658,
							42.45076849907413,
							0
						],
						[
							-76.35734331854039,
							42.45048149903921,
							0
						],
						[
							-76.3568083183429,
							42.45013149899599,
							0
						],
						[
							-76.35644931820848,
							42.44987049896213,
							0
						],
						[
							-76.35608531807038,
							42.44958149892329,
							0
						],
						[
							-76.35574731793939,
							42.44927549888027,
							0
						],
						[
							-76.35479031757441,
							42.44848949877333,
							0
						],
						[
							-76.35416131733339,
							42.44795749870016,
							0
						],
						[
							-76.35313331693946,
							42.44708749858051,
							0
						],
						[
							-76.35298431688238,
							42.44696149856318,
							0
						],
						[
							-76.35286631683736,
							42.44686449854999,
							0
						],
						[
							-76.3518713164652,
							42.44614649845713,
							0
						],
						[
							-76.35119431621078,
							42.4456414983909,
							0
						],
						[
							-76.35053031595912,
							42.44511749832061,
							0
						],
						[
							-76.3502073158359,
							42.44485149828437,
							0
						],
						[
							-76.35000931575895,
							42.44466949825864,
							0
						],
						[
							-76.34974631565552,
							42.44441049822129,
							0
						],
						[
							-76.3476013148035,
							42.44218449789553,
							0
						],
						[
							-76.34672731454178,
							42.44244249797846,
							0
						],
						[
							-76.34645131445939,
							42.44252749800531,
							0
						],
						[
							-76.34586831428716,
							42.44273149806653,
							0
						],
						[
							-76.34574131424917,
							42.44276949807866,
							0
						],
						[
							-76.3443933138459,
							42.44317249820752,
							0
						],
						[
							-76.34398531373968,
							42.44351049828649,
							0
						],
						[
							-76.34385631371887,
							42.44379149834372,
							0
						],
						[
							-76.34374931371032,
							42.44414349841318,
							0
						],
						[
							-76.34355531368853,
							42.44469549852318,
							0
						],
						[
							-76.34328631364394,
							42.44526549863951,
							0
						],
						[
							-76.34304531359987,
							42.44571949873325,
							0
						],
						[
							-76.34266431353525,
							42.44650649889427,
							0
						],
						[
							-76.34256831353032,
							42.44685949896348,
							0
						],
						[
							-76.3425673135782,
							42.44751649908513,
							0
						],
						[
							-76.34258031360945,
							42.44788549915291,
							0
						],
						[
							-76.34257031363732,
							42.4483094992318,
							0
						],
						[
							-76.34258131365834,
							42.44854749927541,
							0
						],
						[
							-76.342738313813,
							42.44996849953213,
							0
						],
						[
							-76.34277831385526,
							42.45036949960475,
							0
						],
						[
							-76.34279831388369,
							42.45066949965946,
							0
						],
						[
							-76.34280631389588,
							42.45080049968338,
							0
						],
						[
							-76.34280431392729,
							42.45123749976436,
							0
						],
						[
							-76.34281331394736,
							42.45147149980729,
							0
						],
						[
							-76.34283931397157,
							42.45168749984624,
							0
						],
						[
							-76.34289431403873,
							42.45236249996896,
							0
						],
						[
							-76.34294331409176,
							42.452870500061,
							0
						],
						[
							-76.34295231414295,
							42.45352850018242,
							0
						],
						[
							-76.34301531423347,
							42.45448650035718,
							0
						],
						[
							-76.34300731426458,
							42.45494550044246,
							0
						],
						[
							-76.34302531431764,
							42.45558950056092,
							0
						],
						[
							-76.3430553143553,
							42.45597150063041,
							0
						],
						[
							-76.34309031439163,
							42.45631350069229,
							0
						],
						[
							-76.34310631444565,
							42.4569795008149,
							0
						],
						[
							-76.34309131446074,
							42.45725050086568,
							0
						],
						[
							-76.34297331444374,
							42.45753550092315,
							0
						],
						[
							-76.34252731436732,
							42.4584455011095,
							0
						],
						[
							-76.34229731432275,
							42.45884450119259,
							0
						],
						[
							-76.34206531427452,
							42.45920250126818,
							0
						],
						[
							-76.34197731426028,
							42.45939350130706,
							0
						],
						[
							-76.3419453142669,
							42.45962350135092,
							0
						],
						[
							-76.34193131428881,
							42.45998350141809,
							0
						],
						[
							-76.34193931431847,
							42.46035250148605,
							0
						],
						[
							-76.34201931440592,
							42.46119350163846,
							0
						],
						[
							-76.34201331443937,
							42.46167550172788,
							0
						],
						[
							-76.34205931452522,
							42.46264350190515,
							0
						],
						[
							-76.34207431456073,
							42.4630615019819,
							0
						],
						[
							-76.34207131459382,
							42.46352550206787,
							0
						],
						[
							-76.34210531464701,
							42.46410150217308,
							0
						],
						[
							-76.34211031467903,
							42.46451550224947,
							0
						],
						[
							-76.34213231471621,
							42.46492550232445,
							0
						],
						[
							-76.34216031475361,
							42.46531250239492,
							0
						],
						[
							-76.34221431479835,
							42.46568550246175,
							0
						],
						[
							-76.34223131482894,
							42.46602750252435,
							0
						],
						[
							-76.34220831484863,
							42.46639650259356,
							0
						],
						[
							-76.34222131487897,
							42.46675250265887,
							0
						],
						[
							-76.34232531495891,
							42.46738650277202,
							0
						],
						[
							-76.34245231501808,
							42.46763650281314,
							0
						],
						[
							-76.34269931512229,
							42.46797550286591,
							0
						],
						[
							-76.34315231531207,
							42.46857850295924,
							0
						],
						[
							-76.34322331534207,
							42.4686765029745,
							0
						],
						[
							-76.34349731545797,
							42.46905650303378,
							0
						],
						[
							-76.34400031567661,
							42.46983350315728,
							0
						],
						[
							-76.34414931574686,
							42.47013850320769,
							0
						],
						[
							-76.34427931581168,
							42.47045250326055,
							0
						],
						[
							-76.34436931586328,
							42.47076150331408,
							0
						],
						[
							-76.34439131589019,
							42.47103150336314,
							0
						],
						[
							-76.34437431591455,
							42.47143750343894,
							0
						],
						[
							-76.34441031595483,
							42.47182850350983,
							0
						],
						[
							-76.34445931599467,
							42.47215650356851,
							0
						],
						[
							-76.3444993160452,
							42.47266950366181,
							0
						],
						[
							-76.34442931605122,
							42.4730575037364,
							0
						],
						[
							-76.34429831602218,
							42.47323450377441,
							0
						],
						[
							-76.34408931596914,
							42.47342650381835,
							0
						],
						[
							-76.34385331590812,
							42.47362750386504,
							0
						],
						[
							-76.34362631585026,
							42.4738325039121,
							0
						],
						[
							-76.34319431574598,
							42.47430150401623,
							0
						],
						[
							-76.34301431570815,
							42.4745735040738,
							0
						],
						[
							-76.34290031569871,
							42.47494350414682,
							0
						],
						[
							-76.3428683157279,
							42.47548050424744,
							0
						],
						[
							-76.34285931574513,
							42.47575450429851,
							0
						],
						[
							-76.34286831578015,
							42.47619150437896,
							0
						],
						[
							-76.34286331579308,
							42.47638950441577,
							0
						],
						[
							-76.34285031580353,
							42.47658850445311,
							0
						],
						[
							-76.34284431581526,
							42.47677450448776,
							0
						],
						[
							-76.34283731582882,
							42.47698950452779,
							0
						],
						[
							-76.34286831587016,
							42.47741650460552,
							0
						],
						[
							-76.34293331599325,
							42.47880750486018,
							0
						],
						[
							-76.34297731610225,
							42.4800985050972,
							0
						],
						[
							-76.34301031619364,
							42.48119750529912,
							0
						],
						[
							-76.34303631623706,
							42.48167450538627,
							0
						],
						[
							-76.34179131583936,
							42.48170450544197,
							0
						],
						[
							-76.33975831518987,
							42.48175250553271,
							0
						],
						[
							-76.33832131473189,
							42.48180150559963,
							0
						],
						[
							-76.33629431408646,
							42.48187850569549,
							0
						],
						[
							-76.33532531377828,
							42.48192050574227,
							0
						],
						[
							-76.33515731372489,
							42.48192850575052,
							0
						],
						[
							-76.33442531349336,
							42.48197750578906,
							0
						],
						[
							-76.33348231319947,
							42.48210050584977,
							0
						],
						[
							-76.33259431291835,
							42.48215650589587,
							0
						],
						[
							-76.3313103125103,
							42.48221650595865,
							0
						],
						[
							-76.3294863119299,
							42.48229150604593,
							0
						],
						[
							-76.32933331188134,
							42.48229950605357,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090021002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>14490976</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>156329</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4924307</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3591991</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090021002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090021002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1357</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>517</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>3580.77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>37</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>25727</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>25389</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>26701</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14092</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13749</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14636</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8258</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7991</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8581</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5834</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5757</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6055</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.75</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2666</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3121</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2094</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1272</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1434</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>945</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00016"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.30340330521581,
							42.50496351128782,
							0
						],
						[
							-76.30334730519634,
							42.50494351128637,
							0
						],
						[
							-76.30315130512953,
							42.50489151128463,
							0
						],
						[
							-76.3029953050772,
							42.50486151128538,
							0
						],
						[
							-76.30281830501923,
							42.50484651128971,
							0
						],
						[
							-76.30255130493234,
							42.50483151129769,
							0
						],
						[
							-76.30198530475126,
							42.50484251132249,
							0
						],
						[
							-76.3014393045769,
							42.50485751134723,
							0
						],
						[
							-76.3013653045535,
							42.50486251135112,
							0
						],
						[
							-76.3004193042506,
							42.50487751139198,
							0
						],
						[
							-76.29937630391765,
							42.50490751143947,
							0
						],
						[
							-76.29840730360745,
							42.50492351148141,
							0
						],
						[
							-76.29838030354522,
							42.50419451134774,
							0
						],
						[
							-76.29835030347407,
							42.5033575111942,
							0
						],
						[
							-76.29834330345719,
							42.5031585111577,
							0
						],
						[
							-76.2982863033923,
							42.50252451104277,
							0
						],
						[
							-76.29823930339843,
							42.50281351109808,
							0
						],
						[
							-76.29816130339424,
							42.50309751115373,
							0
						],
						[
							-76.29804330337659,
							42.50337351120952,
							0
						],
						[
							-76.29797930336866,
							42.50354551124387,
							0
						],
						[
							-76.29784930334621,
							42.50380851129773,
							0
						],
						[
							-76.29781430334026,
							42.50388051131245,
							0
						],
						[
							-76.29760230329616,
							42.50420751138142,
							0
						],
						[
							-76.29734630323622,
							42.50451151144793,
							0
						],
						[
							-76.29704830316125,
							42.50479451151224,
							0
						],
						[
							-76.29647030300939,
							42.50525551162072,
							0
						],
						[
							-76.29326930216207,
							42.50772351220571,
							0
						],
						[
							-76.29277830203192,
							42.50809951229498,
							0
						],
						[
							-76.29029230137259,
							42.50999951274618,
							0
						],
						[
							-76.28415629974342,
							42.51466551385543,
							0
						],
						[
							-76.28400329970299,
							42.51478451388359,
							0
						],
						[
							-76.2836902996215,
							42.51504451394423,
							0
						],
						[
							-76.28348229956772,
							42.51522251398551,
							0
						],
						[
							-76.28330129952197,
							42.51539151402402,
							0
						],
						[
							-76.28300429945025,
							42.51571451409566,
							0
						],
						[
							-76.28269229937796,
							42.51609551417863,
							0
						],
						[
							-76.28257529935205,
							42.51625451421272,
							0
						],
						[
							-76.28236729930886,
							42.5165765142806,
							0
						],
						[
							-76.28219729927656,
							42.51688051434362,
							0
						],
						[
							-76.28204329924864,
							42.51717451440415,
							0
						],
						[
							-76.2819242992287,
							42.51742351445495,
							0
						],
						[
							-76.28183329921342,
							42.51761351449373,
							0
						],
						[
							-76.28112529909183,
							42.51905551478871,
							0
						],
						[
							-76.28037829896373,
							42.52057951510042,
							0
						],
						[
							-76.28027929894654,
							42.52077851514117,
							0
						],
						[
							-76.2802102989317,
							42.52087851516243,
							0
						],
						[
							-76.28010729891095,
							42.52104651519762,
							0
						],
						[
							-76.279765298838,
							42.52154951530434,
							0
						],
						[
							-76.27962529880591,
							42.52172551534249,
							0
						],
						[
							-76.27946829876987,
							42.52192151538502,
							0
						],
						[
							-76.27789029840832,
							42.52390351581476,
							0
						],
						[
							-76.27667029812967,
							42.52544751614912,
							0
						],
						[
							-76.27563429788957,
							42.52671151642436,
							0
						],
						[
							-76.27373329745049,
							42.52905151693321,
							0
						],
						[
							-76.2717332969876,
							42.53150051746614,
							0
						],
						[
							-76.27056729671703,
							42.53291851777501,
							0
						],
						[
							-76.2702812966498,
							42.53325451784859,
							0
						],
						[
							-76.27004129659204,
							42.53351851790703,
							0
						],
						[
							-76.26979429653072,
							42.5337645179624,
							0
						],
						[
							-76.26929829640481,
							42.53422051806659,
							0
						],
						[
							-76.26905529634138,
							42.53442051811331,
							0
						],
						[
							-76.26823229612481,
							42.53507351826706,
							0
						],
						[
							-76.26749929592914,
							42.53561751839705,
							0
						],
						[
							-76.26727529587025,
							42.53579551843892,
							0
						],
						[
							-76.26679829574475,
							42.53617451852814,
							0
						],
						[
							-76.26478429521019,
							42.53771051889287,
							0
						],
						[
							-76.26408429502442,
							42.53824451901966,
							0
						],
						[
							-76.263056294752,
							42.53903451920694,
							0
						],
						[
							-76.26224129453534,
							42.53965151935368,
							0
						],
						[
							-76.26136629430344,
							42.54032351951301,
							0
						],
						[
							-76.26113629424316,
							42.54050951955663,
							0
						],
						[
							-76.26095929419617,
							42.54064451958868,
							0
						],
						[
							-76.26097229425125,
							42.54133651971601,
							0
						],
						[
							-76.26101729432513,
							42.54214451986344,
							0
						],
						[
							-76.26111729448904,
							42.54393652019044,
							0
						],
						[
							-76.26116329456435,
							42.5447595203406,
							0
						],
						[
							-76.26120929463924,
							42.54557652048966,
							0
						],
						[
							-76.261336294846,
							42.54783252090123,
							0
						],
						[
							-76.26138329492254,
							42.54866752105355,
							0
						],
						[
							-76.26148329508668,
							42.55046152138085,
							0
						],
						[
							-76.2616652953843,
							42.55371152197371,
							0
						],
						[
							-76.2616922954286,
							42.55419552206201,
							0
						],
						[
							-76.26171629546818,
							42.554628522141,
							0
						],
						[
							-76.26210729610646,
							42.56159252341113,
							0
						],
						[
							-76.26221129627773,
							42.56346452375253,
							0
						],
						[
							-76.26222829630616,
							42.56377652380946,
							0
						],
						[
							-76.2622352963174,
							42.56389852383169,
							0
						],
						[
							-76.26231729645217,
							42.56537052410015,
							0
						],
						[
							-76.26253129680295,
							42.56919952479836,
							0
						],
						[
							-76.26253529680909,
							42.56926552481038,
							0
						],
						[
							-76.2628242972817,
							42.57441952575002,
							0
						],
						[
							-76.26314729738432,
							42.57440252573388,
							0
						],
						[
							-76.26367329755276,
							42.57439252571088,
							0
						],
						[
							-76.26944429940329,
							42.57431952546512,
							0
						],
						[
							-76.27236730033856,
							42.57425552533563,
							0
						],
						[
							-76.27350230070063,
							42.57421552528258,
							0
						],
						[
							-76.27367630075615,
							42.57420952527443,
							0
						],
						[
							-76.27933930255703,
							42.57393552499585,
							0
						],
						[
							-76.27941430258106,
							42.57393452499264,
							0
						],
						[
							-76.27971030267501,
							42.57391752497759,
							0
						],
						[
							-76.28125530316726,
							42.57385552490393,
							0
						],
						[
							-76.28184130335356,
							42.57382652487498,
							0
						],
						[
							-76.2833223038259,
							42.57377352480554,
							0
						],
						[
							-76.28607330470822,
							42.57374252468903,
							0
						],
						[
							-76.2886153055209,
							42.57367852457482,
							0
						],
						[
							-76.28877630557187,
							42.5736675245663,
							0
						],
						[
							-76.28890830561387,
							42.57366152455988,
							0
						],
						[
							-76.29163930648805,
							42.57360752443989,
							0
						],
						[
							-76.29398130723692,
							42.57355052433502,
							0
						],
						[
							-76.29433930735107,
							42.57353752431819,
							0
						],
						[
							-76.29591230785782,
							42.57355052425721,
							0
						],
						[
							-76.29602830789564,
							42.57355752425382,
							0
						],
						[
							-76.29611530792404,
							42.57356352425141,
							0
						],
						[
							-76.2961933079495,
							42.57356852424922,
							0
						],
						[
							-76.29624630796684,
							42.57357252424782,
							0
						],
						[
							-76.29680930815053,
							42.57360852423177,
							0
						],
						[
							-76.29698530820725,
							42.57361052422505,
							0
						],
						[
							-76.29714230825826,
							42.57361752422001,
							0
						],
						[
							-76.29850330870407,
							42.57372852418564,
							0
						],
						[
							-76.29999730919484,
							42.57386952415145,
							0
						],
						[
							-76.30292331015875,
							42.57418252409128,
							0
						],
						[
							-76.30316131023741,
							42.57421152408703,
							0
						],
						[
							-76.30552231101552,
							42.57446852403928,
							0
						],
						[
							-76.30612631121252,
							42.57450652402195,
							0
						],
						[
							-76.30711431153034,
							42.57450852398248,
							0
						],
						[
							-76.30905531215079,
							42.57445952389518,
							0
						],
						[
							-76.31206731311464,
							42.57439752376232,
							0
						],
						[
							-76.31286431336949,
							42.57437852372667,
							0
						],
						[
							-76.31429031382554,
							42.57434552366308,
							0
						],
						[
							-76.31726331477691,
							42.57428452353194,
							0
						],
						[
							-76.320281315741,
							42.57420052339472,
							0
						],
						[
							-76.32116131602244,
							42.57418052335554,
							0
						],
						[
							-76.3235883167977,
							42.57411252324508,
							0
						],
						[
							-76.32354031670917,
							42.57312252306436,
							0
						],
						[
							-76.32353131668664,
							42.57285652301567,
							0
						],
						[
							-76.32348931651757,
							42.5707495226286,
							0
						],
						[
							-76.32341331634467,
							42.56873852226058,
							0
						],
						[
							-76.32331831608248,
							42.56560052168535,
							0
						],
						[
							-76.32327831594012,
							42.56384552136309,
							0
						],
						[
							-76.32326731592461,
							42.56368352133362,
							0
						],
						[
							-76.32325331590712,
							42.56350752130172,
							0
						],
						[
							-76.32319131566,
							42.56042852073597,
							0
						],
						[
							-76.32312531551895,
							42.55880452043888,
							0
						],
						[
							-76.32311531549426,
							42.55851352038559,
							0
						],
						[
							-76.32310931547855,
							42.55832652035131,
							0
						],
						[
							-76.32309031534156,
							42.55655252002462,
							0
						],
						[
							-76.32279231469448,
							42.54907751865672,
							0
						],
						[
							-76.32330131485764,
							42.54907151863508,
							0
						],
						[
							-76.3232893148389,
							42.54886951859829,
							0
						],
						[
							-76.32321731466011,
							42.54675851821143,
							0
						],
						[
							-76.32298531413566,
							42.54065551709386,
							0
						],
						[
							-76.32295531407989,
							42.54002951697947,
							0
						],
						[
							-76.32294131400708,
							42.53910251680885,
							0
						],
						[
							-76.32289331393359,
							42.53831451666525,
							0
						],
						[
							-76.32289331392563,
							42.5382065166453,
							0
						],
						[
							-76.32286331390273,
							42.53802651661328,
							0
						],
						[
							-76.32280431387056,
							42.53784751658261,
							0
						],
						[
							-76.32274631384537,
							42.5377585165685,
							0
						],
						[
							-76.32268631382013,
							42.53767751655595,
							0
						],
						[
							-76.32252331375624,
							42.53752151653371,
							0
						],
						[
							-76.32228731366705,
							42.5373405165098,
							0
						],
						[
							-76.3221143136026,
							42.53722051649462,
							0
						],
						[
							-76.32196531354624,
							42.53710551647937,
							0
						],
						[
							-76.3218623135079,
							42.53703451647042,
							0
						],
						[
							-76.32169831344437,
							42.53688751644987,
							0
						],
						[
							-76.32165131342498,
							42.53682951644105,
							0
						],
						[
							-76.32161931341044,
							42.53677151643164,
							0
						],
						[
							-76.32158831339451,
							42.53669051641792,
							0
						],
						[
							-76.32156531338084,
							42.53660551640315,
							0
						],
						[
							-76.32155431336508,
							42.53643951637294,
							0
						],
						[
							-76.32155031335311,
							42.53629451634631,
							0
						],
						[
							-76.32156331333644,
							42.53601151629353,
							0
						],
						[
							-76.3215893133232,
							42.53571851623837,
							0
						],
						[
							-76.32160431330246,
							42.53537151617368,
							0
						],
						[
							-76.32161931329594,
							42.53521751614463,
							0
						],
						[
							-76.32163731329577,
							42.53513651612894,
							0
						],
						[
							-76.32167731330398,
							42.5350735161157,
							0
						],
						[
							-76.32175031332434,
							42.53503151610499,
							0
						],
						[
							-76.3218253133474,
							42.53501751609939,
							0
						],
						[
							-76.32189231336991,
							42.53503051609909,
							0
						],
						[
							-76.32195431339107,
							42.53504751609973,
							0
						],
						[
							-76.32214531345763,
							42.53511751610496,
							0
						],
						[
							-76.32237331353635,
							42.53519151610944,
							0
						],
						[
							-76.32256631360383,
							42.53526551611535,
							0
						],
						[
							-76.32270931365332,
							42.53531351611844,
							0
						],
						[
							-76.32287731371049,
							42.53535651611961,
							0
						],
						[
							-76.32322031382573,
							42.53542451611835,
							0
						],
						[
							-76.32339531388381,
							42.53544951611591,
							0
						],
						[
							-76.32356231393867,
							42.53546551611213,
							0
						],
						[
							-76.32370431398489,
							42.53547351610789,
							0
						],
						[
							-76.32380831401788,
							42.53546751610259,
							0
						],
						[
							-76.32397331406906,
							42.53544251609132,
							0
						],
						[
							-76.32402431408443,
							42.53542851608668,
							0
						],
						[
							-76.32413431411638,
							42.53538251607377,
							0
						],
						[
							-76.32419531413298,
							42.53534151606372,
							0
						],
						[
							-76.32430831416015,
							42.53521751603627,
							0
						],
						[
							-76.32434931416907,
							42.53515951602391,
							0
						],
						[
							-76.32454231420839,
							42.53485151595924,
							0
						],
						[
							-76.32493331429552,
							42.53432851584689,
							0
						],
						[
							-76.32502031431545,
							42.53421951582325,
							0
						],
						[
							-76.32510331433514,
							42.53412451580236,
							0
						],
						[
							-76.32529831437738,
							42.53384751574335,
							0
						],
						[
							-76.32540831440198,
							42.53370151571195,
							0
						],
						[
							-76.3254873144164,
							42.53355251568124,
							0
						],
						[
							-76.32551731441933,
							42.53346151566323,
							0
						],
						[
							-76.32554131441812,
							42.53334051563991,
							0
						],
						[
							-76.32558631443848,
							42.53342051565286,
							0
						],
						[
							-76.32563331445691,
							42.53346551565927,
							0
						],
						[
							-76.32568031447458,
							42.53350051566385,
							0
						],
						[
							-76.32576631450384,
							42.53352251566444,
							0
						],
						[
							-76.3260323145897,
							42.53352751565465,
							0
						],
						[
							-76.32931031564206,
							42.53351251551979,
							0
						],
						[
							-76.33049231601825,
							42.5334625154629,
							0
						],
						[
							-76.33109331620992,
							42.53344251543498,
							0
						],
						[
							-76.33165831639067,
							42.53343151541018,
							0
						],
						[
							-76.3322143165679,
							42.53341151538407,
							0
						],
						[
							-76.33387431709923,
							42.5333825153118,
							0
						],
						[
							-76.33449131729698,
							42.53337551528563,
							0
						],
						[
							-76.33533531756585,
							42.5333435152457,
							0
						],
						[
							-76.33620331784341,
							42.53332451520719,
							0
						],
						[
							-76.33609331763788,
							42.53101551478516,
							0
						],
						[
							-76.33604931757436,
							42.5303455146632,
							0
						],
						[
							-76.33603431751679,
							42.52962951453155,
							0
						],
						[
							-76.33599831744183,
							42.52876951437414,
							0
						],
						[
							-76.33596931736791,
							42.52789251421334,
							0
						],
						[
							-76.3358813172302,
							42.52640751394258,
							0
						],
						[
							-76.3358143170913,
							42.524814513651,
							0
						],
						[
							-76.33575931696154,
							42.52329251337205,
							0
						],
						[
							-76.33572931687897,
							42.52230251319035,
							0
						],
						[
							-76.3356783167144,
							42.52029051282071,
							0
						],
						[
							-76.33564331663494,
							42.51936451265103,
							0
						],
						[
							-76.33563331661149,
							42.51908951260064,
							0
						],
						[
							-76.33558831650711,
							42.51786851237685,
							0
						],
						[
							-76.33553831640393,
							42.51668551216029,
							0
						],
						[
							-76.33553431639588,
							42.51659351214345,
							0
						],
						[
							-76.3355323163922,
							42.51655251213595,
							0
						],
						[
							-76.33553131639056,
							42.51653451213267,
							0
						],
						[
							-76.33533331598254,
							42.51185651127621,
							0
						],
						[
							-76.33531931594558,
							42.5114155111953,
							0
						],
						[
							-76.3352933158852,
							42.51070851106569,
							0
						],
						[
							-76.3351173155392,
							42.5067755103459,
							0
						],
						[
							-76.33509231548274,
							42.50611751022531,
							0
						],
						[
							-76.33506131543709,
							42.50563251013691,
							0
						],
						[
							-76.33505531543369,
							42.50561251013347,
							0
						],
						[
							-76.33492931536495,
							42.50522851006758,
							0
						],
						[
							-76.3348993153484,
							42.50513451005139,
							0
						],
						[
							-76.33488131533893,
							42.50508451004287,
							0
						],
						[
							-76.33470031525546,
							42.5047405099866,
							0
						],
						[
							-76.33465831523733,
							42.50467750997665,
							0
						],
						[
							-76.33456831519892,
							42.50454850995642,
							0
						],
						[
							-76.33416831503429,
							42.50405750988177,
							0
						],
						[
							-76.33355331478256,
							42.50332150977051,
							0
						],
						[
							-76.33296631454348,
							42.50263550966734,
							0
						],
						[
							-76.33256631438717,
							42.50225750961361,
							0
						],
						[
							-76.33238331431792,
							42.50211550959471,
							0
						],
						[
							-76.33232631429698,
							42.50207950959035,
							0
						],
						[
							-76.33217731424227,
							42.50198650957917,
							0
						],
						[
							-76.33210231421529,
							42.50194750957498,
							0
						],
						[
							-76.3316743140632,
							42.50174950955562,
							0
						],
						[
							-76.33147931399513,
							42.50167550954978,
							0
						],
						[
							-76.33103431384222,
							42.50154050954277,
							0
						],
						[
							-76.33046531365031,
							42.50141650954276,
							0
						],
						[
							-76.330186313557,
							42.50136650954475,
							0
						],
						[
							-76.32872631307187,
							42.50114850956325,
							0
						],
						[
							-76.32713831254418,
							42.50091050958321,
							0
						],
						[
							-76.32556031201865,
							42.50065850960014,
							0
						],
						[
							-76.32429731159941,
							42.50047550961718,
							0
						],
						[
							-76.32296431115604,
							42.50027050963295,
							0
						],
						[
							-76.32225931091953,
							42.5001345096362,
							0
						],
						[
							-76.3223033110025,
							42.50107050980744,
							0
						],
						[
							-76.32242331128299,
							42.50436051041078,
							0
						],
						[
							-76.32247131136424,
							42.50525551057431,
							0
						],
						[
							-76.32249231143292,
							42.50609751072908,
							0
						],
						[
							-76.32255131155978,
							42.50756451099787,
							0
						],
						[
							-76.32257531159065,
							42.50787951105512,
							0
						],
						[
							-76.32258231160019,
							42.50797851107313,
							0
						],
						[
							-76.32259131166339,
							42.50879851122433,
							0
						],
						[
							-76.32260331169836,
							42.50922151130202,
							0
						],
						[
							-76.32258031170193,
							42.50937051133049,
							0
						],
						[
							-76.32253631169839,
							42.50951451135886,
							0
						],
						[
							-76.3224483116841,
							42.50970451139754,
							0
						],
						[
							-76.32242131168043,
							42.50977251141119,
							0
						],
						[
							-76.32241431168215,
							42.50982651142146,
							0
						],
						[
							-76.32235931168242,
							42.51007051146876,
							0
						],
						[
							-76.32235731168613,
							42.51012951147973,
							0
						],
						[
							-76.32239631171285,
							42.51032251151386,
							0
						],
						[
							-76.32259231182734,
							42.51102251163533,
							0
						],
						[
							-76.32261831186614,
							42.51143651171079,
							0
						],
						[
							-76.32265231193269,
							42.51219251184914,
							0
						],
						[
							-76.32233631183145,
							42.5121965118626,
							0
						],
						[
							-76.32029031117438,
							42.51220151194591,
							0
						],
						[
							-76.32021631115097,
							42.51220651194981,
							0
						],
						[
							-76.31904531077639,
							42.51222951200123,
							0
						],
						[
							-76.3184363105812,
							42.51223651202704,
							0
						],
						[
							-76.31803531045038,
							42.51220951203819,
							0
						],
						[
							-76.3178673103936,
							42.51217151203795,
							0
						],
						[
							-76.31769031033448,
							42.51214151203953,
							0
						],
						[
							-76.31755131028366,
							42.5120575120296,
							0
						],
						[
							-76.31631530983987,
							42.51142351196219,
							0
						],
						[
							-76.3143533091243,
							42.51026651182733,
							0
						],
						[
							-76.3129423086111,
							42.50945351173388,
							0
						],
						[
							-76.31169330815982,
							42.50877451165866,
							0
						],
						[
							-76.31062030777393,
							42.50821551159852,
							0
						],
						[
							-76.3098163074858,
							42.50781051155602,
							0
						],
						[
							-76.3093243073119,
							42.50759551153607,
							0
						],
						[
							-76.30429230553064,
							42.50536051132543,
							0
						],
						[
							-76.30414330547727,
							42.50528551131756,
							0
						],
						[
							-76.30353430526158,
							42.50501351129178,
							0
						],
						[
							-76.30347730524163,
							42.50499151128999,
							0
						],
						[
							-76.30340330521581,
							42.50496351128782,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090021001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>35829247</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>268810</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5378909</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.2924673</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090021001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090021001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1683</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>538</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>8853.08</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.43</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.69</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26455</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26117</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27429</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14412</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14069</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14956</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8413</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8146</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8736</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5999</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5922</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6220</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.06</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1990</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2905</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>118</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2852</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1331</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1475</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>788</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>79</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00017"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.3810983344189,
							42.56241551876496,
							0
						],
						[
							-76.3804993342269,
							42.56242251879046,
							0
						],
						[
							-76.38041233419939,
							42.56242851879509,
							0
						],
						[
							-76.38032433417052,
							42.56242051879717,
							0
						],
						[
							-76.38000733406459,
							42.56236551879983,
							0
						],
						[
							-76.37991933403143,
							42.56229951879121,
							0
						],
						[
							-76.37985233400693,
							42.56225951878654,
							0
						],
						[
							-76.37945033385276,
							42.56192151874043,
							0
						],
						[
							-76.3781943333637,
							42.56076651857809,
							0
						],
						[
							-76.37708033292216,
							42.5596365184146,
							0
						],
						[
							-76.37497633208439,
							42.55745051809623,
							0
						],
						[
							-76.37462033194434,
							42.5571035180466,
							0
						],
						[
							-76.37349633149562,
							42.55591951787351,
							0
						],
						[
							-76.37279533121706,
							42.55519851776877,
							0
						],
						[
							-76.3717553308026,
							42.55411251761036,
							0
						],
						[
							-76.37166233076347,
							42.55398751759106,
							0
						],
						[
							-76.37158733072975,
							42.55385751757012,
							0
						],
						[
							-76.3715323307018,
							42.55371851754667,
							0
						],
						[
							-76.37149633067997,
							42.55357951752248,
							0
						],
						[
							-76.37148333066744,
							42.55346651750214,
							0
						],
						[
							-76.37136333049824,
							42.55169851718071,
							0
						],
						[
							-76.3713553304631,
							42.55125751709963,
							0
						],
						[
							-76.37105333035997,
							42.55117551709668,
							0
						],
						[
							-76.36948232980669,
							42.55051951703906,
							0
						],
						[
							-76.36931832974948,
							42.55045851703444,
							0
						],
						[
							-76.36926532973148,
							42.55044551703417,
							0
						],
						[
							-76.36914932969161,
							42.5504105170324,
							0
						],
						[
							-76.36897632963351,
							42.5503765170331,
							0
						],
						[
							-76.36879732957449,
							42.55035651703665,
							0
						],
						[
							-76.36828132940846,
							42.55035351705692,
							0
						],
						[
							-76.36796932930746,
							42.55034351706768,
							0
						],
						[
							-76.36720632905732,
							42.55027651708612,
							0
						],
						[
							-76.36689332895334,
							42.55023051709026,
							0
						],
						[
							-76.36658932885054,
							42.55016151708981,
							0
						],
						[
							-76.3649383282832,
							42.54966351706456,
							0
						],
						[
							-76.36468832819841,
							42.54960351706357,
							0
						],
						[
							-76.36450032813588,
							42.54957451706581,
							0
						],
						[
							-76.36381932791127,
							42.54949651707891,
							0
						],
						[
							-76.36375432788986,
							42.54948951708025,
							0
						],
						[
							-76.36170732721416,
							42.54924751711823,
							0
						],
						[
							-76.36170032720423,
							42.54914351709931,
							0
						],
						[
							-76.3616683271255,
							42.54821651692949,
							0
						],
						[
							-76.36166032711066,
							42.54805051689917,
							0
						],
						[
							-76.36164732706396,
							42.54747451679337,
							0
						],
						[
							-76.36162032701039,
							42.54686651668224,
							0
						],
						[
							-76.36158132688887,
							42.54539051641134,
							0
						],
						[
							-76.36149432670804,
							42.54331951603253,
							0
						],
						[
							-76.36144032660764,
							42.54219451582701,
							0
						],
						[
							-76.36137832647914,
							42.54072351555794,
							0
						],
						[
							-76.36133532640156,
							42.53985951540017,
							0
						],
						[
							-76.3613053263753,
							42.53963451535983,
							0
						],
						[
							-76.36105732621243,
							42.53850751516177,
							0
						],
						[
							-76.36026832575288,
							42.53571551467808,
							0
						],
						[
							-76.36002632560896,
							42.5348185145222,
							0
						],
						[
							-76.359927325526,
							42.53412551439823,
							0
						],
						[
							-76.35992432542243,
							42.53273451414148,
							0
						],
						[
							-76.3549493238346,
							42.53288051436918,
							0
						],
						[
							-76.3537353234471,
							42.53291551442462,
							0
						],
						[
							-76.34927332202297,
							42.5330465146288,
							0
						],
						[
							-76.34319232008191,
							42.53322351490673,
							0
						],
						[
							-76.33620331784341,
							42.53332451520719,
							0
						],
						[
							-76.33533531756585,
							42.5333435152457,
							0
						],
						[
							-76.33449131729698,
							42.53337551528563,
							0
						],
						[
							-76.33387431709923,
							42.5333825153118,
							0
						],
						[
							-76.3322143165679,
							42.53341151538407,
							0
						],
						[
							-76.33165831639067,
							42.53343151541018,
							0
						],
						[
							-76.33109331620992,
							42.53344251543498,
							0
						],
						[
							-76.33049231601825,
							42.5334625154629,
							0
						],
						[
							-76.32931031564206,
							42.53351251551979,
							0
						],
						[
							-76.3260323145897,
							42.53352751565465,
							0
						],
						[
							-76.32576631450384,
							42.53352251566444,
							0
						],
						[
							-76.32568031447458,
							42.53350051566385,
							0
						],
						[
							-76.32563331445691,
							42.53346551565927,
							0
						],
						[
							-76.32558631443848,
							42.53342051565286,
							0
						],
						[
							-76.32554131441812,
							42.53334051563991,
							0
						],
						[
							-76.32551731441933,
							42.53346151566323,
							0
						],
						[
							-76.3254873144164,
							42.53355251568124,
							0
						],
						[
							-76.32540831440198,
							42.53370151571195,
							0
						],
						[
							-76.32529831437738,
							42.53384751574335,
							0
						],
						[
							-76.32510331433514,
							42.53412451580236,
							0
						],
						[
							-76.32502031431545,
							42.53421951582325,
							0
						],
						[
							-76.32493331429552,
							42.53432851584689,
							0
						],
						[
							-76.32454231420839,
							42.53485151595924,
							0
						],
						[
							-76.32434931416907,
							42.53515951602391,
							0
						],
						[
							-76.32430831416015,
							42.53521751603627,
							0
						],
						[
							-76.32419531413298,
							42.53534151606372,
							0
						],
						[
							-76.32413431411638,
							42.53538251607377,
							0
						],
						[
							-76.32402431408443,
							42.53542851608668,
							0
						],
						[
							-76.32397331406906,
							42.53544251609132,
							0
						],
						[
							-76.32380831401788,
							42.53546751610259,
							0
						],
						[
							-76.32370431398489,
							42.53547351610789,
							0
						],
						[
							-76.32356231393867,
							42.53546551611213,
							0
						],
						[
							-76.32339531388381,
							42.53544951611591,
							0
						],
						[
							-76.32322031382573,
							42.53542451611835,
							0
						],
						[
							-76.32287731371049,
							42.53535651611961,
							0
						],
						[
							-76.32270931365332,
							42.53531351611844,
							0
						],
						[
							-76.32256631360383,
							42.53526551611535,
							0
						],
						[
							-76.32237331353635,
							42.53519151610944,
							0
						],
						[
							-76.32214531345763,
							42.53511751610496,
							0
						],
						[
							-76.32195431339107,
							42.53504751609973,
							0
						],
						[
							-76.32189231336991,
							42.53503051609909,
							0
						],
						[
							-76.3218253133474,
							42.53501751609939,
							0
						],
						[
							-76.32175031332434,
							42.53503151610499,
							0
						],
						[
							-76.32167731330398,
							42.5350735161157,
							0
						],
						[
							-76.32163731329577,
							42.53513651612894,
							0
						],
						[
							-76.32161931329594,
							42.53521751614463,
							0
						],
						[
							-76.32160431330246,
							42.53537151617368,
							0
						],
						[
							-76.3215893133232,
							42.53571851623837,
							0
						],
						[
							-76.32156331333644,
							42.53601151629353,
							0
						],
						[
							-76.32155031335311,
							42.53629451634631,
							0
						],
						[
							-76.32155431336508,
							42.53643951637294,
							0
						],
						[
							-76.32156531338084,
							42.53660551640315,
							0
						],
						[
							-76.32158831339451,
							42.53669051641792,
							0
						],
						[
							-76.32161931341044,
							42.53677151643164,
							0
						],
						[
							-76.32165131342498,
							42.53682951644105,
							0
						],
						[
							-76.32169831344437,
							42.53688751644987,
							0
						],
						[
							-76.3218623135079,
							42.53703451647042,
							0
						],
						[
							-76.32196531354624,
							42.53710551647937,
							0
						],
						[
							-76.3221143136026,
							42.53722051649462,
							0
						],
						[
							-76.32228731366705,
							42.5373405165098,
							0
						],
						[
							-76.32252331375624,
							42.53752151653371,
							0
						],
						[
							-76.32268631382013,
							42.53767751655595,
							0
						],
						[
							-76.32274631384537,
							42.5377585165685,
							0
						],
						[
							-76.32280431387056,
							42.53784751658261,
							0
						],
						[
							-76.32286331390273,
							42.53802651661328,
							0
						],
						[
							-76.32289331392563,
							42.5382065166453,
							0
						],
						[
							-76.32289331393359,
							42.53831451666525,
							0
						],
						[
							-76.32294131400708,
							42.53910251680885,
							0
						],
						[
							-76.32295531407989,
							42.54002951697947,
							0
						],
						[
							-76.32298531413566,
							42.54065551709386,
							0
						],
						[
							-76.32321731466011,
							42.54675851821143,
							0
						],
						[
							-76.3232893148389,
							42.54886951859829,
							0
						],
						[
							-76.32330131485764,
							42.54907151863508,
							0
						],
						[
							-76.32279231469448,
							42.54907751865672,
							0
						],
						[
							-76.32309031534156,
							42.55655252002462,
							0
						],
						[
							-76.32310931547855,
							42.55832652035131,
							0
						],
						[
							-76.32311531549426,
							42.55851352038559,
							0
						],
						[
							-76.32312531551895,
							42.55880452043888,
							0
						],
						[
							-76.32319131566,
							42.56042852073597,
							0
						],
						[
							-76.32325331590712,
							42.56350752130172,
							0
						],
						[
							-76.32326731592461,
							42.56368352133362,
							0
						],
						[
							-76.32882431770186,
							42.56355952108665,
							0
						],
						[
							-76.33169031861843,
							42.56349552095921,
							0
						],
						[
							-76.33434131946667,
							42.56344252084249,
							0
						],
						[
							-76.3366653202107,
							42.56340152074116,
							0
						],
						[
							-76.34247832207257,
							42.56331152048998,
							0
						],
						[
							-76.3425103221556,
							42.56429652067046,
							0
						],
						[
							-76.34254832225328,
							42.56545352088241,
							0
						],
						[
							-76.3426233224107,
							42.56725852121245,
							0
						],
						[
							-76.34267732253814,
							42.56874852148518,
							0
						],
						[
							-76.34270432263592,
							42.56995452170661,
							0
						],
						[
							-76.34519832343246,
							42.56988452159302,
							0
						],
						[
							-76.34592332366452,
							42.56987152156133,
							0
						],
						[
							-76.34660332388385,
							42.56988152153576,
							0
						],
						[
							-76.34687932397404,
							42.56990152152829,
							0
						],
						[
							-76.3471033240485,
							42.56993452152535,
							0
						],
						[
							-76.34732132412206,
							42.56998152152521,
							0
						],
						[
							-76.34753032419432,
							42.5700505215295,
							0
						],
						[
							-76.34773032426483,
							42.57013452153691,
							0
						],
						[
							-76.34788532431983,
							42.57020452154358,
							0
						],
						[
							-76.34903032472845,
							42.57075352159865,
							0
						],
						[
							-76.34908832474937,
							42.57078452160202,
							0
						],
						[
							-76.3495453249118,
							42.57099452162231,
							0
						],
						[
							-76.35050132525163,
							42.57143452166487,
							0
						],
						[
							-76.3515513256215,
							42.57187252170328,
							0
						],
						[
							-76.35261732599315,
							42.57226452173256,
							0
						],
						[
							-76.35325232621709,
							42.57253252175635,
							0
						],
						[
							-76.35509932687805,
							42.57344252184964,
							0
						],
						[
							-76.3554103269897,
							42.5736005218662,
							0
						],
						[
							-76.3562423272894,
							42.57403652191302,
							0
						],
						[
							-76.35631732731608,
							42.57407152191647,
							0
						],
						[
							-76.35660032741784,
							42.57421752193197,
							0
						],
						[
							-76.356870327516,
							42.57437152194948,
							0
						],
						[
							-76.35715032762042,
							42.57456652197413,
							0
						],
						[
							-76.35740632771915,
							42.57478852200474,
							0
						],
						[
							-76.35783632788798,
							42.57520252206375,
							0
						],
						[
							-76.35888232830015,
							42.57622952221092,
							0
						],
						[
							-76.35921032842762,
							42.57652752225263,
							0
						],
						[
							-76.35946032852381,
							42.57674152228201,
							0
						],
						[
							-76.35959532857571,
							42.57685652229777,
							0
						],
						[
							-76.35982332866342,
							42.5770515223245,
							0
						],
						[
							-76.36032332885071,
							42.57741052237054,
							0
						],
						[
							-76.36070932899304,
							42.57765752240051,
							0
						],
						[
							-76.36108032912665,
							42.5778515224213,
							0
						],
						[
							-76.3616883293442,
							42.57815052245188,
							0
						],
						[
							-76.36176332937127,
							42.57819052245623,
							0
						],
						[
							-76.36301932981983,
							42.57879652251724,
							0
						],
						[
							-76.36311332985397,
							42.57884952252322,
							0
						],
						[
							-76.36324032990102,
							42.57893352253358,
							0
						],
						[
							-76.36335532994487,
							42.5790265225461,
							0
						],
						[
							-76.36345532998463,
							42.57912952256107,
							0
						],
						[
							-76.36351033000726,
							42.57919652257117,
							0
						],
						[
							-76.36354033001984,
							42.57923652257735,
							0
						],
						[
							-76.36361033005095,
							42.57935252259591,
							0
						],
						[
							-76.36384633016425,
							42.5798585226797,
							0
						],
						[
							-76.36415333031293,
							42.58053452279196,
							0
						],
						[
							-76.36442933044842,
							42.58116652289736,
							0
						],
						[
							-76.3646823305745,
							42.58177152299871,
							0
						],
						[
							-76.36471633059136,
							42.58185152301211,
							0
						],
						[
							-76.3649523307247,
							42.58262852314585,
							0
						],
						[
							-76.36528533091308,
							42.58372752333506,
							0
						],
						[
							-76.36551633104337,
							42.58448452346529,
							0
						],
						[
							-76.36566133112527,
							42.58496152354743,
							0
						],
						[
							-76.36562833111799,
							42.58500652355705,
							0
						],
						[
							-76.36562133111745,
							42.58502952356157,
							0
						],
						[
							-76.36562133112042,
							42.58506952356895,
							0
						],
						[
							-76.36574033118457,
							42.58541952362868,
							0
						],
						[
							-76.36601533132338,
							42.58610052374314,
							0
						],
						[
							-76.3661543313919,
							42.58642252379689,
							0
						],
						[
							-76.3665763316029,
							42.58744052396756,
							0
						],
						[
							-76.36667333165097,
							42.58766852400567,
							0
						],
						[
							-76.3667133316718,
							42.58777652402396,
							0
						],
						[
							-76.36708933186036,
							42.58869052417729,
							0
						],
						[
							-76.36769333216061,
							42.59012352441709,
							0
						],
						[
							-76.36793733228319,
							42.59071952451709,
							0
						],
						[
							-76.36793733228785,
							42.59078252452871,
							0
						],
						[
							-76.36793833229282,
							42.59084552454029,
							0
						],
						[
							-76.36793333229595,
							42.59090952455229,
							0
						],
						[
							-76.36792033229645,
							42.59097252456444,
							0
						],
						[
							-76.36789833229403,
							42.59103552457695,
							0
						],
						[
							-76.36786633228812,
							42.59109452458911,
							0
						],
						[
							-76.36782733227994,
							42.59115352460157,
							0
						],
						[
							-76.36778033226892,
							42.59120852461361,
							0
						],
						[
							-76.3676623322381,
							42.59130452463607,
							0
						],
						[
							-76.36744633217782,
							42.59142852466767,
							0
						],
						[
							-76.36724833212165,
							42.5915295246943,
							0
						],
						[
							-76.3671513320949,
							42.59158952470928,
							0
						],
						[
							-76.36702133205956,
							42.59167652473059,
							0
						],
						[
							-76.36694733203947,
							42.59172652474279,
							0
						],
						[
							-76.36680733200231,
							42.59183252476799,
							0
						],
						[
							-76.36661133195241,
							42.59200952480854,
							0
						],
						[
							-76.36651733193034,
							42.59211952483262,
							0
						],
						[
							-76.36646233191904,
							42.59220552485069,
							0
						],
						[
							-76.36641933191187,
							42.59229552486903,
							0
						],
						[
							-76.36638933190926,
							42.59239052488776,
							0
						],
						[
							-76.36637333191152,
							42.59249052490684,
							0
						],
						[
							-76.36637133191782,
							42.59258452492426,
							0
						],
						[
							-76.366383331929,
							42.59268352494201,
							0
						],
						[
							-76.36640833194403,
							42.59277752495833,
							0
						],
						[
							-76.3664463319632,
							42.59287152497412,
							0
						],
						[
							-76.36649733198627,
							42.59296152498866,
							0
						],
						[
							-76.36656233201344,
							42.59304652500169,
							0
						],
						[
							-76.36663733204348,
							42.59312652501343,
							0
						],
						[
							-76.36672333207639,
							42.59319752502303,
							0
						],
						[
							-76.36681833211182,
							42.59326352503135,
							0
						],
						[
							-76.36703333219012,
							42.59338752504554,
							0
						],
						[
							-76.36761133240275,
							42.5937495250889,
							0
						],
						[
							-76.36866633279729,
							42.59449752518414,
							0
						],
						[
							-76.36883333286083,
							42.59463052520192,
							0
						],
						[
							-76.3689813329193,
							42.59477752522302,
							0
						],
						[
							-76.36912633297946,
							42.5949605252509,
							0
						],
						[
							-76.36950233313775,
							42.59546552532878,
							0
						],
						[
							-76.36958833317495,
							42.59559452534909,
							0
						],
						[
							-76.36965433320609,
							42.59572852537114,
							0
						],
						[
							-76.36970233323152,
							42.59586352539409,
							0
						],
						[
							-76.3697313332515,
							42.59600752541945,
							0
						],
						[
							-76.36973833326405,
							42.59614652544479,
							0
						],
						[
							-76.36972533327312,
							42.59632552547831,
							0
						],
						[
							-76.36971433328003,
							42.59646652550475,
							0
						],
						[
							-76.369710333284,
							42.59653752551799,
							0
						],
						[
							-76.36967233331927,
							42.5971785256377,
							0
						],
						[
							-76.36967733332497,
							42.59723352564762,
							0
						],
						[
							-76.3697033333562,
							42.59754252570353,
							0
						],
						[
							-76.36972433337097,
							42.59765052572259,
							0
						],
						[
							-76.3697383333808,
							42.5977225257353,
							0
						],
						[
							-76.36976333339618,
							42.59782152575252,
							0
						],
						[
							-76.3698953334668,
							42.59820252581743,
							0
						],
						[
							-76.37033833368487,
							42.59922352598772,
							0
						],
						[
							-76.37055533379784,
							42.5998065260864,
							0
						],
						[
							-76.37057933381185,
							42.5998915261011,
							0
						],
						[
							-76.37065033385298,
							42.60013852614375,
							0
						],
						[
							-76.3709283340088,
							42.60103552629784,
							0
						],
						[
							-76.37098133403882,
							42.60121052632796,
							0
						],
						[
							-76.37119733414042,
							42.60164452639921,
							0
						],
						[
							-76.37146033425417,
							42.6020385264612,
							0
						],
						[
							-76.3717983343919,
							42.60243052651977,
							0
						],
						[
							-76.37249733466433,
							42.60307452661019,
							0
						],
						[
							-76.37268233473775,
							42.60326252663735,
							0
						],
						[
							-76.37333733499709,
							42.60392052673214,
							0
						],
						[
							-76.37342433503187,
							42.60401252674556,
							0
						],
						[
							-76.37468633553738,
							42.60535852694259,
							0
						],
						[
							-76.37554133588422,
							42.60632952708696,
							0
						],
						[
							-76.37573133596287,
							42.60656652712294,
							0
						],
						[
							-76.37582833600267,
							42.60668252714038,
							0
						],
						[
							-76.3771243365453,
							42.60838152740104,
							0
						],
						[
							-76.37884933726228,
							42.61057152773478,
							0
						],
						[
							-76.37889133728017,
							42.61063052774397,
							0
						],
						[
							-76.38108133817992,
							42.61326852814138,
							0
						],
						[
							-76.38150433835865,
							42.61384452823041,
							0
						],
						[
							-76.38177533847997,
							42.61430552830437,
							0
						],
						[
							-76.38322133913734,
							42.61689952872373,
							0
						],
						[
							-76.38334433919024,
							42.61707952875191,
							0
						],
						[
							-76.3835223392669,
							42.61734152879297,
							0
						],
						[
							-76.38392133942925,
							42.61780052886138,
							0
						],
						[
							-76.38404733947941,
							42.61793052888024,
							0
						],
						[
							-76.38408933949604,
							42.61797252888626,
							0
						],
						[
							-76.38413333951358,
							42.61801852889297,
							0
						],
						[
							-76.3865353404692,
							42.62048852925072,
							0
						],
						[
							-76.38657234048405,
							42.62052852925659,
							0
						],
						[
							-76.38658134048697,
							42.62052852925622,
							0
						],
						[
							-76.38704034063363,
							42.62051652923544,
							0
						],
						[
							-76.40023234484443,
							42.62010452862533,
							0
						],
						[
							-76.40026634485534,
							42.62010452862396,
							0
						],
						[
							-76.40042134490481,
							42.62009952861677,
							0
						],
						[
							-76.40145434523477,
							42.62007052856957,
							0
						],
						[
							-76.40229534550492,
							42.62006752853496,
							0
						],
						[
							-76.40223234548303,
							42.62004552853345,
							0
						],
						[
							-76.40218234546398,
							42.62000552852812,
							0
						],
						[
							-76.40214934545011,
							42.61996152852133,
							0
						],
						[
							-76.40213834544323,
							42.6199165285135,
							0
						],
						[
							-76.4020953453403,
							42.61871652829423,
							0
						],
						[
							-76.40205434524373,
							42.61759352808902,
							0
						],
						[
							-76.40188634491375,
							42.61387652741113,
							0
						],
						[
							-76.40154734419245,
							42.60562652590489,
							0
						],
						[
							-76.40153634416926,
							42.60536152585651,
							0
						],
						[
							-76.40144934398369,
							42.60323752546863,
							0
						],
						[
							-76.40134934378969,
							42.60105552507061,
							0
						],
						[
							-76.40119534350883,
							42.59793652450204,
							0
						],
						[
							-76.40104934322594,
							42.59475452392149,
							0
						],
						[
							-76.4010523432229,
							42.59470052391141,
							0
						],
						[
							-76.40093634294671,
							42.59147852332222,
							0
						],
						[
							-76.40090334288406,
							42.59077652319416,
							0
						],
						[
							-76.40038234188852,
							42.57960252115517,
							0
						],
						[
							-76.40019234158343,
							42.57630852055545,
							0
						],
						[
							-76.40016334148478,
							42.57510252033422,
							0
						],
						[
							-76.40004834120353,
							42.57180351973048,
							0
						],
						[
							-76.40002734117344,
							42.57148851967322,
							0
						],
						[
							-76.39997034113448,
							42.57120951962407,
							0
						],
						[
							-76.3998733410827,
							42.57093151957673,
							0
						],
						[
							-76.39973834101977,
							42.57066751953349,
							0
						],
						[
							-76.39961434096607,
							42.57048051950402,
							0
						],
						[
							-76.39906534073569,
							42.56975151939178,
							0
						],
						[
							-76.3988223406339,
							42.56943151934259,
							0
						],
						[
							-76.39844734047009,
							42.56884651924985,
							0
						],
						[
							-76.39787634020945,
							42.56780451908075,
							0
						],
						[
							-76.39730633994077,
							42.56664951889076,
							0
						],
						[
							-76.39718133987573,
							42.56631351883383,
							0
						],
						[
							-76.39711033982769,
							42.56597251877381,
							0
						],
						[
							-76.39709733981084,
							42.56580151874279,
							0
						],
						[
							-76.39709733979352,
							42.56556751869965,
							0
						],
						[
							-76.39711533978827,
							42.56541851867141,
							0
						],
						[
							-76.39719233977854,
							42.56495251858234,
							0
						],
						[
							-76.3973793397552,
							42.56382551836688,
							0
						],
						[
							-76.39738233973952,
							42.56360051832527,
							0
						],
						[
							-76.39732533960229,
							42.5619935180311,
							0
						],
						[
							-76.39685933945299,
							42.56199951805105,
							0
						],
						[
							-76.39425833862286,
							42.56207651817043,
							0
						],
						[
							-76.39402133854723,
							42.56208351818131,
							0
						],
						[
							-76.39184933785333,
							42.56213851827926,
							0
						],
						[
							-76.3810983344189,
							42.56241551876496,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090022003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>30032224</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>44086</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5695590</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3736224</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090022003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090022003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1687</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>720</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>7421.85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>10.63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.03</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.87</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>25913</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>25574</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>26886</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14186</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13842</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14729</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8310</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8043</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8632</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5876</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5799</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6097</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.66</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2582</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3025</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>120</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2456</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>978</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1160</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>494</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00018"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.39184933785333,
							42.56213851827926,
							0
						],
						[
							-76.39402133854723,
							42.56208351818131,
							0
						],
						[
							-76.39425833862286,
							42.56207651817043,
							0
						],
						[
							-76.39685933945299,
							42.56199951805105,
							0
						],
						[
							-76.39732533960229,
							42.5619935180311,
							0
						],
						[
							-76.39738233973952,
							42.56360051832527,
							0
						],
						[
							-76.3973793397552,
							42.56382551836688,
							0
						],
						[
							-76.39719233977854,
							42.56495251858234,
							0
						],
						[
							-76.39711533978827,
							42.56541851867141,
							0
						],
						[
							-76.39709733979352,
							42.56556751869965,
							0
						],
						[
							-76.39709733981084,
							42.56580151874279,
							0
						],
						[
							-76.39711033982769,
							42.56597251877381,
							0
						],
						[
							-76.39718133987573,
							42.56631351883383,
							0
						],
						[
							-76.39730633994077,
							42.56664951889076,
							0
						],
						[
							-76.39787634020945,
							42.56780451908075,
							0
						],
						[
							-76.39844734047009,
							42.56884651924985,
							0
						],
						[
							-76.3988223406339,
							42.56943151934259,
							0
						],
						[
							-76.39906534073569,
							42.56975151939178,
							0
						],
						[
							-76.39961434096607,
							42.57048051950402,
							0
						],
						[
							-76.39973834101977,
							42.57066751953349,
							0
						],
						[
							-76.3998733410827,
							42.57093151957673,
							0
						],
						[
							-76.39997034113448,
							42.57120951962407,
							0
						],
						[
							-76.40002734117344,
							42.57148851967322,
							0
						],
						[
							-76.40004834120353,
							42.57180351973048,
							0
						],
						[
							-76.40016334148478,
							42.57510252033422,
							0
						],
						[
							-76.40019234158343,
							42.57630852055545,
							0
						],
						[
							-76.40038234188852,
							42.57960252115517,
							0
						],
						[
							-76.40090334288406,
							42.59077652319416,
							0
						],
						[
							-76.40093634294671,
							42.59147852332222,
							0
						],
						[
							-76.4010523432229,
							42.59470052391141,
							0
						],
						[
							-76.40104934322594,
							42.59475452392149,
							0
						],
						[
							-76.40119534350883,
							42.59793652450204,
							0
						],
						[
							-76.40134934378969,
							42.60105552507061,
							0
						],
						[
							-76.40144934398369,
							42.60323752546863,
							0
						],
						[
							-76.40153634416926,
							42.60536152585651,
							0
						],
						[
							-76.40154734419245,
							42.60562652590489,
							0
						],
						[
							-76.40188634491375,
							42.61387652741113,
							0
						],
						[
							-76.40205434524373,
							42.61759352808902,
							0
						],
						[
							-76.4020953453403,
							42.61871652829423,
							0
						],
						[
							-76.40213834544323,
							42.6199165285135,
							0
						],
						[
							-76.40214934545011,
							42.61996152852133,
							0
						],
						[
							-76.40218234546398,
							42.62000552852812,
							0
						],
						[
							-76.40223234548303,
							42.62004552853345,
							0
						],
						[
							-76.40229534550492,
							42.62006752853496,
							0
						],
						[
							-76.40231034550987,
							42.62006952853472,
							0
						],
						[
							-76.40233034551648,
							42.62007152853426,
							0
						],
						[
							-76.40236534552803,
							42.6200755285336,
							0
						],
						[
							-76.40244934555488,
							42.62007352852982,
							0
						],
						[
							-76.40256634559235,
							42.6200715285247,
							0
						],
						[
							-76.40257434559484,
							42.6200705285242,
							0
						],
						[
							-76.4025813455971,
							42.62007052852392,
							0
						],
						[
							-76.40259434560127,
							42.62007052852339,
							0
						],
						[
							-76.4027953456656,
							42.62006652851453,
							0
						],
						[
							-76.40280734566946,
							42.62006652851403,
							0
						],
						[
							-76.40281934567331,
							42.62006652851355,
							0
						],
						[
							-76.40284634568192,
							42.62006552851226,
							0
						],
						[
							-76.4034183458649,
							42.62005352848689,
							0
						],
						[
							-76.40348534588638,
							42.62005252848398,
							0
						],
						[
							-76.40349334588889,
							42.62005152848347,
							0
						],
						[
							-76.40350534589275,
							42.62005152848299,
							0
						],
						[
							-76.40358834591926,
							42.62004952847926,
							0
						],
						[
							-76.40360034592314,
							42.62004952847877,
							0
						],
						[
							-76.40361834592892,
							42.62004952847805,
							0
						],
						[
							-76.40365034593913,
							42.62004852847656,
							0
						],
						[
							-76.40491234634285,
							42.62002152842048,
							0
						],
						[
							-76.40595534667578,
							42.61998952837233,
							0
						],
						[
							-76.40655534686735,
							42.61997152834471,
							0
						],
						[
							-76.40656234686959,
							42.61997152834442,
							0
						],
						[
							-76.40657334687305,
							42.61997052834379,
							0
						],
						[
							-76.40700534701098,
							42.61995752832389,
							0
						],
						[
							-76.40755134718526,
							42.61994052829862,
							0
						],
						[
							-76.40756134718845,
							42.61994052829822,
							0
						],
						[
							-76.4083133474285,
							42.61991752826353,
							0
						],
						[
							-76.40994634794977,
							42.61986752818815,
							0
						],
						[
							-76.40996434795548,
							42.61986652818724,
							0
						],
						[
							-76.41322934899767,
							42.61976652803651,
							0
						],
						[
							-76.41424234932117,
							42.61973752799013,
							0
						],
						[
							-76.41492134953806,
							42.61971852795911,
							0
						],
						[
							-76.4155763497472,
							42.61969952792905,
							0
						],
						[
							-76.4156123497587,
							42.61969852792741,
							0
						],
						[
							-76.41562534976288,
							42.61969852792689,
							0
						],
						[
							-76.41563234976505,
							42.61969752792641,
							0
						],
						[
							-76.41723135027573,
							42.61965252785333,
							0
						],
						[
							-76.41860535071453,
							42.61961352779045,
							0
						],
						[
							-76.41874835076021,
							42.61960952778392,
							0
						],
						[
							-76.41878235077107,
							42.61960852778236,
							0
						],
						[
							-76.41879835077621,
							42.61960852778172,
							0
						],
						[
							-76.41886835079858,
							42.61960652777849,
							0
						],
						[
							-76.42027435124757,
							42.61956652771413,
							0
						],
						[
							-76.42032635126422,
							42.61956552771186,
							0
						],
						[
							-76.4204393513003,
							42.61956252770672,
							0
						],
						[
							-76.42044635130257,
							42.61956252770644,
							0
						],
						[
							-76.42051735132516,
							42.61955952770302,
							0
						],
						[
							-76.4205283513287,
							42.61955952770256,
							0
						],
						[
							-76.42060935135459,
							42.61955752769891,
							0
						],
						[
							-76.42068335137839,
							42.61955752769592,
							0
						],
						[
							-76.42076635140565,
							42.61956552769402,
							0
						],
						[
							-76.42079135141421,
							42.61957252769429,
							0
						],
						[
							-76.42090735145194,
							42.61957852769071,
							0
						],
						[
							-76.42091635145484,
							42.61957852769033,
							0
						],
						[
							-76.42100535148428,
							42.61958952768876,
							0
						],
						[
							-76.42101535148755,
							42.61959052768852,
							0
						],
						[
							-76.43126135476317,
							42.61934852722857,
							0
						],
						[
							-76.43135435479283,
							42.61934552722423,
							0
						],
						[
							-76.43331735541946,
							42.61928652713376,
							0
						],
						[
							-76.4333373554258,
							42.61928552713277,
							0
						],
						[
							-76.4402773576408,
							42.61907352681223,
							0
						],
						[
							-76.44567035936218,
							42.61891152656359,
							0
						],
						[
							-76.44895736041325,
							42.61883852641677,
							0
						],
						[
							-76.45520836241236,
							42.61870452613844,
							0
						],
						[
							-76.45834436341464,
							42.61862852599714,
							0
						],
						[
							-76.45840236343291,
							42.61862352599386,
							0
						],
						[
							-76.45847636345616,
							42.61861652598956,
							0
						],
						[
							-76.45856836367194,
							42.62111852644653,
							0
						],
						[
							-76.45859036372345,
							42.62171552655556,
							0
						],
						[
							-76.45859836374224,
							42.62193352659536,
							0
						],
						[
							-76.45867236398189,
							42.6248335271263,
							0
						],
						[
							-76.45871436401372,
							42.62507952716989,
							0
						],
						[
							-76.45861436400621,
							42.62541052723488,
							0
						],
						[
							-76.45865736403238,
							42.62557652726368,
							0
						],
						[
							-76.45866336404778,
							42.62575752729676,
							0
						],
						[
							-76.45872536417046,
							42.62713752754829,
							0
						],
						[
							-76.45873536419252,
							42.62739052759447,
							0
						],
						[
							-76.45873636419404,
							42.62740652759737,
							0
						],
						[
							-76.45873636419478,
							42.62741652759921,
							0
						],
						[
							-76.45873736419591,
							42.6274275276012,
							0
						],
						[
							-76.45881936422212,
							42.6274255275975,
							0
						],
						[
							-76.45886036423522,
							42.62742452759564,
							0
						],
						[
							-76.45893136425784,
							42.62742152759221,
							0
						],
						[
							-76.45902236428685,
							42.62741852758796,
							0
						],
						[
							-76.45917936433702,
							42.62741452758085,
							0
						],
						[
							-76.46064936480644,
							42.62737352751362,
							0
						],
						[
							-76.46066036480998,
							42.62737352751317,
							0
						],
						[
							-76.46067736481545,
							42.62737352751249,
							0
						],
						[
							-76.46070536482436,
							42.62737252751116,
							0
						],
						[
							-76.46077636484704,
							42.62737052750791,
							0
						],
						[
							-76.46235536535129,
							42.62732652743569,
							0
						],
						[
							-76.46256036541673,
							42.62732052742626,
							0
						],
						[
							-76.46256936541955,
							42.62731952742571,
							0
						],
						[
							-76.4625763654218,
							42.62731952742542,
							0
						],
						[
							-76.46258636542501,
							42.62731952742502,
							0
						],
						[
							-76.46308036558267,
							42.6273045274022,
							0
						],
						[
							-76.46397736586897,
							42.6272775273608,
							0
						],
						[
							-76.46431836597783,
							42.62726752734511,
							0
						],
						[
							-76.46433036598161,
							42.62726652734445,
							0
						],
						[
							-76.46433836598419,
							42.62726652734411,
							0
						],
						[
							-76.46498936619192,
							42.627246527314,
							0
						],
						[
							-76.46502236620245,
							42.62724552731248,
							0
						],
						[
							-76.46503236620568,
							42.62724552731207,
							0
						],
						[
							-76.4652003662593,
							42.62724052730432,
							0
						],
						[
							-76.46523036626887,
							42.62723952730291,
							0
						],
						[
							-76.46523836627135,
							42.6272385273024,
							0
						],
						[
							-76.46524536627362,
							42.6272385273021,
							0
						],
						[
							-76.46527836628414,
							42.62723752730059,
							0
						],
						[
							-76.46608836654246,
							42.62721052726275,
							0
						],
						[
							-76.46610236654698,
							42.62721052726217,
							0
						],
						[
							-76.46844736729477,
							42.62713152715239,
							0
						],
						[
							-76.4686853673709,
							42.62712652714178,
							0
						],
						[
							-76.46873236738594,
							42.6271255271397,
							0
						],
						[
							-76.46875336739262,
							42.62712452713867,
							0
						],
						[
							-76.4688433674214,
							42.62712252713464,
							0
						],
						[
							-76.46889736743876,
							42.62712252713244,
							0
						],
						[
							-76.47065236799973,
							42.62708152705361,
							0
						],
						[
							-76.47302436875734,
							42.62701752694547,
							0
						],
						[
							-76.47651536987239,
							42.62692452678652,
							0
						],
						[
							-76.47703737003845,
							42.62690152676109,
							0
						],
						[
							-76.4785743705275,
							42.62683552668648,
							0
						],
						[
							-76.47867337055817,
							42.6268205266797,
							0
						],
						[
							-76.4787313705754,
							42.62680152667385,
							0
						],
						[
							-76.47885137061367,
							42.62679752666821,
							0
						],
						[
							-76.47886737061874,
							42.6267965266674,
							0
						],
						[
							-76.4906183743675,
							42.62642452612133,
							0
						],
						[
							-76.49115937454008,
							42.62640752609622,
							0
						],
						[
							-76.49116637454232,
							42.62640752609594,
							0
						],
						[
							-76.49117637454553,
							42.62640752609553,
							0
						],
						[
							-76.49118337454772,
							42.62640652609505,
							0
						],
						[
							-76.49216237486,
							42.62637552604953,
							0
						],
						[
							-76.49217537486417,
							42.626375526049,
							0
						],
						[
							-76.49176437454382,
							42.62384952560079,
							0
						],
						[
							-76.49168037447262,
							42.62325652549504,
							0
						],
						[
							-76.49165137443916,
							42.62293252543656,
							0
						],
						[
							-76.49166737442245,
							42.62263952538199,
							0
						],
						[
							-76.49172437441894,
							42.62234652532573,
							0
						],
						[
							-76.49182337442952,
							42.62206152526925,
							0
						],
						[
							-76.49191337444428,
							42.62187152523061,
							0
						],
						[
							-76.49240337453243,
							42.62094152503949,
							0
						],
						[
							-76.49281037461552,
							42.62030152490512,
							0
						],
						[
							-76.49549737523176,
							42.61698452418526,
							0
						],
						[
							-76.49588437531544,
							42.61643852406902,
							0
						],
						[
							-76.49664337546602,
							42.61518652380765,
							0
						],
						[
							-76.49681037549465,
							42.61485052373899,
							0
						],
						[
							-76.49718837553998,
							42.61382852353547,
							0
						],
						[
							-76.4972473755548,
							42.61377352352296,
							0
						],
						[
							-76.49727937554648,
							42.61352352347562,
							0
						],
						[
							-76.49729637554167,
							42.61338552344952,
							0
						],
						[
							-76.49732237552581,
							42.61306052338861,
							0
						],
						[
							-76.49729237543637,
							42.61198952319263,
							0
						],
						[
							-76.49727337538467,
							42.61137752308072,
							0
						],
						[
							-76.49721737525903,
							42.60993252281693,
							0
						],
						[
							-76.49697737485525,
							42.605546522019,
							0
						],
						[
							-76.49679237459179,
							42.6028065215219,
							0
						],
						[
							-76.49678137457649,
							42.60264852149325,
							0
						],
						[
							-76.49669737444698,
							42.60127152124304,
							0
						],
						[
							-76.49662637433593,
							42.60008652102768,
							0
						],
						[
							-76.49657937426397,
							42.59932252088888,
							0
						],
						[
							-76.49647937410805,
							42.59765952058663,
							0
						],
						[
							-76.4964443740392,
							42.59688552044546,
							0
						],
						[
							-76.49629737375083,
							42.59364551985458,
							0
						],
						[
							-76.4959793732794,
							42.58868251895316,
							0
						],
						[
							-76.49597437327377,
							42.58862851894342,
							0
						],
						[
							-76.49596637326675,
							42.58856851893268,
							0
						],
						[
							-76.49595537325635,
							42.58847651891618,
							0
						],
						[
							-76.49590137322362,
							42.58826951888024,
							0
						],
						[
							-76.49581837318199,
							42.58806851884657,
							0
						],
						[
							-76.49574137314693,
							42.5879295188241,
							0
						],
						[
							-76.49561137309125,
							42.58774251879493,
							0
						],
						[
							-76.49557837307798,
							42.58770651878962,
							0
						],
						[
							-76.49542937301753,
							42.58753751876455,
							0
						],
						[
							-76.49458037267895,
							42.58665251863597,
							0
						],
						[
							-76.49432537257346,
							42.58633551858792,
							0
						],
						[
							-76.49410237247567,
							42.5859835185321,
							0
						],
						[
							-76.49365437225981,
							42.58501651837212,
							0
						],
						[
							-76.49353537220092,
							42.58473851832573,
							0
						],
						[
							-76.49339037212034,
							42.5842815182474,
							0
						],
						[
							-76.4930183718649,
							42.58245351792566,
							0
						],
						[
							-76.49294237181246,
							42.58207651785927,
							0
						],
						[
							-76.49283137171562,
							42.58125351771211,
							0
						],
						[
							-76.49270837149447,
							42.57881051726688,
							0
						],
						[
							-76.49257737129584,
							42.57670451688404,
							0
						],
						[
							-76.4921833707571,
							42.57115851587781,
							0
						],
						[
							-76.49216937073803,
							42.57096251584225,
							0
						],
						[
							-76.4921463707067,
							42.57064051578381,
							0
						],
						[
							-76.49214737069619,
							42.57049451575687,
							0
						],
						[
							-76.49215037067361,
							42.57017751569831,
							0
						],
						[
							-76.49221237065294,
							42.56963151559515,
							0
						],
						[
							-76.4922693706344,
							42.56913551550137,
							0
						],
						[
							-76.49229937063393,
							42.5689995154751,
							0
						],
						[
							-76.49241137064338,
							42.56864251540473,
							0
						],
						[
							-76.4924293706464,
							42.56860551539717,
							0
						],
						[
							-76.49257637067043,
							42.56829351533369,
							0
						],
						[
							-76.49297037074581,
							42.56760451519069,
							0
						],
						[
							-76.49183137038204,
							42.56763251524208,
							0
						],
						[
							-76.48861336935659,
							42.56774251539299,
							0
						],
						[
							-76.48777836909056,
							42.56777151543221,
							0
						],
						[
							-76.48695836882926,
							42.56779951547065,
							0
						],
						[
							-76.48625736860514,
							42.5678135155017,
							0
						],
						[
							-76.48517736825593,
							42.5677825155398,
							0
						],
						[
							-76.48484936814982,
							42.56777251555127,
							0
						],
						[
							-76.48400336787927,
							42.56778851558855,
							0
						],
						[
							-76.48309436759317,
							42.56786751564,
							0
						],
						[
							-76.48285936751991,
							42.56789751565508,
							0
						],
						[
							-76.48164836713879,
							42.56800351572374,
							0
						],
						[
							-76.48039236673958,
							42.56806051578523,
							0
						],
						[
							-76.47975736653702,
							42.56807951581449,
							0
						],
						[
							-76.47801736598197,
							42.56813151589467,
							0
						],
						[
							-76.47574936525893,
							42.56820551600033,
							0
						],
						[
							-76.47568236523784,
							42.56821151600415,
							0
						],
						[
							-76.47167936396178,
							42.56834351619087,
							0
						],
						[
							-76.46921136317468,
							42.56842051630516,
							0
						],
						[
							-76.4691523630784,
							42.56737851611543,
							0
						],
						[
							-76.46888036263655,
							42.5626025152458,
							0
						],
						[
							-76.46882736256076,
							42.5618105151019,
							0
						],
						[
							-76.46877536247297,
							42.56085251492735,
							0
						],
						[
							-76.46862836225387,
							42.55853551450602,
							0
						],
						[
							-76.46860336221607,
							42.55813451443307,
							0
						],
						[
							-76.46837436187556,
							42.55453551377856,
							0
						],
						[
							-76.46839336180417,
							42.55349051358506,
							0
						],
						[
							-76.46854936166176,
							42.55089451309988,
							0
						],
						[
							-76.46857436163944,
							42.55048551302344,
							0
						],
						[
							-76.46863536160723,
							42.54978651289202,
							0
						],
						[
							-76.46863436156693,
							42.54924751279263,
							0
						],
						[
							-76.46863436155714,
							42.5491155127683,
							0
						],
						[
							-76.46851736135511,
							42.54689751236387,
							0
						],
						[
							-76.46849236133508,
							42.54673551233496,
							0
						],
						[
							-76.46840936128514,
							42.54642151228042,
							0
						],
						[
							-76.46829536122793,
							42.54614351223377,
							0
						],
						[
							-76.46792036104307,
							42.54527451208862,
							0
						],
						[
							-76.46785436100458,
							42.54504151204831,
							0
						],
						[
							-76.46780336096494,
							42.54472751199246,
							0
						],
						[
							-76.46765836071164,
							42.54193851148376,
							0
						],
						[
							-76.46763536067216,
							42.54150551140481,
							0
						],
						[
							-76.46756836056927,
							42.54040751120493,
							0
						],
						[
							-76.46751636047254,
							42.53932751100775,
							0
						],
						[
							-76.467477360458,
							42.53930051100434,
							0
						],
						[
							-76.46540735979721,
							42.5393545110982,
							0
						],
						[
							-76.46533335977382,
							42.53935951110212,
							0
						],
						[
							-76.46489235963294,
							42.53936951112183,
							0
						],
						[
							-76.46474335958524,
							42.53937151112825,
							0
						],
						[
							-76.46354735920394,
							42.53940951118371,
							0
						],
						[
							-76.4634553591747,
							42.53941351118817,
							0
						],
						[
							-76.46332935913452,
							42.53941751119401,
							0
						],
						[
							-76.46063635827726,
							42.53952051132212,
							0
						],
						[
							-76.45861135763265,
							42.53959851141856,
							0
						],
						[
							-76.45519235654479,
							42.53973651158253,
							0
						],
						[
							-76.45376635609381,
							42.53983151165781,
							0
						],
						[
							-76.45367035596269,
							42.53847751141184,
							0
						],
						[
							-76.45360335584868,
							42.53722851118405,
							0
						],
						[
							-76.45354935575457,
							42.53619151099488,
							0
						],
						[
							-76.45347435563916,
							42.53495851077034,
							0
						],
						[
							-76.45347435563517,
							42.53490451076038,
							0
						],
						[
							-76.45335535545746,
							42.53302051041749,
							0
						],
						[
							-76.45319335521539,
							42.53045350995024,
							0
						],
						[
							-76.45314635514517,
							42.52970850981465,
							0
						],
						[
							-76.45304635497516,
							42.52784550947479,
							0
						],
						[
							-76.45290235474377,
							42.52534350901875,
							0
						],
						[
							-76.45278135470002,
							42.52527750901148,
							0
						],
						[
							-76.45266635465954,
							42.52522950900728,
							0
						],
						[
							-76.45256035462158,
							42.52517650900178,
							0
						],
						[
							-76.44993235366218,
							42.52361650882018,
							0
						],
						[
							-76.44787335290626,
							42.5223365086672,
							0
						],
						[
							-76.44439235162771,
							42.52016450840707,
							0
						],
						[
							-76.4421593508022,
							42.51869850822673,
							0
						],
						[
							-76.44193335071645,
							42.51852050820302,
							0
						],
						[
							-76.4417333506381,
							42.51832950817584,
							0
						],
						[
							-76.4415843505774,
							42.51815550814973,
							0
						],
						[
							-76.44089835028686,
							42.51720550800206,
							0
						],
						[
							-76.44087935027875,
							42.51717850799785,
							0
						],
						[
							-76.44083035025541,
							42.5170755079808,
							0
						],
						[
							-76.44080335024016,
							42.51698650796546,
							0
						],
						[
							-76.44079135022994,
							42.51690050795008,
							0
						],
						[
							-76.44079035022298,
							42.51681050793349,
							0
						],
						[
							-76.44084035020805,
							42.5163915078541,
							0
						],
						[
							-76.44082735019057,
							42.5162115078214,
							0
						],
						[
							-76.43310134772591,
							42.51643450817511,
							0
						],
						[
							-76.43043034687386,
							42.51651250829754,
							0
						],
						[
							-76.42872834633155,
							42.51657050837708,
							0
						],
						[
							-76.42334234461535,
							42.51675450862885,
							0
						],
						[
							-76.42144534401082,
							42.51681850871736,
							0
						],
						[
							-76.42137134398743,
							42.51682350872128,
							0
						],
						[
							-76.41871734314138,
							42.51690950884446,
							0
						],
						[
							-76.41533534206431,
							42.51703350900407,
							0
						],
						[
							-76.41444534178127,
							42.51707150904708,
							0
						],
						[
							-76.41465434203711,
							42.51962650951047,
							0
						],
						[
							-76.41477234221159,
							42.52147550984716,
							0
						],
						[
							-76.41486134235389,
							42.52301451012776,
							0
						],
						[
							-76.41487034236174,
							42.52308151013975,
							0
						],
						[
							-76.41491334244338,
							42.52399951030753,
							0
						],
						[
							-76.41501034259231,
							42.52559351059793,
							0
						],
						[
							-76.41526434298304,
							42.52977651135999,
							0
						],
						[
							-76.41526734298702,
							42.52981751136745,
							0
						],
						[
							-76.41531634305798,
							42.53056451150338,
							0
						],
						[
							-76.41532334307819,
							42.53080751154794,
							0
						],
						[
							-76.4153403430943,
							42.53095151157385,
							0
						],
						[
							-76.4153573431104,
							42.53109551159976,
							0
						],
						[
							-76.41550434332957,
							42.53342151202322,
							0
						],
						[
							-76.4157273436347,
							42.53657951259714,
							0
						],
						[
							-76.41585734384712,
							42.53888751301791,
							0
						],
						[
							-76.41589834390906,
							42.53954651313787,
							0
						],
						[
							-76.41602634410377,
							42.54162351351605,
							0
						],
						[
							-76.41610934421075,
							42.54270951371314,
							0
						],
						[
							-76.41618634430992,
							42.54371551389568,
							0
						],
						[
							-76.4163793446006,
							42.54680651445829,
							0
						],
						[
							-76.41531934426236,
							42.5468375145069,
							0
						],
						[
							-76.41204634321713,
							42.54692251465498,
							0
						],
						[
							-76.409511342407,
							42.54698051476821,
							0
						],
						[
							-76.40943734238367,
							42.54698651477231,
							0
						],
						[
							-76.4067373415213,
							42.54705551489423,
							0
						],
						[
							-76.40357434051263,
							42.54715751504094,
							0
						],
						[
							-76.40097933968458,
							42.54723451516009,
							0
						],
						[
							-76.39896333904065,
							42.547285515251,
							0
						],
						[
							-76.39574433801229,
							42.54736551539588,
							0
						],
						[
							-76.3942903375474,
							42.54739651546038,
							0
						],
						[
							-76.39037133629574,
							42.54749851563759,
							0
						],
						[
							-76.3901023362102,
							42.54751051565069,
							0
						],
						[
							-76.38747233537083,
							42.54758751577117,
							0
						],
						[
							-76.38488933454781,
							42.54768151589289,
							0
						],
						[
							-76.38174433354236,
							42.54775051603269,
							0
						],
						[
							-76.37957133284812,
							42.54780451613046,
							0
						],
						[
							-76.37690433199481,
							42.54785451624741,
							0
						],
						[
							-76.37628433179611,
							42.54786151627375,
							0
						],
						[
							-76.37607533172952,
							42.54786951628367,
							0
						],
						[
							-76.37124733018335,
							42.54794051649176,
							0
						],
						[
							-76.36946332961229,
							42.54797051656935,
							0
						],
						[
							-76.36749232898298,
							42.5480255166591,
							0
						],
						[
							-76.3616683271255,
							42.54821651692949,
							0
						],
						[
							-76.36170032720423,
							42.54914351709931,
							0
						],
						[
							-76.36170732721416,
							42.54924751711823,
							0
						],
						[
							-76.36375432788986,
							42.54948951708025,
							0
						],
						[
							-76.36381932791127,
							42.54949651707891,
							0
						],
						[
							-76.36450032813588,
							42.54957451706581,
							0
						],
						[
							-76.36468832819841,
							42.54960351706357,
							0
						],
						[
							-76.3649383282832,
							42.54966351706456,
							0
						],
						[
							-76.36658932885054,
							42.55016151708981,
							0
						],
						[
							-76.36689332895334,
							42.55023051709026,
							0
						],
						[
							-76.36720632905732,
							42.55027651708612,
							0
						],
						[
							-76.36796932930746,
							42.55034351706768,
							0
						],
						[
							-76.36828132940846,
							42.55035351705692,
							0
						],
						[
							-76.36879732957449,
							42.55035651703665,
							0
						],
						[
							-76.36897632963351,
							42.5503765170331,
							0
						],
						[
							-76.36914932969161,
							42.5504105170324,
							0
						],
						[
							-76.36926532973148,
							42.55044551703417,
							0
						],
						[
							-76.36931832974948,
							42.55045851703444,
							0
						],
						[
							-76.36948232980669,
							42.55051951703906,
							0
						],
						[
							-76.37105333035997,
							42.55117551709668,
							0
						],
						[
							-76.3713553304631,
							42.55125751709963,
							0
						],
						[
							-76.37136333049824,
							42.55169851718071,
							0
						],
						[
							-76.37148333066744,
							42.55346651750214,
							0
						],
						[
							-76.37149633067997,
							42.55357951752248,
							0
						],
						[
							-76.3715323307018,
							42.55371851754667,
							0
						],
						[
							-76.37158733072975,
							42.55385751757012,
							0
						],
						[
							-76.37166233076347,
							42.55398751759106,
							0
						],
						[
							-76.3717553308026,
							42.55411251761036,
							0
						],
						[
							-76.37279533121706,
							42.55519851776877,
							0
						],
						[
							-76.37349633149562,
							42.55591951787351,
							0
						],
						[
							-76.37462033194434,
							42.5571035180466,
							0
						],
						[
							-76.37497633208439,
							42.55745051809623,
							0
						],
						[
							-76.37708033292216,
							42.5596365184146,
							0
						],
						[
							-76.3781943333637,
							42.56076651857809,
							0
						],
						[
							-76.37945033385276,
							42.56192151874043,
							0
						],
						[
							-76.37985233400693,
							42.56225951878654,
							0
						],
						[
							-76.37991933403143,
							42.56229951879121,
							0
						],
						[
							-76.38000733406459,
							42.56236551879983,
							0
						],
						[
							-76.38032433417052,
							42.56242051879717,
							0
						],
						[
							-76.38041233419939,
							42.56242851879509,
							0
						],
						[
							-76.3804993342269,
							42.56242251879046,
							0
						],
						[
							-76.3810983344189,
							42.56241551876496,
							0
						],
						[
							-76.39184933785333,
							42.56213851827926,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090023001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>74164493</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>99200</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5772214</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4367264</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090023001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090023001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>2179</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>934</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>18324.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>70</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.05</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.95</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27566</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27228</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28540</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14943</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14599</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15486</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8692</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8425</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9014</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6251</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6174</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6472</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>2.9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.12</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.05</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1387</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2388</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>255</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3841</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1177</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1343</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>839</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00019"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.66292941436055,
							42.42053148112861,
							0
						],
						[
							-76.6642404147776,
							42.42048948106748,
							0
						],
						[
							-76.66466641491347,
							42.4204804810485,
							0
						],
						[
							-76.66481341496021,
							42.42047548104159,
							0
						],
						[
							-76.66598441533267,
							42.4204374809869,
							0
						],
						[
							-76.66622841540989,
							42.42042448097456,
							0
						],
						[
							-76.66714341570085,
							42.42039348093159,
							0
						],
						[
							-76.66735541576855,
							42.4203904809224,
							0
						],
						[
							-76.66778041590365,
							42.42037548090234,
							0
						],
						[
							-76.66863541617603,
							42.42035348086347,
							0
						],
						[
							-76.66884541624349,
							42.42035548085528,
							0
						],
						[
							-76.66905641631081,
							42.42035148084595,
							0
						],
						[
							-76.67244241738668,
							42.420226480685,
							0
						],
						[
							-76.67312241760253,
							42.42019848065213,
							0
						],
						[
							-76.67418241793969,
							42.42016448060269,
							0
						],
						[
							-76.67739441896019,
							42.42004548044992,
							0
						],
						[
							-76.67771741906297,
							42.42003548043491,
							0
						],
						[
							-76.67823941922877,
							42.42001548040997,
							0
						],
						[
							-76.67948241962338,
							42.41996548035009,
							0
						],
						[
							-76.67981641972975,
							42.41995648033484,
							0
						],
						[
							-76.68048341994144,
							42.41992848030248,
							0
						],
						[
							-76.68256742060399,
							42.41985748020449,
							0
						],
						[
							-76.68294542072431,
							42.41984648018706,
							0
						],
						[
							-76.68465142126722,
							42.41979548010813,
							0
						],
						[
							-76.68539542150346,
							42.4197664800725,
							0
						],
						[
							-76.68688342197667,
							42.41971748000281,
							0
						],
						[
							-76.6869994220137,
							42.41971547999771,
							0
						],
						[
							-76.68716442206605,
							42.4197084799897,
							0
						],
						[
							-76.68730542211108,
							42.41970647998359,
							0
						],
						[
							-76.68775442225378,
							42.41969047996234,
							0
						],
						[
							-76.68780842227137,
							42.41969447996087,
							0
						],
						[
							-76.6879574223183,
							42.41968347995278,
							0
						],
						[
							-76.68821442239835,
							42.41965247993659,
							0
						],
						[
							-76.68814342229756,
							42.41860047974497,
							0
						],
						[
							-76.68805842214441,
							42.41690347943467,
							0
						],
						[
							-76.68799042203284,
							42.41569347921369,
							0
						],
						[
							-76.68798542200454,
							42.41533347914736,
							0
						],
						[
							-76.68800042199933,
							42.41519847912178,
							0
						],
						[
							-76.68800242199063,
							42.4150724790984,
							0
						],
						[
							-76.6879704219676,
							42.41490047906791,
							0
						],
						[
							-76.68794842195166,
							42.4147804790466,
							0
						],
						[
							-76.68793142193917,
							42.41468547902973,
							0
						],
						[
							-76.68784742178674,
							42.41299347872029,
							0
						],
						[
							-76.68783342172952,
							42.41228247858938,
							0
						],
						[
							-76.68782442171931,
							42.41218347857144,
							0
						],
						[
							-76.6877024214297,
							42.40880547795172,
							0
						],
						[
							-76.6876994214249,
							42.40875347794222,
							0
						],
						[
							-76.68733042083868,
							42.40244147678983,
							0
						],
						[
							-76.68678741997577,
							42.39314447509208,
							0
						],
						[
							-76.68662441971726,
							42.39035947458341,
							0
						],
						[
							-76.68658041964842,
							42.38962047444847,
							0
						],
						[
							-76.68657841964578,
							42.38959347444354,
							0
						],
						[
							-76.68656441962099,
							42.38931947439342,
							0
						],
						[
							-76.68655841960958,
							42.38919147436999,
							0
						],
						[
							-76.68653941958395,
							42.3889274743219,
							0
						],
						[
							-76.68652341956039,
							42.38867847427648,
							0
						],
						[
							-76.68620841905769,
							42.38325247328521,
							0
						],
						[
							-76.68572841830171,
							42.37511647179889,
							0
						],
						[
							-76.68594041822797,
							42.37320247143597,
							0
						],
						[
							-76.68584641819778,
							42.3732014714396,
							0
						],
						[
							-76.68564741813388,
							42.37319947144734,
							0
						],
						[
							-76.68541741806044,
							42.37320247145724,
							0
						],
						[
							-76.6852984180221,
							42.37319947146154,
							0
						],
						[
							-76.68517941798414,
							42.37320147146674,
							0
						],
						[
							-76.68505941794547,
							42.37319847147107,
							0
						],
						[
							-76.68430341770345,
							42.37320047150219,
							0
						],
						[
							-76.68411741764379,
							42.37319947150958,
							0
						],
						[
							-76.68370441751196,
							42.37320547152747,
							0
						],
						[
							-76.68364141749149,
							42.3732014715293,
							0
						],
						[
							-76.68358141747233,
							42.37320247153193,
							0
						],
						[
							-76.6834584174324,
							42.37319547153563,
							0
						],
						[
							-76.68333741739409,
							42.37320147154167,
							0
						],
						[
							-76.6830794173147,
							42.3732454715603,
							0
						],
						[
							-76.68289441725737,
							42.37327147157265,
							0
						],
						[
							-76.68272341720312,
							42.3732784715809,
							0
						],
						[
							-76.68256741715263,
							42.37327147158595,
							0
						],
						[
							-76.68250341713154,
							42.37326347158707,
							0
						],
						[
							-76.6824814171242,
							42.37325947158723,
							0
						],
						[
							-76.6822454170455,
							42.37321747158904,
							0
						],
						[
							-76.68207441698922,
							42.37319747159231,
							0
						],
						[
							-76.68191241693654,
							42.37318647159686,
							0
						],
						[
							-76.68176641689058,
							42.37319747160483,
							0
						],
						[
							-76.68167441686221,
							42.37321247161136,
							0
						],
						[
							-76.68152941681696,
							42.37322847162021,
							0
						],
						[
							-76.68147641679997,
							42.37322847162237,
							0
						],
						[
							-76.68142341678343,
							42.37323447162564,
							0
						],
						[
							-76.68126341673232,
							42.3732364716325,
							0
						],
						[
							-76.68074741656558,
							42.37321647164978,
							0
						],
						[
							-76.68053341649731,
							42.37322047165922,
							0
						],
						[
							-76.68031941642965,
							42.37323247167017,
							0
						],
						[
							-76.68021441639608,
							42.37323347167461,
							0
						],
						[
							-76.68010741636233,
							42.37324047168028,
							0
						],
						[
							-76.67988241629048,
							42.37324347168998,
							0
						],
						[
							-76.67977241625569,
							42.37324947169556,
							0
						],
						[
							-76.67919341607082,
							42.3732574717206,
							0
						],
						[
							-76.6790744160332,
							42.37326447172672,
							0
						],
						[
							-76.67859641588059,
							42.37327147174747,
							0
						],
						[
							-76.67848241584386,
							42.37326847175154,
							0
						],
						[
							-76.67825041576977,
							42.37327147176154,
							0
						],
						[
							-76.67764041557304,
							42.37325347178302,
							0
						],
						[
							-76.67725841544913,
							42.37323247179466,
							0
						],
						[
							-76.67711641540274,
							42.37322047179821,
							0
						],
						[
							-76.67705641538262,
							42.37320847179844,
							0
						],
						[
							-76.67651241525222,
							42.37380147193035,
							0
						],
						[
							-76.6762104151805,
							42.3741394720052,
							0
						],
						[
							-76.67610241515368,
							42.37424447202901,
							0
						],
						[
							-76.6759874151243,
							42.3743454720524,
							0
						],
						[
							-76.67582641508218,
							42.37447347208264,
							0
						],
						[
							-76.67538441496308,
							42.3747774721569,
							0
						],
						[
							-76.67508541488056,
							42.37495647220218,
							0
						],
						[
							-76.67498241485168,
							42.37501247221673,
							0
						],
						[
							-76.6747614147888,
							42.37511947224554,
							0
						],
						[
							-76.67452341471983,
							42.37521747227335,
							0
						],
						[
							-76.67359741444885,
							42.37556447237525,
							0
						],
						[
							-76.67345541440683,
							42.37561147238974,
							0
						],
						[
							-76.67306741429023,
							42.37571547242477,
							0
						],
						[
							-76.67269541417684,
							42.37579347245431,
							0
						],
						[
							-76.67246441410475,
							42.37581947246853,
							0
						],
						[
							-76.67225241403773,
							42.37583147247936,
							0
						],
						[
							-76.67193541393581,
							42.37582647249132,
							0
						],
						[
							-76.67185441390934,
							42.37581947249332,
							0
						],
						[
							-76.67169441385624,
							42.37579447249522,
							0
						],
						[
							-76.67161441382936,
							42.37577747249531,
							0
						],
						[
							-76.67153541380316,
							42.37576547249631,
							0
						],
						[
							-76.67126141371101,
							42.37570647249654,
							0
						],
						[
							-76.67089841358845,
							42.37562147249557,
							0
						],
						[
							-76.6708024135568,
							42.37560947249722,
							0
						],
						[
							-76.67070541352552,
							42.37560647250062,
							0
						],
						[
							-76.67055941347955,
							42.37561747250858,
							0
						],
						[
							-76.67015041333728,
							42.37546547249708,
							0
						],
						[
							-76.66998341327867,
							42.3753964724911,
							0
						],
						[
							-76.6698024132159,
							42.37533147248645,
							0
						],
						[
							-76.66950741311133,
							42.37519547247324,
							0
						],
						[
							-76.66920241300203,
							42.37503847245658,
							0
						],
						[
							-76.66876041284192,
							42.37478847242828,
							0
						],
						[
							-76.66849441274466,
							42.37462547240891,
							0
						],
						[
							-76.66788241251732,
							42.37420247235549,
							0
						],
						[
							-76.66761441241702,
							42.37400747233028,
							0
						],
						[
							-76.66733941231527,
							42.37382247230721,
							0
						],
						[
							-76.6671064122302,
							42.37368147229058,
							0
						],
						[
							-76.66692441216414,
							42.37357647227854,
							0
						],
						[
							-76.6667364120968,
							42.37348047226842,
							0
						],
						[
							-76.66663641206151,
							42.37343647226433,
							0
						],
						[
							-76.66648941201028,
							42.37338047225993,
							0
						],
						[
							-76.66633741195774,
							42.3733284722565,
							0
						],
						[
							-76.66602041185087,
							42.37325647225604,
							0
						],
						[
							-76.66577141176838,
							42.37321947225933,
							0
						],
						[
							-76.6655524116971,
							42.37320447226544,
							0
						],
						[
							-76.66527441160768,
							42.37319947227583,
							0
						],
						[
							-76.66513541156367,
							42.37320647228276,
							0
						],
						[
							-76.66469141142186,
							42.37321247230192,
							0
						],
						[
							-76.66403241121216,
							42.37323147233222,
							0
						],
						[
							-76.66369141110329,
							42.37323647234702,
							0
						],
						[
							-76.66316441093431,
							42.37323447236807,
							0
						],
						[
							-76.66266541077468,
							42.37323747238891,
							0
						],
						[
							-76.66192541053842,
							42.37324847242103,
							0
						],
						[
							-76.66163541044514,
							42.3732434724319,
							0
						],
						[
							-76.6614914103985,
							42.37323647243645,
							0
						],
						[
							-76.66084441019026,
							42.37322347246034,
							0
						],
						[
							-76.65999440991722,
							42.37321347249303,
							0
						],
						[
							-76.65855940945573,
							42.37318947254691,
							0
						],
						[
							-76.65840740940718,
							42.37319147255344,
							0
						],
						[
							-76.65825640935859,
							42.37318847255902,
							0
						],
						[
							-76.65810440931011,
							42.37319147256576,
							0
						],
						[
							-76.65795340926151,
							42.37318847257134,
							0
						],
						[
							-76.65747440910826,
							42.37319147259136,
							0
						],
						[
							-76.65742540909255,
							42.37319147259334,
							0
						],
						[
							-76.65674940887673,
							42.37320147262269,
							0
						],
						[
							-76.6562984087324,
							42.37320347264137,
							0
						],
						[
							-76.65608640866505,
							42.37321147265148,
							0
						],
						[
							-76.65565640852776,
							42.37321747267006,
							0
						],
						[
							-76.65544340846012,
							42.3732254726802,
							0
						],
						[
							-76.65473740823467,
							42.37323547271074,
							0
						],
						[
							-76.65459640818926,
							42.37323247271591,
							0
						],
						[
							-76.6543184081005,
							42.37323647272795,
							0
						],
						[
							-76.65418040805747,
							42.37325247273653,
							0
						],
						[
							-76.65355040785963,
							42.37330647277211,
							0
						],
						[
							-76.6533554077814,
							42.37309347274059,
							0
						],
						[
							-76.65317340770767,
							42.37288447270929,
							0
						],
						[
							-76.6528944075956,
							42.3725774726638,
							0
						],
						[
							-76.65218240731102,
							42.37181347255127,
							0
						],
						[
							-76.6518064071613,
							42.37141747249322,
							0
						],
						[
							-76.65067740671527,
							42.37027647232782,
							0
						],
						[
							-76.65034840658699,
							42.36996647228378,
							0
						],
						[
							-76.65010940649438,
							42.36974947225331,
							0
						],
						[
							-76.64990940641621,
							42.36955847222606,
							0
						],
						[
							-76.64970040633581,
							42.36937647220085,
							0
						],
						[
							-76.64942040623149,
							42.36917847217557,
							0
						],
						[
							-76.64923540616142,
							42.36903247215604,
							0
						],
						[
							-76.6490434060875,
							42.36886447213273,
							0
						],
						[
							-76.64887340602056,
							42.36869547210835,
							0
						],
						[
							-76.64882640600054,
							42.36862847209785,
							0
						],
						[
							-76.64879340598333,
							42.36853847208253,
							0
						],
						[
							-76.6487714059624,
							42.3683504720486,
							0
						],
						[
							-76.64876640594949,
							42.36819747202046,
							0
						],
						[
							-76.64877840593101,
							42.36789547196405,
							0
						],
						[
							-76.64878440579754,
							42.36606247162436,
							0
						],
						[
							-76.6487564057224,
							42.36516647145957,
							0
						],
						[
							-76.6487524056613,
							42.36435647130973,
							0
						],
						[
							-76.64873840564817,
							42.36423947128862,
							0
						],
						[
							-76.64870640562594,
							42.36407747125994,
							0
						],
						[
							-76.64863440558368,
							42.3638174712147,
							0
						],
						[
							-76.64832940542149,
							42.36294447106539,
							0
						],
						[
							-76.64813440532035,
							42.36242047097627,
							0
						],
						[
							-76.64804140527335,
							42.3621874709369,
							0
						],
						[
							-76.64796640523146,
							42.36194547089512,
							0
						],
						[
							-76.64791340520553,
							42.36182447087487,
							0
						],
						[
							-76.64789940519705,
							42.36177047086543,
							0
						],
						[
							-76.64789240519082,
							42.36171647085572,
							0
						],
						[
							-76.6478924051872,
							42.36166747084663,
							0
						],
						[
							-76.64778840515434,
							42.36167347085197,
							0
						],
						[
							-76.64767740511722,
							42.36165247085258,
							0
						],
						[
							-76.64761340509679,
							42.36165347085537,
							0
						],
						[
							-76.64742640503638,
							42.36164647086167,
							0
						],
						[
							-76.64717840495724,
							42.36165047087248,
							0
						],
						[
							-76.64692940487834,
							42.36166247088482,
							0
						],
						[
							-76.64567040447642,
							42.36168147093946,
							0
						],
						[
							-76.64544340440354,
							42.36167947094831,
							0
						],
						[
							-76.64521440433049,
							42.36168347095835,
							0
						],
						[
							-76.6451404043065,
							42.36167947096061,
							0
						],
						[
							-76.64391840391397,
							42.36166547100765,
							0
						],
						[
							-76.64383940388778,
							42.36165347100862,
							0
						],
						[
							-76.64376240386082,
							42.36162247100601,
							0
						],
						[
							-76.64371740384819,
							42.36164647101229,
							0
						],
						[
							-76.64364340382616,
							42.36166947101957,
							0
						],
						[
							-76.64354140379363,
							42.36167147102407,
							0
						],
						[
							-76.64343440375848,
							42.36165947102617,
							0
						],
						[
							-76.64309640365018,
							42.3616594710399,
							0
						],
						[
							-76.64218040335601,
							42.36164947107525,
							0
						],
						[
							-76.6416554031867,
							42.36163447109379,
							0
						],
						[
							-76.63924540241588,
							42.36165147119478,
							0
						],
						[
							-76.63711640173707,
							42.36169547128935,
							0
						],
						[
							-76.63625740146112,
							42.36168547132238,
							0
						],
						[
							-76.63519740111896,
							42.36165047135893,
							0
						],
						[
							-76.63482240099755,
							42.36163347137102,
							0
						],
						[
							-76.63407540075706,
							42.36161747139837,
							0
						],
						[
							-76.63388840069632,
							42.36160647140392,
							0
						],
						[
							-76.63350440056969,
							42.36155747141043,
							0
						],
						[
							-76.63343840054766,
							42.36154547141089,
							0
						],
						[
							-76.63337740052688,
							42.3615284714102,
							0
						],
						[
							-76.63332540050857,
							42.36150647140826,
							0
						],
						[
							-76.63326640048672,
							42.36146647140323,
							0
						],
						[
							-76.63321640046709,
							42.36141747139618,
							0
						],
						[
							-76.63317940045164,
							42.36136847138863,
							0
						],
						[
							-76.63316140044223,
							42.36131947138028,
							0
						],
						[
							-76.63314540043018,
							42.36122547136348,
							0
						],
						[
							-76.6331434004229,
							42.36113547134691,
							0
						],
						[
							-76.63314940041846,
							42.36104947133075,
							0
						],
						[
							-76.63314040040896,
							42.36095947131443,
							0
						],
						[
							-76.63312840040176,
							42.36091447130659,
							0
						],
						[
							-76.63311140039337,
							42.36087447129988,
							0
						],
						[
							-76.63308540038211,
							42.36083447129351,
							0
						],
						[
							-76.63304040036542,
							42.36080347128959,
							0
						],
						[
							-76.63298340034521,
							42.36077747128709,
							0
						],
						[
							-76.63287140030675,
							42.36074247128516,
							0
						],
						[
							-76.63275640026939,
							42.36073547128854,
							0
						],
						[
							-76.63263540023077,
							42.36073747129382,
							0
						],
						[
							-76.63242340016204,
							42.36072647130038,
							0
						],
						[
							-76.63196540001516,
							42.36072447131859,
							0
						],
						[
							-76.63138139982733,
							42.36071447134046,
							0
						],
						[
							-76.63124339978326,
							42.36071647134641,
							0
						],
						[
							-76.63007639940827,
							42.360701471391,
							0
						],
						[
							-76.62943039920131,
							42.36070147141721,
							0
						],
						[
							-76.62883439901,
							42.36069647144048,
							0
						],
						[
							-76.62863439894548,
							42.36069047144748,
							0
						],
						[
							-76.62853339891326,
							42.36069247145195,
							0
						],
						[
							-76.62833239884833,
							42.36068547145883,
							0
						],
						[
							-76.62803839875386,
							42.36068147147001,
							0
						],
						[
							-76.62788839870528,
							42.3606744714748,
							0
						],
						[
							-76.62729339851393,
							42.3606644714971,
							0
						],
						[
							-76.62714639846696,
							42.36066647150342,
							0
						],
						[
							-76.62686539837658,
							42.36066147151389,
							0
						],
						[
							-76.62655639827759,
							42.36066147152643,
							0
						],
						[
							-76.62528139786774,
							42.36064347157483,
							0
						],
						[
							-76.62515039782592,
							42.36064547158052,
							0
						],
						[
							-76.62488039773905,
							42.36064047159055,
							0
						],
						[
							-76.624670397672,
							42.36064347159962,
							0
						],
						[
							-76.62455639763556,
							42.36064447160445,
							0
						],
						[
							-76.62429839766214,
							42.36212547188925,
							0
						],
						[
							-76.62419039767016,
							42.3627034720007,
							0
						],
						[
							-76.62412739767832,
							42.36308747207438,
							0
						],
						[
							-76.62403539770241,
							42.3638134722126,
							0
						],
						[
							-76.62384839777324,
							42.36558547254839,
							0
						],
						[
							-76.62373939780488,
							42.3664874727199,
							0
						],
						[
							-76.6236533978346,
							42.36726347286711,
							0
						],
						[
							-76.62351539786631,
							42.36829247306327,
							0
						],
						[
							-76.62336939789606,
							42.36932947326128,
							0
						],
						[
							-76.62330439789591,
							42.36960947331576,
							0
						],
						[
							-76.62310739788053,
							42.37025647344359,
							0
						],
						[
							-76.62303039787254,
							42.37048247348855,
							0
						],
						[
							-76.62298539787281,
							42.37068147352724,
							0
						],
						[
							-76.62297739787726,
							42.37077647354514,
							0
						],
						[
							-76.62292139785902,
							42.3707724735467,
							0
						],
						[
							-76.62280639782261,
							42.37077847355248,
							0
						],
						[
							-76.62256739774995,
							42.37083147357198,
							0
						],
						[
							-76.62108139730029,
							42.37119047369877,
							0
						],
						[
							-76.62089039724226,
							42.37123347371448,
							0
						],
						[
							-76.62034139707625,
							42.37136747376157,
							0
						],
						[
							-76.61983339692196,
							42.3714824738035,
							0
						],
						[
							-76.61950339682286,
							42.37157247383355,
							0
						],
						[
							-76.61934139677479,
							42.37162447384975,
							0
						],
						[
							-76.61910439670513,
							42.37170947387511,
							0
						],
						[
							-76.61899039667199,
							42.37175547388825,
							0
						],
						[
							-76.61890039664587,
							42.37179247389876,
							0
						],
						[
							-76.61865339657567,
							42.3719134739312,
							0
						],
						[
							-76.6179963963917,
							42.37227347402452,
							0
						],
						[
							-76.61780239633774,
							42.37238447405295,
							0
						],
						[
							-76.61762039628854,
							42.37250847408331,
							0
						],
						[
							-76.61736639622141,
							42.37270147412936,
							0
						],
						[
							-76.61720439617969,
							42.37283947416148,
							0
						],
						[
							-76.61711639615756,
							42.37292147418023,
							0
						],
						[
							-76.61697739612275,
							42.37305347421032,
							0
						],
						[
							-76.6165543960199,
							42.37349647430952,
							0
						],
						[
							-76.61617739592705,
							42.37387547439501,
							0
						],
						[
							-76.61529239570886,
							42.37476147459499,
							0
						],
						[
							-76.61506939565393,
							42.37498547464553,
							0
						],
						[
							-76.61247139501499,
							42.37760847523666,
							0
						],
						[
							-76.6124543950108,
							42.37762547524049,
							0
						],
						[
							-76.61149539477522,
							42.37859747545937,
							0
						],
						[
							-76.61026539447472,
							42.37986647574427,
							0
						],
						[
							-76.60981639436324,
							42.38030547584378,
							0
						],
						[
							-76.60937139425002,
							42.38070347593551,
							0
						],
						[
							-76.60891939413216,
							42.38106947602163,
							0
						],
						[
							-76.60866639406495,
							42.38125747606672,
							0
						],
						[
							-76.60860639404981,
							42.38131247607932,
							0
						],
						[
							-76.608520394031,
							42.38143147610484,
							0
						],
						[
							-76.60844139401935,
							42.3816164761423,
							0
						],
						[
							-76.60840139400632,
							42.38161347614337,
							0
						],
						[
							-76.60812039391449,
							42.38158947615032,
							0
						],
						[
							-76.60795139386084,
							42.38159647615848,
							0
						],
						[
							-76.60778239380787,
							42.3816124761683,
							0
						],
						[
							-76.60752839373009,
							42.38166147618767,
							0
						],
						[
							-76.60730139366154,
							42.38171847620743,
							0
						],
						[
							-76.60715139361656,
							42.3817604762213,
							0
						],
						[
							-76.60699439357009,
							42.38181247623729,
							0
						],
						[
							-76.60670139348284,
							42.38190247626586,
							0
						],
						[
							-76.60632839337097,
							42.38200647630023,
							0
						],
						[
							-76.60498039296466,
							42.38235447641937,
							0
						],
						[
							-76.60451739282601,
							42.3824864764626,
							0
						],
						[
							-76.6042833927556,
							42.38254847648355,
							0
						],
						[
							-76.60357739254403,
							42.38274747654905,
							0
						],
						[
							-76.60309239239804,
							42.38287547659242,
							0
						],
						[
							-76.60257239224187,
							42.38301747663981,
							0
						],
						[
							-76.60213539211057,
							42.38313647667957,
							0
						],
						[
							-76.60167939197292,
							42.38325147671935,
							0
						],
						[
							-76.59968239137187,
							42.38377947689811,
							0
						],
						[
							-76.59942139129376,
							42.3838544769226,
							0
						],
						[
							-76.59886639112644,
							42.38399747697159,
							0
						],
						[
							-76.59864839106181,
							42.38406847699358,
							0
						],
						[
							-76.59827739095324,
							42.38420847703456,
							0
						],
						[
							-76.59800339087369,
							42.3843204770664,
							0
						],
						[
							-76.5976753907789,
							42.38446047710561,
							0
						],
						[
							-76.59713739062195,
							42.38467047716632,
							0
						],
						[
							-76.59703139059137,
							42.38471647717913,
							0
						],
						[
							-76.59693039056276,
							42.38476747719268,
							0
						],
						[
							-76.59683239053581,
							42.38482747720778,
							0
						],
						[
							-76.5965573904619,
							42.38502047725464,
							0
						],
						[
							-76.59646939043877,
							42.38508947727101,
							0
						],
						[
							-76.59565739022052,
							42.38565847740928,
							0
						],
						[
							-76.59509839006851,
							42.38602647750009,
							0
						],
						[
							-76.59457038992615,
							42.38639047758889,
							0
						],
						[
							-76.59447138989877,
							42.38644947760383,
							0
						],
						[
							-76.59434238986259,
							42.38651947762202,
							0
						],
						[
							-76.59442738989308,
							42.38656347762672,
							0
						],
						[
							-76.59445838990729,
							42.3866214776362,
							0
						],
						[
							-76.59448238991955,
							42.38668347764671,
							0
						],
						[
							-76.59449738992902,
							42.38674647765777,
							0
						],
						[
							-76.59452639003005,
							42.38798947788672,
							0
						],
						[
							-76.59452639009109,
							42.38881647803984,
							0
						],
						[
							-76.59452739017621,
							42.38996547825251,
							0
						],
						[
							-76.59451039021297,
							42.39053747835909,
							0
						],
						[
							-76.5945293902354,
							42.39075847839924,
							0
						],
						[
							-76.5945513902491,
							42.390848478415,
							0
						],
						[
							-76.59457539025973,
							42.39088847842142,
							0
						],
						[
							-76.59462139027809,
							42.39093747842863,
							0
						],
						[
							-76.5946783902996,
							42.39098147843448,
							0
						],
						[
							-76.59478739033943,
							42.39104747844227,
							0
						],
						[
							-76.59494139039327,
							42.39110847844731,
							0
						],
						[
							-76.59518839047719,
							42.39117247844914,
							0
						],
						[
							-76.5954053905488,
							42.39120047844553,
							0
						],
						[
							-76.5957073906493,
							42.39125047844253,
							0
						],
						[
							-76.59593539072547,
							42.39129247844105,
							0
						],
						[
							-76.59598839074341,
							42.39130547844133,
							0
						],
						[
							-76.59609639077921,
							42.39132147843989,
							0
						],
						[
							-76.59619939081415,
							42.39134747844054,
							0
						],
						[
							-76.59633239086031,
							42.39139547844403,
							0
						],
						[
							-76.59640939088757,
							42.39143047844738,
							0
						],
						[
							-76.5964803909132,
							42.39146947845171,
							0
						],
						[
							-76.59653039093219,
							42.3915094784571,
							0
						],
						[
							-76.59665639098175,
							42.39163347847494,
							0
						],
						[
							-76.5969613911055,
							42.39198547852773,
							0
						],
						[
							-76.59699639111928,
							42.3920204785328,
							0
						],
						[
							-76.59711939116661,
							42.39212747854761,
							0
						],
						[
							-76.59718339119,
							42.39216647855222,
							0
						],
						[
							-76.59724439121183,
							42.3921974785555,
							0
						],
						[
							-76.59730439123233,
							42.39221447855621,
							0
						],
						[
							-76.59737139125477,
							42.39222747855589,
							0
						],
						[
							-76.59741939127008,
							42.39222647855377,
							0
						],
						[
							-76.59739639131358,
							42.39291547868224,
							0
						],
						[
							-76.59740039132188,
							42.39301047869967,
							0
						],
						[
							-76.59742039133485,
							42.39309947871532,
							0
						],
						[
							-76.59743739134318,
							42.39313847872185,
							0
						],
						[
							-76.5974763913624,
							42.39322947873711,
							0
						],
						[
							-76.59763839143477,
							42.39350647878182,
							0
						],
						[
							-76.59767439145392,
							42.39360947879943,
							0
						],
						[
							-76.59770739146944,
							42.39367647881048,
							0
						],
						[
							-76.59773639148207,
							42.39372147881764,
							0
						],
						[
							-76.59781039151207,
							42.39380647883036,
							0
						],
						[
							-76.59789339154486,
							42.39389047884255,
							0
						],
						[
							-76.59798639158022,
							42.39396547885266,
							0
						],
						[
							-76.59809439162007,
							42.39403647886143,
							0
						],
						[
							-76.59820539166053,
							42.39410247886914,
							0
						],
						[
							-76.59842839174338,
							42.39425647888861,
							0
						],
						[
							-76.59875939186874,
							42.39451747892348,
							0
						],
						[
							-76.59904939198002,
							42.39476547895762,
							0
						],
						[
							-76.59969039222875,
							42.39535147904008,
							0
						],
						[
							-76.60027239245295,
							42.39586147911086,
							0
						],
						[
							-76.60084739267256,
							42.39633947917602,
							0
						],
						[
							-76.60130139284423,
							42.39669347922311,
							0
						],
						[
							-76.60162939296958,
							42.39696747926051,
							0
						],
						[
							-76.60194939309315,
							42.39725147930007,
							0
						],
						[
							-76.6025093933073,
							42.39772047936419,
							0
						],
						[
							-76.60271439338644,
							42.39790247938954,
							0
						],
						[
							-76.60278939341609,
							42.39797847940056,
							0
						],
						[
							-76.6028703934493,
							42.39807647941539,
							0
						],
						[
							-76.60295139348443,
							42.39820047943506,
							0
						],
						[
							-76.6030183935152,
							42.39832647945567,
							0
						],
						[
							-76.60328039364677,
							42.39897047956423,
							0
						],
						[
							-76.6038603939432,
							42.40046647981757,
							0
						],
						[
							-76.60360039386015,
							42.40047047982885,
							0
						],
						[
							-76.60296039365663,
							42.40049247985888,
							0
						],
						[
							-76.60264039355442,
							42.40049747987282,
							0
						],
						[
							-76.60231839345218,
							42.40051047988829,
							0
						],
						[
							-76.60154039320442,
							42.40053247992393,
							0
						],
						[
							-76.5998013926506,
							42.40058148000358,
							0
						],
						[
							-76.59955439257241,
							42.400594480016,
							0
						],
						[
							-76.59616839149413,
							42.40069048017116,
							0
						],
						[
							-76.5954573912677,
							42.40071048020371,
							0
						],
						[
							-76.59504739113636,
							42.40071148022053,
							0
						],
						[
							-76.59471839103153,
							42.40072048023554,
							0
						],
						[
							-76.59422539087403,
							42.40072748025684,
							0
						],
						[
							-76.59381539074364,
							42.40074148027607,
							0
						],
						[
							-76.59358239066998,
							42.40075548028812,
							0
						],
						[
							-76.59332739058942,
							42.40077148030142,
							0
						],
						[
							-76.59324739056349,
							42.40076748030392,
							0
						],
						[
							-76.59308539051207,
							42.40077448031179,
							0
						],
						[
							-76.59300939048845,
							42.40078448031671,
							0
						],
						[
							-76.5929383904671,
							42.40080348032311,
							0
						],
						[
							-76.59287139044767,
							42.40083148033101,
							0
						],
						[
							-76.59280539042898,
							42.4008644803398,
							0
						],
						[
							-76.592752390415,
							42.40090548034956,
							0
						],
						[
							-76.5927143904068,
							42.40095948036108,
							0
						],
						[
							-76.59266539039983,
							42.4010774803849,
							0
						],
						[
							-76.5925983903937,
							42.40128548042612,
							0
						],
						[
							-76.59252239038175,
							42.40145348046029,
							0
						],
						[
							-76.59244739036679,
							42.40157648048611,
							0
						],
						[
							-76.59240339035667,
							42.40163048049789,
							0
						],
						[
							-76.59234939034305,
							42.40168048050933,
							0
						],
						[
							-76.5922883903269,
							42.40172648052032,
							0
						],
						[
							-76.59221839030755,
							42.40176848053094,
							0
						],
						[
							-76.59206239026304,
							42.40184248055095,
							0
						],
						[
							-76.5918113901895,
							42.40193648057852,
							0
						],
						[
							-76.5917603901758,
							42.40197248058726,
							0
						],
						[
							-76.59171539016478,
							42.40201848059761,
							0
						],
						[
							-76.59189539022557,
							42.40206048059808,
							0
						],
						[
							-76.59213239030636,
							42.40212548060049,
							0
						],
						[
							-76.59224939034675,
							42.40216448060296,
							0
						],
						[
							-76.59236639038677,
							42.4021984806045,
							0
						],
						[
							-76.59259139046493,
							42.40228048061055,
							0
						],
						[
							-76.59285839055926,
							42.40239848062156,
							0
						],
						[
							-76.59311639065135,
							42.40252548063458,
							0
						],
						[
							-76.5934683907785,
							42.4027194806562,
							0
						],
						[
							-76.59397739096508,
							42.40303648069422,
							0
						],
						[
							-76.59439539111791,
							42.40329148072445,
							0
						],
						[
							-76.5948883912987,
							42.40359948076146,
							0
						],
						[
							-76.59513439138931,
							42.4037584807809,
							0
						],
						[
							-76.59521539141882,
							42.40380648078649,
							0
						],
						[
							-76.59558739155632,
							42.40405348081711,
							0
						],
						[
							-76.59586239165621,
							42.40421248083538,
							0
						],
						[
							-76.59604139172171,
							42.40432248084846,
							0
						],
						[
							-76.59621939178757,
							42.40444148086326,
							0
						],
						[
							-76.59646339187915,
							42.40462248088686,
							0
						],
						[
							-76.59668539196407,
							42.40480848091229,
							0
						],
						[
							-76.59682039201687,
							42.40493748093066,
							0
						],
						[
							-76.59690339205005,
							42.40502648094377,
							0
						],
						[
							-76.59705739211287,
							42.4052084809712,
							0
						],
						[
							-76.5973693922445,
							42.40563648103774,
							0
						],
						[
							-76.59746739228649,
							42.40577948106022,
							0
						],
						[
							-76.59772739240006,
							42.40618848112536,
							0
						],
						[
							-76.59774239240656,
							42.406211481129,
							0
						],
						[
							-76.59806239254513,
							42.40669848120613,
							0
						],
						[
							-76.5981873925974,
							42.4068634812316,
							0
						],
						[
							-76.59834139265858,
							42.40702348125495,
							0
						],
						[
							-76.5985063927216,
							42.4071604812736,
							0
						],
						[
							-76.59859239275339,
							42.40721748128066,
							0
						],
						[
							-76.59887339285514,
							42.40737548129849,
							0
						],
						[
							-76.59908239292997,
							42.40748148130963,
							0
						],
						[
							-76.59913439294826,
							42.40750348131158,
							0
						],
						[
							-76.59965239313041,
							42.4077214813309,
							0
						],
						[
							-76.59996239323844,
							42.40783848133997,
							0
						],
						[
							-76.60010839328605,
							42.40784948133607,
							0
						],
						[
							-76.60031239335389,
							42.4078824813339,
							0
						],
						[
							-76.60071339348902,
							42.4079714813341,
							0
						],
						[
							-76.60101339359153,
							42.40805748133782,
							0
						],
						[
							-76.60121039365987,
							42.40812748134278,
							0
						],
						[
							-76.60146139374599,
							42.40820448134685,
							0
						],
						[
							-76.60168539382359,
							42.40828248135217,
							0
						],
						[
							-76.60173339383995,
							42.40829548135265,
							0
						],
						[
							-76.60188439389152,
							42.40833848135447,
							0
						],
						[
							-76.60239239406316,
							42.40845748135585,
							0
						],
						[
							-76.60245239408363,
							42.40847448135657,
							0
						],
						[
							-76.60251439410477,
							42.40849148135719,
							0
						],
						[
							-76.60262139414165,
							42.40852648135934,
							0
						],
						[
							-76.60293239425002,
							42.40864348136837,
							0
						],
						[
							-76.60313439432089,
							42.40872648137553,
							0
						],
						[
							-76.60325739436445,
							42.40878248138089,
							0
						],
						[
							-76.60361239449195,
							42.40896748140069,
							0
						],
						[
							-76.60423339471666,
							42.40931448143969,
							0
						],
						[
							-76.60437639476929,
							42.40940648145091,
							0
						],
						[
							-76.60457539484351,
							42.40954748146893,
							0
						],
						[
							-76.60485239494835,
							42.40976448149783,
							0
						],
						[
							-76.60514239506,
							42.41001748153286,
							0
						],
						[
							-76.60544439517545,
							42.41026948156721,
							0
						],
						[
							-76.605671395261,
							42.41044248159002,
							0
						],
						[
							-76.60588639534065,
							42.41058748160813,
							0
						],
						[
							-76.60603839539655,
							42.41068448161989,
							0
						],
						[
							-76.60629539548898,
							42.41082048163462,
							0
						],
						[
							-76.60655839558306,
							42.41095248164834,
							0
						],
						[
							-76.60667839562632,
							42.41101748165553,
							0
						],
						[
							-76.60726839584149,
							42.41136948169668,
							0
						],
						[
							-76.60736839587813,
							42.41143148170409,
							0
						],
						[
							-76.60816039616817,
							42.41192048176241,
							0
						],
						[
							-76.60871039636851,
							42.4122454818002,
							0
						],
						[
							-76.60890339643954,
							42.41236948181531,
							0
						],
						[
							-76.60932639659696,
							42.41266448185271,
							0
						],
						[
							-76.60967439672915,
							42.41294348189019,
							0
						],
						[
							-76.60985339679665,
							42.41308048190827,
							0
						],
						[
							-76.61000839685381,
							42.41318148192064,
							0
						],
						[
							-76.61043839701058,
							42.41343748195057,
							0
						],
						[
							-76.61077339713093,
							42.41361248196932,
							0
						],
						[
							-76.61100339721308,
							42.41372648198107,
							0
						],
						[
							-76.61115639726694,
							42.41379148198688,
							0
						],
						[
							-76.61163739743465,
							42.41397448200119,
							0
						],
						[
							-76.61229639766283,
							42.4142034820168,
							0
						],
						[
							-76.61280139783722,
							42.41437248202753,
							0
						],
						[
							-76.61310139794034,
							42.41446648203276,
							0
						],
						[
							-76.6140753982729,
							42.41474148204407,
							0
						],
						[
							-76.61439139838019,
							42.41482248204622,
							0
						],
						[
							-76.61457339844135,
							42.41486048204585,
							0
						],
						[
							-76.6147583985028,
							42.41488948204371,
							0
						],
						[
							-76.61494539856422,
							42.41490948203981,
							0
						],
						[
							-76.61517039863737,
							42.41492348203325,
							0
						],
						[
							-76.61562439878217,
							42.41491348201297,
							0
						],
						[
							-76.6161003989312,
							42.41486548198475,
							0
						],
						[
							-76.61633439900372,
							42.41483148196895,
							0
						],
						[
							-76.61660939908786,
							42.4147774819478,
							0
						],
						[
							-76.61701639921093,
							42.41467748191275,
							0
						],
						[
							-76.6171533992527,
							42.41464848190184,
							0
						],
						[
							-76.61739939932859,
							42.41460848188446,
							0
						],
						[
							-76.61764839940582,
							42.41457348186785,
							0
						],
						[
							-76.61789939948436,
							42.41454748185286,
							0
						],
						[
							-76.61804539953071,
							42.4145414818458,
							0
						],
						[
							-76.61819339957734,
							42.41453048183777,
							0
						],
						[
							-76.61834039962432,
							42.41452848183143,
							0
						],
						[
							-76.61848939967156,
							42.41452148182408,
							0
						],
						[
							-76.61899439983357,
							42.41452348180393,
							0
						],
						[
							-76.61941639996974,
							42.414535481789,
							0
						],
						[
							-76.62005040017526,
							42.41456648176899,
							0
						],
						[
							-76.62037140027897,
							42.41457748175798,
							0
						],
						[
							-76.62072840039421,
							42.41458848174552,
							0
						],
						[
							-76.62118040054067,
							42.41460948173103,
							0
						],
						[
							-76.62140640061354,
							42.41461548172295,
							0
						],
						[
							-76.62248840096488,
							42.41467648169027,
							0
						],
						[
							-76.62309340116052,
							42.41469948166994,
							0
						],
						[
							-76.62367340134747,
							42.41471348164897,
							0
						],
						[
							-76.62466140166681,
							42.41474948161551,
							0
						],
						[
							-76.62537240189864,
							42.4148024815964,
							0
						],
						[
							-76.62568740200227,
							42.41483848159026,
							0
						],
						[
							-76.62584240205382,
							42.41486348158859,
							0
						],
						[
							-76.6261104021444,
							42.41492648158935,
							0
						],
						[
							-76.62624540219085,
							42.41496948159182,
							0
						],
						[
							-76.62656540230243,
							42.41509148160138,
							0
						],
						[
							-76.6267774023775,
							42.41518748161052,
							0
						],
						[
							-76.6268354023983,
							42.41521748161372,
							0
						],
						[
							-76.6270734024837,
							42.41534048162681,
							0
						],
						[
							-76.62725840255152,
							42.41545548164054,
							0
						],
						[
							-76.62742540261354,
							42.41557048165505,
							0
						],
						[
							-76.62772840272933,
							42.4158224816893,
							0
						],
						[
							-76.62783440277084,
							42.41592448170388,
							0
						],
						[
							-76.62802640284855,
							42.41614248173642,
							0
						],
						[
							-76.62829540295976,
							42.41648048178799,
							0
						],
						[
							-76.62855240306459,
							42.4167834818336,
							0
						],
						[
							-76.62871440313198,
							42.41699248186566,
							0
						],
						[
							-76.62885740319366,
							42.41720648189943,
							0
						],
						[
							-76.62892340322354,
							42.41732448191856,
							0
						],
						[
							-76.62898240325032,
							42.41743048193577,
							0
						],
						[
							-76.62903740327617,
							42.41754148195409,
							0
						],
						[
							-76.62913240332357,
							42.41777048199256,
							0
						],
						[
							-76.62921340335744,
							42.41787748200907,
							0
						],
						[
							-76.62919140335802,
							42.41798048202901,
							0
						],
						[
							-76.62923440338648,
							42.41817848206389,
							0
						],
						[
							-76.62926840341231,
							42.41838048209987,
							0
						],
						[
							-76.6292984034422,
							42.41865448214933,
							0
						],
						[
							-76.62941040362006,
							42.4205714824993,
							0
						],
						[
							-76.62943040365762,
							42.42099248257636,
							0
						],
						[
							-76.62945240369947,
							42.42146248266239,
							0
						],
						[
							-76.62966140376587,
							42.42145448265242,
							0
						],
						[
							-76.63037740399466,
							42.42144448262145,
							0
						],
						[
							-76.63073240410779,
							42.42143548260537,
							0
						],
						[
							-76.6310064041953,
							42.42143148259349,
							0
						],
						[
							-76.63109440422345,
							42.42143048258971,
							0
						],
						[
							-76.63144940433651,
							42.42142048257345,
							0
						],
						[
							-76.63349540498983,
							42.42138648248398,
							0
						],
						[
							-76.6361834058446,
							42.42129448235769,
							0
						],
						[
							-76.6364844059408,
							42.4212904823447,
							0
						],
						[
							-76.63792840640077,
							42.42125148227879,
							0
						],
						[
							-76.63876840666883,
							42.42123548224166,
							0
						],
						[
							-76.63949040689849,
							42.42121148220787,
							0
						],
						[
							-76.64255740787496,
							42.42112248206669,
							0
						],
						[
							-76.6428284079615,
							42.42111848205493,
							0
						],
						[
							-76.64436440845051,
							42.42107348198415,
							0
						],
						[
							-76.64460340852689,
							42.42107048197386,
							0
						],
						[
							-76.64484440860355,
							42.42106248196257,
							0
						],
						[
							-76.64490340862208,
							42.42105748195925,
							0
						],
						[
							-76.64493640863259,
							42.42105648195773,
							0
						],
						[
							-76.64768140950686,
							42.42098148183222,
							0
						],
						[
							-76.64781940955125,
							42.42098348182697,
							0
						],
						[
							-76.64786640956616,
							42.42098148182471,
							0
						],
						[
							-76.64798540960392,
							42.42097648181893,
							0
						],
						[
							-76.64847040975752,
							42.42095148179458,
							0
						],
						[
							-76.65039641037046,
							42.42089248170532,
							0
						],
						[
							-76.65075641048547,
							42.42088748168975,
							0
						],
						[
							-76.650981410557,
							42.42087948167912,
							0
						],
						[
							-76.65214441092819,
							42.42085848162792,
							0
						],
						[
							-76.65302641120896,
							42.42083248158724,
							0
						],
						[
							-76.65385341147179,
							42.42080248154804,
							0
						],
						[
							-76.65548741199203,
							42.42075548147287,
							0
						],
						[
							-76.65573841207222,
							42.42075248146209,
							0
						],
						[
							-76.65677241240118,
							42.42071948141393,
							0
						],
						[
							-76.65707141249634,
							42.42071048140009,
							0
						],
						[
							-76.65739941260045,
							42.42069648138416,
							0
						],
						[
							-76.65805541280936,
							42.42067848135415,
							0
						],
						[
							-76.6585604129698,
							42.42065948133008,
							0
						],
						[
							-76.65963441331171,
							42.42062848128064,
							0
						],
						[
							-76.66055541360525,
							42.42060648123911,
							0
						],
						[
							-76.66292941436055,
							42.42053148112861,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090017003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>37961152</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>56836</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.3948599</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.6416764</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090017003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090017003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1512</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>491</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>9380.27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>28075</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27737</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>29048</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14819</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14478</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15366</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8433</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8166</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8755</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6366</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6290</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6587</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.05</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1821</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2357</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>134</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2688</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1035</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1145</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>771</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>70</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00020"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.68994942499693,
							42.44715648494898,
							0
						],
						[
							-76.68984942485727,
							42.44570848468552,
							0
						],
						[
							-76.68953342437167,
							42.4405364837428,
							0
						],
						[
							-76.68953242437074,
							42.44052848374138,
							0
						],
						[
							-76.68952442435324,
							42.44032748370456,
							0
						],
						[
							-76.68949842432248,
							42.44002548364982,
							0
						],
						[
							-76.68948942431165,
							42.43991848363042,
							0
						],
						[
							-76.6893864241845,
							42.4386514834005,
							0
						],
						[
							-76.68926342401102,
							42.43684648307196,
							0
						],
						[
							-76.68917542389828,
							42.43570848286525,
							0
						],
						[
							-76.6891734238958,
							42.4356834828607,
							0
						],
						[
							-76.68911942382627,
							42.43498048273299,
							0
						],
						[
							-76.6890584237389,
							42.43406748256675,
							0
						],
						[
							-76.68901842367106,
							42.43332648243145,
							0
						],
						[
							-76.68901542366648,
							42.4332774824225,
							0
						],
						[
							-76.6888454233806,
							42.43016148185351,
							0
						],
						[
							-76.68877642327948,
							42.42909748165967,
							0
						],
						[
							-76.68877542327753,
							42.42907548165564,
							0
						],
						[
							-76.68872042319695,
							42.42822748150115,
							0
						],
						[
							-76.68863342306054,
							42.42676548123445,
							0
						],
						[
							-76.68850242283055,
							42.42423248077156,
							0
						],
						[
							-76.68829642251146,
							42.42082248014956,
							0
						],
						[
							-76.68828542249747,
							42.42068148012394,
							0
						],
						[
							-76.68828242249256,
							42.42062848011425,
							0
						],
						[
							-76.68821442239835,
							42.41965247993659,
							0
						],
						[
							-76.6879574223183,
							42.41968347995278,
							0
						],
						[
							-76.68780842227137,
							42.41969447996087,
							0
						],
						[
							-76.68775442225378,
							42.41969047996234,
							0
						],
						[
							-76.68730542211108,
							42.41970647998359,
							0
						],
						[
							-76.68716442206605,
							42.4197084799897,
							0
						],
						[
							-76.6869994220137,
							42.41971547999771,
							0
						],
						[
							-76.68688342197667,
							42.41971748000281,
							0
						],
						[
							-76.68539542150346,
							42.4197664800725,
							0
						],
						[
							-76.68465142126722,
							42.41979548010813,
							0
						],
						[
							-76.68294542072431,
							42.41984648018706,
							0
						],
						[
							-76.68256742060399,
							42.41985748020449,
							0
						],
						[
							-76.68048341994144,
							42.41992848030248,
							0
						],
						[
							-76.67981641972975,
							42.41995648033484,
							0
						],
						[
							-76.67948241962338,
							42.41996548035009,
							0
						],
						[
							-76.67823941922877,
							42.42001548040997,
							0
						],
						[
							-76.67771741906297,
							42.42003548043491,
							0
						],
						[
							-76.67739441896019,
							42.42004548044992,
							0
						],
						[
							-76.67418241793969,
							42.42016448060269,
							0
						],
						[
							-76.67312241760253,
							42.42019848065213,
							0
						],
						[
							-76.67244241738668,
							42.420226480685,
							0
						],
						[
							-76.66905641631081,
							42.42035148084595,
							0
						],
						[
							-76.66884541624349,
							42.42035548085528,
							0
						],
						[
							-76.66863541617603,
							42.42035348086347,
							0
						],
						[
							-76.66778041590365,
							42.42037548090234,
							0
						],
						[
							-76.66735541576855,
							42.4203904809224,
							0
						],
						[
							-76.66714341570085,
							42.42039348093159,
							0
						],
						[
							-76.66622841540989,
							42.42042448097456,
							0
						],
						[
							-76.66598441533267,
							42.4204374809869,
							0
						],
						[
							-76.66481341496021,
							42.42047548104159,
							0
						],
						[
							-76.66466641491347,
							42.4204804810485,
							0
						],
						[
							-76.6642404147776,
							42.42048948106748,
							0
						],
						[
							-76.66292941436055,
							42.42053148112861,
							0
						],
						[
							-76.66055541360525,
							42.42060648123911,
							0
						],
						[
							-76.65963441331171,
							42.42062848128064,
							0
						],
						[
							-76.6585604129698,
							42.42065948133008,
							0
						],
						[
							-76.65805541280936,
							42.42067848135415,
							0
						],
						[
							-76.65739941260045,
							42.42069648138416,
							0
						],
						[
							-76.65707141249634,
							42.42071048140009,
							0
						],
						[
							-76.65677241240118,
							42.42071948141393,
							0
						],
						[
							-76.65573841207222,
							42.42075248146209,
							0
						],
						[
							-76.65548741199203,
							42.42075548147287,
							0
						],
						[
							-76.65385341147179,
							42.42080248154804,
							0
						],
						[
							-76.65302641120896,
							42.42083248158724,
							0
						],
						[
							-76.65214441092819,
							42.42085848162792,
							0
						],
						[
							-76.650981410557,
							42.42087948167912,
							0
						],
						[
							-76.65075641048547,
							42.42088748168975,
							0
						],
						[
							-76.65039641037046,
							42.42089248170532,
							0
						],
						[
							-76.64847040975752,
							42.42095148179458,
							0
						],
						[
							-76.64798540960392,
							42.42097648181893,
							0
						],
						[
							-76.64786640956616,
							42.42098148182471,
							0
						],
						[
							-76.64781940955125,
							42.42098348182697,
							0
						],
						[
							-76.64768140950686,
							42.42098148183222,
							0
						],
						[
							-76.64493640863259,
							42.42105648195773,
							0
						],
						[
							-76.64490340862208,
							42.42105748195925,
							0
						],
						[
							-76.64484440860355,
							42.42106248196257,
							0
						],
						[
							-76.64460340852689,
							42.42107048197386,
							0
						],
						[
							-76.64436440845051,
							42.42107348198415,
							0
						],
						[
							-76.6428284079615,
							42.42111848205493,
							0
						],
						[
							-76.64255740787496,
							42.42112248206669,
							0
						],
						[
							-76.63949040689849,
							42.42121148220787,
							0
						],
						[
							-76.63876840666883,
							42.42123548224166,
							0
						],
						[
							-76.63792840640077,
							42.42125148227879,
							0
						],
						[
							-76.6364844059408,
							42.4212904823447,
							0
						],
						[
							-76.6361834058446,
							42.42129448235769,
							0
						],
						[
							-76.63349540498983,
							42.42138648248398,
							0
						],
						[
							-76.63144940433651,
							42.42142048257345,
							0
						],
						[
							-76.63109440422345,
							42.42143048258971,
							0
						],
						[
							-76.6310064041953,
							42.42143148259349,
							0
						],
						[
							-76.63073240410779,
							42.42143548260537,
							0
						],
						[
							-76.63037740399466,
							42.42144448262145,
							0
						],
						[
							-76.62966140376587,
							42.42145448265242,
							0
						],
						[
							-76.62945240369947,
							42.42146248266239,
							0
						],
						[
							-76.62943040365762,
							42.42099248257636,
							0
						],
						[
							-76.62941040362006,
							42.4205714824993,
							0
						],
						[
							-76.6292984034422,
							42.41865448214933,
							0
						],
						[
							-76.62926840341231,
							42.41838048209987,
							0
						],
						[
							-76.62923440338648,
							42.41817848206389,
							0
						],
						[
							-76.62919140335802,
							42.41798048202901,
							0
						],
						[
							-76.62921340335744,
							42.41787748200907,
							0
						],
						[
							-76.62913240332357,
							42.41777048199256,
							0
						],
						[
							-76.62903740327617,
							42.41754148195409,
							0
						],
						[
							-76.62898240325032,
							42.41743048193577,
							0
						],
						[
							-76.62892340322354,
							42.41732448191856,
							0
						],
						[
							-76.62885740319366,
							42.41720648189943,
							0
						],
						[
							-76.62871440313198,
							42.41699248186566,
							0
						],
						[
							-76.62855240306459,
							42.4167834818336,
							0
						],
						[
							-76.62829540295976,
							42.41648048178799,
							0
						],
						[
							-76.62802640284855,
							42.41614248173642,
							0
						],
						[
							-76.62783440277084,
							42.41592448170388,
							0
						],
						[
							-76.62772840272933,
							42.4158224816893,
							0
						],
						[
							-76.62742540261354,
							42.41557048165505,
							0
						],
						[
							-76.62725840255152,
							42.41545548164054,
							0
						],
						[
							-76.6270734024837,
							42.41534048162681,
							0
						],
						[
							-76.6268354023983,
							42.41521748161372,
							0
						],
						[
							-76.6267774023775,
							42.41518748161052,
							0
						],
						[
							-76.62656540230243,
							42.41509148160138,
							0
						],
						[
							-76.62624540219085,
							42.41496948159182,
							0
						],
						[
							-76.6261104021444,
							42.41492648158935,
							0
						],
						[
							-76.62584240205382,
							42.41486348158859,
							0
						],
						[
							-76.62568740200227,
							42.41483848159026,
							0
						],
						[
							-76.62537240189864,
							42.4148024815964,
							0
						],
						[
							-76.62466140166681,
							42.41474948161551,
							0
						],
						[
							-76.62367340134747,
							42.41471348164897,
							0
						],
						[
							-76.62309340116052,
							42.41469948166994,
							0
						],
						[
							-76.62248840096488,
							42.41467648169027,
							0
						],
						[
							-76.62140640061354,
							42.41461548172295,
							0
						],
						[
							-76.62118040054067,
							42.41460948173103,
							0
						],
						[
							-76.62072840039421,
							42.41458848174552,
							0
						],
						[
							-76.62037140027897,
							42.41457748175798,
							0
						],
						[
							-76.62005040017526,
							42.41456648176899,
							0
						],
						[
							-76.61941639996974,
							42.414535481789,
							0
						],
						[
							-76.61899439983357,
							42.41452348180393,
							0
						],
						[
							-76.61848939967156,
							42.41452148182408,
							0
						],
						[
							-76.61834039962432,
							42.41452848183143,
							0
						],
						[
							-76.61819339957734,
							42.41453048183777,
							0
						],
						[
							-76.61804539953071,
							42.4145414818458,
							0
						],
						[
							-76.61789939948436,
							42.41454748185286,
							0
						],
						[
							-76.61764839940582,
							42.41457348186785,
							0
						],
						[
							-76.61739939932859,
							42.41460848188446,
							0
						],
						[
							-76.6171533992527,
							42.41464848190184,
							0
						],
						[
							-76.61701639921093,
							42.41467748191275,
							0
						],
						[
							-76.61660939908786,
							42.4147774819478,
							0
						],
						[
							-76.61633439900372,
							42.41483148196895,
							0
						],
						[
							-76.6161003989312,
							42.41486548198475,
							0
						],
						[
							-76.61562439878217,
							42.41491348201297,
							0
						],
						[
							-76.61517039863737,
							42.41492348203325,
							0
						],
						[
							-76.61494539856422,
							42.41490948203981,
							0
						],
						[
							-76.6147583985028,
							42.41488948204371,
							0
						],
						[
							-76.61457339844135,
							42.41486048204585,
							0
						],
						[
							-76.61439139838019,
							42.41482248204622,
							0
						],
						[
							-76.6140753982729,
							42.41474148204407,
							0
						],
						[
							-76.61310139794034,
							42.41446648203276,
							0
						],
						[
							-76.61280139783722,
							42.41437248202753,
							0
						],
						[
							-76.61229639766283,
							42.4142034820168,
							0
						],
						[
							-76.61163739743465,
							42.41397448200119,
							0
						],
						[
							-76.61115639726694,
							42.41379148198688,
							0
						],
						[
							-76.61100339721308,
							42.41372648198107,
							0
						],
						[
							-76.61077339713093,
							42.41361248196932,
							0
						],
						[
							-76.61043839701058,
							42.41343748195057,
							0
						],
						[
							-76.61000839685381,
							42.41318148192064,
							0
						],
						[
							-76.60985339679665,
							42.41308048190827,
							0
						],
						[
							-76.60967439672915,
							42.41294348189019,
							0
						],
						[
							-76.60932639659696,
							42.41266448185271,
							0
						],
						[
							-76.60890339643954,
							42.41236948181531,
							0
						],
						[
							-76.60871039636851,
							42.4122454818002,
							0
						],
						[
							-76.60816039616817,
							42.41192048176241,
							0
						],
						[
							-76.60736839587813,
							42.41143148170409,
							0
						],
						[
							-76.60726839584149,
							42.41136948169668,
							0
						],
						[
							-76.60667839562632,
							42.41101748165553,
							0
						],
						[
							-76.60655839558306,
							42.41095248164834,
							0
						],
						[
							-76.60629539548898,
							42.41082048163462,
							0
						],
						[
							-76.60603839539655,
							42.41068448161989,
							0
						],
						[
							-76.60588639534065,
							42.41058748160813,
							0
						],
						[
							-76.605671395261,
							42.41044248159002,
							0
						],
						[
							-76.60544439517545,
							42.41026948156721,
							0
						],
						[
							-76.60514239506,
							42.41001748153286,
							0
						],
						[
							-76.60485239494835,
							42.40976448149783,
							0
						],
						[
							-76.60457539484351,
							42.40954748146893,
							0
						],
						[
							-76.60437639476929,
							42.40940648145091,
							0
						],
						[
							-76.60423339471666,
							42.40931448143969,
							0
						],
						[
							-76.60361239449195,
							42.40896748140069,
							0
						],
						[
							-76.60325739436445,
							42.40878248138089,
							0
						],
						[
							-76.60313439432089,
							42.40872648137553,
							0
						],
						[
							-76.60293239425002,
							42.40864348136837,
							0
						],
						[
							-76.60262139414165,
							42.40852648135934,
							0
						],
						[
							-76.60251439410477,
							42.40849148135719,
							0
						],
						[
							-76.60245239408363,
							42.40847448135657,
							0
						],
						[
							-76.60239239406316,
							42.40845748135585,
							0
						],
						[
							-76.60188439389152,
							42.40833848135447,
							0
						],
						[
							-76.60173339383995,
							42.40829548135265,
							0
						],
						[
							-76.60168539382359,
							42.40828248135217,
							0
						],
						[
							-76.60146139374599,
							42.40820448134685,
							0
						],
						[
							-76.60121039365987,
							42.40812748134278,
							0
						],
						[
							-76.60101339359153,
							42.40805748133782,
							0
						],
						[
							-76.60071339348902,
							42.4079714813341,
							0
						],
						[
							-76.60031239335389,
							42.4078824813339,
							0
						],
						[
							-76.60010839328605,
							42.40784948133607,
							0
						],
						[
							-76.59996239323844,
							42.40783848133997,
							0
						],
						[
							-76.59960339312106,
							42.4078074813488,
							0
						],
						[
							-76.59943239306574,
							42.40780048135444,
							0
						],
						[
							-76.59934039303566,
							42.4077924813567,
							0
						],
						[
							-76.59924639300529,
							42.40778948135996,
							0
						],
						[
							-76.5989983929244,
							42.4077704813665,
							0
						],
						[
							-76.5989243928998,
							42.4077584813673,
							0
						],
						[
							-76.59876739284812,
							42.40774048137033,
							0
						],
						[
							-76.59865639281159,
							42.40772748137244,
							0
						],
						[
							-76.59831639269817,
							42.40766748137512,
							0
						],
						[
							-76.59804939261153,
							42.40765348138337,
							0
						],
						[
							-76.59777839252496,
							42.40765748139511,
							0
						],
						[
							-76.59770239250133,
							42.40766748140004,
							0
						],
						[
							-76.59762339247636,
							42.40767248140417,
							0
						],
						[
							-76.59722139235062,
							42.40771448142827,
							0
						],
						[
							-76.59713539232415,
							42.40772948143454,
							0
						],
						[
							-76.59696439227014,
							42.4077404814435,
							0
						],
						[
							-76.59687639224201,
							42.40774148144728,
							0
						],
						[
							-76.59676239220497,
							42.4077344814506,
							0
						],
						[
							-76.59664739216683,
							42.40771748145212,
							0
						],
						[
							-76.5966003921514,
							42.40771248145309,
							0
						],
						[
							-76.59638839208179,
							42.40769048145763,
							0
						],
						[
							-76.59624239203345,
							42.40766948145967,
							0
						],
						[
							-76.5959893919513,
							42.40765548146734,
							0
						],
						[
							-76.5958833919174,
							42.40765648147183,
							0
						],
						[
							-76.59531939173816,
							42.40767748149859,
							0
						],
						[
							-76.59464739152348,
							42.40768748152772,
							0
						],
						[
							-76.59449239147357,
							42.40768448153346,
							0
						],
						[
							-76.5943533914285,
							42.4076774815378,
							0
						],
						[
							-76.59402839132363,
							42.40766848154933,
							0
						],
						[
							-76.59327239107876,
							42.40763448157371,
							0
						],
						[
							-76.5930503910065,
							42.40761948157994,
							0
						],
						[
							-76.59260239086133,
							42.40759848159424,
							0
						],
						[
							-76.59225639074974,
							42.40758948160662,
							0
						],
						[
							-76.59201239067183,
							42.40759348161725,
							0
						],
						[
							-76.59188939063218,
							42.40759048162168,
							0
						],
						[
							-76.59164639055486,
							42.40759848163303,
							0
						],
						[
							-76.5913363904571,
							42.40762048164968,
							0
						],
						[
							-76.59118239040787,
							42.4076224816563,
							0
						],
						[
							-76.59110139038133,
							42.40761448165809,
							0
						],
						[
							-76.59102539035636,
							42.40760648165971,
							0
						],
						[
							-76.59098939034453,
							42.40760248166043,
							0
						],
						[
							-76.59081139028606,
							42.40758348166414,
							0
						],
						[
							-76.5906513902316,
							42.40754048166266,
							0
						],
						[
							-76.59048139017223,
							42.40747448165736,
							0
						],
						[
							-76.59039839014244,
							42.40743148165276,
							0
						],
						[
							-76.59012539004553,
							42.40730448164032,
							0
						],
						[
							-76.5897033898937,
							42.40708048161601,
							0
						],
						[
							-76.58945038980454,
							42.4069714816061,
							0
						],
						[
							-76.58915638970157,
							42.4068534815962,
							0
						],
						[
							-76.58900738964998,
							42.40680148159262,
							0
						],
						[
							-76.58892738962278,
							42.40678048159198,
							0
						],
						[
							-76.58891038963395,
							42.40700548163429,
							0
						],
						[
							-76.5889083896576,
							42.40733448169526,
							0
						],
						[
							-76.58889438967913,
							42.40768648176097,
							0
						],
						[
							-76.58886838967308,
							42.40771748176776,
							0
						],
						[
							-76.58884938967172,
							42.40778148178039,
							0
						],
						[
							-76.58885938968355,
							42.40789848180163,
							0
						],
						[
							-76.58896438976731,
							42.40857648192281,
							0
						],
						[
							-76.58902038982013,
							42.40904848200789,
							0
						],
						[
							-76.5890393898435,
							42.40928248205041,
							0
						],
						[
							-76.58904038989239,
							42.40993948217195,
							0
						],
						[
							-76.58908539000132,
							42.41121848240677,
							0
						],
						[
							-76.58916939010635,
							42.41227548259894,
							0
						],
						[
							-76.58921239019661,
							42.4133104827887,
							0
						],
						[
							-76.58925339023097,
							42.41359748284013,
							0
						],
						[
							-76.58931239027183,
							42.41389448289267,
							0
						],
						[
							-76.58932939028858,
							42.4140474829203,
							0
						],
						[
							-76.58932239029662,
							42.4141864829463,
							0
						],
						[
							-76.58927139028795,
							42.41429048296762,
							0
						],
						[
							-76.58916539026475,
							42.41443648299894,
							0
						],
						[
							-76.58907039024737,
							42.41461348303553,
							0
						],
						[
							-76.58909039026938,
							42.41482448307374,
							0
						],
						[
							-76.58913639029478,
							42.41496848309854,
							0
						],
						[
							-76.58923239033841,
							42.41514248312682,
							0
						],
						[
							-76.58930839037534,
							42.4153124831552,
							0
						],
						[
							-76.58934839039813,
							42.41544748317855,
							0
						],
						[
							-76.5893693904141,
							42.41557248320082,
							0
						],
						[
							-76.58938039044129,
							42.41589248325957,
							0
						],
						[
							-76.58940039046632,
							42.4161444833054,
							0
						],
						[
							-76.58946239059132,
							42.41756648356594,
							0
						],
						[
							-76.58948439066857,
							42.4185164837408,
							0
						],
						[
							-76.58949939069134,
							42.41875948378514,
							0
						],
						[
							-76.58954339073902,
							42.41921348386735,
							0
						],
						[
							-76.58957339078457,
							42.41969948395605,
							0
						],
						[
							-76.58963639089659,
							42.42094148418322,
							0
						],
						[
							-76.58965839096885,
							42.42182348434548,
							0
						],
						[
							-76.58966839098899,
							42.42205248438744,
							0
						],
						[
							-76.58968439100744,
							42.42223248442006,
							0
						],
						[
							-76.58968639101708,
							42.42235448444257,
							0
						],
						[
							-76.58965939102042,
							42.42251648447365,
							0
						],
						[
							-76.58947139096065,
							42.42252348448254,
							0
						],
						[
							-76.58931439091046,
							42.42252548448929,
							0
						],
						[
							-76.589012390814,
							42.42253048450247,
							0
						],
						[
							-76.5866573900633,
							42.42258948460899,
							0
						],
						[
							-76.58651039001667,
							42.42259648461624,
							0
						],
						[
							-76.58637838997451,
							42.42259848462197,
							0
						],
						[
							-76.58585838980896,
							42.42261448464601,
							0
						],
						[
							-76.58546038968277,
							42.42263348466568,
							0
						],
						[
							-76.58520338960096,
							42.4226414846776,
							0
						],
						[
							-76.58469138943863,
							42.42266648470301,
							0
						],
						[
							-76.58417838927639,
							42.42269648472936,
							0
						],
						[
							-76.58391138919268,
							42.42272248474501,
							0
						],
						[
							-76.58356738908505,
							42.42275848476563,
							0
						],
						[
							-76.58321038897428,
							42.42280848478936,
							0
						],
						[
							-76.58253938876513,
							42.42288948483158,
							0
						],
						[
							-76.58249138875017,
							42.42289548483463,
							0
						],
						[
							-76.58239938872106,
							42.4229004848393,
							0
						],
						[
							-76.58214638864023,
							42.4229044848503,
							0
						],
						[
							-76.58190138856055,
							42.42288948485747,
							0
						],
						[
							-76.58172738850328,
							42.42286948486081,
							0
						],
						[
							-76.58163438847221,
							42.42285248486145,
							0
						],
						[
							-76.58154338844216,
							42.42284048486292,
							0
						],
						[
							-76.58112638830319,
							42.42276948486672,
							0
						],
						[
							-76.58096838825142,
							42.42275448487035,
							0
						],
						[
							-76.58080938819991,
							42.4227474848755,
							0
						],
						[
							-76.58072838817337,
							42.42273948487731,
							0
						],
						[
							-76.58049938809951,
							42.42273348488548,
							0
						],
						[
							-76.58019838800328,
							42.42273748489844,
							0
						],
						[
							-76.57974838786009,
							42.42275248491949,
							0
						],
						[
							-76.578799387557,
							42.42276848496093,
							0
						],
						[
							-76.57836538741843,
							42.42277648498003,
							0
						],
						[
							-76.57811338733784,
							42.42277948499081,
							0
						],
						[
							-76.57626038674725,
							42.42282748507486,
							0
						],
						[
							-76.5759783866572,
							42.42283248508722,
							0
						],
						[
							-76.57541438647753,
							42.42284848511306,
							0
						],
						[
							-76.57511338638129,
							42.42285248512602,
							0
						],
						[
							-76.57480638628354,
							42.42286148514013,
							0
						],
						[
							-76.5745093861886,
							42.42286548515291,
							0
						],
						[
							-76.57324238578492,
							42.4229004852108,
							0
						],
						[
							-76.57167038528381,
							42.42294048528194,
							0
						],
						[
							-76.57116538512308,
							42.4229564853054,
							0
						],
						[
							-76.57066038496197,
							42.4229674853279,
							0
						],
						[
							-76.57056938493307,
							42.42297148533234,
							0
						],
						[
							-76.57031038485077,
							42.42298148534469,
							0
						],
						[
							-76.56996838474147,
							42.4229864853595,
							0
						],
						[
							-76.57000538479264,
							42.42351848545642,
							0
						],
						[
							-76.5700073847952,
							42.42354448546114,
							0
						],
						[
							-76.57011138500812,
							42.42597448590643,
							0
						],
						[
							-76.57015838511528,
							42.42722048613499,
							0
						],
						[
							-76.57022738526709,
							42.42897548645681,
							0
						],
						[
							-76.57023838527026,
							42.42897048645544,
							0
						],
						[
							-76.57026538534788,
							42.4299034866269,
							0
						],
						[
							-76.57035838551808,
							42.43180248697436,
							0
						],
						[
							-76.5704383856468,
							42.43319648722894,
							0
						],
						[
							-76.57053538581401,
							42.43503748756546,
							0
						],
						[
							-76.57065438601884,
							42.43729148797744,
							0
						],
						[
							-76.57067338605184,
							42.43765548804399,
							0
						],
						[
							-76.5707103861143,
							42.43833948816897,
							0
						],
						[
							-76.57093038647339,
							42.44224048888136,
							0
						],
						[
							-76.5709413864929,
							42.44245648892083,
							0
						],
						[
							-76.5709883865775,
							42.44339648909275,
							0
						],
						[
							-76.57120038692948,
							42.44723448979372,
							0
						],
						[
							-76.57121438694462,
							42.44737848981976,
							0
						],
						[
							-76.57150438704072,
							42.44742048981576,
							0
						],
						[
							-76.57184938715662,
							42.44749148981487,
							0
						],
						[
							-76.57271538744888,
							42.44768748981596,
							0
						],
						[
							-76.57329838764592,
							42.44782348981744,
							0
						],
						[
							-76.5755963884249,
							42.44839048982897,
							0
						],
						[
							-76.57595238854573,
							42.44848048983116,
							0
						],
						[
							-76.58095839023974,
							42.449676489849,
							0
						],
						[
							-76.5822993906941,
							42.4500044898552,
							0
						],
						[
							-76.58294439091296,
							42.45016648985893,
							0
						],
						[
							-76.58358939113218,
							42.45033348986361,
							0
						],
						[
							-76.5849693916,
							42.4506744898706,
							0
						],
						[
							-76.58521439168267,
							42.45072948987081,
							0
						],
						[
							-76.58680839222326,
							42.45112648987946,
							0
						],
						[
							-76.58754239247257,
							42.4513144898844,
							0
						],
						[
							-76.58816939268499,
							42.45146748988721,
							0
						],
						[
							-76.58839539276192,
							42.45152748988913,
							0
						],
						[
							-76.58842739277284,
							42.45153648988948,
							0
						],
						[
							-76.58971539320962,
							42.45185648989632,
							0
						],
						[
							-76.59034039341873,
							42.45197348989256,
							0
						],
						[
							-76.59119539370171,
							42.45209248987983,
							0
						],
						[
							-76.5916953938649,
							42.45213048986654,
							0
						],
						[
							-76.59238539408811,
							42.4521564898433,
							0
						],
						[
							-76.59295839427193,
							42.45215748982022,
							0
						],
						[
							-76.59307139430774,
							42.4521514898145,
							0
						],
						[
							-76.59387539456448,
							42.45213648977907,
							0
						],
						[
							-76.59544939506523,
							42.45208248970516,
							0
						],
						[
							-76.59584639519181,
							42.45207248968718,
							0
						],
						[
							-76.5959993952405,
							42.45206748968003,
							0
						],
						[
							-76.59680439549658,
							42.45203948964214,
							0
						],
						[
							-76.59849939603585,
							42.45198148956256,
							0
						],
						[
							-76.59921039626178,
							42.45195348952849,
							0
						],
						[
							-76.6011073968662,
							42.45190048944163,
							0
						],
						[
							-76.60118139688949,
							42.4518944894375,
							0
						],
						[
							-76.60338539759131,
							42.45182748933556,
							0
						],
						[
							-76.60490539807614,
							42.45179248926732,
							0
						],
						[
							-76.60829339915443,
							42.45168248910926,
							0
						],
						[
							-76.61118140007318,
							42.45158348897359,
							0
						],
						[
							-76.61136340013132,
							42.45158048896564,
							0
						],
						[
							-76.61537140140668,
							42.4514474887781,
							0
						],
						[
							-76.61792340221965,
							42.45137548866104,
							0
						],
						[
							-76.6234354039743,
							42.45120348840509,
							0
						],
						[
							-76.62510440450605,
							42.45115748832872,
							0
						],
						[
							-76.62613240483552,
							42.45115548828655,
							0
						],
						[
							-76.62667540500607,
							42.45110748825557,
							0
						],
						[
							-76.62691840508346,
							42.4511004882444,
							0
						],
						[
							-76.62908740577417,
							42.45103648814435,
							0
						],
						[
							-76.63041740619823,
							42.45100448808434,
							0
						],
						[
							-76.63112040642193,
							42.45098148805148,
							0
						],
						[
							-76.63144640652578,
							42.45097248803656,
							0
						],
						[
							-76.6328754069801,
							42.45092048796882,
							0
						],
						[
							-76.63758740848019,
							42.45077648775048,
							0
						],
						[
							-76.63875240885045,
							42.45073248769494,
							0
						],
						[
							-76.63994040922846,
							42.45069348763938,
							0
						],
						[
							-76.64121140963327,
							42.45065748758104,
							0
						],
						[
							-76.6420344098949,
							42.45062748754199,
							0
						],
						[
							-76.64339641032875,
							42.45058948747953,
							0
						],
						[
							-76.64408941054901,
							42.45056348744652,
							0
						],
						[
							-76.64574141107478,
							42.45051148736967,
							0
						],
						[
							-76.6470514114907,
							42.4504564873062,
							0
						],
						[
							-76.64812241183124,
							42.45041848725556,
							0
						],
						[
							-76.64914941215737,
							42.450376487206,
							0
						],
						[
							-76.64950541227083,
							42.45036748718986,
							0
						],
						[
							-76.64962441230817,
							42.45035648718298,
							0
						],
						[
							-76.64978441235932,
							42.45035448717607,
							0
						],
						[
							-76.6502934125219,
							42.45034648715388,
							0
						],
						[
							-76.65234641317488,
							42.45027648705737,
							0
						],
						[
							-76.6527734133103,
							42.45025648703629,
							0
						],
						[
							-76.65362641358152,
							42.45022648699602,
							0
						],
						[
							-76.65405541371756,
							42.45020648697486,
							0
						],
						[
							-76.6543334138061,
							42.45019848696206,
							0
						],
						[
							-76.65516941407151,
							42.45016348692156,
							0
						],
						[
							-76.65747541480594,
							42.45009848681565,
							0
						],
						[
							-76.65795741495951,
							42.45008548679362,
							0
						],
						[
							-76.6591264153318,
							42.45005248673991,
							0
						],
						[
							-76.65934441540149,
							42.45004948673047,
							0
						],
						[
							-76.66158941611538,
							42.44997148662463,
							0
						],
						[
							-76.66213141628825,
							42.44995948660034,
							0
						],
						[
							-76.66295341654981,
							42.44993348656206,
							0
						],
						[
							-76.66323841664023,
							42.44992048654805,
							0
						],
						[
							-76.66352241673066,
							42.44991248653501,
							0
						],
						[
							-76.66463441708356,
							42.44986448648086,
							0
						],
						[
							-76.66489941716793,
							42.44985648646858,
							0
						],
						[
							-76.66569241741924,
							42.44981748642908,
							0
						],
						[
							-76.66595641750328,
							42.44980948641684,
							0
						],
						[
							-76.6667314177488,
							42.44977048637807,
							0
						],
						[
							-76.66699241783189,
							42.44976248636596,
							0
						],
						[
							-76.6675064179948,
							42.44973748634039,
							0
						],
						[
							-76.66830141824742,
							42.44970748630247,
							0
						],
						[
							-76.668694418372,
							42.44968848628295,
							0
						],
						[
							-76.66988141874924,
							42.44964448622646,
							0
						],
						[
							-76.6707064190111,
							42.44960948618638,
							0
						],
						[
							-76.67220841948827,
							42.44955148611449,
							0
						],
						[
							-76.67277041966678,
							42.44952948608751,
							0
						],
						[
							-76.67294841972368,
							42.44952748607989,
							0
						],
						[
							-76.67387142001716,
							42.44949548603637,
							0
						],
						[
							-76.67411042009348,
							42.4494914860259,
							0
						],
						[
							-76.67548842053179,
							42.44944548596124,
							0
						],
						[
							-76.67701942101758,
							42.4493784858865,
							0
						],
						[
							-76.67826842141385,
							42.44932348582542,
							0
						],
						[
							-76.67867342154292,
							42.44931348580707,
							0
						],
						[
							-76.67891142161832,
							42.44930148579515,
							0
						],
						[
							-76.67895842163324,
							42.44929948579286,
							0
						],
						[
							-76.67925242172785,
							42.4493044857818,
							0
						],
						[
							-76.67935942176268,
							42.44931148577875,
							0
						],
						[
							-76.6795704218321,
							42.44933548577458,
							0
						],
						[
							-76.67977742190088,
							42.44936848577223,
							0
						],
						[
							-76.67991542194737,
							42.44939848577216,
							0
						],
						[
							-76.68018542203963,
							42.44947548577538,
							0
						],
						[
							-76.68058342217678,
							42.44960448578298,
							0
						],
						[
							-76.68119742238699,
							42.44978448579121,
							0
						],
						[
							-76.6820094226665,
							42.45004348580597,
							0
						],
						[
							-76.68241042280528,
							42.45018148581513,
							0
						],
						[
							-76.68300842301272,
							42.4503934858299,
							0
						],
						[
							-76.684435423509,
							42.45091648586836,
							0
						],
						[
							-76.68523242378505,
							42.45119348588705,
							0
						],
						[
							-76.68594542403285,
							42.45145248590582,
							0
						],
						[
							-76.68662042426796,
							42.45170448592486,
							0
						],
						[
							-76.68710742443788,
							42.45189048593937,
							0
						],
						[
							-76.68743942455264,
							42.45200248594652,
							0
						],
						[
							-76.68772442465007,
							42.45208448595004,
							0
						],
						[
							-76.6880154247484,
							42.45215248595074,
							0
						],
						[
							-76.68818442480503,
							42.45218548594994,
							0
						],
						[
							-76.68868842497172,
							42.45225448594212,
							0
						],
						[
							-76.68901442507783,
							42.45227648593291,
							0
						],
						[
							-76.68950642523703,
							42.45229648591653,
							0
						],
						[
							-76.6903094254979,
							42.45234348589249,
							0
						],
						[
							-76.6903054254869,
							42.45221248586844,
							0
						],
						[
							-76.69022542538869,
							42.45123648569141,
							0
						],
						[
							-76.69007942517737,
							42.44902348528859,
							0
						],
						[
							-76.68994942499693,
							42.44715648494898,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090017002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>35347896</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>93543</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4338298</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.6299217</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090017002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090017002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1644</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>765</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>8734.88</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.14</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.98</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26371</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26033</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27345</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14443</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14102</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14990</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8462</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8195</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8784</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5980</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5903</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6201</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.8</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.09</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2298</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2765</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>213</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3618</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1242</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1325</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>949</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00021"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.69115742667825,
							42.46455848811385,
							0
						],
						[
							-76.69115642666661,
							42.46440648808583,
							0
						],
						[
							-76.69113542664476,
							42.4642034880492,
							0
						],
						[
							-76.69106342656701,
							42.46346848791641,
							0
						],
						[
							-76.69104142653177,
							42.46308948784733,
							0
						],
						[
							-76.69105442652857,
							42.46299048782849,
							0
						],
						[
							-76.69106042651337,
							42.46276048778579,
							0
						],
						[
							-76.69102442645064,
							42.4620724876602,
							0
						],
						[
							-76.69089542625771,
							42.4600344872891,
							0
						],
						[
							-76.69084242619155,
							42.45937348716918,
							0
						],
						[
							-76.69074542609425,
							42.45848348700879,
							0
						],
						[
							-76.69070642604628,
							42.45800648692227,
							0
						],
						[
							-76.6906624259766,
							42.45725948678611,
							0
						],
						[
							-76.6906354259385,
							42.45686348671406,
							0
						],
						[
							-76.6906264259267,
							42.45674348669226,
							0
						],
						[
							-76.69062642592625,
							42.45673748669116,
							0
						],
						[
							-76.69053042582232,
							42.45575348651333,
							0
						],
						[
							-76.69049442577663,
							42.45529448643001,
							0
						],
						[
							-76.6903094254979,
							42.45234348589249,
							0
						],
						[
							-76.68950642523703,
							42.45229648591653,
							0
						],
						[
							-76.68901442507783,
							42.45227648593291,
							0
						],
						[
							-76.68868842497172,
							42.45225448594212,
							0
						],
						[
							-76.68818442480503,
							42.45218548594994,
							0
						],
						[
							-76.6880154247484,
							42.45215248595074,
							0
						],
						[
							-76.68772442465007,
							42.45208448595004,
							0
						],
						[
							-76.68743942455264,
							42.45200248594652,
							0
						],
						[
							-76.68710742443788,
							42.45189048593937,
							0
						],
						[
							-76.68662042426796,
							42.45170448592486,
							0
						],
						[
							-76.68594542403285,
							42.45145248590582,
							0
						],
						[
							-76.68523242378505,
							42.45119348588705,
							0
						],
						[
							-76.684435423509,
							42.45091648586836,
							0
						],
						[
							-76.68300842301272,
							42.4503934858299,
							0
						],
						[
							-76.68241042280528,
							42.45018148581513,
							0
						],
						[
							-76.6820094226665,
							42.45004348580597,
							0
						],
						[
							-76.68119742238699,
							42.44978448579121,
							0
						],
						[
							-76.68058342217678,
							42.44960448578298,
							0
						],
						[
							-76.68018542203963,
							42.44947548577538,
							0
						],
						[
							-76.67991542194737,
							42.44939848577216,
							0
						],
						[
							-76.67977742190088,
							42.44936848577223,
							0
						],
						[
							-76.6795704218321,
							42.44933548577458,
							0
						],
						[
							-76.67935942176268,
							42.44931148577875,
							0
						],
						[
							-76.67925242172785,
							42.4493044857818,
							0
						],
						[
							-76.67895842163324,
							42.44929948579286,
							0
						],
						[
							-76.67891142161832,
							42.44930148579515,
							0
						],
						[
							-76.67867342154292,
							42.44931348580707,
							0
						],
						[
							-76.67826842141385,
							42.44932348582542,
							0
						],
						[
							-76.67701942101758,
							42.4493784858865,
							0
						],
						[
							-76.67548842053179,
							42.44944548596124,
							0
						],
						[
							-76.67411042009348,
							42.4494914860259,
							0
						],
						[
							-76.67387142001716,
							42.44949548603637,
							0
						],
						[
							-76.67294841972368,
							42.44952748607989,
							0
						],
						[
							-76.67277041966678,
							42.44952948608751,
							0
						],
						[
							-76.67220841948827,
							42.44955148611449,
							0
						],
						[
							-76.6707064190111,
							42.44960948618638,
							0
						],
						[
							-76.66988141874924,
							42.44964448622646,
							0
						],
						[
							-76.668694418372,
							42.44968848628295,
							0
						],
						[
							-76.66830141824742,
							42.44970748630247,
							0
						],
						[
							-76.6675064179948,
							42.44973748634039,
							0
						],
						[
							-76.66699241783189,
							42.44976248636596,
							0
						],
						[
							-76.6667314177488,
							42.44977048637807,
							0
						],
						[
							-76.66595641750328,
							42.44980948641684,
							0
						],
						[
							-76.66569241741924,
							42.44981748642908,
							0
						],
						[
							-76.66489941716793,
							42.44985648646858,
							0
						],
						[
							-76.66463441708356,
							42.44986448648086,
							0
						],
						[
							-76.66352241673066,
							42.44991248653501,
							0
						],
						[
							-76.66323841664023,
							42.44992048654805,
							0
						],
						[
							-76.66295341654981,
							42.44993348656206,
							0
						],
						[
							-76.66213141628825,
							42.44995948660034,
							0
						],
						[
							-76.66158941611538,
							42.44997148662463,
							0
						],
						[
							-76.65934441540149,
							42.45004948673047,
							0
						],
						[
							-76.6591264153318,
							42.45005248673991,
							0
						],
						[
							-76.65795741495951,
							42.45008548679362,
							0
						],
						[
							-76.65747541480594,
							42.45009848681565,
							0
						],
						[
							-76.65516941407151,
							42.45016348692156,
							0
						],
						[
							-76.6543334138061,
							42.45019848696206,
							0
						],
						[
							-76.65405541371756,
							42.45020648697486,
							0
						],
						[
							-76.65362641358152,
							42.45022648699602,
							0
						],
						[
							-76.6527734133103,
							42.45025648703629,
							0
						],
						[
							-76.65234641317488,
							42.45027648705737,
							0
						],
						[
							-76.6502934125219,
							42.45034648715388,
							0
						],
						[
							-76.64978441235932,
							42.45035448717607,
							0
						],
						[
							-76.64962441230817,
							42.45035648718298,
							0
						],
						[
							-76.64950541227083,
							42.45036748718986,
							0
						],
						[
							-76.64914941215737,
							42.450376487206,
							0
						],
						[
							-76.64812241183124,
							42.45041848725556,
							0
						],
						[
							-76.6470514114907,
							42.4504564873062,
							0
						],
						[
							-76.64574141107478,
							42.45051148736967,
							0
						],
						[
							-76.64408941054901,
							42.45056348744652,
							0
						],
						[
							-76.64339641032875,
							42.45058948747953,
							0
						],
						[
							-76.6420344098949,
							42.45062748754199,
							0
						],
						[
							-76.64121140963327,
							42.45065748758104,
							0
						],
						[
							-76.63994040922846,
							42.45069348763938,
							0
						],
						[
							-76.63875240885045,
							42.45073248769494,
							0
						],
						[
							-76.63758740848019,
							42.45077648775048,
							0
						],
						[
							-76.6328754069801,
							42.45092048796882,
							0
						],
						[
							-76.63144640652578,
							42.45097248803656,
							0
						],
						[
							-76.63112040642193,
							42.45098148805148,
							0
						],
						[
							-76.63041740619823,
							42.45100448808434,
							0
						],
						[
							-76.62908740577417,
							42.45103648814435,
							0
						],
						[
							-76.62691840508346,
							42.4511004882444,
							0
						],
						[
							-76.62667540500607,
							42.45110748825557,
							0
						],
						[
							-76.62613240483552,
							42.45115548828655,
							0
						],
						[
							-76.62510440450605,
							42.45115748832872,
							0
						],
						[
							-76.6234354039743,
							42.45120348840509,
							0
						],
						[
							-76.61792340221965,
							42.45137548866104,
							0
						],
						[
							-76.61537140140668,
							42.4514474887781,
							0
						],
						[
							-76.61136340013132,
							42.45158048896564,
							0
						],
						[
							-76.61118140007318,
							42.45158348897359,
							0
						],
						[
							-76.60829339915443,
							42.45168248910926,
							0
						],
						[
							-76.60490539807614,
							42.45179248926732,
							0
						],
						[
							-76.60338539759131,
							42.45182748933556,
							0
						],
						[
							-76.60118139688949,
							42.4518944894375,
							0
						],
						[
							-76.6011073968662,
							42.45190048944163,
							0
						],
						[
							-76.59921039626178,
							42.45195348952849,
							0
						],
						[
							-76.59849939603585,
							42.45198148956256,
							0
						],
						[
							-76.59680439549658,
							42.45203948964214,
							0
						],
						[
							-76.5959993952405,
							42.45206748968003,
							0
						],
						[
							-76.59584639519181,
							42.45207248968718,
							0
						],
						[
							-76.59544939506523,
							42.45208248970516,
							0
						],
						[
							-76.59387539456448,
							42.45213648977907,
							0
						],
						[
							-76.59307139430774,
							42.4521514898145,
							0
						],
						[
							-76.59295839427193,
							42.45215748982022,
							0
						],
						[
							-76.59238539408811,
							42.4521564898433,
							0
						],
						[
							-76.5916953938649,
							42.45213048986654,
							0
						],
						[
							-76.59119539370171,
							42.45209248987983,
							0
						],
						[
							-76.59034039341873,
							42.45197348989256,
							0
						],
						[
							-76.58971539320962,
							42.45185648989632,
							0
						],
						[
							-76.58842739277284,
							42.45153648988948,
							0
						],
						[
							-76.58839539276192,
							42.45152748988913,
							0
						],
						[
							-76.58816939268499,
							42.45146748988721,
							0
						],
						[
							-76.58754239247257,
							42.4513144898844,
							0
						],
						[
							-76.58680839222326,
							42.45112648987946,
							0
						],
						[
							-76.58521439168267,
							42.45072948987081,
							0
						],
						[
							-76.5849693916,
							42.4506744898706,
							0
						],
						[
							-76.58358939113218,
							42.45033348986361,
							0
						],
						[
							-76.58294439091296,
							42.45016648985893,
							0
						],
						[
							-76.5822993906941,
							42.4500044898552,
							0
						],
						[
							-76.58095839023974,
							42.449676489849,
							0
						],
						[
							-76.57595238854573,
							42.44848048983116,
							0
						],
						[
							-76.5755963884249,
							42.44839048982897,
							0
						],
						[
							-76.57329838764592,
							42.44782348981744,
							0
						],
						[
							-76.57271538744888,
							42.44768748981596,
							0
						],
						[
							-76.57184938715662,
							42.44749148981487,
							0
						],
						[
							-76.57150438704072,
							42.44742048981576,
							0
						],
						[
							-76.57121438694462,
							42.44737848981976,
							0
						],
						[
							-76.57131938710445,
							42.4490834901307,
							0
						],
						[
							-76.5714223872744,
							42.45093349046849,
							0
						],
						[
							-76.571538387456,
							42.45288449082441,
							0
						],
						[
							-76.5716093875668,
							42.45407349104131,
							0
						],
						[
							-76.57164838763238,
							42.45479049117225,
							0
						],
						[
							-76.57188938804069,
							42.45926149198879,
							0
						],
						[
							-76.57201438826239,
							42.46171349243686,
							0
						],
						[
							-76.572172388504,
							42.46429149290682,
							0
						],
						[
							-76.5722163885705,
							42.46499849303569,
							0
						],
						[
							-76.57223938860481,
							42.46536249310201,
							0
						],
						[
							-76.57228338867256,
							42.46608649323401,
							0
						],
						[
							-76.57231338874085,
							42.46687849337912,
							0
						],
						[
							-76.5724243889345,
							42.46901149376874,
							0
						],
						[
							-76.57260238920834,
							42.47193649430191,
							0
						],
						[
							-76.57267338932203,
							42.4731634945257,
							0
						],
						[
							-76.5727323894173,
							42.47419349471358,
							0
						],
						[
							-76.57282038955768,
							42.4757064949895,
							0
						],
						[
							-76.57303538992316,
							42.47970649571963,
							0
						],
						[
							-76.57321439017338,
							42.48230649619258,
							0
						],
						[
							-76.5732253901933,
							42.48252749623293,
							0
						],
						[
							-76.57334639035373,
							42.48416749653092,
							0
						],
						[
							-76.57334939035809,
							42.48421349653928,
							0
						],
						[
							-76.5733493903621,
							42.48426749654926,
							0
						],
						[
							-76.57340239047501,
							42.48556049678589,
							0
						],
						[
							-76.57341939051138,
							42.48597749686222,
							0
						],
						[
							-76.57342939052526,
							42.4861214968884,
							0
						],
						[
							-76.57360339058532,
							42.48617849689186,
							0
						],
						[
							-76.57685639169684,
							42.48709349692865,
							0
						],
						[
							-76.57757339194178,
							42.48729449693663,
							0
						],
						[
							-76.5782533921741,
							42.48748549694427,
							0
						],
						[
							-76.57932539254044,
							42.48778749695646,
							0
						],
						[
							-76.58335939392269,
							42.48897449701169,
							0
						],
						[
							-76.58367439403146,
							42.48907849701809,
							0
						],
						[
							-76.58446439430749,
							42.48938249704211,
							0
						],
						[
							-76.58524539458696,
							42.48977249708236,
							0
						],
						[
							-76.5866473950928,
							42.49052749716478,
							0
						],
						[
							-76.58991239627255,
							42.49230949736104,
							0
						],
						[
							-76.59042139645648,
							42.49258749739166,
							0
						],
						[
							-76.59378739768299,
							42.49456249761941,
							0
						],
						[
							-76.59605839850313,
							42.49579549775465,
							0
						],
						[
							-76.59624239856238,
							42.49579849774773,
							0
						],
						[
							-76.59640539861482,
							42.49580049774147,
							0
						],
						[
							-76.59893939942344,
							42.49574249762767,
							0
						],
						[
							-76.59900739944482,
							42.4957364976238,
							0
						],
						[
							-76.60227140048458,
							42.49563749747276,
							0
						],
						[
							-76.60455240121092,
							42.49556449736645,
							0
						],
						[
							-76.60679040192262,
							42.49548049725989,
							0
						],
						[
							-76.60854040247911,
							42.4954144971765,
							0
						],
						[
							-76.61242740371597,
							42.49527949699338,
							0
						],
						[
							-76.61379840415226,
							42.49523249692891,
							0
						],
						[
							-76.61392140419122,
							42.4952254969226,
							0
						],
						[
							-76.61414740426281,
							42.49521349691118,
							0
						],
						[
							-76.61447540436721,
							42.4952024968958,
							0
						],
						[
							-76.61736640528716,
							42.49510249675968,
							0
						],
						[
							-76.61758840535776,
							42.49509449674915,
							0
						],
						[
							-76.61808040551433,
							42.49507749672598,
							0
						],
						[
							-76.61850240564858,
							42.49506249670604,
							0
						],
						[
							-76.62002040613261,
							42.49502349663705,
							0
						],
						[
							-76.62618440809823,
							42.49486749635727,
							0
						],
						[
							-76.62699540835686,
							42.49484749632058,
							0
						],
						[
							-76.63178940987977,
							42.49464849608859,
							0
						],
						[
							-76.6336964104877,
							42.49459849600169,
							0
						],
						[
							-76.63384641053501,
							42.49458749599356,
							0
						],
						[
							-76.63485241085544,
							42.49455749594704,
							0
						],
						[
							-76.63731141163873,
							42.49448449583339,
							0
						],
						[
							-76.64395741375083,
							42.49422249551427,
							0
						],
						[
							-76.65115941604154,
							42.49396549517334,
							0
						],
						[
							-76.65293541660621,
							42.49389949508878,
							0
						],
						[
							-76.65305641664487,
							42.49389749508347,
							0
						],
						[
							-76.65750541805853,
							42.49372049486944,
							0
						],
						[
							-76.65887441849378,
							42.49366949480422,
							0
						],
						[
							-76.66367942002282,
							42.49350949457878,
							0
						],
						[
							-76.66781242133438,
							42.49332349437592,
							0
						],
						[
							-76.6739544232853,
							42.49307249407908,
							0
						],
						[
							-76.67548742377227,
							42.49301049400511,
							0
						],
						[
							-76.68626642719632,
							42.4925764934852,
							0
						],
						[
							-76.68840142787315,
							42.49247249337889,
							0
						],
						[
							-76.69039642850667,
							42.49238949328214,
							0
						],
						[
							-76.69168242891155,
							42.4922894932112,
							0
						],
						[
							-76.6926874292265,
							42.4921914931521,
							0
						],
						[
							-76.69271242923428,
							42.49218849315052,
							0
						],
						[
							-76.69329442941665,
							42.49213149311625,
							0
						],
						[
							-76.69315642922514,
							42.49015549275725,
							0
						],
						[
							-76.69259642855796,
							42.48361049157228,
							0
						],
						[
							-76.69255342853297,
							42.48346049154635,
							0
						],
						[
							-76.69253942852136,
							42.48336449152922,
							0
						],
						[
							-76.69253642851882,
							42.48334349152545,
							0
						],
						[
							-76.69252642850637,
							42.48321949150298,
							0
						],
						[
							-76.69234742828132,
							42.48096849109481,
							0
						],
						[
							-76.69223942813029,
							42.47940549081073,
							0
						],
						[
							-76.69221842810018,
							42.47909149075364,
							0
						],
						[
							-76.69219642806974,
							42.47877749069658,
							0
						],
						[
							-76.69213642798623,
							42.47791449053973,
							0
						],
						[
							-76.6921224279673,
							42.47772049050449,
							0
						],
						[
							-76.69211142795307,
							42.47757649047834,
							0
						],
						[
							-76.69187842764076,
							42.4743854898988,
							0
						],
						[
							-76.69174742745868,
							42.47250348955672,
							0
						],
						[
							-76.69152142716827,
							42.46957548902535,
							0
						],
						[
							-76.69146342708775,
							42.4687434888741,
							0
						],
						[
							-76.69146042704222,
							42.46814448876364,
							0
						],
						[
							-76.69145142702459,
							42.46794648872746,
							0
						],
						[
							-76.6914144269907,
							42.46765048867431,
							0
						],
						[
							-76.69138242696602,
							42.4674564886398,
							0
						],
						[
							-76.69136742695808,
							42.46741448863263,
							0
						],
						[
							-76.69129342685666,
							42.46637048844288,
							0
						],
						[
							-76.69127542683118,
							42.46610548839469,
							0
						],
						[
							-76.69115742667825,
							42.46455848811385,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090017001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>46321342</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>205666</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4715810</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.6366604</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090017001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090017001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1697</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>755</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>11447.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>70</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.04</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.73</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.92</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26448</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26109</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27421</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14552</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14208</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15095</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8554</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8287</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8876</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5997</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5921</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6218</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.07</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2087</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2870</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>185</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3151</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1222</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1298</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>886</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>82</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00022"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.34345632451151,
							42.59205452575242,
							0
						],
						[
							-76.34344632449859,
							42.59192352572867,
							0
						],
						[
							-76.34336832431072,
							42.58972252532598,
							0
						],
						[
							-76.3433373242424,
							42.58893352518173,
							0
						],
						[
							-76.34325032405143,
							42.5867295247788,
							0
						],
						[
							-76.34320432392302,
							42.58519352449741,
							0
						],
						[
							-76.34319532389729,
							42.58488452444078,
							0
						],
						[
							-76.34315432379545,
							42.58368552422131,
							0
						],
						[
							-76.34312132371372,
							42.58272352404521,
							0
						],
						[
							-76.34306332353137,
							42.58050952363922,
							0
						],
						[
							-76.34305732352509,
							42.58045052362856,
							0
						],
						[
							-76.34302432343219,
							42.57933752342461,
							0
						],
						[
							-76.3429593232464,
							42.57710652301571,
							0
						],
						[
							-76.34291832316804,
							42.57622452285467,
							0
						],
						[
							-76.3427823228081,
							42.57194552207078,
							0
						],
						[
							-76.34277932279966,
							42.57184452205227,
							0
						],
						[
							-76.34270432263592,
							42.56995452170661,
							0
						],
						[
							-76.34267732253814,
							42.56874852148518,
							0
						],
						[
							-76.3426233224107,
							42.56725852121245,
							0
						],
						[
							-76.34254832225328,
							42.56545352088241,
							0
						],
						[
							-76.3425103221556,
							42.56429652067046,
							0
						],
						[
							-76.34247832207257,
							42.56331152048998,
							0
						],
						[
							-76.3366653202107,
							42.56340152074116,
							0
						],
						[
							-76.33434131946667,
							42.56344252084249,
							0
						],
						[
							-76.33169031861843,
							42.56349552095921,
							0
						],
						[
							-76.32882431770186,
							42.56355952108665,
							0
						],
						[
							-76.32326731592461,
							42.56368352133362,
							0
						],
						[
							-76.32327831594012,
							42.56384552136309,
							0
						],
						[
							-76.32331831608248,
							42.56560052168535,
							0
						],
						[
							-76.32341331634467,
							42.56873852226058,
							0
						],
						[
							-76.32348931651757,
							42.5707495226286,
							0
						],
						[
							-76.32353131668664,
							42.57285652301567,
							0
						],
						[
							-76.32354031670917,
							42.57312252306436,
							0
						],
						[
							-76.3235883167977,
							42.57411252324508,
							0
						],
						[
							-76.32116131602244,
							42.57418052335554,
							0
						],
						[
							-76.320281315741,
							42.57420052339472,
							0
						],
						[
							-76.31726331477691,
							42.57428452353194,
							0
						],
						[
							-76.31429031382554,
							42.57434552366308,
							0
						],
						[
							-76.31286431336949,
							42.57437852372667,
							0
						],
						[
							-76.31206731311464,
							42.57439752376232,
							0
						],
						[
							-76.30905531215079,
							42.57445952389518,
							0
						],
						[
							-76.30711431153034,
							42.57450852398248,
							0
						],
						[
							-76.30612631121252,
							42.57450652402195,
							0
						],
						[
							-76.30552231101552,
							42.57446852403928,
							0
						],
						[
							-76.30316131023741,
							42.57421152408703,
							0
						],
						[
							-76.30292331015875,
							42.57418252409128,
							0
						],
						[
							-76.29999730919484,
							42.57386952415145,
							0
						],
						[
							-76.29850330870407,
							42.57372852418564,
							0
						],
						[
							-76.29714230825826,
							42.57361752422001,
							0
						],
						[
							-76.29698530820725,
							42.57361052422505,
							0
						],
						[
							-76.29680930815053,
							42.57360852423177,
							0
						],
						[
							-76.29624630796684,
							42.57357252424782,
							0
						],
						[
							-76.2961933079495,
							42.57356852424922,
							0
						],
						[
							-76.29611530792404,
							42.57356352425141,
							0
						],
						[
							-76.29602830789564,
							42.57355752425382,
							0
						],
						[
							-76.29591230785782,
							42.57355052425721,
							0
						],
						[
							-76.29433930735107,
							42.57353752431819,
							0
						],
						[
							-76.29398130723692,
							42.57355052433502,
							0
						],
						[
							-76.29163930648805,
							42.57360752443989,
							0
						],
						[
							-76.28890830561387,
							42.57366152455988,
							0
						],
						[
							-76.28877630557187,
							42.5736675245663,
							0
						],
						[
							-76.2886153055209,
							42.57367852457482,
							0
						],
						[
							-76.28607330470822,
							42.57374252468903,
							0
						],
						[
							-76.2833223038259,
							42.57377352480554,
							0
						],
						[
							-76.28184130335356,
							42.57382652487498,
							0
						],
						[
							-76.28125530316726,
							42.57385552490393,
							0
						],
						[
							-76.27971030267501,
							42.57391752497759,
							0
						],
						[
							-76.27941430258106,
							42.57393452499264,
							0
						],
						[
							-76.27933930255703,
							42.57393552499585,
							0
						],
						[
							-76.27367630075615,
							42.57420952527443,
							0
						],
						[
							-76.27350230070063,
							42.57421552528258,
							0
						],
						[
							-76.27236730033856,
							42.57425552533563,
							0
						],
						[
							-76.26944429940329,
							42.57431952546512,
							0
						],
						[
							-76.26367329755276,
							42.57439252571088,
							0
						],
						[
							-76.26314729738432,
							42.57440252573388,
							0
						],
						[
							-76.2628242972817,
							42.57441952575002,
							0
						],
						[
							-76.26285029732423,
							42.5748835258346,
							0
						],
						[
							-76.26285329732977,
							42.57494552584595,
							0
						],
						[
							-76.26319729789192,
							42.58107252696278,
							0
						],
						[
							-76.26321029791333,
							42.58130652700542,
							0
						],
						[
							-76.26354529845986,
							42.58725852809015,
							0
						],
						[
							-76.26358329852346,
							42.58795552821721,
							0
						],
						[
							-76.26358529852529,
							42.58797152822007,
							0
						],
						[
							-76.26358529852692,
							42.58799352822413,
							0
						],
						[
							-76.26458230015709,
							42.6057435314579,
							0
						],
						[
							-76.2646993003493,
							42.60783753183932,
							0
						],
						[
							-76.26519230115424,
							42.61659053343323,
							0
						],
						[
							-76.26521330118914,
							42.61697153350263,
							0
						],
						[
							-76.26523130121826,
							42.61728753356015,
							0
						],
						[
							-76.26558630179859,
							42.62359653470875,
							0
						],
						[
							-76.27286330412687,
							42.62342153438321,
							0
						],
						[
							-76.27667530534656,
							42.62333053421276,
							0
						],
						[
							-76.27672130536047,
							42.62331853420867,
							0
						],
						[
							-76.27679330538253,
							42.62330353420302,
							0
						],
						[
							-76.27683830539627,
							42.62329353419936,
							0
						],
						[
							-76.27696130543457,
							42.62327653419128,
							0
						],
						[
							-76.27717830550283,
							42.62325553417865,
							0
						],
						[
							-76.27851430592894,
							42.62320553411557,
							0
						],
						[
							-76.27881830602622,
							42.62319853410203,
							0
						],
						[
							-76.27896630607363,
							42.62319553409551,
							0
						],
						[
							-76.27929930618083,
							42.62319653408226,
							0
						],
						[
							-76.27950630624787,
							42.62320253407503,
							0
						],
						[
							-76.27952630625437,
							42.62320353407441,
							0
						],
						[
							-76.28344130750446,
							42.62307653389312,
							0
						],
						[
							-76.29547731135521,
							42.62279053335493,
							0
						],
						[
							-76.29548931135908,
							42.62279053335445,
							0
						],
						[
							-76.30548831455656,
							42.62253453290379,
							0
						],
						[
							-76.31403231728994,
							42.62233353252184,
							0
						],
						[
							-76.31406431730015,
							42.62233253252036,
							0
						],
						[
							-76.31558331778615,
							42.62229753245259,
							0
						],
						[
							-76.31601231792348,
							42.62228853243361,
							0
						],
						[
							-76.31603031792926,
							42.62228853243288,
							0
						],
						[
							-76.31603831793176,
							42.62228753243237,
							0
						],
						[
							-76.31605031793562,
							42.62228753243188,
							0
						],
						[
							-76.31828731865176,
							42.62224153233309,
							0
						],
						[
							-76.31891131885148,
							42.62222853230549,
							0
						],
						[
							-76.31892131885469,
							42.62222853230509,
							0
						],
						[
							-76.32000831920261,
							42.62220553225696,
							0
						],
						[
							-76.32088031948174,
							42.62218753221843,
							0
						],
						[
							-76.3228883201233,
							42.62212953212665,
							0
						],
						[
							-76.32319132022009,
							42.62212053211275,
							0
						],
						[
							-76.32393432045728,
							42.62209653207832,
							0
						],
						[
							-76.32394232045985,
							42.62209653207801,
							0
						],
						[
							-76.32515232084614,
							42.62205753202193,
							0
						],
						[
							-76.33203332304637,
							42.62188353171192,
							0
						],
						[
							-76.33204032304862,
							42.62188353171164,
							0
						],
						[
							-76.33205532305337,
							42.62188253171085,
							0
						],
						[
							-76.33206232305562,
							42.62188253171056,
							0
						],
						[
							-76.34440232700116,
							42.6215705311544,
							0
						],
						[
							-76.3444103270038,
							42.62157153115427,
							0
						],
						[
							-76.34464532708115,
							42.62159553114918,
							0
						],
						[
							-76.34481132713483,
							42.62159953114321,
							0
						],
						[
							-76.3448193271374,
							42.62159953114288,
							0
						],
						[
							-76.34482632713966,
							42.62159953114261,
							0
						],
						[
							-76.34508332722267,
							42.62160453113314,
							0
						],
						[
							-76.3479583281431,
							42.62154853100661,
							0
						],
						[
							-76.3484143282891,
							42.62153953098651,
							0
						],
						[
							-76.34860632835053,
							42.62153553097802,
							0
						],
						[
							-76.34921632854581,
							42.62152353095115,
							0
						],
						[
							-76.35021832886657,
							42.62150353090695,
							0
						],
						[
							-76.35090332908588,
							42.62149053087687,
							0
						],
						[
							-76.35101332912089,
							42.62148553087149,
							0
						],
						[
							-76.35102032912314,
							42.62148553087122,
							0
						],
						[
							-76.35102832912563,
							42.6214845308707,
							0
						],
						[
							-76.3510403291295,
							42.62148453087022,
							0
						],
						[
							-76.35106532913747,
							42.62148353086903,
							0
						],
						[
							-76.35150032927608,
							42.6214665308483,
							0
						],
						[
							-76.35150832927866,
							42.62146653084798,
							0
						],
						[
							-76.35169432933789,
							42.62145853083899,
							0
						],
						[
							-76.35189432940109,
							42.62144353082813,
							0
						],
						[
							-76.35197032942524,
							42.62143953082433,
							0
						],
						[
							-76.35197732942748,
							42.62143953082404,
							0
						],
						[
							-76.35199432943287,
							42.62143853082316,
							0
						],
						[
							-76.35462333026823,
							42.62130253069181,
							0
						],
						[
							-76.3549493303724,
							42.62129353067699,
							0
						],
						[
							-76.35496333037692,
							42.62129353067643,
							0
						],
						[
							-76.35531333048894,
							42.62128653066097,
							0
						],
						[
							-76.35629933080453,
							42.62126653061741,
							0
						],
						[
							-76.35639333083691,
							42.62129553061895,
							0
						],
						[
							-76.35648133086646,
							42.62131253061854,
							0
						],
						[
							-76.35662633091398,
							42.62132453061489,
							0
						],
						[
							-76.35693433101295,
							42.62132353060225,
							0
						],
						[
							-76.35706333105436,
							42.62132253059684,
							0
						],
						[
							-76.35773833127121,
							42.62131953056898,
							0
						],
						[
							-76.3581273313957,
							42.6213115305518,
							0
						],
						[
							-76.35865933156589,
							42.62129953052806,
							0
						],
						[
							-76.35941833180797,
							42.62127253049241,
							0
						],
						[
							-76.36268433285167,
							42.62118453034409,
							0
						],
						[
							-76.36445233341597,
							42.62112753026207,
							0
						],
						[
							-76.36492033356573,
							42.6211175302413,
							0
						],
						[
							-76.36539033371612,
							42.62110753022044,
							0
						],
						[
							-76.36972233509859,
							42.62096553001903,
							0
						],
						[
							-76.37101933551295,
							42.62092952995993,
							0
						],
						[
							-76.37102733551552,
							42.62092952995959,
							0
						],
						[
							-76.37282033608835,
							42.62087952987784,
							0
						],
						[
							-76.37287033610369,
							42.62086952987397,
							0
						],
						[
							-76.37291933611827,
							42.62085352986903,
							0
						],
						[
							-76.37297433613459,
							42.62083552986351,
							0
						],
						[
							-76.37310333617305,
							42.62079452985073,
							0
						],
						[
							-76.3731993362045,
							42.62080252984832,
							0
						],
						[
							-76.37466033668163,
							42.62090152980743,
							0
						],
						[
							-76.37692533740434,
							42.62082652970196,
							0
						],
						[
							-76.38497833997542,
							42.62058052933071,
							0
						],
						[
							-76.38534534009258,
							42.62056952931381,
							0
						],
						[
							-76.38559534017193,
							42.62055552930112,
							0
						],
						[
							-76.38565634019184,
							42.62055952929939,
							0
						],
						[
							-76.38571134020938,
							42.62055752929679,
							0
						],
						[
							-76.38657234048405,
							42.62052852925659,
							0
						],
						[
							-76.3865353404692,
							42.62048852925072,
							0
						],
						[
							-76.38413333951358,
							42.61801852889297,
							0
						],
						[
							-76.38408933949604,
							42.61797252888626,
							0
						],
						[
							-76.38404733947941,
							42.61793052888024,
							0
						],
						[
							-76.38392133942925,
							42.61780052886138,
							0
						],
						[
							-76.3835223392669,
							42.61734152879297,
							0
						],
						[
							-76.38334433919024,
							42.61707952875191,
							0
						],
						[
							-76.38322133913734,
							42.61689952872373,
							0
						],
						[
							-76.38177533847997,
							42.61430552830437,
							0
						],
						[
							-76.38150433835865,
							42.61384452823041,
							0
						],
						[
							-76.38108133817992,
							42.61326852814138,
							0
						],
						[
							-76.37889133728017,
							42.61063052774397,
							0
						],
						[
							-76.37884933726228,
							42.61057152773478,
							0
						],
						[
							-76.3771243365453,
							42.60838152740104,
							0
						],
						[
							-76.37582833600267,
							42.60668252714038,
							0
						],
						[
							-76.37573133596287,
							42.60656652712294,
							0
						],
						[
							-76.37554133588422,
							42.60632952708696,
							0
						],
						[
							-76.37468633553738,
							42.60535852694259,
							0
						],
						[
							-76.37342433503187,
							42.60401252674556,
							0
						],
						[
							-76.37333733499709,
							42.60392052673214,
							0
						],
						[
							-76.37268233473775,
							42.60326252663735,
							0
						],
						[
							-76.37249733466433,
							42.60307452661019,
							0
						],
						[
							-76.3717983343919,
							42.60243052651977,
							0
						],
						[
							-76.37146033425417,
							42.6020385264612,
							0
						],
						[
							-76.37119733414042,
							42.60164452639921,
							0
						],
						[
							-76.37098133403882,
							42.60121052632796,
							0
						],
						[
							-76.3709283340088,
							42.60103552629784,
							0
						],
						[
							-76.37065033385298,
							42.60013852614375,
							0
						],
						[
							-76.37057933381185,
							42.5998915261011,
							0
						],
						[
							-76.37055533379784,
							42.5998065260864,
							0
						],
						[
							-76.37033833368487,
							42.59922352598772,
							0
						],
						[
							-76.3698953334668,
							42.59820252581743,
							0
						],
						[
							-76.36976333339618,
							42.59782152575252,
							0
						],
						[
							-76.3697383333808,
							42.5977225257353,
							0
						],
						[
							-76.36972433337097,
							42.59765052572259,
							0
						],
						[
							-76.3697033333562,
							42.59754252570353,
							0
						],
						[
							-76.36967733332497,
							42.59723352564762,
							0
						],
						[
							-76.36967233331927,
							42.5971785256377,
							0
						],
						[
							-76.369710333284,
							42.59653752551799,
							0
						],
						[
							-76.36971433328003,
							42.59646652550475,
							0
						],
						[
							-76.36972533327312,
							42.59632552547831,
							0
						],
						[
							-76.36973833326405,
							42.59614652544479,
							0
						],
						[
							-76.3697313332515,
							42.59600752541945,
							0
						],
						[
							-76.36970233323152,
							42.59586352539409,
							0
						],
						[
							-76.36965433320609,
							42.59572852537114,
							0
						],
						[
							-76.36958833317495,
							42.59559452534909,
							0
						],
						[
							-76.36950233313775,
							42.59546552532878,
							0
						],
						[
							-76.36912633297946,
							42.5949605252509,
							0
						],
						[
							-76.3689813329193,
							42.59477752522302,
							0
						],
						[
							-76.36883333286083,
							42.59463052520192,
							0
						],
						[
							-76.36866633279729,
							42.59449752518414,
							0
						],
						[
							-76.36761133240275,
							42.5937495250889,
							0
						],
						[
							-76.36703333219012,
							42.59338752504554,
							0
						],
						[
							-76.36681833211182,
							42.59326352503135,
							0
						],
						[
							-76.36672333207639,
							42.59319752502303,
							0
						],
						[
							-76.36663733204348,
							42.59312652501343,
							0
						],
						[
							-76.36656233201344,
							42.59304652500169,
							0
						],
						[
							-76.36649733198627,
							42.59296152498866,
							0
						],
						[
							-76.3664463319632,
							42.59287152497412,
							0
						],
						[
							-76.36640833194403,
							42.59277752495833,
							0
						],
						[
							-76.366383331929,
							42.59268352494201,
							0
						],
						[
							-76.36637133191782,
							42.59258452492426,
							0
						],
						[
							-76.36637333191152,
							42.59249052490684,
							0
						],
						[
							-76.36638933190926,
							42.59239052488776,
							0
						],
						[
							-76.36641933191187,
							42.59229552486903,
							0
						],
						[
							-76.36646233191904,
							42.59220552485069,
							0
						],
						[
							-76.36651733193034,
							42.59211952483262,
							0
						],
						[
							-76.36661133195241,
							42.59200952480854,
							0
						],
						[
							-76.36680733200231,
							42.59183252476799,
							0
						],
						[
							-76.36694733203947,
							42.59172652474279,
							0
						],
						[
							-76.36702133205956,
							42.59167652473059,
							0
						],
						[
							-76.3671513320949,
							42.59158952470928,
							0
						],
						[
							-76.36724833212165,
							42.5915295246943,
							0
						],
						[
							-76.36744633217782,
							42.59142852466767,
							0
						],
						[
							-76.3676623322381,
							42.59130452463607,
							0
						],
						[
							-76.36778033226892,
							42.59120852461361,
							0
						],
						[
							-76.36782733227994,
							42.59115352460157,
							0
						],
						[
							-76.36786633228812,
							42.59109452458911,
							0
						],
						[
							-76.36789833229403,
							42.59103552457695,
							0
						],
						[
							-76.36792033229645,
							42.59097252456444,
							0
						],
						[
							-76.36793333229595,
							42.59090952455229,
							0
						],
						[
							-76.36793833229282,
							42.59084552454029,
							0
						],
						[
							-76.36793733228785,
							42.59078252452871,
							0
						],
						[
							-76.36793733228319,
							42.59071952451709,
							0
						],
						[
							-76.3676843322014,
							42.59071352452622,
							0
						],
						[
							-76.36760733217672,
							42.59071452452953,
							0
						],
						[
							-76.36708933201065,
							42.59072052455155,
							0
						],
						[
							-76.36613133170157,
							42.59070552458753,
							0
						],
						[
							-76.3653773314588,
							42.59070052461708,
							0
						],
						[
							-76.36490033130524,
							42.59069752463581,
							0
						],
						[
							-76.36482533128084,
							42.5906935246381,
							0
						],
						[
							-76.36400533101698,
							42.5906905246707,
							0
						],
						[
							-76.36341833082977,
							42.5907105246981,
							0
						],
						[
							-76.36306033071698,
							42.5907415247183,
							0
						],
						[
							-76.36203733039534,
							42.5908395247777,
							0
						],
						[
							-76.36196833037391,
							42.59084952478234,
							0
						],
						[
							-76.36045332989752,
							42.59099352487012,
							0
						],
						[
							-76.35975832968104,
							42.59108752491554,
							0
						],
						[
							-76.35907232947177,
							42.59123952497129,
							0
						],
						[
							-76.35773732906841,
							42.59158852508959,
							0
						],
						[
							-76.35705532885974,
							42.5917315251435,
							0
						],
						[
							-76.35689632881011,
							42.59175152515361,
							0
						],
						[
							-76.35635532864136,
							42.59182152518837,
							0
						],
						[
							-76.35629932862335,
							42.59182152519065,
							0
						],
						[
							-76.3556273284099,
							42.59185652522424,
							0
						],
						[
							-76.35522932828268,
							42.59186652524217,
							0
						],
						[
							-76.35497732820218,
							42.59187352525365,
							0
						],
						[
							-76.35444532803204,
							42.59188552527736,
							0
						],
						[
							-76.35321632763892,
							42.59191252533199,
							0
						],
						[
							-76.35314232761549,
							42.5919175253359,
							0
						],
						[
							-76.35183332719575,
							42.59193252539156,
							0
						],
						[
							-76.35127932701816,
							42.59193952541523,
							0
						],
						[
							-76.35111632696591,
							42.59194152542217,
							0
						],
						[
							-76.34760232583916,
							42.59198252557168,
							0
						],
						[
							-76.34345632451151,
							42.59205452575242,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090022001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>45438967</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>161051</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5991895</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3166241</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090022001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090022001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1772</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>704</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>11228.03</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.73</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.93</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27168</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26830</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28141</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14766</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14422</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15309</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8605</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8338</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8928</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6161</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6084</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6382</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.06</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2181</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2498</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>165</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3536</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>973</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1013</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>686</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>88</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00023"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.35111632696591,
							42.59194152542217,
							0
						],
						[
							-76.35127932701816,
							42.59193952541523,
							0
						],
						[
							-76.35183332719575,
							42.59193252539156,
							0
						],
						[
							-76.35314232761549,
							42.5919175253359,
							0
						],
						[
							-76.35321632763892,
							42.59191252533199,
							0
						],
						[
							-76.35444532803204,
							42.59188552527736,
							0
						],
						[
							-76.35497732820218,
							42.59187352525365,
							0
						],
						[
							-76.35522932828268,
							42.59186652524217,
							0
						],
						[
							-76.3556273284099,
							42.59185652522424,
							0
						],
						[
							-76.35629932862335,
							42.59182152519065,
							0
						],
						[
							-76.35635532864136,
							42.59182152518837,
							0
						],
						[
							-76.35689632881011,
							42.59175152515361,
							0
						],
						[
							-76.35705532885974,
							42.5917315251435,
							0
						],
						[
							-76.35773732906841,
							42.59158852508959,
							0
						],
						[
							-76.35907232947177,
							42.59123952497129,
							0
						],
						[
							-76.35975832968104,
							42.59108752491554,
							0
						],
						[
							-76.36045332989752,
							42.59099352487012,
							0
						],
						[
							-76.36196833037391,
							42.59084952478234,
							0
						],
						[
							-76.36203733039534,
							42.5908395247777,
							0
						],
						[
							-76.36306033071698,
							42.5907415247183,
							0
						],
						[
							-76.36341833082977,
							42.5907105246981,
							0
						],
						[
							-76.36400533101698,
							42.5906905246707,
							0
						],
						[
							-76.36482533128084,
							42.5906935246381,
							0
						],
						[
							-76.36490033130524,
							42.59069752463581,
							0
						],
						[
							-76.3653773314588,
							42.59070052461708,
							0
						],
						[
							-76.36613133170157,
							42.59070552458753,
							0
						],
						[
							-76.36708933201065,
							42.59072052455155,
							0
						],
						[
							-76.36760733217672,
							42.59071452452953,
							0
						],
						[
							-76.3676843322014,
							42.59071352452622,
							0
						],
						[
							-76.36793733228319,
							42.59071952451709,
							0
						],
						[
							-76.36769333216061,
							42.59012352441709,
							0
						],
						[
							-76.36708933186036,
							42.58869052417729,
							0
						],
						[
							-76.3667133316718,
							42.58777652402396,
							0
						],
						[
							-76.36667333165097,
							42.58766852400567,
							0
						],
						[
							-76.3665763316029,
							42.58744052396756,
							0
						],
						[
							-76.3661543313919,
							42.58642252379689,
							0
						],
						[
							-76.36601533132338,
							42.58610052374314,
							0
						],
						[
							-76.36574033118457,
							42.58541952362868,
							0
						],
						[
							-76.36562133112042,
							42.58506952356895,
							0
						],
						[
							-76.36562133111745,
							42.58502952356157,
							0
						],
						[
							-76.36562833111799,
							42.58500652355705,
							0
						],
						[
							-76.36566133112527,
							42.58496152354743,
							0
						],
						[
							-76.36551633104337,
							42.58448452346529,
							0
						],
						[
							-76.36528533091308,
							42.58372752333506,
							0
						],
						[
							-76.3649523307247,
							42.58262852314585,
							0
						],
						[
							-76.36471633059136,
							42.58185152301211,
							0
						],
						[
							-76.3646823305745,
							42.58177152299871,
							0
						],
						[
							-76.36442933044842,
							42.58116652289736,
							0
						],
						[
							-76.36415333031293,
							42.58053452279196,
							0
						],
						[
							-76.36384633016425,
							42.5798585226797,
							0
						],
						[
							-76.36361033005095,
							42.57935252259591,
							0
						],
						[
							-76.36354033001984,
							42.57923652257735,
							0
						],
						[
							-76.36351033000726,
							42.57919652257117,
							0
						],
						[
							-76.36345532998463,
							42.57912952256107,
							0
						],
						[
							-76.36335532994487,
							42.5790265225461,
							0
						],
						[
							-76.36324032990102,
							42.57893352253358,
							0
						],
						[
							-76.36311332985397,
							42.57884952252322,
							0
						],
						[
							-76.36301932981983,
							42.57879652251724,
							0
						],
						[
							-76.36176332937127,
							42.57819052245623,
							0
						],
						[
							-76.3616883293442,
							42.57815052245188,
							0
						],
						[
							-76.36108032912665,
							42.5778515224213,
							0
						],
						[
							-76.36070932899304,
							42.57765752240051,
							0
						],
						[
							-76.36032332885071,
							42.57741052237054,
							0
						],
						[
							-76.35982332866342,
							42.5770515223245,
							0
						],
						[
							-76.35959532857571,
							42.57685652229777,
							0
						],
						[
							-76.35946032852381,
							42.57674152228201,
							0
						],
						[
							-76.35921032842762,
							42.57652752225263,
							0
						],
						[
							-76.35888232830015,
							42.57622952221092,
							0
						],
						[
							-76.35783632788798,
							42.57520252206375,
							0
						],
						[
							-76.35740632771915,
							42.57478852200474,
							0
						],
						[
							-76.35715032762042,
							42.57456652197413,
							0
						],
						[
							-76.356870327516,
							42.57437152194948,
							0
						],
						[
							-76.35660032741784,
							42.57421752193197,
							0
						],
						[
							-76.35631732731608,
							42.57407152191647,
							0
						],
						[
							-76.3562423272894,
							42.57403652191302,
							0
						],
						[
							-76.3554103269897,
							42.5736005218662,
							0
						],
						[
							-76.35509932687805,
							42.57344252184964,
							0
						],
						[
							-76.35325232621709,
							42.57253252175635,
							0
						],
						[
							-76.35261732599315,
							42.57226452173256,
							0
						],
						[
							-76.3515513256215,
							42.57187252170328,
							0
						],
						[
							-76.35050132525163,
							42.57143452166487,
							0
						],
						[
							-76.3495453249118,
							42.57099452162231,
							0
						],
						[
							-76.34908832474937,
							42.57078452160202,
							0
						],
						[
							-76.34903032472845,
							42.57075352159865,
							0
						],
						[
							-76.34788532431983,
							42.57020452154358,
							0
						],
						[
							-76.34773032426483,
							42.57013452153691,
							0
						],
						[
							-76.34753032419432,
							42.5700505215295,
							0
						],
						[
							-76.34732132412206,
							42.56998152152521,
							0
						],
						[
							-76.3471033240485,
							42.56993452152535,
							0
						],
						[
							-76.34687932397404,
							42.56990152152829,
							0
						],
						[
							-76.34660332388385,
							42.56988152153576,
							0
						],
						[
							-76.34592332366452,
							42.56987152156133,
							0
						],
						[
							-76.34519832343246,
							42.56988452159302,
							0
						],
						[
							-76.34270432263592,
							42.56995452170661,
							0
						],
						[
							-76.34277932279966,
							42.57184452205227,
							0
						],
						[
							-76.3427823228081,
							42.57194552207078,
							0
						],
						[
							-76.34291832316804,
							42.57622452285467,
							0
						],
						[
							-76.3429593232464,
							42.57710652301571,
							0
						],
						[
							-76.34302432343219,
							42.57933752342461,
							0
						],
						[
							-76.34305732352509,
							42.58045052362856,
							0
						],
						[
							-76.34306332353137,
							42.58050952363922,
							0
						],
						[
							-76.34312132371372,
							42.58272352404521,
							0
						],
						[
							-76.34315432379545,
							42.58368552422131,
							0
						],
						[
							-76.34319532389729,
							42.58488452444078,
							0
						],
						[
							-76.34320432392302,
							42.58519352449741,
							0
						],
						[
							-76.34325032405143,
							42.5867295247788,
							0
						],
						[
							-76.3433373242424,
							42.58893352518173,
							0
						],
						[
							-76.34336832431072,
							42.58972252532598,
							0
						],
						[
							-76.34344632449859,
							42.59192352572867,
							0
						],
						[
							-76.34345632451151,
							42.59205452575242,
							0
						],
						[
							-76.34760232583916,
							42.59198252557168,
							0
						],
						[
							-76.35111632696591,
							42.59194152542217,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090022002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>3664952</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>1170</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5835840</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.3515541</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090022002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090022002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1011</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>480</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>905.63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>48</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>47</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>10.17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>5.39</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.79</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>24648</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>24310</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>25622</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13583</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13239</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14127</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7994</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7727</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8316</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5589</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5513</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5810</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>2.84</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2979</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3027</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1567</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>918</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1110</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>604</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00024"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.4988903629707,
							42.43689249081149,
							0
						],
						[
							-76.49824436276478,
							42.43691049084095,
							0
						],
						[
							-76.49819136274793,
							42.43691249084348,
							0
						],
						[
							-76.49815136273517,
							42.43691349084527,
							0
						],
						[
							-76.49806636270804,
							42.43691549084908,
							0
						],
						[
							-76.4976743625831,
							42.43692649086697,
							0
						],
						[
							-76.49679436230063,
							42.43692449090223,
							0
						],
						[
							-76.49667536226261,
							42.43692649090741,
							0
						],
						[
							-76.49655836222684,
							42.43695049091656,
							0
						],
						[
							-76.49608636209045,
							42.43715449097341,
							0
						],
						[
							-76.49565736196985,
							42.4373854910335,
							0
						],
						[
							-76.49547536191794,
							42.43747349105712,
							0
						],
						[
							-76.49526236185412,
							42.43753449107705,
							0
						],
						[
							-76.49498836177048,
							42.43759249109888,
							0
						],
						[
							-76.4947813617059,
							42.43761749111187,
							0
						],
						[
							-76.49478436171152,
							42.4376804911234,
							0
						],
						[
							-76.4948443617616,
							42.4380984911983,
							0
						],
						[
							-76.49488736178927,
							42.43828649123135,
							0
						],
						[
							-76.49496136182258,
							42.4384164912524,
							0
						],
						[
							-76.49501736184777,
							42.43851449126825,
							0
						],
						[
							-76.49511436189033,
							42.43866949129301,
							0
						],
						[
							-76.49513636189988,
							42.43870349129842,
							0
						],
						[
							-76.49464336174661,
							42.43876949133057,
							0
						],
						[
							-76.4930603612295,
							42.43864449137148,
							0
						],
						[
							-76.49149836070573,
							42.43833749137788,
							0
						],
						[
							-76.49024736027532,
							42.43794349135561,
							0
						],
						[
							-76.49022436026677,
							42.43792749135358,
							0
						],
						[
							-76.48984436012626,
							42.43767549132232,
							0
						],
						[
							-76.48948435998754,
							42.43736049127862,
							0
						],
						[
							-76.48941735996958,
							42.43740849129021,
							0
						],
						[
							-76.4890193598626,
							42.43768949135829,
							0
						],
						[
							-76.48905835988494,
							42.4378224913813,
							0
						],
						[
							-76.48927535999053,
							42.43831049146282,
							0
						],
						[
							-76.4892833599967,
							42.43835949147157,
							0
						],
						[
							-76.48928936000563,
							42.4384544914889,
							0
						],
						[
							-76.48922936003254,
							42.43908049160712,
							0
						],
						[
							-76.48953236014214,
							42.43924849162595,
							0
						],
						[
							-76.48968736019438,
							42.43928249162596,
							0
						],
						[
							-76.48986136025036,
							42.4392844916193,
							0
						],
						[
							-76.48990336026412,
							42.43928849161834,
							0
						],
						[
							-76.49048636045228,
							42.43930349159754,
							0
						],
						[
							-76.49102836062563,
							42.4392964915743,
							0
						],
						[
							-76.49192036091067,
							42.43928049153526,
							0
						],
						[
							-76.49211136097209,
							42.43928249152792,
							0
						],
						[
							-76.49213736102983,
							42.43995249165079,
							0
						],
						[
							-76.492167361066,
							42.44031249171617,
							0
						],
						[
							-76.49217836109143,
							42.44060949177069,
							0
						],
						[
							-76.49420836173844,
							42.4405514916778,
							0
						],
						[
							-76.49423636181417,
							42.4414564918441,
							0
						],
						[
							-76.49440336186724,
							42.44144949183604,
							0
						],
						[
							-76.49441436191525,
							42.44205249194713,
							0
						],
						[
							-76.49441336193256,
							42.44229149199138,
							0
						],
						[
							-76.49444836197166,
							42.44266949205989,
							0
						],
						[
							-76.49448236198457,
							42.4426964920635,
							0
						],
						[
							-76.49453536200281,
							42.44271349206451,
							0
						],
						[
							-76.49462236203132,
							42.44272149206247,
							0
						],
						[
							-76.49579436240455,
							42.44268349200803,
							0
						],
						[
							-76.49696636277872,
							42.44265849195596,
							0
						],
						[
							-76.49804236312195,
							42.44263149190741,
							0
						],
						[
							-76.49885736338165,
							42.44260749187,
							0
						],
						[
							-76.49893136340495,
							42.44260149186589,
							0
						],
						[
							-76.4991693634811,
							42.44259849185571,
							0
						],
						[
							-76.50089636403155,
							42.44254949177676,
							0
						],
						[
							-76.50083436391739,
							42.44127149154288,
							0
						],
						[
							-76.50078636383455,
							42.44035749137574,
							0
						],
						[
							-76.50176836414732,
							42.44032649133027,
							0
						],
						[
							-76.50397136484897,
							42.44025749122834,
							0
						],
						[
							-76.50521036524395,
							42.44022349117189,
							0
						],
						[
							-76.50618036555286,
							42.4401924911269,
							0
						],
						[
							-76.50838836625606,
							42.44012249102457,
							0
						],
						[
							-76.50834436617855,
							42.43926349086746,
							0
						],
						[
							-76.50830336609833,
							42.43835449070097,
							0
						],
						[
							-76.50734136579165,
							42.43838049074473,
							0
						],
						[
							-76.5060913653935,
							42.43841949080255,
							0
						],
						[
							-76.50516536509835,
							42.43844549084484,
							0
						],
						[
							-76.50388436469055,
							42.43848849090465,
							0
						],
						[
							-76.5026573642998,
							42.43852749096151,
							0
						],
						[
							-76.50167636398737,
							42.43855849100694,
							0
						],
						[
							-76.50069436367461,
							42.43858949105241,
							0
						],
						[
							-76.50060636351695,
							42.43683449073131,
							0
						],
						[
							-76.50022036339377,
							42.43684349074861,
							0
						],
						[
							-76.49962236320354,
							42.43686549077687,
							0
						],
						[
							-76.49948336315941,
							42.4368714907836,
							0
						],
						[
							-76.4990923630347,
							42.43688149080128,
							0
						],
						[
							-76.4988903629707,
							42.43689249081149,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090001001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>510336</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>6898</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4400021</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4979347</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090001001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090001001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1539</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>1074</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>126.11</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>4.68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>39.88</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>15814</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>15476</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>16788</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>9448</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>9108</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>9996</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>5697</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>5430</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6019</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3586</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3510</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>3807</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>165</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>168</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>170</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>124</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>126</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>127</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>9.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>14.14</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>8.52</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>11452</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>20358</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>289</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>521</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>993</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2152</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>891</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>92</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00025"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48309535831999,
							42.44254649249641,
							0
						],
						[
							-76.4833693584133,
							42.44261949249886,
							0
						],
						[
							-76.48348335845047,
							42.4426274924957,
							0
						],
						[
							-76.48354835847124,
							42.44262649249289,
							0
						],
						[
							-76.48362235849456,
							42.44262049248878,
							0
						],
						[
							-76.48419335867723,
							42.4426134924644,
							0
						],
						[
							-76.48435335872806,
							42.44260649245662,
							0
						],
						[
							-76.48467835883203,
							42.44260249244276,
							0
						],
						[
							-76.4850723589578,
							42.44259349242514,
							0
						],
						[
							-76.48508735896556,
							42.44263349243194,
							0
						],
						[
							-76.4851343589832,
							42.44266849243651,
							0
						],
						[
							-76.48519035900317,
							42.44269549243925,
							0
						],
						[
							-76.48525535902559,
							42.44271649244049,
							0
						],
						[
							-76.48523535902255,
							42.44276249244982,
							0
						],
						[
							-76.48522635902374,
							42.44281749246037,
							0
						],
						[
							-76.4852123590258,
							42.4429064924774,
							0
						],
						[
							-76.48521535903045,
							42.44295649248653,
							0
						],
						[
							-76.48525535905641,
							42.44313449251781,
							0
						],
						[
							-76.48526835906434,
							42.44318549252674,
							0
						],
						[
							-76.48552035914571,
							42.44319249251782,
							0
						],
						[
							-76.48585435925081,
							42.44316449249914,
							0
						],
						[
							-76.48635035941194,
							42.44319149248406,
							0
						],
						[
							-76.48674335953642,
							42.44316949246412,
							0
						],
						[
							-76.48696535960927,
							42.44319149245919,
							0
						],
						[
							-76.48736535973276,
							42.44312549243081,
							0
						],
						[
							-76.48785535988914,
							42.44311449240895,
							0
						],
						[
							-76.48806235995711,
							42.44313549240446,
							0
						],
						[
							-76.48825536002228,
							42.4431794924048,
							0
						],
						[
							-76.4883293600481,
							42.44320749240698,
							0
						],
						[
							-76.48837336006258,
							42.4432124924061,
							0
						],
						[
							-76.48840336007383,
							42.44323449240898,
							0
						],
						[
							-76.48849236010481,
							42.44326749241148,
							0
						],
						[
							-76.48853736012087,
							42.44328949241373,
							0
						],
						[
							-76.48864036015998,
							42.44337149242472,
							0
						],
						[
							-76.48867036017084,
							42.44338849242669,
							0
						],
						[
							-76.48870736018353,
							42.44339949242721,
							0
						],
						[
							-76.48892936025476,
							42.44339949241822,
							0
						],
						[
							-76.48907036029875,
							42.44338249240938,
							0
						],
						[
							-76.48959736046497,
							42.44334349238083,
							0
						],
						[
							-76.48960136046463,
							42.4433214923766,
							0
						],
						[
							-76.48963936046222,
							42.44312349233844,
							0
						],
						[
							-76.48969836046778,
							42.44294249230259,
							0
						],
						[
							-76.48982636048947,
							42.44267949224874,
							0
						],
						[
							-76.48986036048879,
							42.44252249221832,
							0
						],
						[
							-76.489866360484,
							42.44243149220125,
							0
						],
						[
							-76.4898603604708,
							42.44227849217319,
							0
						],
						[
							-76.48985036045536,
							42.44211249214288,
							0
						],
						[
							-76.48981736040561,
							42.441581492046,
							0
						],
						[
							-76.48887736010592,
							42.44160749208884,
							0
						],
						[
							-76.48865436003462,
							42.44161049209842,
							0
						],
						[
							-76.48861035995414,
							42.44071049193371,
							0
						],
						[
							-76.48778235969023,
							42.44073449197163,
							0
						],
						[
							-76.48742735957634,
							42.44073449198601,
							0
						],
						[
							-76.48740835953537,
							42.44026149189926,
							0
						],
						[
							-76.4851883588272,
							42.44031749199942,
							0
						],
						[
							-76.48515935876748,
							42.43963349187406,
							0
						],
						[
							-76.48514535874013,
							42.43932349181728,
							0
						],
						[
							-76.4841573584247,
							42.43934449186111,
							0
						],
						[
							-76.48422535861616,
							42.44164549228405,
							0
						],
						[
							-76.4841293585854,
							42.44164649228811,
							0
						],
						[
							-76.48399135854054,
							42.44163849229221,
							0
						],
						[
							-76.48388935850663,
							42.44162249229338,
							0
						],
						[
							-76.48364235842295,
							42.44156249229228,
							0
						],
						[
							-76.48306535822772,
							42.44142549229026,
							0
						],
						[
							-76.48262035807714,
							42.44131949228865,
							0
						],
						[
							-76.4819963578652,
							42.44116049228447,
							0
						],
						[
							-76.48202835794285,
							42.44207449245225,
							0
						],
						[
							-76.48216535799027,
							42.44212149245543,
							0
						],
						[
							-76.48238035806736,
							42.44223149246708,
							0
						],
						[
							-76.48267335817405,
							42.44240349248704,
							0
						],
						[
							-76.48280635822057,
							42.44245549249127,
							0
						],
						[
							-76.48295135827063,
							42.4425034924943,
							0
						],
						[
							-76.48301835829336,
							42.44252049249474,
							0
						],
						[
							-76.48309535831999,
							42.44254649249641,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090002001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>154724</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4417310</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4862224</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090002001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090002001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>3342</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>966</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>38.23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>4.03</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>101.9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>15447</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>15109</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>16421</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>9123</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>8782</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>9671</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>5447</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>5180</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>5770</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3503</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3426</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>3724</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>172</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>176</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>177</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>129</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>132</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>133</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>9.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>45.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>25.27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>11670</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>19464</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>485</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>531</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1218</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1218</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>100</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00026"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48968736019438,
							42.43928249162596,
							0
						],
						[
							-76.48953236014214,
							42.43924849162595,
							0
						],
						[
							-76.48922936003254,
							42.43908049160712,
							0
						],
						[
							-76.48851435977403,
							42.43868549156296,
							0
						],
						[
							-76.4873953593676,
							42.43804249148928,
							0
						],
						[
							-76.48732035933992,
							42.43799349148324,
							0
						],
						[
							-76.48710635926116,
							42.43785649146654,
							0
						],
						[
							-76.48649135903894,
							42.43751849142888,
							0
						],
						[
							-76.48605235887956,
							42.43726749140021,
							0
						],
						[
							-76.48598335886179,
							42.43732649141393,
							0
						],
						[
							-76.48592335884489,
							42.43735849142228,
							0
						],
						[
							-76.48585435882453,
							42.43738249142951,
							0
						],
						[
							-76.48566035876708,
							42.43744749144938,
							0
						],
						[
							-76.48560935875174,
							42.43746149145404,
							0
						],
						[
							-76.48539935868959,
							42.43753249147567,
							0
						],
						[
							-76.48504735858464,
							42.43764049150987,
							0
						],
						[
							-76.48479535850834,
							42.43770249153155,
							0
						],
						[
							-76.48463235845819,
							42.4377314915435,
							0
						],
						[
							-76.48451935842267,
							42.43774149154991,
							0
						],
						[
							-76.48433835836347,
							42.43772649155446,
							0
						],
						[
							-76.48395035823539,
							42.4376774915611,
							0
						],
						[
							-76.48321435799194,
							42.43757849157254,
							0
						],
						[
							-76.48323635802518,
							42.43793349163732,
							0
						],
						[
							-76.48321535804504,
							42.43829449170496,
							0
						],
						[
							-76.48319035806725,
							42.43870449178183,
							0
						],
						[
							-76.48318235809718,
							42.43914549186375,
							0
						],
						[
							-76.4831793581142,
							42.439389491909,
							0
						],
						[
							-76.4831983581528,
							42.43983049198981,
							0
						],
						[
							-76.48321835817677,
							42.44006849203303,
							0
						],
						[
							-76.48329335824559,
							42.44067549214229,
							0
						],
						[
							-76.4833703582782,
							42.44078249215898,
							0
						],
						[
							-76.48339935828977,
							42.44081349216353,
							0
						],
						[
							-76.48351835834116,
							42.44099249219184,
							0
						],
						[
							-76.48354335835279,
							42.44104149219989,
							0
						],
						[
							-76.48358535837384,
							42.44114449221726,
							0
						],
						[
							-76.48360835838787,
							42.44123449223297,
							0
						],
						[
							-76.48364235842295,
							42.44156249229228,
							0
						],
						[
							-76.48388935850663,
							42.44162249229338,
							0
						],
						[
							-76.48399135854054,
							42.44163849229221,
							0
						],
						[
							-76.4841293585854,
							42.44164649228811,
							0
						],
						[
							-76.48422535861616,
							42.44164549228405,
							0
						],
						[
							-76.4841573584247,
							42.43934449186111,
							0
						],
						[
							-76.48514535874013,
							42.43932349181728,
							0
						],
						[
							-76.48515935876748,
							42.43963349187406,
							0
						],
						[
							-76.4851883588272,
							42.44031749199942,
							0
						],
						[
							-76.48740835953537,
							42.44026149189926,
							0
						],
						[
							-76.48742735957634,
							42.44073449198601,
							0
						],
						[
							-76.48778235969023,
							42.44073449197163,
							0
						],
						[
							-76.48861035995414,
							42.44071049193371,
							0
						],
						[
							-76.4897673603229,
							42.44067749188078,
							0
						],
						[
							-76.49111436075243,
							42.44064149181963,
							0
						],
						[
							-76.49217836109143,
							42.44060949177069,
							0
						],
						[
							-76.492167361066,
							42.44031249171617,
							0
						],
						[
							-76.49213736102983,
							42.43995249165079,
							0
						],
						[
							-76.49211136097209,
							42.43928249152792,
							0
						],
						[
							-76.49192036091067,
							42.43928049153526,
							0
						],
						[
							-76.49102836062563,
							42.4392964915743,
							0
						],
						[
							-76.49048636045228,
							42.43930349159754,
							0
						],
						[
							-76.48990336026412,
							42.43928849161834,
							0
						],
						[
							-76.48986136025036,
							42.4392844916193,
							0
						],
						[
							-76.48968736019438,
							42.43928249162596,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090002002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>175232</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4393488</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4869732</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090002002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090002002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1872</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>594</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>43.32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>5.29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>72.61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>15907</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>15569</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>16881</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>9461</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>9120</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>10009</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>5690</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>5423</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6013</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3607</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3531</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>3828</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>163</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>167</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>168</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>123</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>125</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>126</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>9.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>13.04</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>13.71</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>12025</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>19941</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>488</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>584</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1378</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>3250</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1048</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>15</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>85</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00027"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.4901753606496,
							42.44333249235542,
							0
						],
						[
							-76.49039736071965,
							42.44331649234346,
							0
						],
						[
							-76.49053836076325,
							42.44329449233371,
							0
						],
						[
							-76.49057536077389,
							42.44327749232906,
							0
						],
						[
							-76.49087136086074,
							42.44316749229674,
							0
						],
						[
							-76.49091536087404,
							42.44315649229291,
							0
						],
						[
							-76.49105636091323,
							42.44307449227205,
							0
						],
						[
							-76.49111536093092,
							42.44305749226651,
							0
						],
						[
							-76.49124936097274,
							42.44304149225813,
							0
						],
						[
							-76.49141836102555,
							42.44302249224779,
							0
						],
						[
							-76.49158136107262,
							42.44295149222805,
							0
						],
						[
							-76.49186336115403,
							42.44282849219391,
							0
						],
						[
							-76.49209536122483,
							42.44277949217545,
							0
						],
						[
							-76.49224936127182,
							42.44274649216312,
							0
						],
						[
							-76.4924183613469,
							42.44302949220861,
							0
						],
						[
							-76.49301336153317,
							42.44296649217289,
							0
						],
						[
							-76.49367036173888,
							42.44289749213355,
							0
						],
						[
							-76.49388036180461,
							42.44287549212098,
							0
						],
						[
							-76.49398336183965,
							42.4429024921218,
							0
						],
						[
							-76.49408036187205,
							42.44291949212102,
							0
						],
						[
							-76.49422836192475,
							42.44299049212817,
							0
						],
						[
							-76.49448836201583,
							42.44309449213689,
							0
						],
						[
							-76.49451036202409,
							42.44311049213895,
							0
						],
						[
							-76.49456236204202,
							42.44312749213999,
							0
						],
						[
							-76.49459136205257,
							42.44314449214195,
							0
						],
						[
							-76.49458036202648,
							42.44283849208581,
							0
						],
						[
							-76.49460236202758,
							42.44275749206994,
							0
						],
						[
							-76.49462236203132,
							42.44272149206247,
							0
						],
						[
							-76.49453536200281,
							42.44271349206451,
							0
						],
						[
							-76.49448236198457,
							42.4426964920635,
							0
						],
						[
							-76.49444836197166,
							42.44266949205989,
							0
						],
						[
							-76.49441336193256,
							42.44229149199138,
							0
						],
						[
							-76.49441436191525,
							42.44205249194713,
							0
						],
						[
							-76.49440336186724,
							42.44144949183604,
							0
						],
						[
							-76.49423636181417,
							42.4414564918441,
							0
						],
						[
							-76.49420836173844,
							42.4405514916778,
							0
						],
						[
							-76.49217836109143,
							42.44060949177069,
							0
						],
						[
							-76.49111436075243,
							42.44064149181963,
							0
						],
						[
							-76.4897673603229,
							42.44067749188078,
							0
						],
						[
							-76.48861035995414,
							42.44071049193371,
							0
						],
						[
							-76.48865436003462,
							42.44161049209842,
							0
						],
						[
							-76.48887736010592,
							42.44160749208884,
							0
						],
						[
							-76.48981736040561,
							42.441581492046,
							0
						],
						[
							-76.48985036045536,
							42.44211249214288,
							0
						],
						[
							-76.4898603604708,
							42.44227849217319,
							0
						],
						[
							-76.489866360484,
							42.44243149220125,
							0
						],
						[
							-76.48986036048879,
							42.44252249221832,
							0
						],
						[
							-76.48982636048947,
							42.44267949224874,
							0
						],
						[
							-76.48969836046778,
							42.44294249230259,
							0
						],
						[
							-76.48963936046222,
							42.44312349233844,
							0
						],
						[
							-76.48960136046463,
							42.4433214923766,
							0
						],
						[
							-76.48959736046497,
							42.44334349238083,
							0
						],
						[
							-76.48989336055833,
							42.44332149236478,
							0
						],
						[
							-76.49002636060179,
							42.44333249236146,
							0
						],
						[
							-76.4901753606496,
							42.44333249235542,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090002003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>109222</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>1615</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4422548</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4917377</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090002003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090002003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>674</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>337</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>26.99</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>6.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>82.39</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>15965</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>15627</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>16939</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>9568</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>9227</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>10115</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>5822</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>5555</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6145</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3620</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3544</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>3841</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>125</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>128</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>129</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>94</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>96</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>97</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>9.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>14.17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>12.49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>12443</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>19806</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>545</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>510</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>966</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>966</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>87</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00028"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.46635935360572,
							42.45144549481927,
							0
						],
						[
							-76.46652035364694,
							42.45130349478648,
							0
						],
						[
							-76.46710635379672,
							42.45078449466679,
							0
						],
						[
							-76.46761535395447,
							42.45070849463218,
							0
						],
						[
							-76.46865835433104,
							42.45127649469505,
							0
						],
						[
							-76.46939935461506,
							42.45190349478105,
							0
						],
						[
							-76.47029035497134,
							42.45285749492147,
							0
						],
						[
							-76.4705593550781,
							42.45313449496183,
							0
						],
						[
							-76.47063835510949,
							42.4532164949738,
							0
						],
						[
							-76.47071835514113,
							42.45329749498554,
							0
						],
						[
							-76.47138735538208,
							42.45365349502432,
							0
						],
						[
							-76.47254135576044,
							42.45376249499782,
							0
						],
						[
							-76.4730393558636,
							42.45299449483564,
							0
						],
						[
							-76.47302835583612,
							42.45266949477598,
							0
						],
						[
							-76.47280135573739,
							42.45231849472023,
							0
						],
						[
							-76.47299535576742,
							42.45188149463158,
							0
						],
						[
							-76.47325535583411,
							42.45165449457907,
							0
						],
						[
							-76.47365335595187,
							42.451519494538,
							0
						],
						[
							-76.47402535605909,
							42.45135449449247,
							0
						],
						[
							-76.47467735625172,
							42.45112949442446,
							0
						],
						[
							-76.47484435630184,
							42.45108249440902,
							0
						],
						[
							-76.47495435633618,
							42.45106949440216,
							0
						],
						[
							-76.47504035636297,
							42.45105849439664,
							0
						],
						[
							-76.47544435649387,
							42.45107549438347,
							0
						],
						[
							-76.4762063567546,
							42.45129549439333,
							0
						],
						[
							-76.47702235704102,
							42.45162849442193,
							0
						],
						[
							-76.47785135732569,
							42.45188149443518,
							0
						],
						[
							-76.47841835751782,
							42.45201949443776,
							0
						],
						[
							-76.47894035768186,
							42.45197249440795,
							0
						],
						[
							-76.47956035787145,
							42.4518454943594,
							0
						],
						[
							-76.48038835811502,
							42.45154549427041,
							0
						],
						[
							-76.48118335836487,
							42.45147449422512,
							0
						],
						[
							-76.48156935849222,
							42.4515214942182,
							0
						],
						[
							-76.4816743585299,
							42.45157549422394,
							0
						],
						[
							-76.48220235871953,
							42.45184949425325,
							0
						],
						[
							-76.48324635910174,
							42.45248949432938,
							0
						],
						[
							-76.48380635928342,
							42.45251649431172,
							0
						],
						[
							-76.48421335939979,
							42.45232349425955,
							0
						],
						[
							-76.48478735955256,
							42.45189749415755,
							0
						],
						[
							-76.48605235996392,
							42.45197149412006,
							0
						],
						[
							-76.48732236036828,
							42.45192849406072,
							0
						],
						[
							-76.48819836065297,
							42.45197749403432,
							0
						],
						[
							-76.48850336077328,
							42.4522814940782,
							0
						],
						[
							-76.48894636091654,
							42.45229649406305,
							0
						],
						[
							-76.48980936119581,
							42.45232849403406,
							0
						],
						[
							-76.48981636119244,
							42.45225249401971,
							0
						],
						[
							-76.48982636118872,
							42.45215849400193,
							0
						],
						[
							-76.48984536118816,
							42.45206849398452,
							0
						],
						[
							-76.48987336119413,
							42.4520274939758,
							0
						],
						[
							-76.48990536120203,
							42.45199549396859,
							0
						],
						[
							-76.48995836121601,
							42.45195449395886,
							0
						],
						[
							-76.49005936124496,
							42.45190749394609,
							0
						],
						[
							-76.49017336127976,
							42.45188349393704,
							0
						],
						[
							-76.49028736131628,
							42.45188249393224,
							0
						],
						[
							-76.49040436135434,
							42.45188949392879,
							0
						],
						[
							-76.4905093613889,
							42.45190149392677,
							0
						],
						[
							-76.49062536142671,
							42.45190949392354,
							0
						],
						[
							-76.49073336146093,
							42.45190349391806,
							0
						],
						[
							-76.49083536149122,
							42.45187049390784,
							0
						],
						[
							-76.49089736150839,
							42.4518334938985,
							0
						],
						[
							-76.49095136152174,
							42.45177949388632,
							0
						],
						[
							-76.49097636152605,
							42.45172949387606,
							0
						],
						[
							-76.49098636152625,
							42.45168849386808,
							0
						],
						[
							-76.49098436151793,
							42.45158449384893,
							0
						],
						[
							-76.490873361419,
							42.45072649369475,
							0
						],
						[
							-76.49082836138635,
							42.45047949365085,
							0
						],
						[
							-76.4907953613708,
							42.45041249363982,
							0
						],
						[
							-76.49076936135951,
							42.45037249363348,
							0
						],
						[
							-76.49070836133434,
							42.45029649362189,
							0
						],
						[
							-76.49046936124023,
							42.45006049358791,
							0
						],
						[
							-76.49041536121796,
							42.4499934935777,
							0
						],
						[
							-76.49039336120767,
							42.44994949357046,
							0
						],
						[
							-76.49037236119591,
							42.44988149355874,
							0
						],
						[
							-76.49036436118935,
							42.44982749354907,
							0
						],
						[
							-76.49034736114406,
							42.44928749344988,
							0
						],
						[
							-76.49032736108092,
							42.44851849330848,
							0
						],
						[
							-76.49027136092477,
							42.44664549296433,
							0
						],
						[
							-76.49024736090712,
							42.44651049294031,
							0
						],
						[
							-76.4901523608542,
							42.44620649288794,
							0
						],
						[
							-76.48998536076418,
							42.44571249280332,
							0
						],
						[
							-76.48994936074475,
							42.445605492785,
							0
						],
						[
							-76.48989536071944,
							42.44549749276719,
							0
						],
						[
							-76.48980436068007,
							42.44535949274535,
							0
						],
						[
							-76.48946436054274,
							42.44497649268828,
							0
						],
						[
							-76.4894073605175,
							42.4448824926732,
							0
						],
						[
							-76.4893783605006,
							42.44477949265531,
							0
						],
						[
							-76.48937436049573,
							42.4447304926464,
							0
						],
						[
							-76.48942636047978,
							42.44428849256256,
							0
						],
						[
							-76.48950136047192,
							42.44385549247943,
							0
						],
						[
							-76.48959736046497,
							42.44334349238083,
							0
						],
						[
							-76.48907036029875,
							42.44338249240938,
							0
						],
						[
							-76.48892936025476,
							42.44339949241822,
							0
						],
						[
							-76.48870736018353,
							42.44339949242721,
							0
						],
						[
							-76.48867036017084,
							42.44338849242669,
							0
						],
						[
							-76.48864036015998,
							42.44337149242472,
							0
						],
						[
							-76.48853736012087,
							42.44328949241373,
							0
						],
						[
							-76.48849236010481,
							42.44326749241148,
							0
						],
						[
							-76.48840336007383,
							42.44323449240898,
							0
						],
						[
							-76.48837336006258,
							42.4432124924061,
							0
						],
						[
							-76.4883293600481,
							42.44320749240698,
							0
						],
						[
							-76.48825536002228,
							42.4431794924048,
							0
						],
						[
							-76.48806235995711,
							42.44313549240446,
							0
						],
						[
							-76.48785535988914,
							42.44311449240895,
							0
						],
						[
							-76.48736535973276,
							42.44312549243081,
							0
						],
						[
							-76.48696535960927,
							42.44319149245919,
							0
						],
						[
							-76.48674335953642,
							42.44316949246412,
							0
						],
						[
							-76.48635035941194,
							42.44319149248406,
							0
						],
						[
							-76.48585435925081,
							42.44316449249914,
							0
						],
						[
							-76.48552035914571,
							42.44319249251782,
							0
						],
						[
							-76.48526835906434,
							42.44318549252674,
							0
						],
						[
							-76.48452035882285,
							42.4431654925533,
							0
						],
						[
							-76.48429735875006,
							42.44314849255916,
							0
						],
						[
							-76.48402335866015,
							42.44312149256525,
							0
						],
						[
							-76.48377835857873,
							42.44308349256812,
							0
						],
						[
							-76.48358635851551,
							42.44306149257183,
							0
						],
						[
							-76.48328935841572,
							42.44300049257257,
							0
						],
						[
							-76.4831413583646,
							42.44295149256949,
							0
						],
						[
							-76.48299335831189,
							42.44288049256233,
							0
						],
						[
							-76.4829333582914,
							42.44286349256162,
							0
						],
						[
							-76.48286735826741,
							42.44282549255725,
							0
						],
						[
							-76.48282235825216,
							42.44281449255703,
							0
						],
						[
							-76.48279335824161,
							42.44279749255507,
							0
						],
						[
							-76.48274835822642,
							42.44278749255503,
							0
						],
						[
							-76.48263735818757,
							42.44274349255139,
							0
						],
						[
							-76.48258535817008,
							42.44273249255145,
							0
						],
						[
							-76.48252635814907,
							42.44270449254866,
							0
						],
						[
							-76.48247435813204,
							42.44269949254984,
							0
						],
						[
							-76.4824143581107,
							42.44267149254709,
							0
						],
						[
							-76.48236335809354,
							42.44266049254711,
							0
						],
						[
							-76.48230335807229,
							42.44263349254456,
							0
						],
						[
							-76.48225135805481,
							42.4426224925446,
							0
						],
						[
							-76.48222935804655,
							42.44260649254254,
							0
						],
						[
							-76.4817183578733,
							42.4424804925399,
							0
						],
						[
							-76.48148135779196,
							42.44240849253616,
							0
						],
						[
							-76.48130335773322,
							42.44238649253929,
							0
						],
						[
							-76.48110235766836,
							42.4423814925465,
							0
						],
						[
							-76.48102835764499,
							42.44238649255043,
							0
						],
						[
							-76.48100635763956,
							42.44240849255537,
							0
						],
						[
							-76.48091735761224,
							42.44242549256212,
							0
						],
						[
							-76.48084335759177,
							42.44246949257327,
							0
						],
						[
							-76.48074735756293,
							42.44249649258213,
							0
						],
						[
							-76.48064335752956,
							42.44249649258633,
							0
						],
						[
							-76.48060635751733,
							42.44249149258691,
							0
						],
						[
							-76.48053235748998,
							42.44244249258082,
							0
						],
						[
							-76.48034735741801,
							42.44227149255668,
							0
						],
						[
							-76.48027235738994,
							42.44221749254973,
							0
						],
						[
							-76.48016135734947,
							42.442151492542,
							0
						],
						[
							-76.48002835730274,
							42.44209649253722,
							0
						],
						[
							-76.47962035716698,
							42.44203049254152,
							0
						],
						[
							-76.4791243570078,
							42.44203049256157,
							0
						],
						[
							-76.47831635675594,
							42.44213049261273,
							0
						],
						[
							-76.47819035671712,
							42.44215249262192,
							0
						],
						[
							-76.47793835663826,
							42.4421794926371,
							0
						],
						[
							-76.47778235659146,
							42.44222349265153,
							0
						],
						[
							-76.47767135655944,
							42.44227249266509,
							0
						],
						[
							-76.47756735652814,
							42.44230049267448,
							0
						],
						[
							-76.47754535652226,
							42.44231649267832,
							0
						],
						[
							-76.47750835651118,
							42.44232749268186,
							0
						],
						[
							-76.47731635645607,
							42.44241549270588,
							0
						],
						[
							-76.47726435644226,
							42.44245449271521,
							0
						],
						[
							-76.47711635640569,
							42.44260249274858,
							0
						],
						[
							-76.4770783563971,
							42.44265149275919,
							0
						],
						[
							-76.47696735636958,
							42.44276149278399,
							0
						],
						[
							-76.47673035630453,
							42.44291049282115,
							0
						],
						[
							-76.47663435628058,
							42.44300349284224,
							0
						],
						[
							-76.47660435627539,
							42.44306349285456,
							0
						],
						[
							-76.47657535627258,
							42.44315149287201,
							0
						],
						[
							-76.47657135627504,
							42.4432024928816,
							0
						],
						[
							-76.4765683562768,
							42.44323949288858,
							0
						],
						[
							-76.4765393562723,
							42.44330449290177,
							0
						],
						[
							-76.4755633559878,
							42.44369349301321,
							0
						],
						[
							-76.47525935593168,
							42.44425549312944,
							0
						],
						[
							-76.4747263557708,
							42.44439349317654,
							0
						],
						[
							-76.47419735561117,
							42.44453049322328,
							0
						],
						[
							-76.47406335556816,
							42.44453049322868,
							0
						],
						[
							-76.47391535551863,
							42.4445024932295,
							0
						],
						[
							-76.47384835549512,
							42.4444754932272,
							0
						],
						[
							-76.47335235534085,
							42.44454149325947,
							0
						],
						[
							-76.4730183552353,
							42.44456349327705,
							0
						],
						[
							-76.4725143550732,
							42.44455849329649,
							0
						],
						[
							-76.47224835498622,
							42.44453649330318,
							0
						],
						[
							-76.47187035486168,
							42.44449249331031,
							0
						],
						[
							-76.47132135467822,
							42.4443934933142,
							0
						],
						[
							-76.47124035465023,
							42.44436649331249,
							0
						],
						[
							-76.47112835461311,
							42.44435049331408,
							0
						],
						[
							-76.47095035455231,
							42.444300493312,
							0
						],
						[
							-76.47076535449176,
							42.44428449331652,
							0
						],
						[
							-76.4706473544539,
							42.4442844933213,
							0
						],
						[
							-76.47049835440404,
							42.44425649332213,
							0
						],
						[
							-76.47043335438015,
							42.44421549331718,
							0
						],
						[
							-76.47035035434969,
							42.44416349331092,
							0
						],
						[
							-76.4702763543207,
							42.44409249330075,
							0
						],
						[
							-76.47013535426456,
							42.44394449327911,
							0
						],
						[
							-76.47011335425427,
							42.44390049327185,
							0
						],
						[
							-76.47009135424513,
							42.44387249326753,
							0
						],
						[
							-76.47009035424281,
							42.44384549326261,
							0
						],
						[
							-76.47006135423226,
							42.44382849326062,
							0
						],
						[
							-76.4700393542196,
							42.44375249324746,
							0
						],
						[
							-76.47000035420362,
							42.44370549324034,
							0
						],
						[
							-76.46997935419505,
							42.44368049323657,
							0
						],
						[
							-76.46997935419306,
							42.44365349323158,
							0
						],
						[
							-76.46995035418169,
							42.44362549322757,
							0
						],
						[
							-76.46994235417594,
							42.44358249321993,
							0
						],
						[
							-76.4699123541647,
							42.44356049321707,
							0
						],
						[
							-76.46989035415315,
							42.44349949320667,
							0
						],
						[
							-76.46986835414408,
							42.44347249320257,
							0
						],
						[
							-76.46986835414202,
							42.44344449319738,
							0
						],
						[
							-76.46983835413042,
							42.4434174931936,
							0
						],
						[
							-76.46982335412028,
							42.44334549318091,
							0
						],
						[
							-76.4698013541117,
							42.4433244931779,
							0
						],
						[
							-76.46977135407937,
							42.44301649312212,
							0
						],
						[
							-76.46972735405957,
							42.44293949310967,
							0
						],
						[
							-76.46957135399418,
							42.4427314930775,
							0
						],
						[
							-76.46954935398225,
							42.44266549306617,
							0
						],
						[
							-76.4694453539388,
							42.44252849304503,
							0
						],
						[
							-76.46937135390975,
							42.44245649303469,
							0
						],
						[
							-76.46924535386246,
							42.44236349302261,
							0
						],
						[
							-76.46920035384684,
							42.44234749302145,
							0
						],
						[
							-76.46919435384468,
							42.44234449302115,
							0
						],
						[
							-76.46900035377537,
							42.44224849301122,
							0
						],
						[
							-76.46890435373889,
							42.44217149300087,
							0
						],
						[
							-76.4688073536993,
							42.44205649298351,
							0
						],
						[
							-76.46880435369768,
							42.44204749298196,
							0
						],
						[
							-76.46879335369192,
							42.44201749297686,
							0
						],
						[
							-76.46873335366789,
							42.44195249296727,
							0
						],
						[
							-76.46871835366063,
							42.44191949296177,
							0
						],
						[
							-76.46868135364589,
							42.44188049295603,
							0
						],
						[
							-76.46864435362997,
							42.44182549294736,
							0
						],
						[
							-76.46858535360661,
							42.44176549293865,
							0
						],
						[
							-76.46857035359899,
							42.44172749293222,
							0
						],
						[
							-76.46845935355529,
							42.44161749291636,
							0
						],
						[
							-76.46839235353053,
							42.44157349291093,
							0
						],
						[
							-76.4682593534838,
							42.44151849290613,
							0
						],
						[
							-76.46822235347113,
							42.44150749290558,
							0
						],
						[
							-76.46819435346089,
							42.44149049290358,
							0
						],
						[
							-76.4680883534249,
							42.44146349290286,
							0
						],
						[
							-76.46802935340433,
							42.44144149290118,
							0
						],
						[
							-76.46786635334959,
							42.44140849290166,
							0
						],
						[
							-76.46757735325325,
							42.44135949290428,
							0
						],
						[
							-76.46751835323315,
							42.44134349290369,
							0
						],
						[
							-76.46734035317441,
							42.44132149290682,
							0
						],
						[
							-76.4667023529624,
							42.44122249291429,
							0
						],
						[
							-76.46616135278074,
							42.441113492916,
							0
						],
						[
							-76.46568735262497,
							42.44106349292589,
							0
						],
						[
							-76.46547935255704,
							42.44104749293135,
							0
						],
						[
							-76.46506435242227,
							42.44102549294405,
							0
						],
						[
							-76.4647093523079,
							42.44101949295728,
							0
						],
						[
							-76.46427935217118,
							42.44103649297782,
							0
						],
						[
							-76.46371635199618,
							42.44111349301482,
							0
						],
						[
							-76.46351635193525,
							42.44115749303102,
							0
						],
						[
							-76.46322735184333,
							42.44116849304475,
							0
						],
						[
							-76.46288635173111,
							42.44113049305151,
							0
						],
						[
							-76.46263435164899,
							42.44111349305855,
							0
						],
						[
							-76.46256735162831,
							42.44112449306329,
							0
						],
						[
							-76.46245635159475,
							42.44115249307297,
							0
						],
						[
							-76.46223435153279,
							42.44127849310525,
							0
						],
						[
							-76.46215935151034,
							42.44130049311234,
							0
						],
						[
							-76.4619453514441,
							42.4413334931271,
							0
						],
						[
							-76.46171535137236,
							42.44136149314157,
							0
						],
						[
							-76.46135935125976,
							42.44138349316003,
							0
						],
						[
							-76.46121135121226,
							42.44138349316601,
							0
						],
						[
							-76.4608853511052,
							42.44135049317309,
							0
						],
						[
							-76.46060335101103,
							42.44130049317523,
							0
						],
						[
							-76.46038135093825,
							42.4412794931803,
							0
						],
						[
							-76.45995135079819,
							42.4412514931925,
							0
						],
						[
							-76.45971435072215,
							42.44125149320208,
							0
						],
						[
							-76.4591653505484,
							42.44128449323036,
							0
						],
						[
							-76.45875835042024,
							42.44131749325292,
							0
						],
						[
							-76.4582023502439,
							42.44134549328056,
							0
						],
						[
							-76.45760935005359,
							42.44134549330453,
							0
						],
						[
							-76.45741734999116,
							42.44133449331024,
							0
						],
						[
							-76.45718734991537,
							42.44130749331453,
							0
						],
						[
							-76.4570533498703,
							42.44127949331479,
							0
						],
						[
							-76.45698734984714,
							42.44125249331245,
							0
						],
						[
							-76.45683134979096,
							42.44116949330342,
							0
						],
						[
							-76.45660934971207,
							42.44106549329313,
							0
						],
						[
							-76.45653434968601,
							42.44103849329116,
							0
						],
						[
							-76.45635734962516,
							42.44098349328812,
							0
						],
						[
							-76.45622334958054,
							42.44096149328949,
							0
						],
						[
							-76.45611234954575,
							42.440972493296,
							0
						],
						[
							-76.4559793495079,
							42.44103849331358,
							0
						],
						[
							-76.45579334945793,
							42.44117049334553,
							0
						],
						[
							-76.455719349437,
							42.44120849335555,
							0
						],
						[
							-76.45557834939382,
							42.44123649336643,
							0
						],
						[
							-76.45549734936702,
							42.44122549336765,
							0
						],
						[
							-76.45538634932815,
							42.441181493364,
							0
						],
						[
							-76.45523834927337,
							42.44108249335166,
							0
						],
						[
							-76.4550153491856,
							42.44086249331996,
							0
						],
						[
							-76.45497834917057,
							42.44081949331351,
							0
						],
						[
							-76.45494834915725,
							42.44076949330546,
							0
						],
						[
							-76.45490434913908,
							42.44071449329707,
							0
						],
						[
							-76.45480034909922,
							42.44062649328499,
							0
						],
						[
							-76.45463034903297,
							42.44046749326243,
							0
						],
						[
							-76.45448134897713,
							42.44035849324828,
							0
						],
						[
							-76.45442234895694,
							42.44034149324751,
							0
						],
						[
							-76.45426734890557,
							42.44031949324972,
							0
						],
						[
							-76.4538223487608,
							42.44029249326271,
							0
						],
						[
							-76.45354834867126,
							42.44027049326971,
							0
						],
						[
							-76.45349634865455,
							42.4402704932718,
							0
						],
						[
							-76.45325134857836,
							42.44030349328781,
							0
						],
						[
							-76.45309634853062,
							42.44033049329905,
							0
						],
						[
							-76.45266634839426,
							42.4403524933205,
							0
						],
						[
							-76.45251034834419,
							42.44035249332681,
							0
						],
						[
							-76.45222934825644,
							42.44038549334426,
							0
						],
						[
							-76.45211034822032,
							42.44041349335425,
							0
						],
						[
							-76.45208834821406,
							42.44042449335716,
							0
						],
						[
							-76.45203634819819,
							42.44043549336133,
							0
						],
						[
							-76.45200634818976,
							42.44045149336547,
							0
						],
						[
							-76.45196234817644,
							42.44046249336928,
							0
						],
						[
							-76.45162834808058,
							42.44061649341129,
							0
						],
						[
							-76.45113934794672,
							42.44092949348895,
							0
						],
						[
							-76.45092434788582,
							42.44103949351798,
							0
						],
						[
							-76.45084334786226,
							42.44107249352736,
							0
						],
						[
							-76.4507983478498,
							42.44109949353417,
							0
						],
						[
							-76.45064334780572,
							42.44117649355469,
							0
						],
						[
							-76.45053234777453,
							42.44123649357028,
							0
						],
						[
							-76.45044334774884,
							42.44127549358107,
							0
						],
						[
							-76.45030934770702,
							42.44129149358945,
							0
						],
						[
							-76.45023534768326,
							42.44129149359245,
							0
						],
						[
							-76.45002834761402,
							42.44125349359377,
							0
						],
						[
							-76.44999834760316,
							42.44123649359185,
							0
						],
						[
							-76.44986534755849,
							42.44120949359222,
							0
						],
						[
							-76.44953134743915,
							42.44104449357518,
							0
						],
						[
							-76.44939834739404,
							42.44101149357444,
							0
						],
						[
							-76.44924334734276,
							42.44099049357681,
							0
						],
						[
							-76.44922034733494,
							42.44098449357664,
							0
						],
						[
							-76.44873634718006,
							42.44099049359729,
							0
						],
						[
							-76.44873934718454,
							42.44103849360607,
							0
						],
						[
							-76.44876134722702,
							42.44151949369419,
							0
						],
						[
							-76.44877934728802,
							42.4422694938322,
							0
						],
						[
							-76.4487843472956,
							42.442350493847,
							0
						],
						[
							-76.44884834739766,
							42.44345749404923,
							0
						],
						[
							-76.44890034746565,
							42.44415449417608,
							0
						],
						[
							-76.4489113474826,
							42.4443364942093,
							0
						],
						[
							-76.44893234751606,
							42.44469949427563,
							0
						],
						[
							-76.44900934763982,
							42.44604449452135,
							0
						],
						[
							-76.4490743477333,
							42.44703049470114,
							0
						],
						[
							-76.44912934779853,
							42.44767649481843,
							0
						],
						[
							-76.44913934781044,
							42.44779449483985,
							0
						],
						[
							-76.44926734795389,
							42.44918449509182,
							0
						],
						[
							-76.44937434808733,
							42.45052949533631,
							0
						],
						[
							-76.44940734811782,
							42.45079949538491,
							0
						],
						[
							-76.44942534812749,
							42.45085249539399,
							0
						],
						[
							-76.44945034813948,
							42.45090649540296,
							0
						],
						[
							-76.44947934815242,
							42.45095549541085,
							0
						],
						[
							-76.44974534846463,
							42.45403449596964,
							0
						],
						[
							-76.44981134860895,
							42.45570549627604,
							0
						],
						[
							-76.44981434861499,
							42.45577449628866,
							0
						],
						[
							-76.4498163486208,
							42.45584449630154,
							0
						],
						[
							-76.450102348719,
							42.45593149630609,
							0
						],
						[
							-76.45130234907968,
							42.45559949619616,
							0
						],
						[
							-76.45188234924608,
							42.45533149612317,
							0
						],
						[
							-76.45239434939714,
							42.45515149606919,
							0
						],
						[
							-76.45420434997709,
							42.45513849599362,
							0
						],
						[
							-76.45516935028783,
							42.45515249595723,
							0
						],
						[
							-76.45549735038867,
							42.45509249593287,
							0
						],
						[
							-76.45580335048274,
							42.45503649591016,
							0
						],
						[
							-76.4565783506891,
							42.45446149577246,
							0
						],
						[
							-76.45750435094095,
							42.4538464956213,
							0
						],
						[
							-76.4585033512343,
							42.4534764955125,
							0
						],
						[
							-76.45896435137672,
							42.45340149547997,
							0
						],
						[
							-76.45929935148246,
							42.45337749546199,
							0
						],
						[
							-76.4600113517072,
							42.45332649542378,
							0
						],
						[
							-76.46037435182501,
							42.45334449541245,
							0
						],
						[
							-76.46096135201864,
							42.45341549540185,
							0
						],
						[
							-76.46280035261059,
							42.45343949533194,
							0
						],
						[
							-76.46418935303998,
							42.45321749523474,
							0
						],
						[
							-76.46518135333739,
							42.45293349514211,
							0
						],
						[
							-76.46563635346364,
							42.45266549507414,
							0
						],
						[
							-76.4659463535377,
							42.4523204949978,
							0
						],
						[
							-76.46599535354952,
							42.45226749498601,
							0
						],
						[
							-76.46635935360572,
							42.45144549481927,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090003001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>3888052</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>107994</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4464422</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4681638</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090003001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090003001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>2484</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>960.76</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>75</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.82</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.74</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22095</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>21756</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23068</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12792</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12452</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13340</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7694</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7427</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8017</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5010</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4934</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5231</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>87</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>91</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>92</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>69</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>2.66</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.08</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>11392</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>14832</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>86</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1058</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1525</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1525</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>47</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00029"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48980936119581,
							42.45232849403406,
							0
						],
						[
							-76.4897953612012,
							42.4524624940594,
							0
						],
						[
							-76.48979136120266,
							42.45249949406641,
							0
						],
						[
							-76.48978336120649,
							42.45258649408283,
							0
						],
						[
							-76.48972936120585,
							42.45281249412681,
							0
						],
						[
							-76.4897873612244,
							42.45281149412426,
							0
						],
						[
							-76.48981936123731,
							42.45284749412964,
							0
						],
						[
							-76.48989436126564,
							42.45290549413731,
							0
						],
						[
							-76.48998336129739,
							42.45294849414167,
							0
						],
						[
							-76.49050836148135,
							42.45315849415925,
							0
						],
						[
							-76.49057636150573,
							42.45319349416298,
							0
						],
						[
							-76.49063536152794,
							42.45323749416875,
							0
						],
						[
							-76.49067636154506,
							42.45329149417705,
							0
						],
						[
							-76.49070136155736,
							42.45334949418677,
							0
						],
						[
							-76.49081836162169,
							42.45371249424916,
							0
						],
						[
							-76.49088236166445,
							42.45401349430223,
							0
						],
						[
							-76.4909193616919,
							42.45422449433975,
							0
						],
						[
							-76.49092436169785,
							42.45428349435046,
							0
						],
						[
							-76.49092136170154,
							42.45434649436224,
							0
						],
						[
							-76.4908893616999,
							42.45446349438515,
							0
						],
						[
							-76.49084836169241,
							42.45454049440106,
							0
						],
						[
							-76.49071336166253,
							42.45472249444017,
							0
						],
						[
							-76.49067836165604,
							42.45478649445342,
							0
						],
						[
							-76.49065336165266,
							42.45484949446608,
							0
						],
						[
							-76.49063236165294,
							42.4549444944845,
							0
						],
						[
							-76.49060736165924,
							42.45513849452139,
							0
						],
						[
							-76.49061936166935,
							42.45522349453663,
							0
						],
						[
							-76.49063836167943,
							42.45527749454584,
							0
						],
						[
							-76.49072036171697,
							42.45542949457064,
							0
						],
						[
							-76.490812361758,
							42.45558549459575,
							0
						],
						[
							-76.49090636180205,
							42.45577349462671,
							0
						],
						[
							-76.49091736180927,
							42.45582349463552,
							0
						],
						[
							-76.49092136181416,
							42.45587249464442,
							0
						],
						[
							-76.49090736181668,
							42.45596749466255,
							0
						],
						[
							-76.49089136181486,
							42.45601249467153,
							0
						],
						[
							-76.49083236180331,
							42.45611249469238,
							0
						],
						[
							-76.49075236178466,
							42.4562074947132,
							0
						],
						[
							-76.49066336176355,
							42.45630849473548,
							0
						],
						[
							-76.49060036175035,
							42.45640349475558,
							0
						],
						[
							-76.49057736174696,
							42.4564574947665,
							0
						],
						[
							-76.49056136174588,
							42.45651249477733,
							0
						],
						[
							-76.49055136175095,
							42.45662449479844,
							0
						],
						[
							-76.49055536175621,
							42.45667849480826,
							0
						],
						[
							-76.49068736185659,
							42.45746449494826,
							0
						],
						[
							-76.49071636187452,
							42.4575814949687,
							0
						],
						[
							-76.49076236189791,
							42.45769849498849,
							0
						],
						[
							-76.49082436192609,
							42.45781049500668,
							0
						],
						[
							-76.49090036195801,
							42.45791249502246,
							0
						],
						[
							-76.49098236199119,
							42.45800549503635,
							0
						],
						[
							-76.49123336209541,
							42.45832649508554,
							0
						],
						[
							-76.49145936218903,
							42.45861249512929,
							0
						],
						[
							-76.49159036224555,
							42.45880849516022,
							0
						],
						[
							-76.4916223622601,
							42.45886649516964,
							0
						],
						[
							-76.4916513622734,
							42.45892049517845,
							0
						],
						[
							-76.49178536233885,
							42.45922449522922,
							0
						],
						[
							-76.49187836239422,
							42.45957049528944,
							0
						],
						[
							-76.49195236244019,
							42.4598714953421,
							0
						],
						[
							-76.49196536245634,
							42.46003349537151,
							0
						],
						[
							-76.49194836246556,
							42.460232495409,
							0
						],
						[
							-76.49176536245483,
							42.46088249553658,
							0
						],
						[
							-76.49175036245563,
							42.46095849555124,
							0
						],
						[
							-76.49174436246241,
							42.46107649557332,
							0
						],
						[
							-76.49175436247425,
							42.46119349559454,
							0
						],
						[
							-76.49178136249148,
							42.46130949561489,
							0
						],
						[
							-76.49183836252071,
							42.46145749563994,
							0
						],
						[
							-76.49220136270003,
							42.46230849578258,
							0
						],
						[
							-76.49227836273927,
							42.46250549581589,
							0
						],
						[
							-76.49247536283919,
							42.46300249589979,
							0
						],
						[
							-76.49251136285939,
							42.46311949591996,
							0
						],
						[
							-76.4925343628777,
							42.4632674959464,
							0
						],
						[
							-76.49253636289133,
							42.46344349597886,
							0
						],
						[
							-76.49252036290348,
							42.46367749602276,
							0
						],
						[
							-76.49251936291084,
							42.46378149604202,
							0
						],
						[
							-76.49253836293157,
							42.46397949607786,
							0
						],
						[
							-76.4925853629612,
							42.46417649611239,
							0
						],
						[
							-76.49267236300535,
							42.46439649614952,
							0
						],
						[
							-76.49299036316116,
							42.46512449627123,
							0
						],
						[
							-76.49309136321057,
							42.46535449630967,
							0
						],
						[
							-76.49339036334648,
							42.46589549639757,
							0
						],
						[
							-76.49356836342369,
							42.46616749644065,
							0
						],
						[
							-76.49387936355879,
							42.46664549651642,
							0
						],
						[
							-76.49434636376405,
							42.46739549663614,
							0
						],
						[
							-76.49469136391701,
							42.46796749672792,
							0
						],
						[
							-76.49494836403184,
							42.46840549679846,
							0
						],
						[
							-76.49556136431448,
							42.46956849698862,
							0
						],
						[
							-76.49568536437143,
							42.46980049702648,
							0
						],
						[
							-76.49584036444665,
							42.47014549708396,
							0
						],
						[
							-76.49585636445511,
							42.47019049709164,
							0
						],
						[
							-76.49594436450883,
							42.47053549715184,
							0
						],
						[
							-76.49602836456535,
							42.47093549722239,
							0
						],
						[
							-76.49605036457804,
							42.47101149723552,
							0
						],
						[
							-76.49619036465015,
							42.47137949729788,
							0
						],
						[
							-76.4966643648783,
							42.47240849746888,
							0
						],
						[
							-76.49686036496965,
							42.47279349753207,
							0
						],
						[
							-76.49690836499066,
							42.47286949754419,
							0
						],
						[
							-76.49699536502813,
							42.4729984975645,
							0
						],
						[
							-76.49703336504392,
							42.47304749757203,
							0
						],
						[
							-76.49777436535356,
							42.47401949772166,
							0
						],
						[
							-76.49815636552036,
							42.47461749781671,
							0
						],
						[
							-76.49843436565325,
							42.47520849791467,
							0
						],
						[
							-76.49879836584029,
							42.47615849807549,
							0
						],
						[
							-76.49893736592038,
							42.47663849815856,
							0
						],
						[
							-76.49906336599963,
							42.47716349825048,
							0
						],
						[
							-76.499156366058,
							42.47754949831804,
							0
						],
						[
							-76.49919136607988,
							42.47769349834325,
							0
						],
						[
							-76.49923736610855,
							42.47788149837611,
							0
						],
						[
							-76.49928236613658,
							42.47806549840829,
							0
						],
						[
							-76.49932236616169,
							42.47823149843735,
							0
						],
						[
							-76.49927936615424,
							42.47831749845498,
							0
						],
						[
							-76.49886936604256,
							42.47858649852128,
							0
						],
						[
							-76.49861436597314,
							42.47875449856268,
							0
						],
						[
							-76.49781836574873,
							42.47917449867254,
							0
						],
						[
							-76.49768536570951,
							42.4792214986866,
							0
						],
						[
							-76.49665536540725,
							42.47960449879911,
							0
						],
						[
							-76.49613736525181,
							42.47975049884705,
							0
						],
						[
							-76.49469236481606,
							42.48012949897563,
							0
						],
						[
							-76.49441836473109,
							42.48016949899411,
							0
						],
						[
							-76.49304136430563,
							42.48039249909109,
							0
						],
						[
							-76.4924833641332,
							42.48048249913033,
							0
						],
						[
							-76.49052036351972,
							42.48070649925121,
							0
						],
						[
							-76.49004636337003,
							42.4807394992765,
							0
						],
						[
							-76.48394436144434,
							42.48118349960564,
							0
						],
						[
							-76.48417136154026,
							42.48149549965411,
							0
						],
						[
							-76.4843683616236,
							42.48176749969639,
							0
						],
						[
							-76.48450536168308,
							42.48197749972964,
							0
						],
						[
							-76.4847213617748,
							42.48228049977688,
							0
						],
						[
							-76.48517536196871,
							42.48293249987899,
							0
						],
						[
							-76.48540136206498,
							42.48325349992914,
							0
						],
						[
							-76.48571436220038,
							42.48372650000388,
							0
						],
						[
							-76.48585936226348,
							42.4839505000394,
							0
						],
						[
							-76.48679536266806,
							42.48535950026185,
							0
						],
						[
							-76.48731536289286,
							42.48614250038546,
							0
						],
						[
							-76.48749536296906,
							42.48639150042415,
							0
						],
						[
							-76.48751236297784,
							42.4864365004318,
							0
						],
						[
							-76.48817236326228,
							42.48741850058651,
							0
						],
						[
							-76.4885553634275,
							42.48799050067667,
							0
						],
						[
							-76.48862336345621,
							42.48808350069108,
							0
						],
						[
							-76.48888036356614,
							42.48845450074921,
							0
						],
						[
							-76.48889936357459,
							42.48848650075438,
							0
						],
						[
							-76.4892893637476,
							42.48913350085811,
							0
						],
						[
							-76.48935636377902,
							42.48926750088015,
							0
						],
						[
							-76.48952936386674,
							42.48970250095351,
							0
						],
						[
							-76.4895993639071,
							42.48994450099538,
							0
						],
						[
							-76.48973336398929,
							42.49047450108787,
							0
						],
						[
							-76.48992336410492,
							42.49121350121669,
							0
						],
						[
							-76.48994236411643,
							42.49128650122942,
							0
						],
						[
							-76.48997036413569,
							42.49142550125395,
							0
						],
						[
							-76.49005136418995,
							42.49180750132123,
							0
						],
						[
							-76.49008636423144,
							42.49221650139537,
							0
						],
						[
							-76.49019536444948,
							42.49469150184815,
							0
						],
						[
							-76.49020736447436,
							42.49497550190012,
							0
						],
						[
							-76.4903923647664,
							42.49812050247354,
							0
						],
						[
							-76.49040736478683,
							42.49833150251191,
							0
						],
						[
							-76.49041636479839,
							42.49844850253315,
							0
						],
						[
							-76.49988436781172,
							42.49809950208503,
							0
						],
						[
							-76.5018383684344,
							42.49803850199456,
							0
						],
						[
							-76.50191236845771,
							42.49803250199045,
							0
						],
						[
							-76.503642369009,
							42.49797850191034,
							0
						],
						[
							-76.50703537009208,
							42.49789750175784,
							0
						],
						[
							-76.50833737050844,
							42.49787650170118,
							0
						],
						[
							-76.50841137053241,
							42.49787950169873,
							0
						],
						[
							-76.50979437097563,
							42.497870501641,
							0
						],
						[
							-76.50965737102636,
							42.49914950188277,
							0
						],
						[
							-76.50976437106013,
							42.49914150187695,
							0
						],
						[
							-76.50978637106637,
							42.49913050187401,
							0
						],
						[
							-76.50992737111117,
							42.49912450186719,
							0
						],
						[
							-76.5099463711164,
							42.4991125018642,
							0
						],
						[
							-76.51021637119868,
							42.49905350184235,
							0
						],
						[
							-76.51025337120976,
							42.49904250183884,
							0
						],
						[
							-76.51037937124818,
							42.49901550182872,
							0
						],
						[
							-76.51040237125433,
							42.49899850182467,
							0
						],
						[
							-76.51062437132194,
							42.49894950180661,
							0
						],
						[
							-76.51082537138159,
							42.49888350178629,
							0
						],
						[
							-76.5108773713979,
							42.49887850178325,
							0
						],
						[
							-76.51089937140333,
							42.4988565017783,
							0
						],
						[
							-76.51108437146026,
							42.4988235017647,
							0
						],
						[
							-76.51118837149282,
							42.49881250175845,
							0
						],
						[
							-76.51124837151089,
							42.49879650175306,
							0
						],
						[
							-76.51134437154127,
							42.49879050174805,
							0
						],
						[
							-76.51136337154648,
							42.49877850174507,
							0
						],
						[
							-76.51141137156112,
							42.49876850174128,
							0
						],
						[
							-76.51150737159159,
							42.49876350173645,
							0
						],
						[
							-76.51152637159679,
							42.49875150173347,
							0
						],
						[
							-76.51166437164,
							42.4987365017251,
							0
						],
						[
							-76.51168637164608,
							42.49872350172181,
							0
						],
						[
							-76.5117303716599,
							42.4987195017193,
							0
						],
						[
							-76.51197537173572,
							42.49868150170234,
							0
						],
						[
							-76.51200437174504,
							42.49868150170116,
							0
						],
						[
							-76.5121873718014,
							42.49864950168782,
							0
						],
						[
							-76.51221237180935,
							42.49864850168662,
							0
						],
						[
							-76.51223137181455,
							42.49863650168365,
							0
						],
						[
							-76.51250937190106,
							42.49859950166555,
							0
						],
						[
							-76.51253837191035,
							42.49859950166437,
							0
						],
						[
							-76.51255637191518,
							42.49858650166124,
							0
						],
						[
							-76.51274637197423,
							42.49856050164873,
							0
						],
						[
							-76.51276937198116,
							42.49855450164668,
							0
						],
						[
							-76.51285737200868,
							42.49854450164126,
							0
						],
						[
							-76.51287837201458,
							42.4985335016384,
							0
						],
						[
							-76.51299137205048,
							42.49852850163288,
							0
						],
						[
							-76.51301337205668,
							42.49851650162977,
							0
						],
						[
							-76.51313237209449,
							42.49851150162403,
							0
						],
						[
							-76.5131513720997,
							42.49849950162104,
							0
						],
						[
							-76.51336637216515,
							42.49845150160345,
							0
						],
						[
							-76.51339137217273,
							42.49844550160134,
							0
						],
						[
							-76.513837372309,
							42.49835250156608,
							0
						],
						[
							-76.51400037235851,
							42.49831450155246,
							0
						],
						[
							-76.51408937238581,
							42.49829750154571,
							0
						],
						[
							-76.51429737245138,
							42.4982815015343,
							0
						],
						[
							-76.514408372487,
							42.4982815015298,
							0
						],
						[
							-76.51443237249485,
							42.49828350152922,
							0
						],
						[
							-76.51454137253052,
							42.49829250152644,
							0
						],
						[
							-76.51456037253749,
							42.49830450152788,
							0
						],
						[
							-76.51465337256846,
							42.49831950152689,
							0
						],
						[
							-76.51481637261922,
							42.4982985015164,
							0
						],
						[
							-76.52701337644642,
							42.49711850080375,
							0
						],
						[
							-76.52653437619853,
							42.49584750058845,
							0
						],
						[
							-76.52651337618758,
							42.49579050057879,
							0
						],
						[
							-76.52627337606351,
							42.49515550047126,
							0
						],
						[
							-76.52100237333558,
							42.48115749809936,
							0
						],
						[
							-76.52026437300152,
							42.47984349788653,
							0
						],
						[
							-76.51868137228527,
							42.47702849743055,
							0
						],
						[
							-76.51837237218662,
							42.4770354974444,
							0
						],
						[
							-76.51827237214138,
							42.47685749741555,
							0
						],
						[
							-76.51485437059557,
							42.4707864964322,
							0
						],
						[
							-76.51262536958774,
							42.46682849579099,
							0
						],
						[
							-76.51260136957303,
							42.4667334957744,
							0
						],
						[
							-76.51222636934465,
							42.46527149551937,
							0
						],
						[
							-76.5118643691245,
							42.46386449527395,
							0
						],
						[
							-76.51178736891293,
							42.46133549480955,
							0
						],
						[
							-76.51176936886257,
							42.46073249469882,
							0
						],
						[
							-76.51049836842196,
							42.46028849466823,
							0
						],
						[
							-76.50742236735573,
							42.45921549459445,
							0
						],
						[
							-76.50674636712729,
							42.45905949459297,
							0
						],
						[
							-76.5065703670678,
							42.45901849459255,
							0
						],
						[
							-76.5059703668475,
							42.45864249454733,
							0
						],
						[
							-76.50532536661034,
							42.45823349449782,
							0
						],
						[
							-76.50508436652179,
							42.45808149447949,
							0
						],
						[
							-76.50360736597888,
							42.4571474943666,
							0
						],
						[
							-76.50327936585931,
							42.45695349434401,
							0
						],
						[
							-76.50285436570441,
							42.45670249431481,
							0
						],
						[
							-76.50228836547902,
							42.45610949422809,
							0
						],
						[
							-76.50224636546193,
							42.45606049422073,
							0
						],
						[
							-76.50130036509917,
							42.45525849411075,
							0
						],
						[
							-76.5008403649284,
							42.4549444940713,
							0
						],
						[
							-76.50073336488867,
							42.45487149406213,
							0
						],
						[
							-76.50065636486012,
							42.45481949405564,
							0
						],
						[
							-76.50064236485488,
							42.45480949405436,
							0
						],
						[
							-76.50012936466939,
							42.45452649402281,
							0
						],
						[
							-76.50002436463254,
							42.4544834940191,
							0
						],
						[
							-76.49989436458692,
							42.45443049401456,
							0
						],
						[
							-76.49976136454018,
							42.45437549400977,
							0
						],
						[
							-76.49966636450961,
							42.45437449401343,
							0
						],
						[
							-76.4996653645076,
							42.45435149400922,
							0
						],
						[
							-76.49805736395585,
							42.45386649398463,
							0
						],
						[
							-76.49611736329861,
							42.45339549397608,
							0
						],
						[
							-76.49486336288538,
							42.45324849399965,
							0
						],
						[
							-76.49468136282601,
							42.45323549400461,
							0
						],
						[
							-76.493271362366,
							42.45313249404263,
							0
						],
						[
							-76.49207936196662,
							42.45290349404853,
							0
						],
						[
							-76.49179936187278,
							42.45284949404988,
							0
						],
						[
							-76.49175436185769,
							42.45284049405003,
							0
						],
						[
							-76.49152936177242,
							42.4526634940264,
							0
						],
						[
							-76.49093336156872,
							42.45249449401927,
							0
						],
						[
							-76.49042836139614,
							42.45235149401326,
							0
						],
						[
							-76.48980936119581,
							42.45232849403406,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090006004</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>6281441</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>3838633</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4804983</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5045175</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090006004</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090006004</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1196</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>538</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>1552.27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>90</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>72</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>48</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.16</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>3.18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.76</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22033</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>21695</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23006</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12829</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12489</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13377</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7824</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7557</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8147</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4996</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4920</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5217</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>5.2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.72</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.35</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>7269</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>10962</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1287</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>2047</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2500</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1132</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00030"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48080935851509,
							42.45513749491767,
							0
						],
						[
							-76.48082435852567,
							42.45521549493149,
							0
						],
						[
							-76.48130535876093,
							42.45631249511489,
							0
						],
						[
							-76.48147335881302,
							42.45628749510347,
							0
						],
						[
							-76.48216735902945,
							42.45620249505966,
							0
						],
						[
							-76.48234035908283,
							42.45617349504731,
							0
						],
						[
							-76.48259235915941,
							42.45611549502639,
							0
						],
						[
							-76.48265135917693,
							42.45609649502048,
							0
						],
						[
							-76.48271135919516,
							42.45608249501548,
							0
						],
						[
							-76.4828283592296,
							42.45604049500297,
							0
						],
						[
							-76.4829333592619,
							42.4560214949952,
							0
						],
						[
							-76.48333935941467,
							42.45632649503518,
							0
						],
						[
							-76.48342235944656,
							42.45639749504495,
							0
						],
						[
							-76.4834713594659,
							42.45644649505204,
							0
						],
						[
							-76.48352435948748,
							42.45650849506136,
							0
						],
						[
							-76.48358535951502,
							42.45661649507886,
							0
						],
						[
							-76.48368935956522,
							42.4568444951168,
							0
						],
						[
							-76.48371835957718,
							42.45688049512229,
							0
						],
						[
							-76.48375735959229,
							42.45691549512718,
							0
						],
						[
							-76.4838053596096,
							42.45694149513005,
							0
						],
						[
							-76.48385835962794,
							42.45695949513124,
							0
						],
						[
							-76.48426135976352,
							42.45704449513064,
							0
						],
						[
							-76.48435635979388,
							42.45704249512644,
							0
						],
						[
							-76.4844503598233,
							42.45703249512078,
							0
						],
						[
							-76.48453835984948,
							42.45700449511203,
							0
						],
						[
							-76.48461635987148,
							42.4569634951013,
							0
						],
						[
							-76.48474135990574,
							42.45688449508165,
							0
						],
						[
							-76.48480235992201,
							42.45683949507086,
							0
						],
						[
							-76.48485935993624,
							42.45678449505837,
							0
						],
						[
							-76.48490835994761,
							42.45672549504548,
							0
						],
						[
							-76.48494835995601,
							42.45666549503277,
							0
						],
						[
							-76.48498035996164,
							42.45660249501983,
							0
						],
						[
							-76.48507035997214,
							42.45635349497016,
							0
						],
						[
							-76.48508335997364,
							42.45631749496294,
							0
						],
						[
							-76.48516835998787,
							42.45614049492678,
							0
						],
						[
							-76.48521135999599,
							42.4560634949108,
							0
						],
						[
							-76.48537136005088,
							42.4561114949132,
							0
						],
						[
							-76.48568436015634,
							42.45617949491312,
							0
						],
						[
							-76.48604136027517,
							42.45623749490938,
							0
						],
						[
							-76.48624436034339,
							42.45627949490894,
							0
						],
						[
							-76.48638036038965,
							42.45631449490991,
							0
						],
						[
							-76.4865593604509,
							42.4563664949123,
							0
						],
						[
							-76.48662836047491,
							42.45639149491412,
							0
						],
						[
							-76.48686036055547,
							42.45647449492009,
							0
						],
						[
							-76.48700436060683,
							42.45654449492719,
							0
						],
						[
							-76.48718036067152,
							42.4566554949406,
							0
						],
						[
							-76.48722136068695,
							42.45668649494467,
							0
						],
						[
							-76.48729536071727,
							42.45677549495813,
							0
						],
						[
							-76.48732836073243,
							42.45683749496827,
							0
						],
						[
							-76.48738736076297,
							42.4569944949949,
							0
						],
						[
							-76.4874103607733,
							42.45703449500137,
							0
						],
						[
							-76.48747336079882,
							42.45710649501213,
							0
						],
						[
							-76.48751236081362,
							42.4571374950163,
							0
						],
						[
							-76.48760136084603,
							42.4571894950223,
							0
						],
						[
							-76.48765036086336,
							42.45721149502439,
							0
						],
						[
							-76.48776536090286,
							42.4572464950262,
							0
						],
						[
							-76.48787436093833,
							42.45725349502308,
							0
						],
						[
							-76.48792936095599,
							42.45725349502086,
							0
						],
						[
							-76.48798336097295,
							42.45724849501777,
							0
						],
						[
							-76.4881263610167,
							42.45721949500661,
							0
						],
						[
							-76.48840136110067,
							42.45716149498475,
							0
						],
						[
							-76.4885063611339,
							42.4571554949794,
							0
						],
						[
							-76.48861036116789,
							42.45716349497668,
							0
						],
						[
							-76.4887313612092,
							42.45719749497806,
							0
						],
						[
							-76.48900136130324,
							42.45729749498563,
							0
						],
						[
							-76.48925536139353,
							42.45741649499734,
							0
						],
						[
							-76.48934336142523,
							42.45746349500248,
							0
						],
						[
							-76.48939536144428,
							42.45749549500629,
							0
						],
						[
							-76.48948836147966,
							42.4575704950164,
							0
						],
						[
							-76.48957036151188,
							42.45765049502786,
							0
						],
						[
							-76.48964136154093,
							42.45773549504071,
							0
						],
						[
							-76.48969936156612,
							42.45782449505482,
							0
						],
						[
							-76.4898273616277,
							42.45810249510102,
							0
						],
						[
							-76.48985036163803,
							42.4581424951075,
							0
						],
						[
							-76.48991636166514,
							42.45822249511961,
							0
						],
						[
							-76.48999236169513,
							42.45829849513059,
							0
						],
						[
							-76.49007936172828,
							42.4583694951402,
							0
						],
						[
							-76.49023136178386,
							42.45846149515106,
							0
						],
						[
							-76.4902783617999,
							42.45847449515156,
							0
						],
						[
							-76.49037636183259,
							42.45849149515074,
							0
						],
						[
							-76.49046436186141,
							42.45849949514865,
							0
						],
						[
							-76.49059136189368,
							42.45838449512226,
							0
						],
						[
							-76.49082636194998,
							42.45812549506486,
							0
						],
						[
							-76.49098236199119,
							42.45800549503635,
							0
						],
						[
							-76.49090036195801,
							42.45791249502246,
							0
						],
						[
							-76.49082436192609,
							42.45781049500668,
							0
						],
						[
							-76.49076236189791,
							42.45769849498849,
							0
						],
						[
							-76.49071636187452,
							42.4575814949687,
							0
						],
						[
							-76.49068736185659,
							42.45746449494826,
							0
						],
						[
							-76.49055536175621,
							42.45667849480826,
							0
						],
						[
							-76.49055136175095,
							42.45662449479844,
							0
						],
						[
							-76.49056136174588,
							42.45651249477733,
							0
						],
						[
							-76.49057736174696,
							42.4564574947665,
							0
						],
						[
							-76.49060036175035,
							42.45640349475558,
							0
						],
						[
							-76.49066336176355,
							42.45630849473548,
							0
						],
						[
							-76.49075236178466,
							42.4562074947132,
							0
						],
						[
							-76.49083236180331,
							42.45611249469238,
							0
						],
						[
							-76.49089136181486,
							42.45601249467153,
							0
						],
						[
							-76.49090736181668,
							42.45596749466255,
							0
						],
						[
							-76.49092136181416,
							42.45587249464442,
							0
						],
						[
							-76.49091736180927,
							42.45582349463552,
							0
						],
						[
							-76.49090636180205,
							42.45577349462671,
							0
						],
						[
							-76.490812361758,
							42.45558549459575,
							0
						],
						[
							-76.49072036171697,
							42.45542949457064,
							0
						],
						[
							-76.49063836167943,
							42.45527749454584,
							0
						],
						[
							-76.49061936166935,
							42.45522349453663,
							0
						],
						[
							-76.49060736165924,
							42.45513849452139,
							0
						],
						[
							-76.49063236165294,
							42.4549444944845,
							0
						],
						[
							-76.49065336165266,
							42.45484949446608,
							0
						],
						[
							-76.49067836165604,
							42.45478649445342,
							0
						],
						[
							-76.49071336166253,
							42.45472249444017,
							0
						],
						[
							-76.49084836169241,
							42.45454049440106,
							0
						],
						[
							-76.4908893616999,
							42.45446349438515,
							0
						],
						[
							-76.49092136170154,
							42.45434649436224,
							0
						],
						[
							-76.49092436169785,
							42.45428349435046,
							0
						],
						[
							-76.4909193616919,
							42.45422449433975,
							0
						],
						[
							-76.49088236166445,
							42.45401349430223,
							0
						],
						[
							-76.49081836162169,
							42.45371249424916,
							0
						],
						[
							-76.49070136155736,
							42.45334949418677,
							0
						],
						[
							-76.49067636154506,
							42.45329149417705,
							0
						],
						[
							-76.49063536152794,
							42.45323749416875,
							0
						],
						[
							-76.49057636150573,
							42.45319349416298,
							0
						],
						[
							-76.49050836148135,
							42.45315849415925,
							0
						],
						[
							-76.48998336129739,
							42.45294849414167,
							0
						],
						[
							-76.48989436126564,
							42.45290549413731,
							0
						],
						[
							-76.48981936123731,
							42.45284749412964,
							0
						],
						[
							-76.4897873612244,
							42.45281149412426,
							0
						],
						[
							-76.48972936120585,
							42.45281249412681,
							0
						],
						[
							-76.48968236119283,
							42.45284049413389,
							0
						],
						[
							-76.48962936117752,
							42.45286349414029,
							0
						],
						[
							-76.48956936115901,
							42.45287349414456,
							0
						],
						[
							-76.4895083611398,
							42.45287849414794,
							0
						],
						[
							-76.4894503611206,
							42.45287049414881,
							0
						],
						[
							-76.48939236110104,
							42.45285749414876,
							0
						],
						[
							-76.48932236107666,
							42.45283149414679,
							0
						],
						[
							-76.48917336102369,
							42.45276149413987,
							0
						],
						[
							-76.48910736100088,
							42.45273949413848,
							0
						],
						[
							-76.4890053609666,
							42.4527184941387,
							0
						],
						[
							-76.48884936091602,
							42.45271149414374,
							0
						],
						[
							-76.48875836088689,
							42.45271249414758,
							0
						],
						[
							-76.4886093608399,
							42.45272349415566,
							0
						],
						[
							-76.48816636070151,
							42.45277449418303,
							0
						],
						[
							-76.48798636064427,
							42.45278149419161,
							0
						],
						[
							-76.4874293604657,
							42.4527834942145,
							0
						],
						[
							-76.48677836025745,
							42.4527924942425,
							0
						],
						[
							-76.48661436020433,
							42.45278549424785,
							0
						],
						[
							-76.48640036013387,
							42.45276149425208,
							0
						],
						[
							-76.48630636010179,
							42.45273549425106,
							0
						],
						[
							-76.48616036005207,
							42.45269649424976,
							0
						],
						[
							-76.48611536003638,
							42.45267949424843,
							0
						],
						[
							-76.48604036000906,
							42.45263549424333,
							0
						],
						[
							-76.48597535998593,
							42.45260449424026,
							0
						],
						[
							-76.48578935992145,
							42.45253949423574,
							0
						],
						[
							-76.48573235990219,
							42.45252649423566,
							0
						],
						[
							-76.4856213598654,
							42.45251049423717,
							0
						],
						[
							-76.48551035982918,
							42.45250249424019,
							0
						],
						[
							-76.48543935980683,
							42.45250849424418,
							0
						],
						[
							-76.48537535978632,
							42.45250849424676,
							0
						],
						[
							-76.48519535972973,
							42.45252449425699,
							0
						],
						[
							-76.48477935960133,
							42.45259349428658,
							0
						],
						[
							-76.4846093595496,
							42.45263149430048,
							0
						],
						[
							-76.48439935948709,
							42.4526974943212,
							0
						],
						[
							-76.4840383593812,
							42.45283249436078,
							0
						],
						[
							-76.4835943592478,
							42.45295549440149,
							0
						],
						[
							-76.48358735924886,
							42.45300049441007,
							0
						],
						[
							-76.48359435925805,
							42.45309449442719,
							0
						],
						[
							-76.48362935929119,
							42.4533914944807,
							0
						],
						[
							-76.48367135932325,
							42.45364349452559,
							0
						],
						[
							-76.4837053593391,
							42.4537104945366,
							0
						],
						[
							-76.48375335938299,
							42.45409649460603,
							0
						],
						[
							-76.48379835943263,
							42.45457349469244,
							0
						],
						[
							-76.48369735940331,
							42.45461549470429,
							0
						],
						[
							-76.48363535938482,
							42.45463449471033,
							0
						],
						[
							-76.48347135933435,
							42.4546634947223,
							0
						],
						[
							-76.48341135931544,
							42.45466849472567,
							0
						],
						[
							-76.48335235929726,
							42.45467849472991,
							0
						],
						[
							-76.48312135922431,
							42.45469449474221,
							0
						],
						[
							-76.48230235896196,
							42.45470049477646,
							0
						],
						[
							-76.48211535889884,
							42.45465849477625,
							0
						],
						[
							-76.48194635884343,
							42.45464249478013,
							0
						],
						[
							-76.48170335876205,
							42.45459649478147,
							0
						],
						[
							-76.48156735871585,
							42.45456149478049,
							0
						],
						[
							-76.48148935868859,
							42.45453149477809,
							0
						],
						[
							-76.48146735868654,
							42.45459949479157,
							0
						],
						[
							-76.48142635867804,
							42.45466249480487,
							0
						],
						[
							-76.48136835866349,
							42.45471749481738,
							0
						],
						[
							-76.48129535864345,
							42.45476349482884,
							0
						],
						[
							-76.48099635855709,
							42.45489349486498,
							0
						],
						[
							-76.48093335853962,
							42.45493049487439,
							0
						],
						[
							-76.48088035852561,
							42.4549714948841,
							0
						],
						[
							-76.48084035851647,
							42.45502149489496,
							0
						],
						[
							-76.48081935851313,
							42.45506749490433,
							0
						],
						[
							-76.48080935851509,
							42.45513749491767,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090006003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>314826</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4550081</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4868013</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090006003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090006003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1096</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>214</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>77.79</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>47</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>47</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>7.77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>21.37</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.43</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>17496</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>17157</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>18469</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10455</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10115</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6377</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6110</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6699</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3967</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3891</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4188</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>111</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>114</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>116</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>83</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>86</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>87</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>5.34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>2.75</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>10563</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>15652</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>313</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>532</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1158</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1158</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>75</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00031"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48722136068695,
							42.45668649494467,
							0
						],
						[
							-76.48718036067152,
							42.4566554949406,
							0
						],
						[
							-76.48700436060683,
							42.45654449492719,
							0
						],
						[
							-76.48686036055547,
							42.45647449492009,
							0
						],
						[
							-76.48662836047491,
							42.45639149491412,
							0
						],
						[
							-76.4865593604509,
							42.4563664949123,
							0
						],
						[
							-76.48638036038965,
							42.45631449490991,
							0
						],
						[
							-76.48624436034339,
							42.45627949490894,
							0
						],
						[
							-76.48604136027517,
							42.45623749490938,
							0
						],
						[
							-76.48568436015634,
							42.45617949491312,
							0
						],
						[
							-76.48537136005088,
							42.4561114949132,
							0
						],
						[
							-76.48521135999599,
							42.4560634949108,
							0
						],
						[
							-76.48516835998787,
							42.45614049492678,
							0
						],
						[
							-76.48508335997364,
							42.45631749496294,
							0
						],
						[
							-76.48507035997214,
							42.45635349497016,
							0
						],
						[
							-76.48498035996164,
							42.45660249501983,
							0
						],
						[
							-76.48494835995601,
							42.45666549503277,
							0
						],
						[
							-76.48490835994761,
							42.45672549504548,
							0
						],
						[
							-76.48485935993624,
							42.45678449505837,
							0
						],
						[
							-76.48480235992201,
							42.45683949507086,
							0
						],
						[
							-76.48474135990574,
							42.45688449508165,
							0
						],
						[
							-76.48461635987148,
							42.4569634951013,
							0
						],
						[
							-76.48453835984948,
							42.45700449511203,
							0
						],
						[
							-76.4844503598233,
							42.45703249512078,
							0
						],
						[
							-76.48435635979388,
							42.45704249512644,
							0
						],
						[
							-76.48426135976352,
							42.45704449513064,
							0
						],
						[
							-76.48385835962794,
							42.45695949513124,
							0
						],
						[
							-76.4838053596096,
							42.45694149513005,
							0
						],
						[
							-76.48375735959229,
							42.45691549512718,
							0
						],
						[
							-76.48371835957718,
							42.45688049512229,
							0
						],
						[
							-76.48368935956522,
							42.4568444951168,
							0
						],
						[
							-76.48358535951502,
							42.45661649507886,
							0
						],
						[
							-76.48352435948748,
							42.45650849506136,
							0
						],
						[
							-76.4834713594659,
							42.45644649505204,
							0
						],
						[
							-76.48342235944656,
							42.45639749504495,
							0
						],
						[
							-76.48333935941467,
							42.45632649503518,
							0
						],
						[
							-76.4829333592619,
							42.4560214949952,
							0
						],
						[
							-76.4828283592296,
							42.45604049500297,
							0
						],
						[
							-76.48271135919516,
							42.45608249501548,
							0
						],
						[
							-76.48265135917693,
							42.45609649502048,
							0
						],
						[
							-76.48259235915941,
							42.45611549502639,
							0
						],
						[
							-76.48234035908283,
							42.45617349504731,
							0
						],
						[
							-76.48216735902945,
							42.45620249505966,
							0
						],
						[
							-76.48147335881302,
							42.45628749510347,
							0
						],
						[
							-76.48130535876093,
							42.45631249511489,
							0
						],
						[
							-76.48135635878624,
							42.4564334951352,
							0
						],
						[
							-76.48162635891914,
							42.45706049524021,
							0
						],
						[
							-76.48209635915093,
							42.45815749542405,
							0
						],
						[
							-76.48212235916486,
							42.45823349543706,
							0
						],
						[
							-76.48214235917793,
							42.45832349545288,
							0
						],
						[
							-76.48214935918712,
							42.45841749546998,
							0
						],
						[
							-76.48214235919188,
							42.45851249548782,
							0
						],
						[
							-76.48213035919238,
							42.45857149549922,
							0
						],
						[
							-76.48209135918718,
							42.45867049551912,
							0
						],
						[
							-76.48199935917306,
							42.45887949556148,
							0
						],
						[
							-76.48191535916366,
							42.45911749560889,
							0
						],
						[
							-76.48188835916046,
							42.45919149562366,
							0
						],
						[
							-76.48184335916463,
							42.45944349567209,
							0
						],
						[
							-76.48182435917919,
							42.45972349572462,
							0
						],
						[
							-76.48182035918984,
							42.45988549575474,
							0
						],
						[
							-76.48184135921055,
							42.46007449578884,
							0
						],
						[
							-76.48188835923885,
							42.46025349582003,
							0
						],
						[
							-76.48196035927523,
							42.46043349585041,
							0
						],
						[
							-76.48201935930207,
							42.4605404958678,
							0
						],
						[
							-76.48205835931952,
							42.4606074958786,
							0
						],
						[
							-76.48217935937016,
							42.46076749590328,
							0
						],
						[
							-76.48255135951847,
							42.46115949596072,
							0
						],
						[
							-76.48267335956848,
							42.46130649598295,
							0
						],
						[
							-76.48278235961466,
							42.46145849600665,
							0
						],
						[
							-76.48284335964111,
							42.46155149602138,
							0
						],
						[
							-76.48296835969842,
							42.4617844960594,
							0
						],
						[
							-76.4832093598134,
							42.46229449614393,
							0
						],
						[
							-76.48329135985384,
							42.46248549617594,
							0
						],
						[
							-76.48330535986075,
							42.46251849618147,
							0
						],
						[
							-76.48347235994312,
							42.46290849624682,
							0
						],
						[
							-76.48353535997553,
							42.46307349627477,
							0
						],
						[
							-76.48388536015531,
							42.4639874964296,
							0
						],
						[
							-76.48403736023354,
							42.4643864964972,
							0
						],
						[
							-76.48410836027126,
							42.46458849653168,
							0
						],
						[
							-76.48415936029855,
							42.46473649655697,
							0
						],
						[
							-76.4842503603516,
							42.46505949661302,
							0
						],
						[
							-76.48429636039057,
							42.46538749667178,
							0
						],
						[
							-76.48429636041486,
							42.4657164967326,
							0
						],
						[
							-76.48426236042292,
							42.46597349678149,
							0
						],
						[
							-76.48419736042607,
							42.46629849684422,
							0
						],
						[
							-76.48414236042473,
							42.46651949688729,
							0
						],
						[
							-76.484122360424,
							42.46659649690233,
							0
						],
						[
							-76.4839793604055,
							42.46696749697671,
							0
						],
						[
							-76.48388736038935,
							42.46714849701387,
							0
						],
						[
							-76.48368436035196,
							42.46752449709162,
							0
						],
						[
							-76.48350536031901,
							42.46785649716022,
							0
						],
						[
							-76.48331836028308,
							42.46818249722806,
							0
						],
						[
							-76.48325136026828,
							42.46827349724759,
							0
						],
						[
							-76.48306636022738,
							42.46852349730128,
							0
						],
						[
							-76.48297136020501,
							42.46863349732546,
							0
						],
						[
							-76.48262536012187,
							42.46901149740937,
							0
						],
						[
							-76.48250136009146,
							42.46913849743785,
							0
						],
						[
							-76.48232936004712,
							42.46928549747199,
							0
						],
						[
							-76.48216036000123,
							42.4693984974997,
							0
						],
						[
							-76.48192835993646,
							42.46952949753332,
							0
						],
						[
							-76.48185335991474,
							42.46956149754227,
							0
						],
						[
							-76.48159735984152,
							42.46968249757499,
							0
						],
						[
							-76.48138135977803,
							42.46976149759836,
							0
						],
						[
							-76.48110335968939,
							42.46976949761108,
							0
						],
						[
							-76.48029935943076,
							42.46976149764214,
							0
						],
						[
							-76.48018435939467,
							42.46977249764882,
							0
						],
						[
							-76.48007435936113,
							42.4697964976577,
							0
						],
						[
							-76.48002235934578,
							42.46981449766314,
							0
						],
						[
							-76.47997335933182,
							42.46983849766954,
							0
						],
						[
							-76.48011535938589,
							42.46995349768506,
							0
						],
						[
							-76.48026535944149,
							42.47005449769767,
							0
						],
						[
							-76.4803183594608,
							42.47008549770126,
							0
						],
						[
							-76.4805393595408,
							42.47020849771506,
							0
						],
						[
							-76.48099035969715,
							42.47036549772582,
							0
						],
						[
							-76.48138035983122,
							42.4704864977324,
							0
						],
						[
							-76.48233936015933,
							42.47076149774441,
							0
						],
						[
							-76.48325536047338,
							42.47103349775762,
							0
						],
						[
							-76.4841943607958,
							42.47131849777229,
							0
						],
						[
							-76.48460936093859,
							42.47144849777952,
							0
						],
						[
							-76.48489236103481,
							42.47152149778156,
							0
						],
						[
							-76.48514636111972,
							42.47156749777977,
							0
						],
						[
							-76.4854043612046,
							42.47159549777452,
							0
						],
						[
							-76.4856173612731,
							42.47159749776628,
							0
						],
						[
							-76.48569136129713,
							42.47160149776401,
							0
						],
						[
							-76.48825236212258,
							42.47164949766921,
							0
						],
						[
							-76.48840136216991,
							42.47164249766188,
							0
						],
						[
							-76.48855036221624,
							42.47162249765214,
							0
						],
						[
							-76.48869536226063,
							42.47159349764091,
							0
						],
						[
							-76.48883536230247,
							42.47155149762747,
							0
						],
						[
							-76.48896936234169,
							42.47150049761264,
							0
						],
						[
							-76.48909036237609,
							42.47144049759665,
							0
						],
						[
							-76.48916236239543,
							42.4713894975843,
							0
						],
						[
							-76.48930836243521,
							42.47129349756065,
							0
						],
						[
							-76.49025036267953,
							42.47050849737741,
							0
						],
						[
							-76.49049936274407,
							42.47030049732889,
							0
						],
						[
							-76.49065636278168,
							42.47012749729056,
							0
						],
						[
							-76.4906993627914,
							42.47007249727865,
							0
						],
						[
							-76.49072436278014,
							42.46981149722939,
							0
						],
						[
							-76.49071936277022,
							42.4696984972087,
							0
						],
						[
							-76.4906543627085,
							42.46914549710911,
							0
						],
						[
							-76.49050636260495,
							42.46838649697481,
							0
						],
						[
							-76.49025936243616,
							42.46717449676077,
							0
						],
						[
							-76.49012936234666,
							42.46652749664643,
							0
						],
						[
							-76.49008336230436,
							42.46615449657933,
							0
						],
						[
							-76.49008236227944,
							42.46582149651782,
							0
						],
						[
							-76.49012836225788,
							42.46532949642499,
							0
						],
						[
							-76.49014436225701,
							42.46524849640938,
							0
						],
						[
							-76.49016036225217,
							42.46511349638377,
							0
						],
						[
							-76.49026036226256,
							42.46481949632538,
							0
						],
						[
							-76.49031736227244,
							42.46470549630198,
							0
						],
						[
							-76.49035036227906,
							42.46465149629066,
							0
						],
						[
							-76.490455362303,
							42.464519496262,
							0
						],
						[
							-76.49056736232954,
							42.46439249623401,
							0
						],
						[
							-76.4906993623601,
							42.46423249619909,
							0
						],
						[
							-76.49077436237516,
							42.46411049617348,
							0
						],
						[
							-76.4908753623928,
							42.46391049613244,
							0
						],
						[
							-76.49091936239769,
							42.46378549610756,
							0
						],
						[
							-76.4909463624006,
							42.46370749609204,
							0
						],
						[
							-76.4909873623984,
							42.46349949605192,
							0
						],
						[
							-76.49100036238528,
							42.46326549600814,
							0
						],
						[
							-76.49100436236722,
							42.46300349595953,
							0
						],
						[
							-76.4909383622623,
							42.46186949575255,
							0
						],
						[
							-76.4909183622443,
							42.46171249572434,
							0
						],
						[
							-76.49087436221762,
							42.46154249569469,
							0
						],
						[
							-76.49073736214253,
							42.46112049562223,
							0
						],
						[
							-76.4907303621373,
							42.4610804956151,
							0
						],
						[
							-76.49072936213368,
							42.46103549560683,
							0
						],
						[
							-76.49074536213246,
							42.46094949559026,
							0
						],
						[
							-76.49078436213891,
							42.46086749557352,
							0
						],
						[
							-76.4908133621452,
							42.46082649556477,
							0
						],
						[
							-76.49084636215312,
							42.46079049555678,
							0
						],
						[
							-76.49092936217504,
							42.46072649554159,
							0
						],
						[
							-76.49102636220277,
							42.46068049552915,
							0
						],
						[
							-76.491530362349,
							42.46047049546993,
							0
						],
						[
							-76.4917943624238,
							42.46033649543447,
							0
						],
						[
							-76.49194836246556,
							42.460232495409,
							0
						],
						[
							-76.49196536245634,
							42.46003349537151,
							0
						],
						[
							-76.49195236244019,
							42.4598714953421,
							0
						],
						[
							-76.49187836239422,
							42.45957049528944,
							0
						],
						[
							-76.49178536233885,
							42.45922449522922,
							0
						],
						[
							-76.4916513622734,
							42.45892049517845,
							0
						],
						[
							-76.4916223622601,
							42.45886649516964,
							0
						],
						[
							-76.49159036224555,
							42.45880849516022,
							0
						],
						[
							-76.49145936218903,
							42.45861249512929,
							0
						],
						[
							-76.49123336209541,
							42.45832649508554,
							0
						],
						[
							-76.49098236199119,
							42.45800549503635,
							0
						],
						[
							-76.49082636194998,
							42.45812549506486,
							0
						],
						[
							-76.49059136189368,
							42.45838449512226,
							0
						],
						[
							-76.49046436186141,
							42.45849949514865,
							0
						],
						[
							-76.49037636183259,
							42.45849149515074,
							0
						],
						[
							-76.4902783617999,
							42.45847449515156,
							0
						],
						[
							-76.49023136178386,
							42.45846149515106,
							0
						],
						[
							-76.49007936172828,
							42.4583694951402,
							0
						],
						[
							-76.48999236169513,
							42.45829849513059,
							0
						],
						[
							-76.48991636166514,
							42.45822249511961,
							0
						],
						[
							-76.48985036163803,
							42.4581424951075,
							0
						],
						[
							-76.4898273616277,
							42.45810249510102,
							0
						],
						[
							-76.48969936156612,
							42.45782449505482,
							0
						],
						[
							-76.48964136154093,
							42.45773549504071,
							0
						],
						[
							-76.48957036151188,
							42.45765049502786,
							0
						],
						[
							-76.48948836147966,
							42.4575704950164,
							0
						],
						[
							-76.48939536144428,
							42.45749549500629,
							0
						],
						[
							-76.48934336142523,
							42.45746349500248,
							0
						],
						[
							-76.48925536139353,
							42.45741649499734,
							0
						],
						[
							-76.48900136130324,
							42.45729749498563,
							0
						],
						[
							-76.4887313612092,
							42.45719749497806,
							0
						],
						[
							-76.48861036116789,
							42.45716349497668,
							0
						],
						[
							-76.4885063611339,
							42.4571554949794,
							0
						],
						[
							-76.48840136110067,
							42.45716149498475,
							0
						],
						[
							-76.4881263610167,
							42.45721949500661,
							0
						],
						[
							-76.48798336097295,
							42.45724849501777,
							0
						],
						[
							-76.48792936095599,
							42.45725349502086,
							0
						],
						[
							-76.48787436093833,
							42.45725349502308,
							0
						],
						[
							-76.48776536090286,
							42.4572464950262,
							0
						],
						[
							-76.48765036086336,
							42.45721149502439,
							0
						],
						[
							-76.48760136084603,
							42.4571894950223,
							0
						],
						[
							-76.48751236081362,
							42.4571374950163,
							0
						],
						[
							-76.48747336079882,
							42.45710649501213,
							0
						],
						[
							-76.4874103607733,
							42.45703449500137,
							0
						],
						[
							-76.48738736076297,
							42.4569944949949,
							0
						],
						[
							-76.48732836073243,
							42.45683749496827,
							0
						],
						[
							-76.48729536071727,
							42.45677549495813,
							0
						],
						[
							-76.48722136068695,
							42.45668649494467,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090006002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>1052002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4638130</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4866235</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090006002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090006002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1342</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>502</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>259.96</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>7.83</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>15.11</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.58</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>18993</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>18655</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>19967</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>11388</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>11047</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11935</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7028</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6760</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7350</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4307</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4230</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4528</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>3.17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>1.93</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>9379</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>13482</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>165</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>760</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1841</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2868</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1000</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00032"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48959736046497,
							42.44334349238083,
							0
						],
						[
							-76.48950136047192,
							42.44385549247943,
							0
						],
						[
							-76.48942636047978,
							42.44428849256256,
							0
						],
						[
							-76.48937436049573,
							42.4447304926464,
							0
						],
						[
							-76.4893783605006,
							42.44477949265531,
							0
						],
						[
							-76.4894073605175,
							42.4448824926732,
							0
						],
						[
							-76.48946436054274,
							42.44497649268828,
							0
						],
						[
							-76.48980436068007,
							42.44535949274535,
							0
						],
						[
							-76.48989536071944,
							42.44549749276719,
							0
						],
						[
							-76.48994936074475,
							42.445605492785,
							0
						],
						[
							-76.48998536076418,
							42.44571249280332,
							0
						],
						[
							-76.4901523608542,
							42.44620649288794,
							0
						],
						[
							-76.49024736090712,
							42.44651049294031,
							0
						],
						[
							-76.49027136092477,
							42.44664549296433,
							0
						],
						[
							-76.49032736108092,
							42.44851849330848,
							0
						],
						[
							-76.49034736114406,
							42.44928749344988,
							0
						],
						[
							-76.49036436118935,
							42.44982749354907,
							0
						],
						[
							-76.49037236119591,
							42.44988149355874,
							0
						],
						[
							-76.49039336120767,
							42.44994949357046,
							0
						],
						[
							-76.49041536121796,
							42.4499934935777,
							0
						],
						[
							-76.49046936124023,
							42.45006049358791,
							0
						],
						[
							-76.49070836133434,
							42.45029649362189,
							0
						],
						[
							-76.49076936135951,
							42.45037249363348,
							0
						],
						[
							-76.4907953613708,
							42.45041249363982,
							0
						],
						[
							-76.49082836138635,
							42.45047949365085,
							0
						],
						[
							-76.490873361419,
							42.45072649369475,
							0
						],
						[
							-76.49098436151793,
							42.45158449384893,
							0
						],
						[
							-76.49098636152625,
							42.45168849386808,
							0
						],
						[
							-76.49097636152605,
							42.45172949387606,
							0
						],
						[
							-76.49095136152174,
							42.45177949388632,
							0
						],
						[
							-76.49089736150839,
							42.4518334938985,
							0
						],
						[
							-76.49083536149122,
							42.45187049390784,
							0
						],
						[
							-76.49073336146093,
							42.45190349391806,
							0
						],
						[
							-76.49062536142671,
							42.45190949392354,
							0
						],
						[
							-76.4905093613889,
							42.45190149392677,
							0
						],
						[
							-76.49040436135434,
							42.45188949392879,
							0
						],
						[
							-76.49028736131628,
							42.45188249393224,
							0
						],
						[
							-76.49017336127976,
							42.45188349393704,
							0
						],
						[
							-76.49005936124496,
							42.45190749394609,
							0
						],
						[
							-76.48995836121601,
							42.45195449395886,
							0
						],
						[
							-76.48990536120203,
							42.45199549396859,
							0
						],
						[
							-76.48987336119413,
							42.4520274939758,
							0
						],
						[
							-76.48984536118816,
							42.45206849398452,
							0
						],
						[
							-76.48982636118872,
							42.45215849400193,
							0
						],
						[
							-76.48981636119244,
							42.45225249401971,
							0
						],
						[
							-76.48980936119581,
							42.45232849403406,
							0
						],
						[
							-76.49042836139614,
							42.45235149401326,
							0
						],
						[
							-76.49093336156872,
							42.45249449401927,
							0
						],
						[
							-76.49152936177242,
							42.4526634940264,
							0
						],
						[
							-76.49175436185769,
							42.45284049405003,
							0
						],
						[
							-76.49179936187278,
							42.45284949404988,
							0
						],
						[
							-76.49207936196662,
							42.45290349404853,
							0
						],
						[
							-76.493271362366,
							42.45313249404263,
							0
						],
						[
							-76.49468136282601,
							42.45323549400461,
							0
						],
						[
							-76.49468036282208,
							42.45318649399559,
							0
						],
						[
							-76.49467236279813,
							42.45289649394228,
							0
						],
						[
							-76.49466036276635,
							42.45251849387285,
							0
						],
						[
							-76.4946383627334,
							42.45216749380884,
							0
						],
						[
							-76.49508136287443,
							42.45215249378815,
							0
						],
						[
							-76.49511336286079,
							42.45182849372694,
							0
						],
						[
							-76.4950943628248,
							42.4514234936528,
							0
						],
						[
							-76.49629836320833,
							42.45138549359704,
							0
						],
						[
							-76.49622636310485,
							42.45029649339857,
							0
						],
						[
							-76.49606736305398,
							42.45029849340537,
							0
						],
						[
							-76.4949813627079,
							42.45033049345526,
							0
						],
						[
							-76.49488136254136,
							42.44850849312234,
							0
						],
						[
							-76.49481736243679,
							42.44736949291428,
							0
						],
						[
							-76.49475336233266,
							42.44623649270732,
							0
						],
						[
							-76.49468936222713,
							42.44508449249683,
							0
						],
						[
							-76.4946103620952,
							42.44363949223275,
							0
						],
						[
							-76.49459536206116,
							42.44324349216012,
							0
						],
						[
							-76.49459136205257,
							42.44314449214195,
							0
						],
						[
							-76.49456236204202,
							42.44312749213999,
							0
						],
						[
							-76.49451036202409,
							42.44311049213895,
							0
						],
						[
							-76.49448836201583,
							42.44309449213689,
							0
						],
						[
							-76.49422836192475,
							42.44299049212817,
							0
						],
						[
							-76.49408036187205,
							42.44291949212102,
							0
						],
						[
							-76.49398336183965,
							42.4429024921218,
							0
						],
						[
							-76.49388036180461,
							42.44287549212098,
							0
						],
						[
							-76.49367036173888,
							42.44289749213355,
							0
						],
						[
							-76.49301336153317,
							42.44296649217289,
							0
						],
						[
							-76.4924183613469,
							42.44302949220861,
							0
						],
						[
							-76.49224936127182,
							42.44274649216312,
							0
						],
						[
							-76.49209536122483,
							42.44277949217545,
							0
						],
						[
							-76.49186336115403,
							42.44282849219391,
							0
						],
						[
							-76.49158136107262,
							42.44295149222805,
							0
						],
						[
							-76.49141836102555,
							42.44302249224779,
							0
						],
						[
							-76.49124936097274,
							42.44304149225813,
							0
						],
						[
							-76.49111536093092,
							42.44305749226651,
							0
						],
						[
							-76.49105636091323,
							42.44307449227205,
							0
						],
						[
							-76.49091536087404,
							42.44315649229291,
							0
						],
						[
							-76.49087136086074,
							42.44316749229674,
							0
						],
						[
							-76.49057536077389,
							42.44327749232906,
							0
						],
						[
							-76.49053836076325,
							42.44329449233371,
							0
						],
						[
							-76.49039736071965,
							42.44331649234346,
							0
						],
						[
							-76.4901753606496,
							42.44333249235542,
							0
						],
						[
							-76.49002636060179,
							42.44333249236146,
							0
						],
						[
							-76.48989336055833,
							42.44332149236478,
							0
						],
						[
							-76.48959736046497,
							42.44334349238083,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090007001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>424698</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>5882</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4477390</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4915674</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090007001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090007001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1301</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>447</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>104.94</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>44</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>6.03</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>25.68</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.37</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>16482</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>16144</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>17456</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>9966</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>9626</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>10514</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6120</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>5853</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6442</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3738</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3661</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>3958</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>108</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>112</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>113</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>84</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>85</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>9.92</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>4.26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>12332</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>18546</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>220</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>847</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1041</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1616</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>983</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>91</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00033"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.49582936246519,
							42.44335349213053,
							0
						],
						[
							-76.49569636241958,
							42.44331349212852,
							0
						],
						[
							-76.49547336234397,
							42.44325849212736,
							0
						],
						[
							-76.49527336227818,
							42.44323649213138,
							0
						],
						[
							-76.49483636213517,
							42.44319849214205,
							0
						],
						[
							-76.49459936205552,
							42.44314949214257,
							0
						],
						[
							-76.49459136205257,
							42.44314449214195,
							0
						],
						[
							-76.49459536206116,
							42.44324349216012,
							0
						],
						[
							-76.4946103620952,
							42.44363949223275,
							0
						],
						[
							-76.49468936222713,
							42.44508449249683,
							0
						],
						[
							-76.49475336233266,
							42.44623649270732,
							0
						],
						[
							-76.49481736243679,
							42.44736949291428,
							0
						],
						[
							-76.49488136254136,
							42.44850849312234,
							0
						],
						[
							-76.49610736293224,
							42.44847449306644,
							0
						],
						[
							-76.49730736331473,
							42.44844049301158,
							0
						],
						[
							-76.49749136337363,
							42.44843849300376,
							0
						],
						[
							-76.49822136360577,
							42.44841049296905,
							0
						],
						[
							-76.49838436365792,
							42.44840849296207,
							0
						],
						[
							-76.49949336401139,
							42.44837649291125,
							0
						],
						[
							-76.49973736408938,
							42.44837249290064,
							0
						],
						[
							-76.50075736441434,
							42.44834149285362,
							0
						],
						[
							-76.5008253644358,
							42.44833649284995,
							0
						],
						[
							-76.50088636445396,
							42.44831749284397,
							0
						],
						[
							-76.50174436470083,
							42.44793249273804,
							0
						],
						[
							-76.5019303647543,
							42.44784849271498,
							0
						],
						[
							-76.50191136474696,
							42.44783149271261,
							0
						],
						[
							-76.50191136474534,
							42.44780949270854,
							0
						],
						[
							-76.50187536473187,
							42.44778349270517,
							0
						],
						[
							-76.50187436473021,
							42.44776549270188,
							0
						],
						[
							-76.50184536471936,
							42.44774449269917,
							0
						],
						[
							-76.50183736471556,
							42.44772749269637,
							0
						],
						[
							-76.50171836466644,
							42.44757949267378,
							0
						],
						[
							-76.50169236465699,
							42.44756449267208,
							0
						],
						[
							-76.5016893646547,
							42.44754649266888,
							0
						],
						[
							-76.50162336462792,
							42.44747049265749,
							0
						],
						[
							-76.50162236462629,
							42.44745249265421,
							0
						],
						[
							-76.50158536461241,
							42.4474254926507,
							0
						],
						[
							-76.50158536461078,
							42.44740349264664,
							0
						],
						[
							-76.50155636459992,
							42.44738249264393,
							0
						],
						[
							-76.50153836459253,
							42.44736049264059,
							0
						],
						[
							-76.5015113645818,
							42.4473324926365,
							0
						],
						[
							-76.50145236455757,
							42.44726049262556,
							0
						],
						[
							-76.50142536454742,
							42.44724049262297,
							0
						],
						[
							-76.50143036454769,
							42.44722249261943,
							0
						],
						[
							-76.50139336453377,
							42.44719449261576,
							0
						],
						[
							-76.50139336453213,
							42.4471724926117,
							0
						],
						[
							-76.50135736451865,
							42.44714649260831,
							0
						],
						[
							-76.50135636451701,
							42.44712849260505,
							0
						],
						[
							-76.5013263645062,
							42.4471124926033,
							0
						],
						[
							-76.5012673644816,
							42.44703549259145,
							0
						],
						[
							-76.50124636447374,
							42.44702049258952,
							0
						],
						[
							-76.50124536447211,
							42.44700249258622,
							0
						],
						[
							-76.50120836445824,
							42.44697549258274,
							0
						],
						[
							-76.50120836445662,
							42.44695349257868,
							0
						],
						[
							-76.50118536444798,
							42.44693649257646,
							0
						],
						[
							-76.50117436444336,
							42.44692149257412,
							0
						],
						[
							-76.50112636442336,
							42.44685949256461,
							0
						],
						[
							-76.50109836441328,
							42.44684449256297,
							0
						],
						[
							-76.50109736441162,
							42.44682649255969,
							0
						],
						[
							-76.50106736440001,
							42.44679949255591,
							0
						],
						[
							-76.5010673643984,
							42.44677749255183,
							0
						],
						[
							-76.50103336438556,
							42.44675149254839,
							0
						],
						[
							-76.50103036438327,
							42.44673349254519,
							0
						],
						[
							-76.50100136437241,
							42.44671249254247,
							0
						],
						[
							-76.5009933643686,
							42.44669549253965,
							0
						],
						[
							-76.50094236434825,
							42.44664149253173,
							0
						],
						[
							-76.5009413643466,
							42.44662349252845,
							0
						],
						[
							-76.50086036431375,
							42.44653049251453,
							0
						],
						[
							-76.50083736430511,
							42.44651349251232,
							0
						],
						[
							-76.5008373643035,
							42.44649149250824,
							0
						],
						[
							-76.500808364293,
							42.44647549250645,
							0
						],
						[
							-76.50074936426839,
							42.44639849249461,
							0
						],
						[
							-76.50072736426024,
							42.44638349249272,
							0
						],
						[
							-76.50072636425857,
							42.44636549248943,
							0
						],
						[
							-76.50063836422348,
							42.44627249247579,
							0
						],
						[
							-76.50061536421485,
							42.44625549247359,
							0
						],
						[
							-76.50061536421323,
							42.4462334924695,
							0
						],
						[
							-76.50059336420499,
							42.44621749246743,
							0
						],
						[
							-76.50053436418037,
							42.44614049245558,
							0
						],
						[
							-76.50050536416995,
							42.44612549245399,
							0
						],
						[
							-76.50050436416831,
							42.44610749245069,
							0
						],
						[
							-76.50046136415096,
							42.44605949244357,
							0
						],
						[
							-76.50046036414932,
							42.44604149244029,
							0
						],
						[
							-76.50043836414108,
							42.4460254924382,
							0
						],
						[
							-76.50042436413536,
							42.44600849243563,
							0
						],
						[
							-76.50040936412913,
							42.44598949243272,
							0
						],
						[
							-76.50037836411614,
							42.4459484924264,
							0
						],
						[
							-76.50034936410559,
							42.44593149242444,
							0
						],
						[
							-76.50034936410398,
							42.44590949242036,
							0
						],
						[
							-76.5002753640758,
							42.44584949241225,
							0
						],
						[
							-76.50027536407418,
							42.44582749240818,
							0
						],
						[
							-76.50024736406327,
							42.44580149240451,
							0
						],
						[
							-76.5002453640613,
							42.44578349240127,
							0
						],
						[
							-76.50017336403349,
							42.44571949239233,
							0
						],
						[
							-76.50017136403152,
							42.44570149238908,
							0
						],
						[
							-76.50013436401758,
							42.44567349238541,
							0
						],
						[
							-76.50013436401595,
							42.44565149238134,
							0
						],
						[
							-76.5000983640025,
							42.44562549237798,
							0
						],
						[
							-76.50009736400085,
							42.4456074923747,
							0
						],
						[
							-76.50003836397785,
							42.44555249236692,
							0
						],
						[
							-76.50001636396753,
							42.44550849235968,
							0
						],
						[
							-76.49998136395365,
							42.44547249235443,
							0
						],
						[
							-76.4999793639517,
							42.44545449235118,
							0
						],
						[
							-76.49994936394044,
							42.44543249234832,
							0
						],
						[
							-76.49987036390831,
							42.44534049233452,
							0
						],
						[
							-76.49986836390634,
							42.44532249233125,
							0
						],
						[
							-76.49983436389351,
							42.44529649232781,
							0
						],
						[
							-76.49982836389003,
							42.44527549232419,
							0
						],
						[
							-76.49980136387916,
							42.44524549231972,
							0
						],
						[
							-76.49972036385074,
							42.44521249231689,
							0
						],
						[
							-76.49966836383322,
							42.44520149231699,
							0
						],
						[
							-76.49966236381573,
							42.44499049227819,
							0
						],
						[
							-76.4996553638135,
							42.44499049227846,
							0
						],
						[
							-76.49961136379657,
							42.44495249227322,
							0
						],
						[
							-76.49936636369894,
							42.44469449223541,
							0
						],
						[
							-76.4992993636742,
							42.44465049223,
							0
						],
						[
							-76.49927136366448,
							42.44464049222928,
							0
						],
						[
							-76.49925436365857,
							42.44463449222887,
							0
						],
						[
							-76.49912136361021,
							42.44455749222001,
							0
						],
						[
							-76.4989063635355,
							42.44447949221428,
							0
						],
						[
							-76.4981803632822,
							42.44420349219261,
							0
						],
						[
							-76.49810936325785,
							42.44418249219159,
							0
						],
						[
							-76.4980503632374,
							42.44416149219009,
							0
						],
						[
							-76.49803536323213,
							42.4441554921896,
							0
						],
						[
							-76.49798036321178,
							42.44411849218497,
							0
						],
						[
							-76.49729236297236,
							42.44386549216603,
							0
						],
						[
							-76.49702336287866,
							42.44376549215841,
							0
						],
						[
							-76.49663436274398,
							42.44363149214937,
							0
						],
						[
							-76.4963093626311,
							42.44351449214089,
							0
						],
						[
							-76.49608736255381,
							42.44343249213471,
							0
						],
						[
							-76.49591036249326,
							42.44338149213245,
							0
						],
						[
							-76.49588136248299,
							42.44336849213119,
							0
						],
						[
							-76.49582936246519,
							42.44335349213053,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090007003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>242365</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4462543</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4975407</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090007003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090007003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>913</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>471</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>59.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>6.49</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>51.05</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>17083</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>16745</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>18056</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10289</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>9949</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>10837</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6311</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6044</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6634</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3874</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3797</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4095</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>104</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>107</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>108</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>80</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>10.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>7.86</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>10949</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>18460</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>310</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>443</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1399</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1933</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1005</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00034"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.51146736851783,
							42.4573774940908,
							0
						],
						[
							-76.51139636844526,
							42.45670349396907,
							0
						],
						[
							-76.5108423678819,
							42.45148249302613,
							0
						],
						[
							-76.51023236768818,
							42.45150949305585,
							0
						],
						[
							-76.50746136680829,
							42.451633493191,
							0
						],
						[
							-76.5070423666735,
							42.45162849320704,
							0
						],
						[
							-76.50650036648815,
							42.45147349320031,
							0
						],
						[
							-76.50615336637078,
							42.45139149319921,
							0
						],
						[
							-76.50600836632172,
							42.45135749319879,
							0
						],
						[
							-76.50544036613212,
							42.45125749320328,
							0
						],
						[
							-76.50479936591766,
							42.45113849320725,
							0
						],
						[
							-76.50460636584961,
							42.4510554931997,
							0
						],
						[
							-76.5045913658448,
							42.45105549320031,
							0
						],
						[
							-76.50451036581394,
							42.45098949319139,
							0
						],
						[
							-76.50443936578621,
							42.45092249318187,
							0
						],
						[
							-76.50434736575028,
							42.4508354931695,
							0
						],
						[
							-76.50432436573928,
							42.45078649316139,
							0
						],
						[
							-76.50431736573657,
							42.45078049316056,
							0
						],
						[
							-76.50428736572496,
							42.45075349315677,
							0
						],
						[
							-76.50424736570905,
							42.45071149315063,
							0
						],
						[
							-76.50422836570117,
							42.45068749314696,
							0
						],
						[
							-76.50421336569511,
							42.45067049314443,
							0
						],
						[
							-76.50417636568042,
							42.45063249313889,
							0
						],
						[
							-76.50415436567128,
							42.45060449313461,
							0
						],
						[
							-76.50407336563926,
							42.45052249312272,
							0
						],
						[
							-76.50407336563764,
							42.45050049311864,
							0
						],
						[
							-76.50403736562417,
							42.45047449311529,
							0
						],
						[
							-76.50403636562251,
							42.45045649311201,
							0
						],
						[
							-76.50400036560903,
							42.45043049310866,
							0
						],
						[
							-76.50399936560738,
							42.45041249310538,
							0
						],
						[
							-76.50391736557422,
							42.45031949309149,
							0
						],
						[
							-76.50388936556368,
							42.45029849308874,
							0
						],
						[
							-76.50388836556203,
							42.45028049308546,
							0
						],
						[
							-76.50384336554434,
							42.45023649307915,
							0
						],
						[
							-76.50384336554272,
							42.45021449307507,
							0
						],
						[
							-76.50381436553224,
							42.45019849307329,
							0
						],
						[
							-76.50373336549947,
							42.45010649305955,
							0
						],
						[
							-76.5037323654978,
							42.45008849305627,
							0
						],
						[
							-76.50369536548394,
							42.45006149305277,
							0
						],
						[
							-76.50369536548233,
							42.45003949304869,
							0
						],
						[
							-76.50365836546838,
							42.450011493045,
							0
						],
						[
							-76.50364836546385,
							42.4499934930421,
							0
						],
						[
							-76.50357736543435,
							42.44990249302816,
							0
						],
						[
							-76.50355736542681,
							42.44988749302619,
							0
						],
						[
							-76.50355436542453,
							42.44986949302297,
							0
						],
						[
							-76.50351836541063,
							42.44983749301852,
							0
						],
						[
							-76.50351736540897,
							42.44981949301523,
							0
						],
						[
							-76.50340636536605,
							42.44972049300142,
							0
						],
						[
							-76.50340636536443,
							42.44969849299734,
							0
						],
						[
							-76.50332736533235,
							42.4496074929837,
							0
						],
						[
							-76.50332536533038,
							42.44958949298047,
							0
						],
						[
							-76.50329136531757,
							42.44956349297704,
							0
						],
						[
							-76.50328836531527,
							42.44954549297383,
							0
						],
						[
							-76.50325136530132,
							42.44951749297015,
							0
						],
						[
							-76.5032513652997,
							42.44949549296608,
							0
						],
						[
							-76.50322936528941,
							42.44945149295884,
							0
						],
						[
							-76.50317836527111,
							42.44942549295608,
							0
						],
						[
							-76.50317736526947,
							42.4494074929528,
							0
						],
						[
							-76.50314036525559,
							42.44938049294931,
							0
						],
						[
							-76.50314036525397,
							42.44935849294523,
							0
						],
						[
							-76.50310636524115,
							42.44933249294181,
							0
						],
						[
							-76.50310336523886,
							42.44931449293859,
							0
						],
						[
							-76.50306636522491,
							42.44928649293493,
							0
						],
						[
							-76.50306636522336,
							42.44926549293105,
							0
						],
						[
							-76.50304436521505,
							42.44924849292877,
							0
						],
						[
							-76.5029633651823,
							42.44915649291506,
							0
						],
						[
							-76.50296236518064,
							42.44913849291176,
							0
						],
						[
							-76.50292636516716,
							42.4491124929084,
							0
						],
						[
							-76.5029253651655,
							42.44909449290513,
							0
						],
						[
							-76.5028743651456,
							42.4490464928983,
							0
						],
						[
							-76.50287336514396,
							42.44902849289502,
							0
						],
						[
							-76.5028363651301,
							42.44900149289153,
							0
						],
						[
							-76.50282936512578,
							42.44897349288664,
							0
						],
						[
							-76.50279936511416,
							42.44894649288285,
							0
						],
						[
							-76.50279236511028,
							42.44892449287906,
							0
						],
						[
							-76.5026603650571,
							42.44877749285721,
							0
						],
						[
							-76.50265936505545,
							42.44875949285392,
							0
						],
						[
							-76.5026363650469,
							42.4487434928519,
							0
						],
						[
							-76.50263036504363,
							42.44872549284881,
							0
						],
						[
							-76.50251236499625,
							42.44859649282974,
							0
						],
						[
							-76.5025113649946,
							42.44857849282644,
							0
						],
						[
							-76.50245136497092,
							42.44851849281779,
							0
						],
						[
							-76.50242936496062,
							42.44847449281054,
							0
						],
						[
							-76.50235736493154,
							42.44839349279847,
							0
						],
						[
							-76.50235536492957,
							42.44837549279521,
							0
						],
						[
							-76.50228136490095,
							42.44830949278601,
							0
						],
						[
							-76.50228136489896,
							42.44828249278103,
							0
						],
						[
							-76.50224436488502,
							42.44825449277734,
							0
						],
						[
							-76.5022443648834,
							42.44823249277328,
							0
						],
						[
							-76.50222136487454,
							42.44821249277052,
							0
						],
						[
							-76.50220436486732,
							42.44818849276676,
							0
						],
						[
							-76.50212636483543,
							42.44809549275271,
							0
						],
						[
							-76.50210636482791,
							42.44808049275074,
							0
						],
						[
							-76.50210336482562,
							42.44806249274755,
							0
						],
						[
							-76.50206636481167,
							42.44803449274387,
							0
						],
						[
							-76.50206636481012,
							42.44801349273998,
							0
						],
						[
							-76.50203236479729,
							42.44798749273654,
							0
						],
						[
							-76.502029364795,
							42.44796949273334,
							0
						],
						[
							-76.50199236478106,
							42.44794149272965,
							0
						],
						[
							-76.50198536477681,
							42.44791449272494,
							0
						],
						[
							-76.50195536476514,
							42.44788649272098,
							0
						],
						[
							-76.50194836476126,
							42.44786449271719,
							0
						],
						[
							-76.5019303647543,
							42.44784849271498,
							0
						],
						[
							-76.50174436470083,
							42.44793249273804,
							0
						],
						[
							-76.50088636445396,
							42.44831749284397,
							0
						],
						[
							-76.5008253644358,
							42.44833649284995,
							0
						],
						[
							-76.50075736441434,
							42.44834149285362,
							0
						],
						[
							-76.49973736408938,
							42.44837249290064,
							0
						],
						[
							-76.49949336401139,
							42.44837649291125,
							0
						],
						[
							-76.49838436365792,
							42.44840849296207,
							0
						],
						[
							-76.49822136360577,
							42.44841049296905,
							0
						],
						[
							-76.49749136337363,
							42.44843849300376,
							0
						],
						[
							-76.49730736331473,
							42.44844049301158,
							0
						],
						[
							-76.49610736293224,
							42.44847449306644,
							0
						],
						[
							-76.49488136254136,
							42.44850849312234,
							0
						],
						[
							-76.4949813627079,
							42.45033049345526,
							0
						],
						[
							-76.49606736305398,
							42.45029849340537,
							0
						],
						[
							-76.49622636310485,
							42.45029649339857,
							0
						],
						[
							-76.49629836320833,
							42.45138549359704,
							0
						],
						[
							-76.4950943628248,
							42.4514234936528,
							0
						],
						[
							-76.49511336286079,
							42.45182849372694,
							0
						],
						[
							-76.49508136287443,
							42.45215249378815,
							0
						],
						[
							-76.4946383627334,
							42.45216749380884,
							0
						],
						[
							-76.49466036276635,
							42.45251849387285,
							0
						],
						[
							-76.49467236279813,
							42.45289649394228,
							0
						],
						[
							-76.49468036282208,
							42.45318649399559,
							0
						],
						[
							-76.49468136282601,
							42.45323549400461,
							0
						],
						[
							-76.49486336288538,
							42.45324849399965,
							0
						],
						[
							-76.49611736329861,
							42.45339549397608,
							0
						],
						[
							-76.49805736395585,
							42.45386649398463,
							0
						],
						[
							-76.4996653645076,
							42.45435149400922,
							0
						],
						[
							-76.49966636450961,
							42.45437449401343,
							0
						],
						[
							-76.49976136454018,
							42.45437549400977,
							0
						],
						[
							-76.49989436458692,
							42.45443049401456,
							0
						],
						[
							-76.50002436463254,
							42.4544834940191,
							0
						],
						[
							-76.50012936466939,
							42.45452649402281,
							0
						],
						[
							-76.50064236485488,
							42.45480949405436,
							0
						],
						[
							-76.50065636486012,
							42.45481949405564,
							0
						],
						[
							-76.50073336488867,
							42.45487149406213,
							0
						],
						[
							-76.5008403649284,
							42.4549444940713,
							0
						],
						[
							-76.50130036509917,
							42.45525849411075,
							0
						],
						[
							-76.50224636546193,
							42.45606049422073,
							0
						],
						[
							-76.50228836547902,
							42.45610949422809,
							0
						],
						[
							-76.50285436570441,
							42.45670249431481,
							0
						],
						[
							-76.50327936585931,
							42.45695349434401,
							0
						],
						[
							-76.50360736597888,
							42.4571474943666,
							0
						],
						[
							-76.50508436652179,
							42.45808149447949,
							0
						],
						[
							-76.50532536661034,
							42.45823349449782,
							0
						],
						[
							-76.5059703668475,
							42.45864249454733,
							0
						],
						[
							-76.5065703670678,
							42.45901849459255,
							0
						],
						[
							-76.50674636712729,
							42.45905949459297,
							0
						],
						[
							-76.50742236735573,
							42.45921549459445,
							0
						],
						[
							-76.51049836842196,
							42.46028849466823,
							0
						],
						[
							-76.51176936886257,
							42.46073249469882,
							0
						],
						[
							-76.51168836876367,
							42.45974549451963,
							0
						],
						[
							-76.51160836866065,
							42.45869849432933,
							0
						],
						[
							-76.51146736851783,
							42.4573774940908,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090007002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>913147</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>106749</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4534780</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5036938</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090007002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090007002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1405</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>625</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>225.64</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>37</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.06</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>22.33</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>18680</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>18342</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>19653</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>11307</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10967</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11855</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6997</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6730</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7320</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4236</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4159</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4457</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>74</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>7.69</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>2.77</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>10755</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>17845</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>156</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>646</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1276</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1524</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>867</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00035"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.49591036249326,
							42.44338149213245,
							0
						],
						[
							-76.49608736255381,
							42.44343249213471,
							0
						],
						[
							-76.4963093626311,
							42.44351449214089,
							0
						],
						[
							-76.49663436274398,
							42.44363149214937,
							0
						],
						[
							-76.49702336287866,
							42.44376549215841,
							0
						],
						[
							-76.49729236297236,
							42.44386549216603,
							0
						],
						[
							-76.49798036321178,
							42.44411849218497,
							0
						],
						[
							-76.49803536323213,
							42.4441554921896,
							0
						],
						[
							-76.4980503632374,
							42.44416149219009,
							0
						],
						[
							-76.49810936325785,
							42.44418249219159,
							0
						],
						[
							-76.4981803632822,
							42.44420349219261,
							0
						],
						[
							-76.4989063635355,
							42.44447949221428,
							0
						],
						[
							-76.49912136361021,
							42.44455749222001,
							0
						],
						[
							-76.49925436365857,
							42.44463449222887,
							0
						],
						[
							-76.49927136366448,
							42.44464049222928,
							0
						],
						[
							-76.49927136366189,
							42.4446054922228,
							0
						],
						[
							-76.49941536370766,
							42.44459949221586,
							0
						],
						[
							-76.50076836413871,
							42.44455849215353,
							0
						],
						[
							-76.500998364212,
							42.44455149214291,
							0
						],
						[
							-76.50198136452543,
							42.44452549209832,
							0
						],
						[
							-76.50217436458685,
							42.44451849208922,
							0
						],
						[
							-76.50355036502529,
							42.44447749202594,
							0
						],
						[
							-76.5037123650771,
							42.44447549201901,
							0
						],
						[
							-76.50418936522904,
							42.44446049199693,
							0
						],
						[
							-76.50495136547175,
							42.44443649196163,
							0
						],
						[
							-76.50591036577711,
							42.44440549191706,
							0
						],
						[
							-76.50630536590319,
							42.44439649189943,
							0
						],
						[
							-76.50643236594415,
							42.44439949189484,
							0
						],
						[
							-76.5068353660727,
							42.44438949187667,
							0
						],
						[
							-76.50688836608934,
							42.4443844918736,
							0
						],
						[
							-76.50698236611869,
							42.44437349186777,
							0
						],
						[
							-76.50861536663905,
							42.44432549179279,
							0
						],
						[
							-76.50855636653974,
							42.44323649159374,
							0
						],
						[
							-76.50850636645691,
							42.44233149142838,
							0
						],
						[
							-76.50843636633851,
							42.44103149119077,
							0
						],
						[
							-76.50838836625606,
							42.44012249102457,
							0
						],
						[
							-76.50618036555286,
							42.4401924911269,
							0
						],
						[
							-76.50521036524395,
							42.44022349117189,
							0
						],
						[
							-76.50397136484897,
							42.44025749122834,
							0
						],
						[
							-76.50176836414732,
							42.44032649133027,
							0
						],
						[
							-76.50078636383455,
							42.44035749137574,
							0
						],
						[
							-76.50083436391739,
							42.44127149154288,
							0
						],
						[
							-76.50089636403155,
							42.44254949177676,
							0
						],
						[
							-76.4991693634811,
							42.44259849185571,
							0
						],
						[
							-76.49893136340495,
							42.44260149186589,
							0
						],
						[
							-76.49885736338165,
							42.44260749187,
							0
						],
						[
							-76.49804236312195,
							42.44263149190741,
							0
						],
						[
							-76.49696636277872,
							42.44265849195596,
							0
						],
						[
							-76.49579436240455,
							42.44268349200803,
							0
						],
						[
							-76.49462236203132,
							42.44272149206247,
							0
						],
						[
							-76.49460236202758,
							42.44275749206994,
							0
						],
						[
							-76.49458036202648,
							42.44283849208581,
							0
						],
						[
							-76.49459136205257,
							42.44314449214195,
							0
						],
						[
							-76.49459936205552,
							42.44314949214257,
							0
						],
						[
							-76.49483636213517,
							42.44319849214205,
							0
						],
						[
							-76.49527336227818,
							42.44323649213138,
							0
						],
						[
							-76.49547336234397,
							42.44325849212736,
							0
						],
						[
							-76.49569636241958,
							42.44331349212852,
							0
						],
						[
							-76.49582936246519,
							42.44335349213053,
							0
						],
						[
							-76.49588136248299,
							42.44336849213119,
							0
						],
						[
							-76.49591036249326,
							42.44338149213245,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090008002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>371143</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4425605</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5033893</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090008002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090008002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1127</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>544</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>91.71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>47</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>47</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>7.3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>43.31</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.48</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>17670</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>17332</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>18644</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10655</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10315</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11203</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6575</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6308</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6898</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4007</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3930</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4228</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>76</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>9.24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>5.93</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>10711</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>19044</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>300</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>517</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1145</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1252</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1062</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>44</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00036"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.52302337185549,
							42.45237049269692,
							0
						],
						[
							-76.52318537190828,
							42.45238149269238,
							0
						],
						[
							-76.52326037193227,
							42.45238049268915,
							0
						],
						[
							-76.52350537201065,
							42.45237749267867,
							0
						],
						[
							-76.52366837206145,
							42.45235749266838,
							0
						],
						[
							-76.52385837211989,
							42.45232349265439,
							0
						],
						[
							-76.52408037218655,
							42.45226149263394,
							0
						],
						[
							-76.52429537224967,
							42.45218249261063,
							0
						],
						[
							-76.52450737231044,
							42.45208449258391,
							0
						],
						[
							-76.52470537236586,
							42.45197449255554,
							0
						],
						[
							-76.52482537240087,
							42.45192749254198,
							0
						],
						[
							-76.52488237241309,
							42.45184549252453,
							0
						],
						[
							-76.52501937244824,
							42.45172649249699,
							0
						],
						[
							-76.52516337248338,
							42.4515764924634,
							0
						],
						[
							-76.5252553725035,
							42.4514494924362,
							0
						],
						[
							-76.52535937252378,
							42.45127249239924,
							0
						],
						[
							-76.52545037253643,
							42.45104849235415,
							0
						],
						[
							-76.52548037254066,
							42.45097549233944,
							0
						],
						[
							-76.52603037260731,
							42.44948949204238,
							0
						],
						[
							-76.52612337261972,
							42.44925349199498,
							0
						],
						[
							-76.52621237263585,
							42.44908549196031,
							0
						],
						[
							-76.5263013726554,
							42.44896349193414,
							0
						],
						[
							-76.52642037268515,
							42.44884949190826,
							0
						],
						[
							-76.52651037270921,
							42.44878449189256,
							0
						],
						[
							-76.5265943727324,
							42.44873349187974,
							0
						],
						[
							-76.52662237274004,
							42.44871549187528,
							0
						],
						[
							-76.52668137275693,
							42.44868749186771,
							0
						],
						[
							-76.52680837279425,
							42.44864149185407,
							0
						],
						[
							-76.52694237283472,
							42.44860749184235,
							0
						],
						[
							-76.52708037287695,
							42.44857949183158,
							0
						],
						[
							-76.52737737297022,
							42.44855249181455,
							0
						],
						[
							-76.52893037346524,
							42.44850949174366,
							0
						],
						[
							-76.53016137385822,
							42.44848349168898,
							0
						],
						[
							-76.5302353738816,
							42.44847849168505,
							0
						],
						[
							-76.53057837399096,
							42.44846949166948,
							0
						],
						[
							-76.53205537446232,
							42.44843649160352,
							0
						],
						[
							-76.5324593745908,
							42.44842149158437,
							0
						],
						[
							-76.53429337517605,
							42.44837949150227,
							0
						],
						[
							-76.53582637566461,
							42.44833649143219,
							0
						],
						[
							-76.53645537586573,
							42.44832749140504,
							0
						],
						[
							-76.5381683764119,
							42.44828249132729,
							0
						],
						[
							-76.53982337693904,
							42.44823149125076,
							0
						],
						[
							-76.54377637819856,
							42.44811649106923,
							0
						],
						[
							-76.55287838109973,
							42.4478674906541,
							0
						],
						[
							-76.55335438125128,
							42.44785249063202,
							0
						],
						[
							-76.55549438193327,
							42.44779249053412,
							0
						],
						[
							-76.55763338261485,
							42.44773149043608,
							0
						],
						[
							-76.5613083837858,
							42.44762649026757,
							0
						],
						[
							-76.5624873841618,
							42.4475974902144,
							0
						],
						[
							-76.56370738455,
							42.44755549015711,
							0
						],
						[
							-76.56579838521539,
							42.44748449005915,
							0
						],
						[
							-76.56839638604272,
							42.44740448993893,
							0
						],
						[
							-76.57061638675111,
							42.44735548983978,
							0
						],
						[
							-76.57066838676744,
							42.44735048983674,
							0
						],
						[
							-76.57102838688347,
							42.44735848982361,
							0
						],
						[
							-76.57121438694462,
							42.44737848981976,
							0
						],
						[
							-76.57120038692948,
							42.44723448979372,
							0
						],
						[
							-76.5709883865775,
							42.44339648909275,
							0
						],
						[
							-76.5709413864929,
							42.44245648892083,
							0
						],
						[
							-76.57093038647339,
							42.44224048888136,
							0
						],
						[
							-76.5707103861143,
							42.43833948816897,
							0
						],
						[
							-76.57067338605184,
							42.43765548804399,
							0
						],
						[
							-76.57065438601884,
							42.43729148797744,
							0
						],
						[
							-76.57053538581401,
							42.43503748756546,
							0
						],
						[
							-76.5675853848739,
							42.43511748769993,
							0
						],
						[
							-76.56717438474297,
							42.43512948771883,
							0
						],
						[
							-76.56642338450374,
							42.43515148775337,
							0
						],
						[
							-76.56606638439001,
							42.4351614877697,
							0
						],
						[
							-76.56413038377305,
							42.43521448785804,
							0
						],
						[
							-76.56232438319704,
							42.43525748793923,
							0
						],
						[
							-76.56225038317369,
							42.43526248794315,
							0
						],
						[
							-76.55928938222976,
							42.4353394880775,
							0
						],
						[
							-76.5558783811432,
							42.43543948823429,
							0
						],
						[
							-76.55450938070622,
							42.435467488295,
							0
						],
						[
							-76.55443538068286,
							42.43547248829893,
							0
						],
						[
							-76.5541583805946,
							42.43548048831163,
							0
						],
						[
							-76.55391038051498,
							42.43547948832151,
							0
						],
						[
							-76.55383538048969,
							42.43546248832139,
							0
						],
						[
							-76.55375038045992,
							42.43542848831856,
							0
						],
						[
							-76.55366038044176,
							42.43557348834902,
							0
						],
						[
							-76.55360938043309,
							42.43567748837033,
							0
						],
						[
							-76.5535703804313,
							42.43582248839873,
							0
						],
						[
							-76.55347238044153,
							42.436386488507,
							0
						],
						[
							-76.55341038044367,
							42.43668448856463,
							0
						],
						[
							-76.55336038043801,
							42.43682448859256,
							0
						],
						[
							-76.55333238043339,
							42.43688348860461,
							0
						],
						[
							-76.55329838042654,
							42.43693848861615,
							0
						],
						[
							-76.55319238040096,
							42.43705248864154,
							0
						],
						[
							-76.55309938037585,
							42.43711648865714,
							0
						],
						[
							-76.55297238034059,
							42.43719048867598,
							0
						],
						[
							-76.55281538029467,
							42.43725048869344,
							0
						],
						[
							-76.5525493802146,
							42.43732148871735,
							0
						],
						[
							-76.55229238013551,
							42.43736648873609,
							0
						],
						[
							-76.55216438009556,
							42.43738148874407,
							0
						],
						[
							-76.55156037990376,
							42.43740748877336,
							0
						],
						[
							-76.55146937987533,
							42.43741748877891,
							0
						],
						[
							-76.55117537978434,
							42.43746248879913,
							0
						],
						[
							-76.55069837963616,
							42.43752748883049,
							0
						],
						[
							-76.55045037955817,
							42.43754848884444,
							0
						],
						[
							-76.55034537952459,
							42.43754948884889,
							0
						],
						[
							-76.54995037939901,
							42.43756448886768,
							0
						],
						[
							-76.54974737933597,
							42.43759248888109,
							0
						],
						[
							-76.54969437931948,
							42.43759948888452,
							0
						],
						[
							-76.54943337923702,
							42.43761648889826,
							0
						],
						[
							-76.54922437916488,
							42.43754748889396,
							0
						],
						[
							-76.54904737910059,
							42.43744548888227,
							0
						],
						[
							-76.54890837904856,
							42.43734448886922,
							0
						],
						[
							-76.54866537895353,
							42.43711348883636,
							0
						],
						[
							-76.54859937892645,
							42.43703348882423,
							0
						],
						[
							-76.54836137883667,
							42.43685148880022,
							0
						],
						[
							-76.54827037880327,
							42.43679448879338,
							0
						],
						[
							-76.54818437877215,
							42.43674648878798,
							0
						],
						[
							-76.54802937871756,
							42.43668048878206,
							0
						],
						[
							-76.54793837868644,
							42.43665448878093,
							0
						],
						[
							-76.54777937863264,
							42.43661648878035,
							0
						],
						[
							-76.54762637858173,
							42.43659148878194,
							0
						],
						[
							-76.54720437844313,
							42.43654748879091,
							0
						],
						[
							-76.54702137838464,
							42.43655048879888,
							0
						],
						[
							-76.54692437835429,
							42.43656048880465,
							0
						],
						[
							-76.54678137831087,
							42.43659348881657,
							0
						],
						[
							-76.54556537794669,
							42.43694348893058,
							0
						],
						[
							-76.54534237787871,
							42.43699148894851,
							0
						],
						[
							-76.5451043778046,
							42.43702148896371,
							0
						],
						[
							-76.54500737777393,
							42.43702748896876,
							0
						],
						[
							-76.54473937768827,
							42.43703148898035,
							0
						],
						[
							-76.54241837693512,
							42.43691348905259,
							0
						],
						[
							-76.54207637682248,
							42.43687348905905,
							0
						],
						[
							-76.54199637679555,
							42.43685648905916,
							0
						],
						[
							-76.54188237675646,
							42.43682248905748,
							0
						],
						[
							-76.54179837672723,
							42.43679148905516,
							0
						],
						[
							-76.54171137669645,
							42.43675248905148,
							0
						],
						[
							-76.54164837667368,
							42.43671748904755,
							0
						],
						[
							-76.54148037661159,
							42.43660648903383,
							0
						],
						[
							-76.54139937658073,
							42.43654048902491,
							0
						],
						[
							-76.54123237651571,
							42.43638548900301,
							0
						],
						[
							-76.54102137643488,
							42.43620748897864,
							0
						],
						[
							-76.54081837635869,
							42.43605748895912,
							0
						],
						[
							-76.54067437630668,
							42.43597848895035,
							0
						],
						[
							-76.54050237624739,
							42.43592248894695,
							0
						],
						[
							-76.54041837621948,
							42.43590948894796,
							0
						],
						[
							-76.54031737618656,
							42.43590248895076,
							0
						],
						[
							-76.54008737611233,
							42.43589648895897,
							0
						],
						[
							-76.53750537528906,
							42.43596248907581,
							0
						],
						[
							-76.53641637494219,
							42.43599548912604,
							0
						],
						[
							-76.53378737410485,
							42.43607548924737,
							0
						],
						[
							-76.5335433740268,
							42.4360784892578,
							0
						],
						[
							-76.53271237376241,
							42.43610748929685,
							0
						],
						[
							-76.5322813736246,
							42.43611348931542,
							0
						],
						[
							-76.53058937308491,
							42.43615448939153,
							0
						],
						[
							-76.52967137279163,
							42.43617048943169,
							0
						],
						[
							-76.52901337258196,
							42.43618948946187,
							0
						],
						[
							-76.52810737229319,
							42.43621448950319,
							0
						],
						[
							-76.52603737163186,
							42.43625048959369,
							0
						],
						[
							-76.52561837149754,
							42.43625148961085,
							0
						],
						[
							-76.52521537137004,
							42.43627548963162,
							0
						],
						[
							-76.52461737117882,
							42.43628348965731,
							0
						],
						[
							-76.5237283708955,
							42.43630848969794,
							0
						],
						[
							-76.52322537073563,
							42.43632848972199,
							0
						],
						[
							-76.52311037069954,
							42.43633948972871,
							0
						],
						[
							-76.52300737066827,
							42.43636348973733,
							0
						],
						[
							-76.5229233706437,
							42.43639548974662,
							0
						],
						[
							-76.52257337054279,
							42.43654948978929,
							0
						],
						[
							-76.52222637044343,
							42.43671148983332,
							0
						],
						[
							-76.5218783703434,
							42.43686848987645,
							0
						],
						[
							-76.52135837019476,
							42.43711448994301,
							0
						],
						[
							-76.52008936983077,
							42.43769849010243,
							0
						],
						[
							-76.5193883696302,
							42.43802749019168,
							0
						],
						[
							-76.51884436947385,
							42.43827349025921,
							0
						],
						[
							-76.51864336941654,
							42.43837049028528,
							0
						],
						[
							-76.51856536939425,
							42.4384074902953,
							0
						],
						[
							-76.51839036934527,
							42.43850449032033,
							0
						],
						[
							-76.5181463692785,
							42.43866049035905,
							0
						],
						[
							-76.51795236922845,
							42.43882549039745,
							0
						],
						[
							-76.51792136922153,
							42.43886649040626,
							0
						],
						[
							-76.51778636919734,
							42.43912549045965,
							0
						],
						[
							-76.51762436916214,
							42.4393524905082,
							0
						],
						[
							-76.51708836903056,
							42.43989949063107,
							0
						],
						[
							-76.51687836897737,
							42.44009149067511,
							0
						],
						[
							-76.51677436895015,
							42.44017449069465,
							0
						],
						[
							-76.51644136886388,
							42.44045349075974,
							0
						],
						[
							-76.51601836875285,
							42.44078749083865,
							0
						],
						[
							-76.515761368686,
							42.44099849088809,
							0
						],
						[
							-76.51565536865567,
							42.44104849090162,
							0
						],
						[
							-76.51560536864073,
							42.44106349090641,
							0
						],
						[
							-76.51554636862247,
							42.44107249091046,
							0
						],
						[
							-76.51548336860166,
							42.44106449091152,
							0
						],
						[
							-76.51538436856742,
							42.44103049090926,
							0
						],
						[
							-76.51533936855579,
							42.44106849091811,
							0
						],
						[
							-76.51523736852938,
							42.44115449093815,
							0
						],
						[
							-76.51517236851254,
							42.44120849095079,
							0
						],
						[
							-76.51522236853198,
							42.44125449095728,
							0
						],
						[
							-76.51535136858206,
							42.44137249097387,
							0
						],
						[
							-76.5154133686072,
							42.44144349098448,
							0
						],
						[
							-76.51543736861755,
							42.44147949099018,
							0
						],
						[
							-76.5155053686466,
							42.44157749100553,
							0
						],
						[
							-76.51553336865994,
							42.44163649101533,
							0
						],
						[
							-76.51560336869323,
							42.44178349103967,
							0
						],
						[
							-76.51569636874197,
							42.44203949108326,
							0
						],
						[
							-76.51572036875291,
							42.44208349109044,
							0
						],
						[
							-76.51580436879706,
							42.44231649113011,
							0
						],
						[
							-76.51582936880936,
							42.44237449113982,
							0
						],
						[
							-76.51588836883627,
							42.44248249115742,
							0
						],
						[
							-76.51598836887892,
							42.4426254911798,
							0
						],
						[
							-76.51614736894335,
							42.44280749120703,
							0
						],
						[
							-76.51632536901656,
							42.44302549124014,
							0
						],
						[
							-76.51642236905926,
							42.44318249126526,
							0
						],
						[
							-76.51649936909585,
							42.44334349129192,
							0
						],
						[
							-76.51661936916076,
							42.44370149135325,
							0
						],
						[
							-76.5167463692303,
							42.44409149142026,
							0
						],
						[
							-76.51681136926807,
							42.44432049145997,
							0
						],
						[
							-76.5168473692932,
							42.44450449149255,
							0
						],
						[
							-76.51686236932031,
							42.44480649154779,
							0
						],
						[
							-76.51686836934483,
							42.44511249160414,
							0
						],
						[
							-76.51690036937967,
							42.44544549166443,
							0
						],
						[
							-76.51690836938562,
							42.44549149167261,
							0
						],
						[
							-76.51695236941423,
							42.44568749170707,
							0
						],
						[
							-76.51704036946137,
							42.44594349175084,
							0
						],
						[
							-76.5171463695159,
							42.44622149179796,
							0
						],
						[
							-76.51726436957317,
							42.44648449184183,
							0
						],
						[
							-76.51734636961277,
							42.44666449187179,
							0
						],
						[
							-76.5174863696788,
							42.44695049191902,
							0
						],
						[
							-76.51778736981798,
							42.44752749201351,
							0
						],
						[
							-76.51808636995084,
							42.44802749209387,
							0
						],
						[
							-76.51817036999003,
							42.44819349212116,
							0
						],
						[
							-76.51823037001614,
							42.44828649213593,
							0
						],
						[
							-76.5183463700699,
							42.44851049217265,
							0
						],
						[
							-76.51844537011317,
							42.4486664921975,
							0
						],
						[
							-76.51851337014023,
							42.44873749220786,
							0
						],
						[
							-76.51857637016475,
							42.44879549221605,
							0
						],
						[
							-76.51863337018628,
							42.44883949222189,
							0
						],
						[
							-76.51869337020713,
							42.4488614922235,
							0
						],
						[
							-76.51919037039409,
							42.44923349227217,
							0
						],
						[
							-76.51936237046003,
							42.44937949229218,
							0
						],
						[
							-76.5195493705325,
							42.44954849231588,
							0
						],
						[
							-76.51993137068423,
							42.44994349237341,
							0
						],
						[
							-76.52008437074751,
							42.45013549240272,
							0
						],
						[
							-76.52071037100357,
							42.45088349251569,
							0
						],
						[
							-76.52079137103681,
							42.45098149253053,
							0
						],
						[
							-76.52080737104335,
							42.45100049253338,
							0
						],
						[
							-76.52130537124648,
							42.45158749262175,
							0
						],
						[
							-76.52138937127998,
							42.4516764926348,
							0
						],
						[
							-76.52146337130898,
							42.45174749264493,
							0
						],
						[
							-76.5215233713328,
							42.45180949265397,
							0
						],
						[
							-76.52162437137046,
							42.45188049266301,
							0
						],
						[
							-76.52201137151117,
							42.45210449268874,
							0
						],
						[
							-76.52206337152977,
							42.45213049269145,
							0
						],
						[
							-76.52224437159337,
							42.45220549269797,
							0
						],
						[
							-76.5223163716184,
							42.45223149269987,
							0
						],
						[
							-76.52250437168287,
							42.45228749270259,
							0
						],
						[
							-76.52267837174148,
							42.45232549270258,
							0
						],
						[
							-76.52302337185549,
							42.45237049269692,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>37</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090009002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>6024766</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>3037</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4426565</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5444426</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090009002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090009002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1345</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>600</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>1488.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>3.74</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.79</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22137</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>21799</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23111</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13009</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12668</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13557</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7987</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7719</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8309</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5020</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4943</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5241</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>2.03</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>5485</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>10132</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1461</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1250</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1398</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>845</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00037"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.52146337130898,
							42.45174749264493,
							0
						],
						[
							-76.52141537129728,
							42.45179749265613,
							0
						],
						[
							-76.52138037128974,
							42.45184749266679,
							0
						],
						[
							-76.52135237128446,
							42.45189749267715,
							0
						],
						[
							-76.52133937128325,
							42.45193749268509,
							0
						],
						[
							-76.5213443712889,
							42.45199249269504,
							0
						],
						[
							-76.52135837129666,
							42.45203649270261,
							0
						],
						[
							-76.52139837131347,
							42.45209049271099,
							0
						],
						[
							-76.52157637138536,
							42.45229049274075,
							0
						],
						[
							-76.52164737141604,
							42.45239749275767,
							0
						],
						[
							-76.52170237144264,
							42.4525184927778,
							0
						],
						[
							-76.52176637147541,
							42.4526844928059,
							0
						],
						[
							-76.52186037152573,
							42.45295749285256,
							0
						],
						[
							-76.52191037155072,
							42.45307849287291,
							0
						],
						[
							-76.52214737165616,
							42.45347649293691,
							0
						],
						[
							-76.52230637172563,
							42.45372649297668,
							0
						],
						[
							-76.52234837174304,
							42.45377949298479,
							0
						],
						[
							-76.52243937178318,
							42.45392749300846,
							0
						],
						[
							-76.52252637182525,
							42.45411949304044,
							0
						],
						[
							-76.52258537185912,
							42.45432149307539,
							0
						],
						[
							-76.52262237188592,
							42.45452349311123,
							0
						],
						[
							-76.52266637190733,
							42.45462249312776,
							0
						],
						[
							-76.52269737192056,
							42.45466649313462,
							0
						],
						[
							-76.52243237183184,
							42.45461649313614,
							0
						],
						[
							-76.5220393717008,
							42.45454949313967,
							0
						],
						[
							-76.52174537160346,
							42.454508493144,
							0
						],
						[
							-76.52150937152796,
							42.45451149315412,
							0
						],
						[
							-76.52191037169575,
							42.45504149323587,
							0
						],
						[
							-76.52208837177105,
							42.45528749327411,
							0
						],
						[
							-76.52212437178562,
							42.45532849328024,
							0
						],
						[
							-76.52213437178973,
							42.45534049328205,
							0
						],
						[
							-76.52225737183937,
							42.45547849330259,
							0
						],
						[
							-76.52244437191216,
							42.45565149332698,
							0
						],
						[
							-76.52269237200481,
							42.45582849334967,
							0
						],
						[
							-76.52365337236013,
							42.45646449342831,
							0
						],
						[
							-76.52387737244307,
							42.45661449344696,
							0
						],
						[
							-76.5240043724907,
							42.45670749345901,
							0
						],
						[
							-76.52420837256854,
							42.4568754934818,
							0
						],
						[
							-76.52440637264449,
							42.45704349350483,
							0
						],
						[
							-76.52466037274476,
							42.4572974935415,
							0
						],
						[
							-76.52469637275918,
							42.45733649354724,
							0
						],
						[
							-76.52473237277316,
							42.45736949355189,
							0
						],
						[
							-76.52481537280593,
							42.45745249356386,
							0
						],
						[
							-76.5249723728668,
							42.45759449358376,
							0
						],
						[
							-76.52505337289773,
							42.45766149359287,
							0
						],
						[
							-76.52512637292575,
							42.45772349360138,
							0
						],
						[
							-76.52539837302706,
							42.45791349362548,
							0
						],
						[
							-76.52669037350188,
							42.45872949372396,
							0
						],
						[
							-76.52874237425442,
							42.46000349387628,
							0
						],
						[
							-76.52883437428777,
							42.46005549388217,
							0
						],
						[
							-76.52962337457676,
							42.46054049393985,
							0
						],
						[
							-76.53194437542523,
							42.46194449410527,
							0
						],
						[
							-76.53301437581635,
							42.46259149418147,
							0
						],
						[
							-76.53502437655122,
							42.46380849432492,
							0
						],
						[
							-76.53738637741556,
							42.46524849449529,
							0
						],
						[
							-76.53857437785025,
							42.4659724945809,
							0
						],
						[
							-76.53946737817648,
							42.46650949464394,
							0
						],
						[
							-76.54141037888658,
							42.46768149478172,
							0
						],
						[
							-76.54148337891347,
							42.46772849478744,
							0
						],
						[
							-76.54200337910561,
							42.46807049482955,
							0
						],
						[
							-76.54227237920495,
							42.46824649485115,
							0
						],
						[
							-76.5426673793509,
							42.46850649488319,
							0
						],
						[
							-76.54319537954682,
							42.46886449492791,
							0
						],
						[
							-76.54460838007039,
							42.46981349504596,
							0
						],
						[
							-76.54598438057809,
							42.47070849515551,
							0
						],
						[
							-76.54610038062019,
							42.47077449516301,
							0
						],
						[
							-76.5462693806816,
							42.47087149517406,
							0
						],
						[
							-76.5472643810405,
							42.47140749523277,
							0
						],
						[
							-76.54640038082985,
							42.47230649543391,
							0
						],
						[
							-76.54630338080747,
							42.47242449545965,
							0
						],
						[
							-76.54621038078807,
							42.47256549548946,
							0
						],
						[
							-76.54615238077886,
							42.4726924955153,
							0
						],
						[
							-76.5460983807739,
							42.47285949554834,
							0
						],
						[
							-76.54607838077482,
							42.47295849556744,
							0
						],
						[
							-76.5460723807763,
							42.47300449557618,
							0
						],
						[
							-76.54606738077936,
							42.47306749558803,
							0
						],
						[
							-76.54606538078396,
							42.47313849560122,
							0
						],
						[
							-76.54606938078909,
							42.47319049561069,
							0
						],
						[
							-76.54607238079296,
							42.47322949561774,
							0
						],
						[
							-76.54608838080505,
							42.47332349563449,
							0
						],
						[
							-76.54612838082853,
							42.47346749565946,
							0
						],
						[
							-76.54618038085485,
							42.47359749568137,
							0
						],
						[
							-76.54627338090424,
							42.47386149572636,
							0
						],
						[
							-76.54643738098004,
							42.47417449577754,
							0
						],
						[
							-76.54676438113863,
							42.47489949589823,
							0
						],
						[
							-76.54741438145521,
							42.47635849614141,
							0
						],
						[
							-76.5475583815263,
							42.47669449619765,
							0
						],
						[
							-76.54772538160704,
							42.47706149625866,
							0
						],
						[
							-76.54779538164121,
							42.477219496285,
							0
						],
						[
							-76.54821038184384,
							42.47815749644145,
							0
						],
						[
							-76.54835738191723,
							42.47851149650088,
							0
						],
						[
							-76.54845938196682,
							42.47873949653889,
							0
						],
						[
							-76.54919738232769,
							42.48041449681835,
							0
						],
						[
							-76.55005238274494,
							42.48234349713998,
							0
						],
						[
							-76.55021538282396,
							42.48270449720004,
							0
						],
						[
							-76.55102838321788,
							42.48450049749878,
							0
						],
						[
							-76.5518143836054,
							42.48632649780413,
							0
						],
						[
							-76.5523453838714,
							42.48761649802084,
							0
						],
						[
							-76.55263338401791,
							42.48834649814396,
							0
						],
						[
							-76.55273738406957,
							42.48859349818536,
							0
						],
						[
							-76.55294738417373,
							42.48908949826843,
							0
						],
						[
							-76.55337338438507,
							42.4900964984371,
							0
						],
						[
							-76.55358938448825,
							42.49055349851273,
							0
						],
						[
							-76.55370738454569,
							42.49081749855669,
							0
						],
						[
							-76.55460138498216,
							42.49283549889304,
							0
						],
						[
							-76.55473438504679,
							42.4931314989423,
							0
						],
						[
							-76.55783838597686,
							42.49224249865208,
							0
						],
						[
							-76.56061638680832,
							42.49143449839005,
							0
						],
						[
							-76.56100638692604,
							42.49133449835574,
							0
						],
						[
							-76.56173538714985,
							42.49119849830102,
							0
						],
						[
							-76.5622003872903,
							42.49108049826035,
							0
						],
						[
							-76.56262238741489,
							42.49093449821623,
							0
						],
						[
							-76.56302038752915,
							42.49075349816665,
							0
						],
						[
							-76.563428387643,
							42.49052349810759,
							0
						],
						[
							-76.56440738791262,
							42.48992349795704,
							0
						],
						[
							-76.5655483882269,
							42.48922449778161,
							0
						],
						[
							-76.56703638863897,
							42.48834349755847,
							0
						],
						[
							-76.56921538925442,
							42.48721549726164,
							0
						],
						[
							-76.56928938927506,
							42.48717349725089,
							0
						],
						[
							-76.5707533896915,
							42.48645549705882,
							0
						],
						[
							-76.57213439008044,
							42.48572549686789,
							0
						],
						[
							-76.57326139046722,
							42.48606549688488,
							0
						],
						[
							-76.57342939052526,
							42.4861214968884,
							0
						],
						[
							-76.57341939051138,
							42.48597749686222,
							0
						],
						[
							-76.57340239047501,
							42.48556049678589,
							0
						],
						[
							-76.5733493903621,
							42.48426749654926,
							0
						],
						[
							-76.57334939035809,
							42.48421349653928,
							0
						],
						[
							-76.57334639035373,
							42.48416749653092,
							0
						],
						[
							-76.5732253901933,
							42.48252749623293,
							0
						],
						[
							-76.57321439017338,
							42.48230649619258,
							0
						],
						[
							-76.57303538992316,
							42.47970649571963,
							0
						],
						[
							-76.57282038955768,
							42.4757064949895,
							0
						],
						[
							-76.5727323894173,
							42.47419349471358,
							0
						],
						[
							-76.57267338932203,
							42.4731634945257,
							0
						],
						[
							-76.57260238920834,
							42.47193649430191,
							0
						],
						[
							-76.5724243889345,
							42.46901149376874,
							0
						],
						[
							-76.57231338874085,
							42.46687849337912,
							0
						],
						[
							-76.57228338867256,
							42.46608649323401,
							0
						],
						[
							-76.57223938860481,
							42.46536249310201,
							0
						],
						[
							-76.5722163885705,
							42.46499849303569,
							0
						],
						[
							-76.572172388504,
							42.46429149290682,
							0
						],
						[
							-76.57201438826239,
							42.46171349243686,
							0
						],
						[
							-76.57188938804069,
							42.45926149198879,
							0
						],
						[
							-76.57164838763238,
							42.45479049117225,
							0
						],
						[
							-76.5716093875668,
							42.45407349104131,
							0
						],
						[
							-76.571538387456,
							42.45288449082441,
							0
						],
						[
							-76.5714223872744,
							42.45093349046849,
							0
						],
						[
							-76.57131938710445,
							42.4490834901307,
							0
						],
						[
							-76.57121438694462,
							42.44737848981976,
							0
						],
						[
							-76.57102838688347,
							42.44735848982361,
							0
						],
						[
							-76.57066838676744,
							42.44735048983674,
							0
						],
						[
							-76.57061638675111,
							42.44735548983978,
							0
						],
						[
							-76.56839638604272,
							42.44740448993893,
							0
						],
						[
							-76.56579838521539,
							42.44748449005915,
							0
						],
						[
							-76.56370738455,
							42.44755549015711,
							0
						],
						[
							-76.5624873841618,
							42.4475974902144,
							0
						],
						[
							-76.5613083837858,
							42.44762649026757,
							0
						],
						[
							-76.55763338261485,
							42.44773149043608,
							0
						],
						[
							-76.55549438193327,
							42.44779249053412,
							0
						],
						[
							-76.55335438125128,
							42.44785249063202,
							0
						],
						[
							-76.55287838109973,
							42.4478674906541,
							0
						],
						[
							-76.54377637819856,
							42.44811649106923,
							0
						],
						[
							-76.53982337693904,
							42.44823149125076,
							0
						],
						[
							-76.5381683764119,
							42.44828249132729,
							0
						],
						[
							-76.53645537586573,
							42.44832749140504,
							0
						],
						[
							-76.53582637566461,
							42.44833649143219,
							0
						],
						[
							-76.53429337517605,
							42.44837949150227,
							0
						],
						[
							-76.5324593745908,
							42.44842149158437,
							0
						],
						[
							-76.53205537446232,
							42.44843649160352,
							0
						],
						[
							-76.53057837399096,
							42.44846949166948,
							0
						],
						[
							-76.5302353738816,
							42.44847849168505,
							0
						],
						[
							-76.53016137385822,
							42.44848349168898,
							0
						],
						[
							-76.52893037346524,
							42.44850949174366,
							0
						],
						[
							-76.52737737297022,
							42.44855249181455,
							0
						],
						[
							-76.52708037287695,
							42.44857949183158,
							0
						],
						[
							-76.52694237283472,
							42.44860749184235,
							0
						],
						[
							-76.52680837279425,
							42.44864149185407,
							0
						],
						[
							-76.52668137275693,
							42.44868749186771,
							0
						],
						[
							-76.52662237274004,
							42.44871549187528,
							0
						],
						[
							-76.5265943727324,
							42.44873349187974,
							0
						],
						[
							-76.52651037270921,
							42.44878449189256,
							0
						],
						[
							-76.52642037268515,
							42.44884949190826,
							0
						],
						[
							-76.5263013726554,
							42.44896349193414,
							0
						],
						[
							-76.52621237263585,
							42.44908549196031,
							0
						],
						[
							-76.52612337261972,
							42.44925349199498,
							0
						],
						[
							-76.52603037260731,
							42.44948949204238,
							0
						],
						[
							-76.52548037254066,
							42.45097549233944,
							0
						],
						[
							-76.52545037253643,
							42.45104849235415,
							0
						],
						[
							-76.52535937252378,
							42.45127249239924,
							0
						],
						[
							-76.5252553725035,
							42.4514494924362,
							0
						],
						[
							-76.52516337248338,
							42.4515764924634,
							0
						],
						[
							-76.52501937244824,
							42.45172649249699,
							0
						],
						[
							-76.52488237241309,
							42.45184549252453,
							0
						],
						[
							-76.52482537240087,
							42.45192749254198,
							0
						],
						[
							-76.52470537236586,
							42.45197449255554,
							0
						],
						[
							-76.52450737231044,
							42.45208449258391,
							0
						],
						[
							-76.52429537224967,
							42.45218249261063,
							0
						],
						[
							-76.52408037218655,
							42.45226149263394,
							0
						],
						[
							-76.52385837211989,
							42.45232349265439,
							0
						],
						[
							-76.52366837206145,
							42.45235749266838,
							0
						],
						[
							-76.52350537201065,
							42.45237749267867,
							0
						],
						[
							-76.52326037193227,
							42.45238049268915,
							0
						],
						[
							-76.52318537190828,
							42.45238149269238,
							0
						],
						[
							-76.52302337185549,
							42.45237049269692,
							0
						],
						[
							-76.52267837174148,
							42.45232549270258,
							0
						],
						[
							-76.52250437168287,
							42.45228749270259,
							0
						],
						[
							-76.5223163716184,
							42.45223149269987,
							0
						],
						[
							-76.52224437159337,
							42.45220549269797,
							0
						],
						[
							-76.52206337152977,
							42.45213049269145,
							0
						],
						[
							-76.52201137151117,
							42.45210449268874,
							0
						],
						[
							-76.52162437137046,
							42.45188049266301,
							0
						],
						[
							-76.5215233713328,
							42.45180949265397,
							0
						],
						[
							-76.52146337130898,
							42.45174749264493,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090009001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>12677975</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>36163</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4632965</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5596205</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090009001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090009001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1441</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>712</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>3132.82</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.91</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.75</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22620</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>22282</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23594</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12924</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12583</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13472</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7774</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7507</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8097</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5130</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5053</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5350</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>15</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>4.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.05</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>3721</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>6774</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>95</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2148</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1028</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1315</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>810</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00038"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.51168836876367,
							42.45974549451963,
							0
						],
						[
							-76.51176936886257,
							42.46073249469882,
							0
						],
						[
							-76.51178736891293,
							42.46133549480955,
							0
						],
						[
							-76.5118643691245,
							42.46386449527395,
							0
						],
						[
							-76.51222636934465,
							42.46527149551937,
							0
						],
						[
							-76.51260136957303,
							42.4667334957744,
							0
						],
						[
							-76.51262536958774,
							42.46682849579099,
							0
						],
						[
							-76.51485437059557,
							42.4707864964322,
							0
						],
						[
							-76.51827237214138,
							42.47685749741555,
							0
						],
						[
							-76.51837237218662,
							42.4770354974444,
							0
						],
						[
							-76.51868137228527,
							42.47702849743055,
							0
						],
						[
							-76.52026437300152,
							42.47984349788653,
							0
						],
						[
							-76.52100237333558,
							42.48115749809936,
							0
						],
						[
							-76.52627337606351,
							42.49515550047126,
							0
						],
						[
							-76.52651337618758,
							42.49579050057879,
							0
						],
						[
							-76.52653437619853,
							42.49584750058845,
							0
						],
						[
							-76.52965637719255,
							42.49574050044204,
							0
						],
						[
							-76.53870138007215,
							42.49542850001738,
							0
						],
						[
							-76.5388503801179,
							42.49540050000614,
							0
						],
						[
							-76.53902038017408,
							42.49542250000334,
							0
						],
						[
							-76.53906438018821,
							42.49542250000155,
							0
						],
						[
							-76.53908738019604,
							42.49542850000171,
							0
						],
						[
							-76.53923738024496,
							42.49543949999764,
							0
						],
						[
							-76.53925838025252,
							42.49545049999884,
							0
						],
						[
							-76.53928038025884,
							42.49544049999609,
							0
						],
						[
							-76.53932538027395,
							42.49544949999594,
							0
						],
						[
							-76.53932538027277,
							42.49543349999298,
							0
						],
						[
							-76.53933238027035,
							42.49537049998106,
							0
						],
						[
							-76.5393473802711,
							42.49531549997029,
							0
						],
						[
							-76.53992938033817,
							42.49370049964843,
							0
						],
						[
							-76.53994138033764,
							42.49364149963705,
							0
						],
						[
							-76.53996238033105,
							42.49346149960294,
							0
						],
						[
							-76.5399573803141,
							42.49325449956494,
							0
						],
						[
							-76.53994638030487,
							42.49317749955116,
							0
						],
						[
							-76.53992738027209,
							42.49281749948544,
							0
						],
						[
							-76.5397743801875,
							42.49233849940319,
							0
						],
						[
							-76.53954138002152,
							42.49110749918529,
							0
						],
						[
							-76.53967038007514,
							42.49127249921055,
							0
						],
						[
							-76.540726380495,
							42.49236549936953,
							0
						],
						[
							-76.54085638054397,
							42.49246349938236,
							0
						],
						[
							-76.54095038057807,
							42.49251649938835,
							0
						],
						[
							-76.54105138061404,
							42.49256449939311,
							0
						],
						[
							-76.54115838065125,
							42.49260349939597,
							0
						],
						[
							-76.54127038068943,
							42.49263349939696,
							0
						],
						[
							-76.54138538072787,
							42.49265449939616,
							0
						],
						[
							-76.5414903807624,
							42.49266549939392,
							0
						],
						[
							-76.54158738079383,
							42.49266949939074,
							0
						],
						[
							-76.54392038153749,
							42.49260249928368,
							0
						],
						[
							-76.54400838156529,
							42.492596499279,
							0
						],
						[
							-76.54415138160971,
							42.49257649926948,
							0
						],
						[
							-76.54429038165216,
							42.4925474992585,
							0
						],
						[
							-76.54442538169236,
							42.49250549924526,
							0
						],
						[
							-76.54451738171944,
							42.49247249923543,
							0
						],
						[
							-76.54484638181302,
							42.49231049919217,
							0
						],
						[
							-76.54499238185572,
							42.49225449917589,
							0
						],
						[
							-76.54521938192327,
							42.49218349915358,
							0
						],
						[
							-76.54545538199517,
							42.49213149913437,
							0
						],
						[
							-76.54573338208141,
							42.49209149911573,
							0
						],
						[
							-76.54945538323994,
							42.49160849887542,
							0
						],
						[
							-76.54953238326428,
							42.49160349887136,
							0
						],
						[
							-76.550342383515,
							42.49147949881557,
							0
						],
						[
							-76.55370738454569,
							42.49081749855669,
							0
						],
						[
							-76.55358938448825,
							42.49055349851273,
							0
						],
						[
							-76.55337338438507,
							42.4900964984371,
							0
						],
						[
							-76.55294738417373,
							42.48908949826843,
							0
						],
						[
							-76.55273738406957,
							42.48859349818536,
							0
						],
						[
							-76.55263338401791,
							42.48834649814396,
							0
						],
						[
							-76.5523453838714,
							42.48761649802084,
							0
						],
						[
							-76.5518143836054,
							42.48632649780413,
							0
						],
						[
							-76.55102838321788,
							42.48450049749878,
							0
						],
						[
							-76.55021538282396,
							42.48270449720004,
							0
						],
						[
							-76.55005238274494,
							42.48234349713998,
							0
						],
						[
							-76.54919738232769,
							42.48041449681835,
							0
						],
						[
							-76.54845938196682,
							42.47873949653889,
							0
						],
						[
							-76.54835738191723,
							42.47851149650088,
							0
						],
						[
							-76.54821038184384,
							42.47815749644145,
							0
						],
						[
							-76.54779538164121,
							42.477219496285,
							0
						],
						[
							-76.54772538160704,
							42.47706149625866,
							0
						],
						[
							-76.5475583815263,
							42.47669449619765,
							0
						],
						[
							-76.54741438145521,
							42.47635849614141,
							0
						],
						[
							-76.54676438113863,
							42.47489949589823,
							0
						],
						[
							-76.54643738098004,
							42.47417449577754,
							0
						],
						[
							-76.54627338090424,
							42.47386149572636,
							0
						],
						[
							-76.54618038085485,
							42.47359749568137,
							0
						],
						[
							-76.54612838082853,
							42.47346749565946,
							0
						],
						[
							-76.54608838080505,
							42.47332349563449,
							0
						],
						[
							-76.54607238079296,
							42.47322949561774,
							0
						],
						[
							-76.54606938078909,
							42.47319049561069,
							0
						],
						[
							-76.54606538078396,
							42.47313849560122,
							0
						],
						[
							-76.54606738077936,
							42.47306749558803,
							0
						],
						[
							-76.5460723807763,
							42.47300449557618,
							0
						],
						[
							-76.54607838077482,
							42.47295849556744,
							0
						],
						[
							-76.5460983807739,
							42.47285949554834,
							0
						],
						[
							-76.54615238077886,
							42.4726924955153,
							0
						],
						[
							-76.54621038078807,
							42.47256549548946,
							0
						],
						[
							-76.54630338080747,
							42.47242449545965,
							0
						],
						[
							-76.54640038082985,
							42.47230649543391,
							0
						],
						[
							-76.5472643810405,
							42.47140749523277,
							0
						],
						[
							-76.5462693806816,
							42.47087149517406,
							0
						],
						[
							-76.54610038062019,
							42.47077449516301,
							0
						],
						[
							-76.54598438057809,
							42.47070849515551,
							0
						],
						[
							-76.54460838007039,
							42.46981349504596,
							0
						],
						[
							-76.54319537954682,
							42.46886449492791,
							0
						],
						[
							-76.5426673793509,
							42.46850649488319,
							0
						],
						[
							-76.54227237920495,
							42.46824649485115,
							0
						],
						[
							-76.54200337910561,
							42.46807049482955,
							0
						],
						[
							-76.54148337891347,
							42.46772849478744,
							0
						],
						[
							-76.54141037888658,
							42.46768149478172,
							0
						],
						[
							-76.53946737817648,
							42.46650949464394,
							0
						],
						[
							-76.53857437785025,
							42.4659724945809,
							0
						],
						[
							-76.53738637741556,
							42.46524849449529,
							0
						],
						[
							-76.53502437655122,
							42.46380849432492,
							0
						],
						[
							-76.53301437581635,
							42.46259149418147,
							0
						],
						[
							-76.53194437542523,
							42.46194449410527,
							0
						],
						[
							-76.52962337457676,
							42.46054049393985,
							0
						],
						[
							-76.52883437428777,
							42.46005549388217,
							0
						],
						[
							-76.52874237425442,
							42.46000349387628,
							0
						],
						[
							-76.52669037350188,
							42.45872949372396,
							0
						],
						[
							-76.52539837302706,
							42.45791349362548,
							0
						],
						[
							-76.52512637292575,
							42.45772349360138,
							0
						],
						[
							-76.52505337289773,
							42.45766149359287,
							0
						],
						[
							-76.5249723728668,
							42.45759449358376,
							0
						],
						[
							-76.52481537280593,
							42.45745249356386,
							0
						],
						[
							-76.52473237277316,
							42.45736949355189,
							0
						],
						[
							-76.52469637275918,
							42.45733649354724,
							0
						],
						[
							-76.52466037274476,
							42.4572974935415,
							0
						],
						[
							-76.52440637264449,
							42.45704349350483,
							0
						],
						[
							-76.52420837256854,
							42.4568754934818,
							0
						],
						[
							-76.5240043724907,
							42.45670749345901,
							0
						],
						[
							-76.52387737244307,
							42.45661449344696,
							0
						],
						[
							-76.52365337236013,
							42.45646449342831,
							0
						],
						[
							-76.52269237200481,
							42.45582849334967,
							0
						],
						[
							-76.52244437191216,
							42.45565149332698,
							0
						],
						[
							-76.52225737183937,
							42.45547849330259,
							0
						],
						[
							-76.52213437178973,
							42.45534049328205,
							0
						],
						[
							-76.52212437178562,
							42.45532849328024,
							0
						],
						[
							-76.52208837177105,
							42.45528749327411,
							0
						],
						[
							-76.52191037169575,
							42.45504149323587,
							0
						],
						[
							-76.52150937152796,
							42.45451149315412,
							0
						],
						[
							-76.52174537160346,
							42.454508493144,
							0
						],
						[
							-76.5220393717008,
							42.45454949313967,
							0
						],
						[
							-76.52243237183184,
							42.45461649313614,
							0
						],
						[
							-76.52269737192056,
							42.45466649313462,
							0
						],
						[
							-76.52266637190733,
							42.45462249312776,
							0
						],
						[
							-76.52262237188592,
							42.45452349311123,
							0
						],
						[
							-76.52258537185912,
							42.45432149307539,
							0
						],
						[
							-76.52252637182525,
							42.45411949304044,
							0
						],
						[
							-76.52243937178318,
							42.45392749300846,
							0
						],
						[
							-76.52234837174304,
							42.45377949298479,
							0
						],
						[
							-76.52230637172563,
							42.45372649297668,
							0
						],
						[
							-76.52214737165616,
							42.45347649293691,
							0
						],
						[
							-76.52191037155072,
							42.45307849287291,
							0
						],
						[
							-76.52186037152573,
							42.45295749285256,
							0
						],
						[
							-76.52176637147541,
							42.4526844928059,
							0
						],
						[
							-76.52170237144264,
							42.4525184927778,
							0
						],
						[
							-76.52164737141604,
							42.45239749275767,
							0
						],
						[
							-76.52157637138536,
							42.45229049274075,
							0
						],
						[
							-76.52139837131347,
							42.45209049271099,
							0
						],
						[
							-76.52135837129666,
							42.45203649270261,
							0
						],
						[
							-76.5213443712889,
							42.45199249269504,
							0
						],
						[
							-76.52133937128325,
							42.45193749268509,
							0
						],
						[
							-76.52135237128446,
							42.45189749267715,
							0
						],
						[
							-76.52138037128974,
							42.45184749266679,
							0
						],
						[
							-76.52141537129728,
							42.45179749265613,
							0
						],
						[
							-76.52146337130898,
							42.45174749264493,
							0
						],
						[
							-76.52138937127998,
							42.4516764926348,
							0
						],
						[
							-76.52130537124648,
							42.45158749262175,
							0
						],
						[
							-76.52080737104335,
							42.45100049253338,
							0
						],
						[
							-76.52079137103681,
							42.45098149253053,
							0
						],
						[
							-76.52071037100357,
							42.45088349251569,
							0
						],
						[
							-76.52008437074751,
							42.45013549240272,
							0
						],
						[
							-76.51993137068423,
							42.44994349237341,
							0
						],
						[
							-76.5195493705325,
							42.44954849231588,
							0
						],
						[
							-76.51936237046003,
							42.44937949229218,
							0
						],
						[
							-76.51919037039409,
							42.44923349227217,
							0
						],
						[
							-76.51869337020713,
							42.4488614922235,
							0
						],
						[
							-76.51863337018628,
							42.44883949222189,
							0
						],
						[
							-76.51857637016475,
							42.44879549221605,
							0
						],
						[
							-76.51851337014023,
							42.44873749220786,
							0
						],
						[
							-76.51844537011317,
							42.4486664921975,
							0
						],
						[
							-76.5183463700699,
							42.44851049217265,
							0
						],
						[
							-76.51823037001614,
							42.44828649213593,
							0
						],
						[
							-76.51817036999003,
							42.44819349212116,
							0
						],
						[
							-76.51808636995084,
							42.44802749209387,
							0
						],
						[
							-76.51778736981798,
							42.44752749201351,
							0
						],
						[
							-76.5174863696788,
							42.44695049191902,
							0
						],
						[
							-76.51734636961277,
							42.44666449187179,
							0
						],
						[
							-76.51726436957317,
							42.44648449184183,
							0
						],
						[
							-76.5171463695159,
							42.44622149179796,
							0
						],
						[
							-76.51704036946137,
							42.44594349175084,
							0
						],
						[
							-76.51695236941423,
							42.44568749170707,
							0
						],
						[
							-76.51690836938562,
							42.44549149167261,
							0
						],
						[
							-76.51690036937967,
							42.44544549166443,
							0
						],
						[
							-76.51686836934483,
							42.44511249160414,
							0
						],
						[
							-76.51686236932031,
							42.44480649154779,
							0
						],
						[
							-76.5168473692932,
							42.44450449149255,
							0
						],
						[
							-76.51681136926807,
							42.44432049145997,
							0
						],
						[
							-76.5167463692303,
							42.44409149142026,
							0
						],
						[
							-76.51661936916076,
							42.44370149135325,
							0
						],
						[
							-76.51649936909585,
							42.44334349129192,
							0
						],
						[
							-76.51642236905926,
							42.44318249126526,
							0
						],
						[
							-76.51632536901656,
							42.44302549124014,
							0
						],
						[
							-76.51614736894335,
							42.44280749120703,
							0
						],
						[
							-76.51598836887892,
							42.4426254911798,
							0
						],
						[
							-76.51588836883627,
							42.44248249115742,
							0
						],
						[
							-76.51582936880936,
							42.44237449113982,
							0
						],
						[
							-76.51580436879706,
							42.44231649113011,
							0
						],
						[
							-76.51572036875291,
							42.44208349109044,
							0
						],
						[
							-76.51569636874197,
							42.44203949108326,
							0
						],
						[
							-76.51560336869323,
							42.44178349103967,
							0
						],
						[
							-76.51553336865994,
							42.44163649101533,
							0
						],
						[
							-76.5155053686466,
							42.44157749100553,
							0
						],
						[
							-76.51543736861755,
							42.44147949099018,
							0
						],
						[
							-76.5154133686072,
							42.44144349098448,
							0
						],
						[
							-76.51535136858206,
							42.44137249097387,
							0
						],
						[
							-76.51522236853198,
							42.44125449095728,
							0
						],
						[
							-76.51517236851254,
							42.44120849095079,
							0
						],
						[
							-76.51504036846354,
							42.44111849093947,
							0
						],
						[
							-76.51484436839092,
							42.44098649092299,
							0
						],
						[
							-76.51474436835383,
							42.44091849091446,
							0
						],
						[
							-76.51465136834,
							42.44113549095837,
							0
						],
						[
							-76.5138783682133,
							42.44277849129355,
							0
						],
						[
							-76.51389236826415,
							42.44340649140913,
							0
						],
						[
							-76.51353836826095,
							42.44490149169997,
							0
						],
						[
							-76.51341236825994,
							42.44543549180384,
							0
						],
						[
							-76.5133363682448,
							42.44556049183002,
							0
						],
						[
							-76.51279036813594,
							42.4464584920182,
							0
						],
						[
							-76.51267636811315,
							42.4466454920574,
							0
						],
						[
							-76.51260436809878,
							42.44676349208213,
							0
						],
						[
							-76.51235036806668,
							42.44743249221614,
							0
						],
						[
							-76.51195136801627,
							42.44848349242666,
							0
						],
						[
							-76.51179036798698,
							42.44878649248922,
							0
						],
						[
							-76.51118736787696,
							42.44991649272261,
							0
						],
						[
							-76.51078836779885,
							42.45059249286377,
							0
						],
						[
							-76.51082836786028,
							42.45125049298381,
							0
						],
						[
							-76.5108423678819,
							42.45148249302613,
							0
						],
						[
							-76.51139636844526,
							42.45670349396907,
							0
						],
						[
							-76.51146736851783,
							42.4573774940908,
							0
						],
						[
							-76.51160836866065,
							42.45869849432933,
							0
						],
						[
							-76.51168836876367,
							42.45974549451963,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090009003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>5941419</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>4058875</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4740964</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5305222</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090009003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090009003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>880</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>351</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>1468.53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>2.21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.76</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22709</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>22370</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23682</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13023</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12682</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13571</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7855</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7588</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8177</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5150</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5073</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5370</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>3.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.96</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.24</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>4919</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>8489</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1835</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1460</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1931</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>946</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>48</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00039"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.50060636351695,
							42.43683449073131,
							0
						],
						[
							-76.50069436367461,
							42.43858949105241,
							0
						],
						[
							-76.50167636398737,
							42.43855849100694,
							0
						],
						[
							-76.5026573642998,
							42.43852749096151,
							0
						],
						[
							-76.50388436469055,
							42.43848849090465,
							0
						],
						[
							-76.50516536509835,
							42.43844549084484,
							0
						],
						[
							-76.5060913653935,
							42.43841949080255,
							0
						],
						[
							-76.50734136579165,
							42.43838049074473,
							0
						],
						[
							-76.50830336609833,
							42.43835449070097,
							0
						],
						[
							-76.50825836601683,
							42.43744549053465,
							0
						],
						[
							-76.50822136595117,
							42.4367164904013,
							0
						],
						[
							-76.508213365938,
							42.43657249037499,
							0
						],
						[
							-76.50820236591093,
							42.43625349031643,
							0
						],
						[
							-76.50819836589962,
							42.4361174902914,
							0
						],
						[
							-76.50810936586655,
							42.43605649028373,
							0
						],
						[
							-76.50782636576146,
							42.4358624902593,
							0
						],
						[
							-76.50651836527783,
							42.43499449015167,
							0
						],
						[
							-76.50574736499176,
							42.43446949008575,
							0
						],
						[
							-76.50465636461907,
							42.43416149007292,
							0
						],
						[
							-76.50366636430229,
							42.43417249011501,
							0
						],
						[
							-76.50269936399289,
							42.43418349015619,
							0
						],
						[
							-76.50147436362262,
							42.43449149026274,
							0
						],
						[
							-76.50108636350537,
							42.43458949029658,
							0
						],
						[
							-76.50042936330928,
							42.43478849035996,
							0
						],
						[
							-76.49995336317234,
							42.43500249041881,
							0
						],
						[
							-76.49967436308475,
							42.43502849043493,
							0
						],
						[
							-76.49965336307892,
							42.43504049043798,
							0
						],
						[
							-76.49894436287387,
							42.43534449052293,
							0
						],
						[
							-76.49882236284519,
							42.43548649055413,
							0
						],
						[
							-76.49840636274759,
							42.43597249066088,
							0
						],
						[
							-76.49834536275345,
							42.43631749072718,
							0
						],
						[
							-76.49815136273517,
							42.43691349084527,
							0
						],
						[
							-76.49819136274793,
							42.43691249084348,
							0
						],
						[
							-76.49824436276478,
							42.43691049084095,
							0
						],
						[
							-76.4988903629707,
							42.43689249081149,
							0
						],
						[
							-76.4990923630347,
							42.43688149080128,
							0
						],
						[
							-76.49948336315941,
							42.4368714907836,
							0
						],
						[
							-76.49962236320354,
							42.43686549077687,
							0
						],
						[
							-76.50022036339377,
							42.43684349074861,
							0
						],
						[
							-76.50060636351695,
							42.43683449073131,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090010002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>293561</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>8112</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4361436</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5031496</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090010002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090010002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1248</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>468</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>72.54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>7.32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>47.25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.48</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>17764</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>17426</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>18738</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10693</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10353</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11241</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6598</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6331</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6920</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4028</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3952</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4249</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>70</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>8.01</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>6.45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>11498</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>20783</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>256</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>585</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>941</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1358</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>767</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00040"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.52026736957696,
							42.43348548931589,
							0
						],
						[
							-76.52037136960132,
							42.43336348928912,
							0
						],
						[
							-76.52053236963982,
							42.43318548924966,
							0
						],
						[
							-76.5206563696705,
							42.43306248922189,
							0
						],
						[
							-76.5207823697015,
							42.4329344891931,
							0
						],
						[
							-76.52101036975847,
							42.43271548914337,
							0
						],
						[
							-76.52120836980951,
							42.43254648910409,
							0
						],
						[
							-76.52165036992893,
							42.43224348903012,
							0
						],
						[
							-76.52241137013738,
							42.43176048890995,
							0
						],
						[
							-76.52257237018055,
							42.43164548888216,
							0
						],
						[
							-76.52385637052369,
							42.43071448865795,
							0
						],
						[
							-76.52441537067119,
							42.43028348855556,
							0
						],
						[
							-76.52478037076429,
							42.42995848848066,
							0
						],
						[
							-76.52490837079694,
							42.42984448845438,
							0
						],
						[
							-76.52496837081249,
							42.4297944884427,
							0
						],
						[
							-76.52545737093664,
							42.42935148834094,
							0
						],
						[
							-76.52617237111772,
							42.42869748819099,
							0
						],
						[
							-76.52630237115072,
							42.42857948816388,
							0
						],
						[
							-76.52657537121672,
							42.4282874880988,
							0
						],
						[
							-76.52675037125537,
							42.42805048804789,
							0
						],
						[
							-76.5268943712831,
							42.42780048799579,
							0
						],
						[
							-76.52696937129551,
							42.42764248796352,
							0
						],
						[
							-76.52701637130187,
							42.42752448793979,
							0
						],
						[
							-76.5270923713056,
							42.4272444878849,
							0
						],
						[
							-76.5271973713079,
							42.42681948780201,
							0
						],
						[
							-76.52721837130792,
							42.42672848778433,
							0
						],
						[
							-76.5272473713083,
							42.42660748776076,
							0
						],
						[
							-76.52736237131015,
							42.42613248766823,
							0
						],
						[
							-76.52743837131128,
							42.42581748760688,
							0
						],
						[
							-76.52756137131769,
							42.42536948751901,
							0
						],
						[
							-76.5276203713256,
							42.42522048748904,
							0
						],
						[
							-76.52783137136215,
							42.42479848740242,
							0
						],
						[
							-76.52818937143182,
							42.42418648727469,
							0
						],
						[
							-76.52840537147306,
							42.42380648719563,
							0
						],
						[
							-76.52879837154813,
							42.42311548705185,
							0
						],
						[
							-76.5290713715982,
							42.42260748694679,
							0
						],
						[
							-76.52920337162242,
							42.42236148689594,
							0
						],
						[
							-76.5292333716279,
							42.42230548688436,
							0
						],
						[
							-76.52926437163364,
							42.42224848687255,
							0
						],
						[
							-76.52977237172736,
							42.42131048667841,
							0
						],
						[
							-76.52995937176055,
							42.42094748660367,
							0
						],
						[
							-76.53003737176957,
							42.42073048656037,
							0
						],
						[
							-76.53011337177196,
							42.42043248650215,
							0
						],
						[
							-76.53018037176703,
							42.42007448643318,
							0
						],
						[
							-76.53020037176557,
							42.41996748641258,
							0
						],
						[
							-76.53048037174081,
							42.41841448611384,
							0
						],
						[
							-76.53055237173486,
							42.41802048603801,
							0
						],
						[
							-76.53083137171184,
							42.41649548574451,
							0
						],
						[
							-76.53095237170271,
							42.41584548561931,
							0
						],
						[
							-76.53100037170086,
							42.41561148557405,
							0
						],
						[
							-76.53106637170802,
							42.41542148553623,
							0
						],
						[
							-76.53112437171724,
							42.41529448551037,
							0
						],
						[
							-76.53134937176027,
							42.41489948542816,
							0
						],
						[
							-76.53134237175375,
							42.41484148541772,
							0
						],
						[
							-76.53130737173922,
							42.41479648541079,
							0
						],
						[
							-76.53125737172088,
							42.41476548540709,
							0
						],
						[
							-76.53119537169977,
							42.41474848540643,
							0
						],
						[
							-76.53111337167124,
							42.41471848540422,
							0
						],
						[
							-76.53035637145,
							42.41501048548891,
							0
						],
						[
							-76.53030537143505,
							42.41502948549449,
							0
						],
						[
							-76.53021537140877,
							42.4150644855046,
							0
						],
						[
							-76.53012037138096,
							42.41510048551513,
							0
						],
						[
							-76.53008137136955,
							42.41511548551947,
							0
						],
						[
							-76.53005337136139,
							42.41512648552264,
							0
						],
						[
							-76.52956937121944,
							42.41530648557556,
							0
						],
						[
							-76.52949537119807,
							42.41533848558447,
							0
						],
						[
							-76.527511370617,
							42.41608748580341,
							0
						],
						[
							-76.52701137047059,
							42.41627648585863,
							0
						],
						[
							-76.52619437023128,
							42.41658448594872,
							0
						],
						[
							-76.52498936987823,
							42.41703748608136,
							0
						],
						[
							-76.52408836961426,
							42.41737648618054,
							0
						],
						[
							-76.52363736948215,
							42.41754648623026,
							0
						],
						[
							-76.5233313693933,
							42.41767248626596,
							0
						],
						[
							-76.52318936935202,
							42.41773048628245,
							0
						],
						[
							-76.5231283693343,
							42.41775548628955,
							0
						],
						[
							-76.52292236927511,
							42.4178484863151,
							0
						],
						[
							-76.52253436916467,
							42.41803848636597,
							0
						],
						[
							-76.52218836906748,
							42.41822548641459,
							0
						],
						[
							-76.52196536900438,
							42.41833948644472,
							0
						],
						[
							-76.52162236890727,
							42.41851448649098,
							0
						],
						[
							-76.52125436880581,
							42.41873948654752,
							0
						],
						[
							-76.52093136871815,
							42.41895548660057,
							0
						],
						[
							-76.52052936861121,
							42.41925348667199,
							0
						],
						[
							-76.5201293685059,
							42.41956548674592,
							0
						],
						[
							-76.51978336841485,
							42.41983548680987,
							0
						],
						[
							-76.51944436832602,
							42.42010548687357,
							0
						],
						[
							-76.51877636815293,
							42.42066348700387,
							0
						],
						[
							-76.51480536711925,
							42.42391848776695,
							0
						],
						[
							-76.51473636710168,
							42.42398048778122,
							0
						],
						[
							-76.5142843669865,
							42.42438448787426,
							0
						],
						[
							-76.51427436698395,
							42.42439348787632,
							0
						],
						[
							-76.51376136685073,
							42.42481848797575,
							0
						],
						[
							-76.51361136681142,
							42.42493748800385,
							0
						],
						[
							-76.51304036665871,
							42.42535048810337,
							0
						],
						[
							-76.51276236658347,
							42.42553948814958,
							0
						],
						[
							-76.51250936651384,
							42.42569548818869,
							0
						],
						[
							-76.51179136631374,
							42.42610548829363,
							0
						],
						[
							-76.51144636621672,
							42.42629048834181,
							0
						],
						[
							-76.51117536614028,
							42.42643248837906,
							0
						],
						[
							-76.5107203660118,
							42.42666948844131,
							0
						],
						[
							-76.50998536580596,
							42.4270754885462,
							0
						],
						[
							-76.50886836549884,
							42.42776948871981,
							0
						],
						[
							-76.50869636545251,
							42.42788948874898,
							0
						],
						[
							-76.5084413653865,
							42.4281034887989,
							0
						],
						[
							-76.50833136536015,
							42.42822448882575,
							0
						],
						[
							-76.5082543653417,
							42.42830948884458,
							0
						],
						[
							-76.50816736532249,
							42.42842748886993,
							0
						],
						[
							-76.50788836522392,
							42.42830448885847,
							0
						],
						[
							-76.50783336520674,
							42.4283104888618,
							0
						],
						[
							-76.50767936516013,
							42.42834848887507,
							0
						],
						[
							-76.5075163651136,
							42.42842648889611,
							0
						],
						[
							-76.50704836498257,
							42.42868548896296,
							0
						],
						[
							-76.5068633649304,
							42.4287824889884,
							0
						],
						[
							-76.50645436481615,
							42.42901248904752,
							0
						],
						[
							-76.50628136476713,
							42.42910048907078,
							0
						],
						[
							-76.50604336470066,
							42.42923448910521,
							0
						],
						[
							-76.50581936463766,
							42.42935448913648,
							0
						],
						[
							-76.50567236459693,
							42.42944148915853,
							0
						],
						[
							-76.50559836457562,
							42.42947448916763,
							0
						],
						[
							-76.50348236398384,
							42.43065448947159,
							0
						],
						[
							-76.50331936393805,
							42.43074248949446,
							0
						],
						[
							-76.50309636387563,
							42.43086648952643,
							0
						],
						[
							-76.5019263635478,
							42.43151048969293,
							0
						],
						[
							-76.50177836350629,
							42.4315914897139,
							0
						],
						[
							-76.501697363484,
							42.43164148972642,
							0
						],
						[
							-76.50162236346401,
							42.43169648973964,
							0
						],
						[
							-76.50154836344564,
							42.43176948975614,
							0
						],
						[
							-76.50149936343398,
							42.4318244897683,
							0
						],
						[
							-76.50145236342391,
							42.43189248978278,
							0
						],
						[
							-76.50135636338692,
							42.43180848977114,
							0
						],
						[
							-76.50127236335672,
							42.43176448976638,
							0
						],
						[
							-76.50121036334052,
							42.43181448977813,
							0
						],
						[
							-76.50075736323184,
							42.43231148988841,
							0
						],
						[
							-76.50033236312846,
							42.43275848998832,
							0
						],
						[
							-76.50003236305676,
							42.43309149006207,
							0
						],
						[
							-76.49991036302934,
							42.43325049009643,
							0
						],
						[
							-76.49965836297565,
							42.43361849017472,
							0
						],
						[
							-76.49947536293472,
							42.4338594902267,
							0
						],
						[
							-76.49919736287104,
							42.43420549030196,
							0
						],
						[
							-76.4989043628055,
							42.43459149038524,
							0
						],
						[
							-76.49880536278386,
							42.43472849041459,
							0
						],
						[
							-76.4988173628152,
							42.43510149048309,
							0
						],
						[
							-76.49882036283607,
							42.43537149053293,
							0
						],
						[
							-76.49882236284519,
							42.43548649055413,
							0
						],
						[
							-76.49894436287387,
							42.43534449052293,
							0
						],
						[
							-76.49965336307892,
							42.43504049043798,
							0
						],
						[
							-76.49967436308475,
							42.43502849043493,
							0
						],
						[
							-76.49995336317234,
							42.43500249041881,
							0
						],
						[
							-76.50042936330928,
							42.43478849035996,
							0
						],
						[
							-76.50108636350537,
							42.43458949029658,
							0
						],
						[
							-76.50147436362262,
							42.43449149026274,
							0
						],
						[
							-76.50269936399289,
							42.43418349015619,
							0
						],
						[
							-76.50366636430229,
							42.43417249011501,
							0
						],
						[
							-76.50465636461907,
							42.43416149007292,
							0
						],
						[
							-76.50574736499176,
							42.43446949008575,
							0
						],
						[
							-76.50651836527783,
							42.43499449015167,
							0
						],
						[
							-76.50782636576146,
							42.4358624902593,
							0
						],
						[
							-76.50810936586655,
							42.43605649028373,
							0
						],
						[
							-76.50819836589962,
							42.4361174902914,
							0
						],
						[
							-76.50832536594676,
							42.43620449030237,
							0
						],
						[
							-76.50956336640661,
							42.4370544904095,
							0
						],
						[
							-76.51098636693425,
							42.43801849053021,
							0
						],
						[
							-76.51105736696057,
							42.43806649053622,
							0
						],
						[
							-76.51188536726582,
							42.43860349060203,
							0
						],
						[
							-76.51238436744177,
							42.43881849062159,
							0
						],
						[
							-76.51265536755608,
							42.43918949067925,
							0
						],
						[
							-76.51334436778234,
							42.43926049066447,
							0
						],
						[
							-76.51533636843642,
							42.43946449062155,
							0
						],
						[
							-76.51537436844936,
							42.43947449062187,
							0
						],
						[
							-76.51565036853583,
							42.43944649060552,
							0
						],
						[
							-76.5152963684608,
							42.43996849071639,
							0
						],
						[
							-76.51474436835383,
							42.44091849091446,
							0
						],
						[
							-76.51484436839092,
							42.44098649092299,
							0
						],
						[
							-76.51504036846354,
							42.44111849093947,
							0
						],
						[
							-76.51517236851254,
							42.44120849095079,
							0
						],
						[
							-76.51523736852938,
							42.44115449093815,
							0
						],
						[
							-76.51533936855579,
							42.44106849091811,
							0
						],
						[
							-76.51538436856742,
							42.44103049090926,
							0
						],
						[
							-76.51557136861486,
							42.44086049087026,
							0
						],
						[
							-76.51564636863257,
							42.44077449085132,
							0
						],
						[
							-76.51575036865515,
							42.44062849082008,
							0
						],
						[
							-76.51618336873885,
							42.43988049066423,
							0
						],
						[
							-76.51653136880627,
							42.43928149053932,
							0
						],
						[
							-76.51766736902204,
							42.4372674901208,
							0
						],
						[
							-76.51812736910827,
							42.43643648994844,
							0
						],
						[
							-76.51822436912751,
							42.43627548991474,
							0
						],
						[
							-76.5183723691577,
							42.43604148986545,
							0
						],
						[
							-76.51856236919792,
							42.43576048980579,
							0
						],
						[
							-76.51989636949293,
							42.43395948941861,
							0
						],
						[
							-76.5201883695587,
							42.43358148933685,
							0
						],
						[
							-76.52026736957696,
							42.43348548931589,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090010003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>2764568</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>139403</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4279008</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5163696</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090010003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090010003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>889</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>585</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>683.77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>6.19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>5.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>18767</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>18429</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>19741</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>11023</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10682</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11571</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6721</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6454</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7044</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4256</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4179</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4477</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>37</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>7.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>6.98</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.86</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>9792</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>20816</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>11</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>990</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1024</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1615</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>335</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00041"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.46077234842397,
							42.40540548652405,
							0
						],
						[
							-76.4607133484088,
							42.40545648653588,
							0
						],
						[
							-76.4598563481979,
							42.40632748673178,
							0
						],
						[
							-76.45967634815456,
							42.40652348677534,
							0
						],
						[
							-76.45954734812649,
							42.40670448681406,
							0
						],
						[
							-76.4594613481106,
							42.40686348684699,
							0
						],
						[
							-76.45917234806552,
							42.40751148697866,
							0
						],
						[
							-76.45911834805612,
							42.40761948700083,
							0
						],
						[
							-76.45906634804481,
							42.40769248701646,
							0
						],
						[
							-76.45900434803029,
							42.40776548703248,
							0
						],
						[
							-76.45893134801187,
							42.407833487048,
							0
						],
						[
							-76.45885034799029,
							42.4078934870624,
							0
						],
						[
							-76.4587613479658,
							42.40794848707617,
							0
						],
						[
							-76.45866734793873,
							42.40799048708774,
							0
						],
						[
							-76.45772534766189,
							42.40833548718966,
							0
						],
						[
							-76.45758234761946,
							42.40838248720414,
							0
						],
						[
							-76.45748234759076,
							42.40842848721668,
							0
						],
						[
							-76.45738934756469,
							42.40847948722989,
							0
						],
						[
							-76.45730334754114,
							42.40853448724354,
							0
						],
						[
							-76.45614734724451,
							42.40954448747726,
							0
						],
						[
							-76.45585034716507,
							42.40975948752906,
							0
						],
						[
							-76.45554634708142,
							42.40994848757633,
							0
						],
						[
							-76.4546203467736,
							42.40980248758667,
							0
						],
						[
							-76.45419434663171,
							42.40973148759073,
							0
						],
						[
							-76.45408734659549,
							42.40970548759023,
							0
						],
						[
							-76.453954346549,
							42.40965348758596,
							0
						],
						[
							-76.45389334652678,
							42.40961748758173,
							0
						],
						[
							-76.45379034648793,
							42.40953848757129,
							0
						],
						[
							-76.45365534643331,
							42.40938448754822,
							0
						],
						[
							-76.4536013464114,
							42.40932248753891,
							0
						],
						[
							-76.45353334639621,
							42.40941248755834,
							0
						],
						[
							-76.45314834629731,
							42.40974748763591,
							0
						],
						[
							-76.45289834626129,
							42.41034848775729,
							0
						],
						[
							-76.45291134626811,
							42.41038448776344,
							0
						],
						[
							-76.45295334629064,
							42.41050748778451,
							0
						],
						[
							-76.45329534641478,
							42.41070348780701,
							0
						],
						[
							-76.45382634659872,
							42.41088848781982,
							0
						],
						[
							-76.45421734672944,
							42.41096048781738,
							0
						],
						[
							-76.45463734686977,
							42.41103648781449,
							0
						],
						[
							-76.45510434703093,
							42.41119048782415,
							0
						],
						[
							-76.45532234712584,
							42.41153048787831,
							0
						],
						[
							-76.45541734716713,
							42.41167748790169,
							0
						],
						[
							-76.456471347521,
							42.41189148789878,
							0
						],
						[
							-76.4568523476584,
							42.41209748792154,
							0
						],
						[
							-76.45832634817657,
							42.41271348797608,
							0
						],
						[
							-76.45934534855752,
							42.41344848807103,
							0
						],
						[
							-76.4600093488057,
							42.41392648813272,
							0
						],
						[
							-76.46065034907703,
							42.41481948827217,
							0
						],
						[
							-76.46074934911886,
							42.41495648829353,
							0
						],
						[
							-76.46115434929028,
							42.41552048838161,
							0
						],
						[
							-76.46152534944726,
							42.41603648846217,
							0
						],
						[
							-76.46059034924261,
							42.41733248873986,
							0
						],
						[
							-76.46070734931875,
							42.41785748883232,
							0
						],
						[
							-76.46117834950549,
							42.4183414889029,
							0
						],
						[
							-76.46154534963742,
							42.41853448892382,
							0
						],
						[
							-76.4619803497733,
							42.41848448889699,
							0
						],
						[
							-76.4621823498396,
							42.41850448889253,
							0
						],
						[
							-76.46227634987135,
							42.41852648889282,
							0
						],
						[
							-76.46231234988224,
							42.41851748888969,
							0
						],
						[
							-76.46249934994364,
							42.41853648888566,
							0
						],
						[
							-76.46313435017488,
							42.41891048892925,
							0
						],
						[
							-76.46407135046822,
							42.41881148887308,
							0
						],
						[
							-76.46457635063891,
							42.41892948887453,
							0
						],
						[
							-76.46553235099564,
							42.41960948896178,
							0
						],
						[
							-76.4658603511103,
							42.41973748897222,
							0
						],
						[
							-76.46677835140196,
							42.41969848892793,
							0
						],
						[
							-76.46715635153637,
							42.41987748894578,
							0
						],
						[
							-76.4672923515848,
							42.41994248895233,
							0
						],
						[
							-76.46779335176782,
							42.42024548898818,
							0
						],
						[
							-76.46794335185592,
							42.42078848908264,
							0
						],
						[
							-76.46837535200326,
							42.42090748908721,
							0
						],
						[
							-76.469860352512,
							42.42134648910848,
							0
						],
						[
							-76.4702373526618,
							42.4217384891658,
							0
						],
						[
							-76.47022135268001,
							42.42205548922512,
							0
						],
						[
							-76.47020135267734,
							42.42210648923538,
							0
						],
						[
							-76.47032735274817,
							42.42251948930673,
							0
						],
						[
							-76.47093935296598,
							42.42281148933606,
							0
						],
						[
							-76.47137535312885,
							42.42312348937616,
							0
						],
						[
							-76.47448135417045,
							42.42373648936413,
							0
						],
						[
							-76.47495135441649,
							42.42503048958464,
							0
						],
						[
							-76.4752403545478,
							42.42555448966993,
							0
						],
						[
							-76.47554235467672,
							42.42598948973824,
							0
						],
						[
							-76.47582435478574,
							42.42624148977347,
							0
						],
						[
							-76.47629935494662,
							42.42635648977556,
							0
						],
						[
							-76.47764935537825,
							42.42633648971729,
							0
						],
						[
							-76.47823935557224,
							42.4264004897053,
							0
						],
						[
							-76.47872635575074,
							42.4267024897415,
							0
						],
						[
							-76.47880635578008,
							42.42675248974754,
							0
						],
						[
							-76.4792613559651,
							42.42728248982722,
							0
						],
						[
							-76.47941335605341,
							42.42781948992045,
							0
						],
						[
							-76.47946035610583,
							42.42832649001237,
							0
						],
						[
							-76.47980235626791,
							42.42903749013014,
							0
						],
						[
							-76.47990835630841,
							42.42912549014213,
							0
						],
						[
							-76.48058835653107,
							42.42918649012593,
							0
						],
						[
							-76.48151935685148,
							42.42948149014288,
							0
						],
						[
							-76.48169335692396,
							42.42970749017767,
							0
						],
						[
							-76.48190635702457,
							42.4301454902501,
							0
						],
						[
							-76.48234535718751,
							42.43044549028787,
							0
						],
						[
							-76.48284935735944,
							42.43058449029321,
							0
						],
						[
							-76.48340435753529,
							42.43055449026522,
							0
						],
						[
							-76.48419735778005,
							42.43042349020892,
							0
						],
						[
							-76.48447935788886,
							42.4306724902436,
							0
						],
						[
							-76.48442535789387,
							42.43097549030183,
							0
						],
						[
							-76.48434135787643,
							42.4311044903291,
							0
						],
						[
							-76.48407935782193,
							42.43150549041391,
							0
						],
						[
							-76.48420235790294,
							42.43206949051329,
							0
						],
						[
							-76.48469835810232,
							42.43261549059426,
							0
						],
						[
							-76.48481835815052,
							42.43274749061383,
							0
						],
						[
							-76.48498035821562,
							42.43292549064021,
							0
						],
						[
							-76.48507535827012,
							42.4332514906967,
							0
						],
						[
							-76.48516635832247,
							42.43356549075113,
							0
						],
						[
							-76.4851643583398,
							42.43380949079635,
							0
						],
						[
							-76.48499435830368,
							42.43405949084946,
							0
						],
						[
							-76.48510035835479,
							42.43429149088811,
							0
						],
						[
							-76.48600535866991,
							42.43462749091368,
							0
						],
						[
							-76.48619135872943,
							42.43462549090577,
							0
						],
						[
							-76.48767535920445,
							42.43461049084301,
							0
						],
						[
							-76.48831335941843,
							42.43473649084051,
							0
						],
						[
							-76.48844735946878,
							42.43483649085358,
							0
						],
						[
							-76.48874935961845,
							42.43555249097384,
							0
						],
						[
							-76.48895535974646,
							42.43639249112093,
							0
						],
						[
							-76.48904035981649,
							42.4369724912248,
							0
						],
						[
							-76.48948435998754,
							42.43736049127862,
							0
						],
						[
							-76.48951435999457,
							42.43732549127093,
							0
						],
						[
							-76.49000936011144,
							42.43675649114563,
							0
						],
						[
							-76.49074036030513,
							42.43620249101357,
							0
						],
						[
							-76.49099136037144,
							42.43600949096771,
							0
						],
						[
							-76.49107836039559,
							42.43595849095475,
							0
						],
						[
							-76.49116536042115,
							42.43592649094531,
							0
						],
						[
							-76.4911963604307,
							42.43592149094313,
							0
						],
						[
							-76.4912133604358,
							42.43591649094152,
							0
						],
						[
							-76.49152236053396,
							42.43590349092661,
							0
						],
						[
							-76.4923163607873,
							42.43588449089098,
							0
						],
						[
							-76.49233036078584,
							42.43580349087543,
							0
						],
						[
							-76.4923243607733,
							42.43565949084903,
							0
						],
						[
							-76.49230836075886,
							42.43553349082635,
							0
						],
						[
							-76.49214636066523,
							42.43496849072839,
							0
						],
						[
							-76.49170336043458,
							42.43376749052411,
							0
						],
						[
							-76.49164236040276,
							42.43360149049586,
							0
						],
						[
							-76.49159136037314,
							42.43342149046463,
							0
						],
						[
							-76.49157236035775,
							42.43329549044207,
							0
						],
						[
							-76.49157136035382,
							42.43324649043304,
							0
						],
						[
							-76.49158036034343,
							42.43306649039938,
							0
						],
						[
							-76.49161936034099,
							42.43286349036023,
							0
						],
						[
							-76.4916703603443,
							42.43268649032542,
							0
						],
						[
							-76.49174336035342,
							42.43249249028656,
							0
						],
						[
							-76.49214136041131,
							42.43154549009526,
							0
						],
						[
							-76.49236736044547,
							42.43102548998989,
							0
						],
						[
							-76.49239336044846,
							42.43095248997534,
							0
						],
						[
							-76.49243336045332,
							42.43084448995373,
							0
						],
						[
							-76.49245636045437,
							42.43075848993688,
							0
						],
						[
							-76.49246236045296,
							42.43071348992832,
							0
						],
						[
							-76.49246336044762,
							42.43063648991404,
							0
						],
						[
							-76.49244136042927,
							42.43048348988663,
							0
						],
						[
							-76.49242036041865,
							42.43043048987767,
							0
						],
						[
							-76.49238536040247,
							42.43036348986667,
							0
						],
						[
							-76.49234336038472,
							42.43030548985765,
							0
						],
						[
							-76.49229536036535,
							42.4302514898496,
							0
						],
						[
							-76.49204236026583,
							42.43000248981376,
							0
						],
						[
							-76.49183436018342,
							42.42978948978274,
							0
						],
						[
							-76.49177036015897,
							42.42973648977554,
							0
						],
						[
							-76.49158036008453,
							42.42955348974935,
							0
						],
						[
							-76.4913833600076,
							42.42936748972291,
							0
						],
						[
							-76.49125835995683,
							42.42922248970113,
							0
						],
						[
							-76.49119435993092,
							42.4291494896902,
							0
						],
						[
							-76.49117335992227,
							42.42912348968623,
							0
						],
						[
							-76.49112035990062,
							42.42906048967672,
							0
						],
						[
							-76.49084635979207,
							42.42878048963601,
							0
						],
						[
							-76.49081135977887,
							42.42875348963242,
							0
						],
						[
							-76.49032435958695,
							42.42826948956257,
							0
						],
						[
							-76.48959635929897,
							42.42753048945524,
							0
						],
						[
							-76.48860535890773,
							42.42653548931119,
							0
						],
						[
							-76.4881823587406,
							42.42610848924927,
							0
						],
						[
							-76.48621535796518,
							42.42414848896608,
							0
						],
						[
							-76.48600335788112,
							42.4239304889343,
							0
						],
						[
							-76.4851583575478,
							42.42308548881206,
							0
						],
						[
							-76.48459235732365,
							42.42250748872797,
							0
						],
						[
							-76.48444335726074,
							42.42230248869605,
							0
						],
						[
							-76.48406835709311,
							42.4216594885922,
							0
						],
						[
							-76.48380835697148,
							42.42114048850666,
							0
						],
						[
							-76.48361135688288,
							42.42079548845076,
							0
						],
						[
							-76.48346735682196,
							42.42059548841957,
							0
						],
						[
							-76.48335435677613,
							42.42046548840008,
							0
						],
						[
							-76.48306235665957,
							42.42015448835429,
							0
						],
						[
							-76.48260535648255,
							42.41974148829632,
							0
						],
						[
							-76.48145835604075,
							42.41873848815703,
							0
						],
						[
							-76.480525355681,
							42.41791748804276,
							0
						],
						[
							-76.48046435565792,
							42.41786948803635,
							0
						],
						[
							-76.48035635561669,
							42.41778048802424,
							0
						],
						[
							-76.47914235514689,
							42.41668848787116,
							0
						],
						[
							-76.47811535475016,
							42.41577448774344,
							0
						],
						[
							-76.47810835466703,
							42.41467548754029,
							0
						],
						[
							-76.47806435448432,
							42.41238448711791,
							0
						],
						[
							-76.47800735432595,
							42.4104804867677,
							0
						],
						[
							-76.4778533540517,
							42.40742448620807,
							0
						],
						[
							-76.47783635397903,
							42.40651048603953,
							0
						],
						[
							-76.47777635382805,
							42.40471948571029,
							0
						],
						[
							-76.47772735370111,
							42.40320748543229,
							0
						],
						[
							-76.4777183536658,
							42.40276648535098,
							0
						],
						[
							-76.47769835363424,
							42.40242448528844,
							0
						],
						[
							-76.47763835359314,
							42.40212748523587,
							0
						],
						[
							-76.47753735353963,
							42.4018404851868,
							0
						],
						[
							-76.47743035348923,
							42.40162148515057,
							0
						],
						[
							-76.47742335348623,
							42.401611485149,
							0
						],
						[
							-76.47590835282897,
							42.39928148477867,
							0
						],
						[
							-76.47525635253639,
							42.39814648459478,
							0
						],
						[
							-76.47472635227986,
							42.39696948439818,
							0
						],
						[
							-76.47442435212928,
							42.39623848427497,
							0
						],
						[
							-76.47411235197511,
							42.39550248415126,
							0
						],
						[
							-76.47396335190145,
							42.39515048409208,
							0
						],
						[
							-76.47297335142768,
							42.39302448373822,
							0
						],
						[
							-76.47152235074823,
							42.39011148325719,
							0
						],
						[
							-76.4709863504994,
							42.38906448308486,
							0
						],
						[
							-76.47097035049038,
							42.38901148307567,
							0
						],
						[
							-76.47088735045024,
							42.38882748304494,
							0
						],
						[
							-76.4708223504136,
							42.38861248300774,
							0
						],
						[
							-76.47078835038614,
							42.38838748296742,
							0
						],
						[
							-76.47078335037428,
							42.38824748294169,
							0
						],
						[
							-76.47079235031728,
							42.38743248279032,
							0
						],
						[
							-76.47079035030313,
							42.38724848275632,
							0
						],
						[
							-76.47063335024896,
							42.38719648275302,
							0
						],
						[
							-76.46793934931272,
							42.38621348267964,
							0
						],
						[
							-76.46759134919346,
							42.38610948267441,
							0
						],
						[
							-76.46723134907242,
							42.38603348267487,
							0
						],
						[
							-76.46689234896002,
							42.3859834826793,
							0
						],
						[
							-76.4654053484706,
							42.38581348270781,
							0
						],
						[
							-76.46521734840863,
							42.38579048271113,
							0
						],
						[
							-76.46386234796199,
							42.38562648273543,
							0
						],
						[
							-76.46351934784832,
							42.38557648274001,
							0
						],
						[
							-76.46309434770511,
							42.38548248273973,
							0
						],
						[
							-76.46086134694639,
							42.38490348272257,
							0
						],
						[
							-76.46085834698043,
							42.38538048281106,
							0
						],
						[
							-76.46086334698602,
							42.38543448282088,
							0
						],
						[
							-76.46085734709754,
							42.38697948310738,
							0
						],
						[
							-76.46086534714732,
							42.38762248322621,
							0
						],
						[
							-76.4608583471897,
							42.38823048333913,
							0
						],
						[
							-76.46088534725028,
							42.38893748346904,
							0
						],
						[
							-76.46087834725202,
							42.38899148347932,
							0
						],
						[
							-76.46095634739005,
							42.3905304837613,
							0
						],
						[
							-76.46093634741146,
							42.39090948383233,
							0
						],
						[
							-76.46085534741333,
							42.39128848390581,
							0
						],
						[
							-76.46040934737024,
							42.39264948417597,
							0
						],
						[
							-76.46034934737186,
							42.39293348423099,
							0
						],
						[
							-76.46032934738629,
							42.39321748428441,
							0
						],
						[
							-76.46037334746755,
							42.39413148445196,
							0
						],
						[
							-76.46037434747977,
							42.39429348448192,
							0
						],
						[
							-76.46033734748943,
							42.3945864845377,
							0
						],
						[
							-76.46028034748775,
							42.39481248458187,
							0
						],
						[
							-76.46025034748538,
							42.39491148460142,
							0
						],
						[
							-76.46021734748112,
							42.39499748461867,
							0
						],
						[
							-76.46005534745349,
							42.39532848468653,
							0
						],
						[
							-76.45999134744125,
							42.39544148471005,
							0
						],
						[
							-76.45975434739196,
							42.39580548478703,
							0
						],
						[
							-76.45965534737152,
							42.39595948481957,
							0
						],
						[
							-76.45961334736275,
							42.39602348483311,
							0
						],
						[
							-76.45935334730574,
							42.39638248491012,
							0
						],
						[
							-76.45927934729096,
							42.3965044849357,
							0
						],
						[
							-76.45922434728264,
							42.39663148496144,
							0
						],
						[
							-76.45918734728039,
							42.39676248498721,
							0
						],
						[
							-76.45916834728393,
							42.39689348501224,
							0
						],
						[
							-76.45916834729384,
							42.39702848503723,
							0
						],
						[
							-76.45928634744108,
							42.39851748530828,
							0
						],
						[
							-76.45929034744569,
							42.39856248531647,
							0
						],
						[
							-76.4593533475429,
							42.39961048550804,
							0
						],
						[
							-76.4593343475587,
							42.39990848556403,
							0
						],
						[
							-76.4592373475627,
							42.40038648565646,
							0
						],
						[
							-76.45911634755615,
							42.40082548574264,
							0
						],
						[
							-76.45905834754915,
							42.40098348577425,
							0
						],
						[
							-76.45902634754388,
							42.40105148578816,
							0
						],
						[
							-76.45898534753573,
							42.4011194858024,
							0
						],
						[
							-76.45895734752911,
							42.40115148580945,
							0
						],
						[
							-76.46002034790845,
							42.40167348586324,
							0
						],
						[
							-76.46126434835152,
							42.40227248592395,
							0
						],
						[
							-76.46168734850221,
							42.40247648594466,
							0
						],
						[
							-76.46250534879306,
							42.4028634859833,
							0
						],
						[
							-76.46322734904972,
							42.40320448601732,
							0
						],
						[
							-76.46333934908984,
							42.40326148602334,
							0
						],
						[
							-76.46357634917652,
							42.40340648604063,
							0
						],
						[
							-76.4630553490308,
							42.40369748611557,
							0
						],
						[
							-76.46298134901042,
							42.40374348612708,
							0
						],
						[
							-76.46259934890679,
							42.40400048619009,
							0
						],
						[
							-76.46174234868296,
							42.40469548635341,
							0
						],
						[
							-76.4613433485762,
							42.40498448642303,
							0
						],
						[
							-76.46126434855454,
							42.40503448643548,
							0
						],
						[
							-76.46099534848176,
							42.40521848648041,
							0
						],
						[
							-76.46077234842397,
							42.40540548652405,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090011001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>6354876</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>187277</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4080496</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4742559</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090011001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090011001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>947</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>436</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>1570.32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.72</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>2.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.78</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22443</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>22105</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23417</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13072</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12731</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13620</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7945</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7678</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8267</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5089</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5013</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5310</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>8432</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>21560</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1945</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1704</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1844</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1208</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00042"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.49125835995683,
							42.42922248970113,
							0
						],
						[
							-76.4913833600076,
							42.42936748972291,
							0
						],
						[
							-76.49158036008453,
							42.42955348974935,
							0
						],
						[
							-76.49177036015897,
							42.42973648977554,
							0
						],
						[
							-76.49183436018342,
							42.42978948978274,
							0
						],
						[
							-76.49204236026583,
							42.43000248981376,
							0
						],
						[
							-76.49229536036535,
							42.4302514898496,
							0
						],
						[
							-76.49234336038472,
							42.43030548985765,
							0
						],
						[
							-76.49238536040247,
							42.43036348986667,
							0
						],
						[
							-76.49242036041865,
							42.43043048987767,
							0
						],
						[
							-76.49244136042927,
							42.43048348988663,
							0
						],
						[
							-76.49246336044762,
							42.43063648991404,
							0
						],
						[
							-76.49246236045296,
							42.43071348992832,
							0
						],
						[
							-76.49245636045437,
							42.43075848993688,
							0
						],
						[
							-76.49243336045332,
							42.43084448995373,
							0
						],
						[
							-76.49239336044846,
							42.43095248997534,
							0
						],
						[
							-76.49236736044547,
							42.43102548998989,
							0
						],
						[
							-76.49214136041131,
							42.43154549009526,
							0
						],
						[
							-76.49174336035342,
							42.43249249028656,
							0
						],
						[
							-76.4916703603443,
							42.43268649032542,
							0
						],
						[
							-76.49161936034099,
							42.43286349036023,
							0
						],
						[
							-76.49158036034343,
							42.43306649039938,
							0
						],
						[
							-76.49157136035382,
							42.43324649043304,
							0
						],
						[
							-76.49157236035775,
							42.43329549044207,
							0
						],
						[
							-76.49159136037314,
							42.43342149046463,
							0
						],
						[
							-76.49164236040276,
							42.43360149049586,
							0
						],
						[
							-76.49170336043458,
							42.43376749052411,
							0
						],
						[
							-76.49214636066523,
							42.43496849072839,
							0
						],
						[
							-76.49230836075886,
							42.43553349082635,
							0
						],
						[
							-76.4923243607733,
							42.43565949084903,
							0
						],
						[
							-76.49233036078584,
							42.43580349087543,
							0
						],
						[
							-76.4923163607873,
							42.43588449089098,
							0
						],
						[
							-76.49152236053396,
							42.43590349092661,
							0
						],
						[
							-76.4912133604358,
							42.43591649094152,
							0
						],
						[
							-76.4911963604307,
							42.43592149094313,
							0
						],
						[
							-76.49116536042115,
							42.43592649094531,
							0
						],
						[
							-76.49107836039559,
							42.43595849095475,
							0
						],
						[
							-76.49099136037144,
							42.43600949096771,
							0
						],
						[
							-76.49074036030513,
							42.43620249101357,
							0
						],
						[
							-76.49000936011144,
							42.43675649114563,
							0
						],
						[
							-76.48951435999457,
							42.43732549127093,
							0
						],
						[
							-76.48948435998754,
							42.43736049127862,
							0
						],
						[
							-76.48984436012626,
							42.43767549132232,
							0
						],
						[
							-76.49022436026677,
							42.43792749135358,
							0
						],
						[
							-76.49024736027532,
							42.43794349135561,
							0
						],
						[
							-76.49149836070573,
							42.43833749137788,
							0
						],
						[
							-76.4930603612295,
							42.43864449137148,
							0
						],
						[
							-76.49464336174661,
							42.43876949133057,
							0
						],
						[
							-76.49513636189988,
							42.43870349129842,
							0
						],
						[
							-76.49511436189033,
							42.43866949129301,
							0
						],
						[
							-76.49501736184777,
							42.43851449126825,
							0
						],
						[
							-76.49496136182258,
							42.4384164912524,
							0
						],
						[
							-76.49488736178927,
							42.43828649123135,
							0
						],
						[
							-76.4948443617616,
							42.4380984911983,
							0
						],
						[
							-76.49478436171152,
							42.4376804911234,
							0
						],
						[
							-76.4947813617059,
							42.43761749111187,
							0
						],
						[
							-76.49498836177048,
							42.43759249109888,
							0
						],
						[
							-76.49526236185412,
							42.43753449107705,
							0
						],
						[
							-76.49547536191794,
							42.43747349105712,
							0
						],
						[
							-76.49565736196985,
							42.4373854910335,
							0
						],
						[
							-76.49608636209045,
							42.43715449097341,
							0
						],
						[
							-76.49655836222684,
							42.43695049091656,
							0
						],
						[
							-76.49667536226261,
							42.43692649090741,
							0
						],
						[
							-76.49679436230063,
							42.43692449090223,
							0
						],
						[
							-76.49678136227456,
							42.43662749084781,
							0
						],
						[
							-76.4967423621977,
							42.43575449068787,
							0
						],
						[
							-76.49673736218782,
							42.43564249066734,
							0
						],
						[
							-76.49670536212645,
							42.43494949054044,
							0
						],
						[
							-76.49670536211548,
							42.43480049051286,
							0
						],
						[
							-76.49577436181936,
							42.43483549055701,
							0
						],
						[
							-76.49521236164024,
							42.43485149058272,
							0
						],
						[
							-76.49471236148233,
							42.43488549060924,
							0
						],
						[
							-76.49462136145324,
							42.43488649061309,
							0
						],
						[
							-76.4946073614314,
							42.43465149057018,
							0
						],
						[
							-76.49457636138351,
							42.43413649047615,
							0
						],
						[
							-76.49457236137681,
							42.43406349046281,
							0
						],
						[
							-76.49457036137412,
							42.43403549045772,
							0
						],
						[
							-76.49457536136416,
							42.43387849042846,
							0
						],
						[
							-76.49459536136253,
							42.43376949040749,
							0
						],
						[
							-76.49462836136544,
							42.4336654903869,
							0
						],
						[
							-76.49467136137194,
							42.43356649036686,
							0
						],
						[
							-76.49477036138963,
							42.43337549032751,
							0
						],
						[
							-76.49612236167532,
							42.43136748990128,
							0
						],
						[
							-76.49637136172818,
							42.43100048982331,
							0
						],
						[
							-76.49645936174761,
							42.43088148979773,
							0
						],
						[
							-76.49652436176109,
							42.43078148977659,
							0
						],
						[
							-76.49659836177644,
							42.4306674897525,
							0
						],
						[
							-76.49745436195388,
							42.42934948947401,
							0
						],
						[
							-76.49759836198363,
							42.42912648942691,
							0
						],
						[
							-76.49785136203592,
							42.42873448934414,
							0
						],
						[
							-76.49824536211742,
							42.42812548921553,
							0
						],
						[
							-76.49805036205501,
							42.42812748922376,
							0
						],
						[
							-76.4975733619154,
							42.42830948927676,
							0
						],
						[
							-76.49700636175133,
							42.42855148934446,
							0
						],
						[
							-76.49662636164139,
							42.42871348938982,
							0
						],
						[
							-76.49645836159198,
							42.42877448940789,
							0
						],
						[
							-76.4964103615783,
							42.42879748941409,
							0
						],
						[
							-76.49575536138674,
							42.42904948948723,
							0
						],
						[
							-76.49525436123972,
							42.4292354895419,
							0
						],
						[
							-76.49504636117896,
							42.4293164895653,
							0
						],
						[
							-76.4949183611416,
							42.42936648957974,
							0
						],
						[
							-76.49468736107329,
							42.4294454896037,
							0
						],
						[
							-76.49451436102098,
							42.42948848961865,
							0
						],
						[
							-76.49445136100151,
							42.42949848962305,
							0
						],
						[
							-76.49427836094718,
							42.42951448963302,
							0
						],
						[
							-76.4940973608903,
							42.42953048964329,
							0
						],
						[
							-76.49375836078286,
							42.42954848966033,
							0
						],
						[
							-76.49351436070481,
							42.42955148967077,
							0
						],
						[
							-76.49246736037092,
							42.4295784897181,
							0
						],
						[
							-76.4921753602762,
							42.42956448972732,
							0
						],
						[
							-76.4920903602477,
							42.42954748972761,
							0
						],
						[
							-76.49195136020023,
							42.42950848972603,
							0
						],
						[
							-76.49189436018003,
							42.42948248972352,
							0
						],
						[
							-76.49151136004227,
							42.42928048970163,
							0
						],
						[
							-76.49119435993092,
							42.4291494896902,
							0
						],
						[
							-76.49125835995683,
							42.42922248970113,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090011002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>376370</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>2321</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4329820</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4934307</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090011002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090011002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1551</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>692</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>93</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>6.45</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>47.99</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>16605</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>16267</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>17579</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10067</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>9726</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>10615</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6198</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>5931</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6521</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3766</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3689</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>3986</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>103</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>106</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>108</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>80</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>6.76</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>7.44</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>11850</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>22011</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>248</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>701</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>916</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>916</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00043"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48507535827012,
							42.4332514906967,
							0
						],
						[
							-76.48483935819375,
							42.43324249070457,
							0
						],
						[
							-76.48451935809013,
							42.43322949071511,
							0
						],
						[
							-76.48414535796957,
							42.43322149072874,
							0
						],
						[
							-76.48395435790775,
							42.43321449073518,
							0
						],
						[
							-76.48362635780279,
							42.43321849074919,
							0
						],
						[
							-76.4834973577609,
							42.4332114907531,
							0
						],
						[
							-76.48342635773754,
							42.4332034907545,
							0
						],
						[
							-76.48338335772301,
							42.43319349075438,
							0
						],
						[
							-76.48314135764139,
							42.43313949075417,
							0
						],
						[
							-76.48232335736348,
							42.43292949074839,
							0
						],
						[
							-76.4817183571547,
							42.43273049073603,
							0
						],
						[
							-76.48117735696705,
							42.43253949072257,
							0
						],
						[
							-76.48077635682714,
							42.43238649071047,
							0
						],
						[
							-76.48069435679824,
							42.4323514907073,
							0
						],
						[
							-76.48062035677493,
							42.4323574907114,
							0
						],
						[
							-76.48038635668816,
							42.43219849069147,
							0
						],
						[
							-76.48021835662844,
							42.43211949068363,
							0
						],
						[
							-76.48008035658032,
							42.43206749067958,
							0
						],
						[
							-76.47988235651297,
							42.43201549067796,
							0
						],
						[
							-76.4797133564566,
							42.43198649067943,
							0
						],
						[
							-76.47957535641184,
							42.43197949068371,
							0
						],
						[
							-76.47954035640021,
							42.43197449068421,
							0
						],
						[
							-76.47941335635963,
							42.43197649068969,
							0
						],
						[
							-76.47931935633021,
							42.43198649069537,
							0
						],
						[
							-76.47919535629255,
							42.43201549070572,
							0
						],
						[
							-76.47911335626803,
							42.43203949071351,
							0
						],
						[
							-76.47898435623068,
							42.43209449072889,
							0
						],
						[
							-76.47893535621732,
							42.43212649073679,
							0
						],
						[
							-76.47892535621448,
							42.43213149073812,
							0
						],
						[
							-76.47863435614063,
							42.43239649079893,
							0
						],
						[
							-76.47831235606216,
							42.4327334908743,
							0
						],
						[
							-76.47824035604444,
							42.43280649089071,
							0
						],
						[
							-76.4781593560225,
							42.43286149090417,
							0
						],
						[
							-76.47785935593951,
							42.4330414909496,
							0
						],
						[
							-76.47763035587717,
							42.43319249098679,
							0
						],
						[
							-76.47751635584802,
							42.43329349101011,
							0
						],
						[
							-76.4774603558361,
							42.43337549102753,
							0
						],
						[
							-76.47739235582165,
							42.4334754910488,
							0
						],
						[
							-76.47733935581458,
							42.43361049107592,
							0
						],
						[
							-76.47731835581486,
							42.43370549109432,
							0
						],
						[
							-76.47730835582092,
							42.43383149111805,
							0
						],
						[
							-76.47732035584134,
							42.43405649115919,
							0
						],
						[
							-76.4773613558942,
							42.43459549125728,
							0
						],
						[
							-76.4774743560396,
							42.43607649152673,
							0
						],
						[
							-76.47749435607157,
							42.43642349159014,
							0
						],
						[
							-76.47751235610949,
							42.43685949167008,
							0
						],
						[
							-76.47752235612133,
							42.43697649169132,
							0
						],
						[
							-76.4775363561474,
							42.43726949174496,
							0
						],
						[
							-76.47755335619492,
							42.43784049184992,
							0
						],
						[
							-76.47825135642059,
							42.43786349182596,
							0
						],
						[
							-76.47862035654029,
							42.43788149181437,
							0
						],
						[
							-76.47873935657863,
							42.43788349180994,
							0
						],
						[
							-76.4798163569275,
							42.43792849177471,
							0
						],
						[
							-76.4800613570059,
							42.43792549176423,
							0
						],
						[
							-76.4801453570324,
							42.43791949175974,
							0
						],
						[
							-76.48027635707302,
							42.43790049175092,
							0
						],
						[
							-76.48042635711865,
							42.43786649173856,
							0
						],
						[
							-76.48086235724881,
							42.4377344916965,
							0
						],
						[
							-76.48095135727567,
							42.43771149168865,
							0
						],
						[
							-76.48152435744672,
							42.43753749163329,
							0
						],
						[
							-76.48162035747706,
							42.43753149162831,
							0
						],
						[
							-76.48168535749849,
							42.43753949162715,
							0
						],
						[
							-76.48172635751432,
							42.43757549163216,
							0
						],
						[
							-76.48178435752658,
							42.4374894916139,
							0
						],
						[
							-76.4823733577146,
							42.43747649158767,
							0
						],
						[
							-76.48268735781741,
							42.43750449158016,
							0
						],
						[
							-76.48321435799194,
							42.43757849157254,
							0
						],
						[
							-76.48395035823539,
							42.4376774915611,
							0
						],
						[
							-76.48433835836347,
							42.43772649155446,
							0
						],
						[
							-76.48451935842267,
							42.43774149154991,
							0
						],
						[
							-76.48463235845819,
							42.4377314915435,
							0
						],
						[
							-76.48479535850834,
							42.43770249153155,
							0
						],
						[
							-76.48504735858464,
							42.43764049150987,
							0
						],
						[
							-76.48539935868959,
							42.43753249147567,
							0
						],
						[
							-76.48560935875174,
							42.43746149145404,
							0
						],
						[
							-76.48566035876708,
							42.43744749144938,
							0
						],
						[
							-76.48585435882453,
							42.43738249142951,
							0
						],
						[
							-76.48592335884489,
							42.43735849142228,
							0
						],
						[
							-76.48598335886179,
							42.43732649141393,
							0
						],
						[
							-76.48605235887956,
							42.43726749140021,
							0
						],
						[
							-76.48649135903894,
							42.43751849142888,
							0
						],
						[
							-76.48710635926116,
							42.43785649146654,
							0
						],
						[
							-76.48732035933992,
							42.43799349148324,
							0
						],
						[
							-76.4873953593676,
							42.43804249148928,
							0
						],
						[
							-76.48851435977403,
							42.43868549156296,
							0
						],
						[
							-76.48922936003254,
							42.43908049160712,
							0
						],
						[
							-76.48928936000563,
							42.4384544914889,
							0
						],
						[
							-76.4892833599967,
							42.43835949147157,
							0
						],
						[
							-76.48927535999053,
							42.43831049146282,
							0
						],
						[
							-76.48905835988494,
							42.4378224913813,
							0
						],
						[
							-76.4890193598626,
							42.43768949135829,
							0
						],
						[
							-76.48941735996958,
							42.43740849129021,
							0
						],
						[
							-76.48948435998754,
							42.43736049127862,
							0
						],
						[
							-76.48904035981649,
							42.4369724912248,
							0
						],
						[
							-76.48895535974646,
							42.43639249112093,
							0
						],
						[
							-76.48874935961845,
							42.43555249097384,
							0
						],
						[
							-76.48844735946878,
							42.43483649085358,
							0
						],
						[
							-76.48831335941843,
							42.43473649084051,
							0
						],
						[
							-76.48767535920445,
							42.43461049084301,
							0
						],
						[
							-76.48619135872943,
							42.43462549090577,
							0
						],
						[
							-76.48600535866991,
							42.43462749091368,
							0
						],
						[
							-76.48510035835479,
							42.43429149088811,
							0
						],
						[
							-76.48499435830368,
							42.43405949084946,
							0
						],
						[
							-76.4851643583398,
							42.43380949079635,
							0
						],
						[
							-76.48516635832247,
							42.43356549075113,
							0
						],
						[
							-76.48507535827012,
							42.4332514906967,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>44</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090013004</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>463211</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>5589</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4357987</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4819445</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090013004</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090013004</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>968</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>442</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>114.45</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>6.57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>25.37</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.45</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>17591</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>17253</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>18564</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10564</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10224</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11112</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6471</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6204</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6794</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3989</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3912</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4210</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>104</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>107</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>108</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>7.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>7.29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>3.86</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>11784</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>20996</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>218</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>751</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1299</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2506</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>860</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>73</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00044"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48202835794285,
							42.44207449245225,
							0
						],
						[
							-76.4819963578652,
							42.44116049228447,
							0
						],
						[
							-76.48262035807714,
							42.44131949228865,
							0
						],
						[
							-76.48306535822772,
							42.44142549229026,
							0
						],
						[
							-76.48364235842295,
							42.44156249229228,
							0
						],
						[
							-76.48360835838787,
							42.44123449223297,
							0
						],
						[
							-76.48358535837384,
							42.44114449221726,
							0
						],
						[
							-76.48354335835279,
							42.44104149219989,
							0
						],
						[
							-76.48351835834116,
							42.44099249219184,
							0
						],
						[
							-76.48339935828977,
							42.44081349216353,
							0
						],
						[
							-76.4833703582782,
							42.44078249215898,
							0
						],
						[
							-76.48329335824559,
							42.44067549214229,
							0
						],
						[
							-76.48321835817677,
							42.44006849203303,
							0
						],
						[
							-76.4831983581528,
							42.43983049198981,
							0
						],
						[
							-76.4831793581142,
							42.439389491909,
							0
						],
						[
							-76.48318235809718,
							42.43914549186375,
							0
						],
						[
							-76.48319035806725,
							42.43870449178183,
							0
						],
						[
							-76.48321535804504,
							42.43829449170496,
							0
						],
						[
							-76.48323635802518,
							42.43793349163732,
							0
						],
						[
							-76.48321435799194,
							42.43757849157254,
							0
						],
						[
							-76.48268735781741,
							42.43750449158016,
							0
						],
						[
							-76.4823733577146,
							42.43747649158767,
							0
						],
						[
							-76.48178435752658,
							42.4374894916139,
							0
						],
						[
							-76.48172635751432,
							42.43757549163216,
							0
						],
						[
							-76.48168535749849,
							42.43753949162715,
							0
						],
						[
							-76.48162035747706,
							42.43753149162831,
							0
						],
						[
							-76.48152435744672,
							42.43753749163329,
							0
						],
						[
							-76.48095135727567,
							42.43771149168865,
							0
						],
						[
							-76.48086235724881,
							42.4377344916965,
							0
						],
						[
							-76.48042635711865,
							42.43786649173856,
							0
						],
						[
							-76.48027635707302,
							42.43790049175092,
							0
						],
						[
							-76.4801453570324,
							42.43791949175974,
							0
						],
						[
							-76.4800613570059,
							42.43792549176423,
							0
						],
						[
							-76.4798163569275,
							42.43792849177471,
							0
						],
						[
							-76.47873935657863,
							42.43788349180994,
							0
						],
						[
							-76.47862035654029,
							42.43788149181437,
							0
						],
						[
							-76.47825135642059,
							42.43786349182596,
							0
						],
						[
							-76.47755335619492,
							42.43784049184992,
							0
						],
						[
							-76.47759535628836,
							42.43892549204896,
							0
						],
						[
							-76.47762935636693,
							42.43984349221742,
							0
						],
						[
							-76.47767235646135,
							42.44093749241807,
							0
						],
						[
							-76.47770935648907,
							42.44115249245637,
							0
						],
						[
							-76.47728135638668,
							42.44162649256136,
							0
						],
						[
							-76.47695135630866,
							42.44200449264463,
							0
						],
						[
							-76.47680935627453,
							42.44215949267903,
							0
						],
						[
							-76.47662435623093,
							42.44237349272611,
							0
						],
						[
							-76.47645135619784,
							42.44267749278934,
							0
						],
						[
							-76.47642735619381,
							42.44272749279957,
							0
						],
						[
							-76.47621535614725,
							42.44301849286197,
							0
						],
						[
							-76.47613635612825,
							42.44310449288106,
							0
						],
						[
							-76.47601635609783,
							42.44321449290627,
							0
						],
						[
							-76.47594135607716,
							42.44326049291783,
							0
						],
						[
							-76.47578735603386,
							42.44334349293941,
							0
						],
						[
							-76.47593435607925,
							42.44331949292901,
							0
						],
						[
							-76.47600035609932,
							42.44330449292357,
							0
						],
						[
							-76.47607635612299,
							42.44329449291867,
							0
						],
						[
							-76.47622635616898,
							42.44326549290721,
							0
						],
						[
							-76.47641635622745,
							42.44323149289323,
							0
						],
						[
							-76.47657135627504,
							42.4432024928816,
							0
						],
						[
							-76.47657535627258,
							42.44315149287201,
							0
						],
						[
							-76.47660435627539,
							42.44306349285456,
							0
						],
						[
							-76.47663435628058,
							42.44300349284224,
							0
						],
						[
							-76.47673035630453,
							42.44291049282115,
							0
						],
						[
							-76.47696735636958,
							42.44276149278399,
							0
						],
						[
							-76.4770783563971,
							42.44265149275919,
							0
						],
						[
							-76.47711635640569,
							42.44260249274858,
							0
						],
						[
							-76.47726435644226,
							42.44245449271521,
							0
						],
						[
							-76.47731635645607,
							42.44241549270588,
							0
						],
						[
							-76.47750835651118,
							42.44232749268186,
							0
						],
						[
							-76.47754535652226,
							42.44231649267832,
							0
						],
						[
							-76.47756735652814,
							42.44230049267448,
							0
						],
						[
							-76.47767135655944,
							42.44227249266509,
							0
						],
						[
							-76.47778235659146,
							42.44222349265153,
							0
						],
						[
							-76.47793835663826,
							42.4421794926371,
							0
						],
						[
							-76.47819035671712,
							42.44215249262192,
							0
						],
						[
							-76.47831635675594,
							42.44213049261273,
							0
						],
						[
							-76.4791243570078,
							42.44203049256157,
							0
						],
						[
							-76.47962035716698,
							42.44203049254152,
							0
						],
						[
							-76.48002835730274,
							42.44209649253722,
							0
						],
						[
							-76.48016135734947,
							42.442151492542,
							0
						],
						[
							-76.48027235738994,
							42.44221749254973,
							0
						],
						[
							-76.48034735741801,
							42.44227149255668,
							0
						],
						[
							-76.48053235748998,
							42.44244249258082,
							0
						],
						[
							-76.48060635751733,
							42.44249149258691,
							0
						],
						[
							-76.48064335752956,
							42.44249649258633,
							0
						],
						[
							-76.48074735756293,
							42.44249649258213,
							0
						],
						[
							-76.48084335759177,
							42.44246949257327,
							0
						],
						[
							-76.48091735761224,
							42.44242549256212,
							0
						],
						[
							-76.48100635763956,
							42.44240849255537,
							0
						],
						[
							-76.48102835764499,
							42.44238649255043,
							0
						],
						[
							-76.48110235766836,
							42.4423814925465,
							0
						],
						[
							-76.48130335773322,
							42.44238649253929,
							0
						],
						[
							-76.48148135779196,
							42.44240849253616,
							0
						],
						[
							-76.4817183578733,
							42.4424804925399,
							0
						],
						[
							-76.48222935804655,
							42.44260649254254,
							0
						],
						[
							-76.48225135805481,
							42.4426224925446,
							0
						],
						[
							-76.48230335807229,
							42.44263349254456,
							0
						],
						[
							-76.48236335809354,
							42.44266049254711,
							0
						],
						[
							-76.4824143581107,
							42.44267149254709,
							0
						],
						[
							-76.48247435813204,
							42.44269949254984,
							0
						],
						[
							-76.48252635814907,
							42.44270449254866,
							0
						],
						[
							-76.48258535817008,
							42.44273249255145,
							0
						],
						[
							-76.48263735818757,
							42.44274349255139,
							0
						],
						[
							-76.48274835822642,
							42.44278749255503,
							0
						],
						[
							-76.48279335824161,
							42.44279749255507,
							0
						],
						[
							-76.48282235825216,
							42.44281449255703,
							0
						],
						[
							-76.48286735826741,
							42.44282549255725,
							0
						],
						[
							-76.4829333582914,
							42.44286349256162,
							0
						],
						[
							-76.48299335831189,
							42.44288049256233,
							0
						],
						[
							-76.4831413583646,
							42.44295149256949,
							0
						],
						[
							-76.48328935841572,
							42.44300049257257,
							0
						],
						[
							-76.48358635851551,
							42.44306149257183,
							0
						],
						[
							-76.48377835857873,
							42.44308349256812,
							0
						],
						[
							-76.48402335866015,
							42.44312149256525,
							0
						],
						[
							-76.48429735875006,
							42.44314849255916,
							0
						],
						[
							-76.48452035882285,
							42.4431654925533,
							0
						],
						[
							-76.48526835906434,
							42.44318549252674,
							0
						],
						[
							-76.48525535905641,
							42.44313449251781,
							0
						],
						[
							-76.48521535903045,
							42.44295649248653,
							0
						],
						[
							-76.4852123590258,
							42.4429064924774,
							0
						],
						[
							-76.48522635902374,
							42.44281749246037,
							0
						],
						[
							-76.48523535902255,
							42.44276249244982,
							0
						],
						[
							-76.48525535902559,
							42.44271649244049,
							0
						],
						[
							-76.48519035900317,
							42.44269549243925,
							0
						],
						[
							-76.4851343589832,
							42.44266849243651,
							0
						],
						[
							-76.48508735896556,
							42.44263349243194,
							0
						],
						[
							-76.4850723589578,
							42.44259349242514,
							0
						],
						[
							-76.48467835883203,
							42.44260249244276,
							0
						],
						[
							-76.48435335872806,
							42.44260649245662,
							0
						],
						[
							-76.48419335867723,
							42.4426134924644,
							0
						],
						[
							-76.48362235849456,
							42.44262049248878,
							0
						],
						[
							-76.48354835847124,
							42.44262649249289,
							0
						],
						[
							-76.48348335845047,
							42.4426274924957,
							0
						],
						[
							-76.4833693584133,
							42.44261949249886,
							0
						],
						[
							-76.48309535831999,
							42.44254649249641,
							0
						],
						[
							-76.48301835829336,
							42.44252049249474,
							0
						],
						[
							-76.48295135827063,
							42.4425034924943,
							0
						],
						[
							-76.48280635822057,
							42.44245549249127,
							0
						],
						[
							-76.48267335817405,
							42.44240349248704,
							0
						],
						[
							-76.48238035806736,
							42.44223149246708,
							0
						],
						[
							-76.48216535799027,
							42.44212149245543,
							0
						],
						[
							-76.48202835794285,
							42.44207449245225,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090013005</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>245403</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4401596</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4804821</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090013005</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090013005</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>914</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>342</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>60.64</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>37</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>5.48</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>30.88</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>17464</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>17126</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>18438</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10398</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10057</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>10945</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6337</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6070</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6660</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3960</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3884</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4181</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>100</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>103</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>104</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>75</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>10.39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>5.64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>11906</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>19762</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>412</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>589</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1280</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1865</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1084</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>75</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00045"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.4747263557708,
							42.44439349317654,
							0
						],
						[
							-76.47525935593168,
							42.44425549312944,
							0
						],
						[
							-76.4755633559878,
							42.44369349301321,
							0
						],
						[
							-76.4765393562723,
							42.44330449290177,
							0
						],
						[
							-76.4765683562768,
							42.44323949288858,
							0
						],
						[
							-76.47657135627504,
							42.4432024928816,
							0
						],
						[
							-76.47641635622745,
							42.44323149289323,
							0
						],
						[
							-76.47622635616898,
							42.44326549290721,
							0
						],
						[
							-76.47607635612299,
							42.44329449291867,
							0
						],
						[
							-76.47600035609932,
							42.44330449292357,
							0
						],
						[
							-76.47593435607925,
							42.44331949292901,
							0
						],
						[
							-76.47578735603386,
							42.44334349293941,
							0
						],
						[
							-76.47594135607716,
							42.44326049291783,
							0
						],
						[
							-76.47601635609783,
							42.44321449290627,
							0
						],
						[
							-76.47613635612825,
							42.44310449288106,
							0
						],
						[
							-76.47621535614725,
							42.44301849286197,
							0
						],
						[
							-76.47642735619381,
							42.44272749279957,
							0
						],
						[
							-76.47645135619784,
							42.44267749278934,
							0
						],
						[
							-76.47662435623093,
							42.44237349272611,
							0
						],
						[
							-76.47680935627453,
							42.44215949267903,
							0
						],
						[
							-76.47695135630866,
							42.44200449264463,
							0
						],
						[
							-76.47728135638668,
							42.44162649256136,
							0
						],
						[
							-76.47770935648907,
							42.44115249245637,
							0
						],
						[
							-76.47767235646135,
							42.44093749241807,
							0
						],
						[
							-76.47762935636693,
							42.43984349221742,
							0
						],
						[
							-76.47759535628836,
							42.43892549204896,
							0
						],
						[
							-76.47755335619492,
							42.43784049184992,
							0
						],
						[
							-76.47704335602982,
							42.43782049186684,
							0
						],
						[
							-76.4764053558237,
							42.43780149188913,
							0
						],
						[
							-76.47625635577539,
							42.43779449189386,
							0
						],
						[
							-76.47616835574723,
							42.43779549189758,
							0
						],
						[
							-76.47598335568742,
							42.43778949190397,
							0
						],
						[
							-76.47524835545093,
							42.43778049193201,
							0
						],
						[
							-76.47491335534279,
							42.43777149194388,
							0
						],
						[
							-76.47447435520162,
							42.4377674919609,
							0
						],
						[
							-76.47435235516264,
							42.43776949196619,
							0
						],
						[
							-76.47424035512678,
							42.43777049197092,
							0
						],
						[
							-76.47345135487244,
							42.43775449199985,
							0
						],
						[
							-76.47333735483548,
							42.43774949200353,
							0
						],
						[
							-76.4728363546731,
							42.43772749201972,
							0
						],
						[
							-76.4720303544125,
							42.4377004920473,
							0
						],
						[
							-76.47188735436619,
							42.43769449205198,
							0
						],
						[
							-76.47179135433502,
							42.43768949205493,
							0
						],
						[
							-76.47141035421151,
							42.43767249206718,
							0
						],
						[
							-76.47103835409128,
							42.43766049208001,
							0
						],
						[
							-76.46985635370906,
							42.43762049212037,
							0
						],
						[
							-76.46903535344208,
							42.43757249214468,
							0
						],
						[
							-76.46845335325057,
							42.43750749215618,
							0
						],
						[
							-76.46805835311886,
							42.43744049215975,
							0
						],
						[
							-76.46768735299277,
							42.43734449215698,
							0
						],
						[
							-76.46767435298837,
							42.43734149215695,
							0
						],
						[
							-76.4663543525316,
							42.43689049212684,
							0
						],
						[
							-76.46505035208224,
							42.43647049210184,
							0
						],
						[
							-76.46478835199244,
							42.43639249209799,
							0
						],
						[
							-76.46479135200599,
							42.43656349212951,
							0
						],
						[
							-76.46481435202699,
							42.43674849216282,
							0
						],
						[
							-76.46486335205627,
							42.43693249219489,
							0
						],
						[
							-76.46490735207828,
							42.4370394922129,
							0
						],
						[
							-76.46511835217986,
							42.4374994922895,
							0
						],
						[
							-76.46545135233752,
							42.43818949240372,
							0
						],
						[
							-76.46568235244862,
							42.43869149248724,
							0
						],
						[
							-76.46612835266298,
							42.43965849264814,
							0
						],
						[
							-76.46630735274275,
							42.43996149269697,
							0
						],
						[
							-76.4665203528368,
							42.44031049275292,
							0
						],
						[
							-76.46658635286653,
							42.44042649277171,
							0
						],
						[
							-76.46666835290108,
							42.44053849278912,
							0
						],
						[
							-76.4667643529394,
							42.44064049280412,
							0
						],
						[
							-76.46687535298186,
							42.44073349281683,
							0
						],
						[
							-76.46699835302752,
							42.44081749282741,
							0
						],
						[
							-76.4671343530767,
							42.44089249283577,
							0
						],
						[
							-76.46727835312777,
							42.44095849284218,
							0
						],
						[
							-76.46802235338801,
							42.44125049286611,
							0
						],
						[
							-76.46833735350006,
							42.44139949288095,
							0
						],
						[
							-76.46862935360608,
							42.44156649290006,
							0
						],
						[
							-76.46887135369647,
							42.44173949292227,
							0
						],
						[
							-76.46908035377562,
							42.44190349294417,
							0
						],
						[
							-76.46890635372907,
							42.44202949297451,
							0
						],
						[
							-76.46880435369768,
							42.44204749298196,
							0
						],
						[
							-76.4688073536993,
							42.44205649298351,
							0
						],
						[
							-76.46890435373889,
							42.44217149300087,
							0
						],
						[
							-76.46900035377537,
							42.44224849301122,
							0
						],
						[
							-76.46919435384468,
							42.44234449302115,
							0
						],
						[
							-76.46920035384684,
							42.44234749302145,
							0
						],
						[
							-76.46924535386246,
							42.44236349302261,
							0
						],
						[
							-76.46937135390975,
							42.44245649303469,
							0
						],
						[
							-76.4694453539388,
							42.44252849304503,
							0
						],
						[
							-76.46954935398225,
							42.44266549306617,
							0
						],
						[
							-76.46957135399418,
							42.4427314930775,
							0
						],
						[
							-76.46972735405957,
							42.44293949310967,
							0
						],
						[
							-76.46977135407937,
							42.44301649312212,
							0
						],
						[
							-76.4698013541117,
							42.4433244931779,
							0
						],
						[
							-76.46982335412028,
							42.44334549318091,
							0
						],
						[
							-76.46983835413042,
							42.4434174931936,
							0
						],
						[
							-76.46986835414202,
							42.44344449319738,
							0
						],
						[
							-76.46986835414408,
							42.44347249320257,
							0
						],
						[
							-76.46989035415315,
							42.44349949320667,
							0
						],
						[
							-76.4699123541647,
							42.44356049321707,
							0
						],
						[
							-76.46994235417594,
							42.44358249321993,
							0
						],
						[
							-76.46995035418169,
							42.44362549322757,
							0
						],
						[
							-76.46997935419306,
							42.44365349323158,
							0
						],
						[
							-76.46997935419505,
							42.44368049323657,
							0
						],
						[
							-76.47000035420362,
							42.44370549324034,
							0
						],
						[
							-76.4700393542196,
							42.44375249324746,
							0
						],
						[
							-76.47006135423226,
							42.44382849326062,
							0
						],
						[
							-76.47009035424281,
							42.44384549326261,
							0
						],
						[
							-76.47009135424513,
							42.44387249326753,
							0
						],
						[
							-76.47011335425427,
							42.44390049327185,
							0
						],
						[
							-76.47013535426456,
							42.44394449327911,
							0
						],
						[
							-76.4702763543207,
							42.44409249330075,
							0
						],
						[
							-76.47035035434969,
							42.44416349331092,
							0
						],
						[
							-76.47043335438015,
							42.44421549331718,
							0
						],
						[
							-76.47049835440404,
							42.44425649332213,
							0
						],
						[
							-76.4706473544539,
							42.4442844933213,
							0
						],
						[
							-76.47076535449176,
							42.44428449331652,
							0
						],
						[
							-76.47095035455231,
							42.444300493312,
							0
						],
						[
							-76.47112835461311,
							42.44435049331408,
							0
						],
						[
							-76.47124035465023,
							42.44436649331249,
							0
						],
						[
							-76.47132135467822,
							42.4443934933142,
							0
						],
						[
							-76.47187035486168,
							42.44449249331031,
							0
						],
						[
							-76.47224835498622,
							42.44453649330318,
							0
						],
						[
							-76.4725143550732,
							42.44455849329649,
							0
						],
						[
							-76.4730183552353,
							42.44456349327705,
							0
						],
						[
							-76.47335235534085,
							42.44454149325947,
							0
						],
						[
							-76.47384835549512,
							42.4444754932272,
							0
						],
						[
							-76.47391535551863,
							42.4445024932295,
							0
						],
						[
							-76.47406335556816,
							42.44453049322868,
							0
						],
						[
							-76.47419735561117,
							42.44453049322328,
							0
						],
						[
							-76.4747263557708,
							42.44439349317654,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090013002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>590779</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>2261</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4398895</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4723273</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090013002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090013002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1148</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>637</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>145.99</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>5.21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>22.74</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.38</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>17009</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>16671</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>17983</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10099</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>9759</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>10647</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6132</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>5865</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>6454</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>3857</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>3780</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4078</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>110</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>113</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>115</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>83</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>86</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>8.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>8.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>4.36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>9745</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>19469</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>140</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>701</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>877</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>877</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>92</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00046"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.47524835545093,
							42.43778049193201,
							0
						],
						[
							-76.47598335568742,
							42.43778949190397,
							0
						],
						[
							-76.47616835574723,
							42.43779549189758,
							0
						],
						[
							-76.47625635577539,
							42.43779449189386,
							0
						],
						[
							-76.4764053558237,
							42.43780149188913,
							0
						],
						[
							-76.47704335602982,
							42.43782049186684,
							0
						],
						[
							-76.47755335619492,
							42.43784049184992,
							0
						],
						[
							-76.4775363561474,
							42.43726949174496,
							0
						],
						[
							-76.47752235612133,
							42.43697649169132,
							0
						],
						[
							-76.47751235610949,
							42.43685949167008,
							0
						],
						[
							-76.47749435607157,
							42.43642349159014,
							0
						],
						[
							-76.4774743560396,
							42.43607649152673,
							0
						],
						[
							-76.4773613558942,
							42.43459549125728,
							0
						],
						[
							-76.47732035584134,
							42.43405649115919,
							0
						],
						[
							-76.47730835582092,
							42.43383149111805,
							0
						],
						[
							-76.47731835581486,
							42.43370549109432,
							0
						],
						[
							-76.47733935581458,
							42.43361049107592,
							0
						],
						[
							-76.47739235582165,
							42.4334754910488,
							0
						],
						[
							-76.4774603558361,
							42.43337549102753,
							0
						],
						[
							-76.47751635584802,
							42.43329349101011,
							0
						],
						[
							-76.47763035587717,
							42.43319249098679,
							0
						],
						[
							-76.47785935593951,
							42.4330414909496,
							0
						],
						[
							-76.4781593560225,
							42.43286149090417,
							0
						],
						[
							-76.47824035604444,
							42.43280649089071,
							0
						],
						[
							-76.47831235606216,
							42.4327334908743,
							0
						],
						[
							-76.47863435614063,
							42.43239649079893,
							0
						],
						[
							-76.47892535621448,
							42.43213149073812,
							0
						],
						[
							-76.47893535621732,
							42.43212649073679,
							0
						],
						[
							-76.47898435623068,
							42.43209449072889,
							0
						],
						[
							-76.47911335626803,
							42.43203949071351,
							0
						],
						[
							-76.47919535629255,
							42.43201549070572,
							0
						],
						[
							-76.47931935633021,
							42.43198649069537,
							0
						],
						[
							-76.47941335635963,
							42.43197649068969,
							0
						],
						[
							-76.47954035640021,
							42.43197449068421,
							0
						],
						[
							-76.47957535641184,
							42.43197949068371,
							0
						],
						[
							-76.4797133564566,
							42.43198649067943,
							0
						],
						[
							-76.47988235651297,
							42.43201549067796,
							0
						],
						[
							-76.48008035658032,
							42.43206749067958,
							0
						],
						[
							-76.48021835662844,
							42.43211949068363,
							0
						],
						[
							-76.48038635668816,
							42.43219849069147,
							0
						],
						[
							-76.48062035677493,
							42.4323574907114,
							0
						],
						[
							-76.48069435679824,
							42.4323514907073,
							0
						],
						[
							-76.48077635682714,
							42.43238649071047,
							0
						],
						[
							-76.48117735696705,
							42.43253949072257,
							0
						],
						[
							-76.4817183571547,
							42.43273049073603,
							0
						],
						[
							-76.48232335736348,
							42.43292949074839,
							0
						],
						[
							-76.48314135764139,
							42.43313949075417,
							0
						],
						[
							-76.48338335772301,
							42.43319349075438,
							0
						],
						[
							-76.48342635773754,
							42.4332034907545,
							0
						],
						[
							-76.4834973577609,
							42.4332114907531,
							0
						],
						[
							-76.48362635780279,
							42.43321849074919,
							0
						],
						[
							-76.48395435790775,
							42.43321449073518,
							0
						],
						[
							-76.48414535796957,
							42.43322149072874,
							0
						],
						[
							-76.48451935809013,
							42.43322949071511,
							0
						],
						[
							-76.48483935819375,
							42.43324249070457,
							0
						],
						[
							-76.48507535827012,
							42.4332514906967,
							0
						],
						[
							-76.48498035821562,
							42.43292549064021,
							0
						],
						[
							-76.48481835815052,
							42.43274749061383,
							0
						],
						[
							-76.48469835810232,
							42.43261549059426,
							0
						],
						[
							-76.48420235790294,
							42.43206949051329,
							0
						],
						[
							-76.48407935782193,
							42.43150549041391,
							0
						],
						[
							-76.48434135787643,
							42.4311044903291,
							0
						],
						[
							-76.48442535789387,
							42.43097549030183,
							0
						],
						[
							-76.48447935788886,
							42.4306724902436,
							0
						],
						[
							-76.48419735778005,
							42.43042349020892,
							0
						],
						[
							-76.48340435753529,
							42.43055449026522,
							0
						],
						[
							-76.48284935735944,
							42.43058449029321,
							0
						],
						[
							-76.48234535718751,
							42.43044549028787,
							0
						],
						[
							-76.48190635702457,
							42.4301454902501,
							0
						],
						[
							-76.48169335692396,
							42.42970749017767,
							0
						],
						[
							-76.48151935685148,
							42.42948149014288,
							0
						],
						[
							-76.48058835653107,
							42.42918649012593,
							0
						],
						[
							-76.47990835630841,
							42.42912549014213,
							0
						],
						[
							-76.47980235626791,
							42.42903749013014,
							0
						],
						[
							-76.47946035610583,
							42.42832649001237,
							0
						],
						[
							-76.47941335605341,
							42.42781948992045,
							0
						],
						[
							-76.4792613559651,
							42.42728248982722,
							0
						],
						[
							-76.47880635578008,
							42.42675248974754,
							0
						],
						[
							-76.47872635575074,
							42.4267024897415,
							0
						],
						[
							-76.47823935557224,
							42.4264004897053,
							0
						],
						[
							-76.47764935537825,
							42.42633648971729,
							0
						],
						[
							-76.47629935494662,
							42.42635648977556,
							0
						],
						[
							-76.47582435478574,
							42.42624148977347,
							0
						],
						[
							-76.47554235467672,
							42.42598948973824,
							0
						],
						[
							-76.4752403545478,
							42.42555448966993,
							0
						],
						[
							-76.47495135441649,
							42.42503048958464,
							0
						],
						[
							-76.47448135417045,
							42.42373648936413,
							0
						],
						[
							-76.47137535312885,
							42.42312348937616,
							0
						],
						[
							-76.47093935296598,
							42.42281148933606,
							0
						],
						[
							-76.47032735274817,
							42.42251948930673,
							0
						],
						[
							-76.47020135267734,
							42.42210648923538,
							0
						],
						[
							-76.47022135268001,
							42.42205548922512,
							0
						],
						[
							-76.4702373526618,
							42.4217384891658,
							0
						],
						[
							-76.469860352512,
							42.42134648910848,
							0
						],
						[
							-76.46837535200326,
							42.42090748908721,
							0
						],
						[
							-76.46794335185592,
							42.42078848908264,
							0
						],
						[
							-76.46779335176782,
							42.42024548898818,
							0
						],
						[
							-76.4672923515848,
							42.41994248895233,
							0
						],
						[
							-76.46715635153637,
							42.41987748894578,
							0
						],
						[
							-76.46677835140196,
							42.41969848892793,
							0
						],
						[
							-76.4658603511103,
							42.41973748897222,
							0
						],
						[
							-76.46553235099564,
							42.41960948896178,
							0
						],
						[
							-76.46457635063891,
							42.41892948887453,
							0
						],
						[
							-76.46407135046822,
							42.41881148887308,
							0
						],
						[
							-76.46313435017488,
							42.41891048892925,
							0
						],
						[
							-76.46249934994364,
							42.41853648888566,
							0
						],
						[
							-76.46231234988224,
							42.41851748888969,
							0
						],
						[
							-76.46227634987135,
							42.41852648889282,
							0
						],
						[
							-76.4621823498396,
							42.41850448889253,
							0
						],
						[
							-76.4619803497733,
							42.41848448889699,
							0
						],
						[
							-76.46154534963742,
							42.41853448892382,
							0
						],
						[
							-76.46117834950549,
							42.4183414889029,
							0
						],
						[
							-76.46070734931875,
							42.41785748883232,
							0
						],
						[
							-76.46059034924261,
							42.41733248873986,
							0
						],
						[
							-76.46152534944726,
							42.41603648846217,
							0
						],
						[
							-76.46115434929028,
							42.41552048838161,
							0
						],
						[
							-76.46074934911886,
							42.41495648829353,
							0
						],
						[
							-76.46065034907703,
							42.41481948827217,
							0
						],
						[
							-76.4600093488057,
							42.41392648813272,
							0
						],
						[
							-76.45934534855752,
							42.41344848807103,
							0
						],
						[
							-76.45832634817657,
							42.41271348797608,
							0
						],
						[
							-76.4568523476584,
							42.41209748792154,
							0
						],
						[
							-76.456471347521,
							42.41189148789878,
							0
						],
						[
							-76.45541734716713,
							42.41167748790169,
							0
						],
						[
							-76.45532234712584,
							42.41153048787831,
							0
						],
						[
							-76.45510434703093,
							42.41119048782415,
							0
						],
						[
							-76.45463734686977,
							42.41103648781449,
							0
						],
						[
							-76.45421734672944,
							42.41096048781738,
							0
						],
						[
							-76.45382634659872,
							42.41088848781982,
							0
						],
						[
							-76.45329534641478,
							42.41070348780701,
							0
						],
						[
							-76.45295334629064,
							42.41050748778451,
							0
						],
						[
							-76.45291134626811,
							42.41038448776344,
							0
						],
						[
							-76.45289834626129,
							42.41034848775729,
							0
						],
						[
							-76.45314834629731,
							42.40974748763591,
							0
						],
						[
							-76.45353334639621,
							42.40941248755834,
							0
						],
						[
							-76.4536013464114,
							42.40932248753891,
							0
						],
						[
							-76.45356234639574,
							42.40927948753253,
							0
						],
						[
							-76.45351234637552,
							42.40922248752399,
							0
						],
						[
							-76.45331334630718,
							42.40916148752073,
							0
						],
						[
							-76.45285934615367,
							42.40905448751924,
							0
						],
						[
							-76.45273834611397,
							42.4090424875219,
							0
						],
						[
							-76.45261634607526,
							42.40904848752794,
							0
						],
						[
							-76.45249934603949,
							42.40907248753711,
							0
						],
						[
							-76.45244334602293,
							42.40909148754289,
							0
						],
						[
							-76.45239034600762,
							42.40911448754928,
							0
						],
						[
							-76.45234134599396,
							42.40914248755644,
							0
						],
						[
							-76.45225634597139,
							42.40920648757172,
							0
						],
						[
							-76.45222034596249,
							42.40924248757983,
							0
						],
						[
							-76.45213934594554,
							42.4093654876059,
							0
						],
						[
							-76.45209134593816,
							42.40947448762802,
							0
						],
						[
							-76.45205134593523,
							42.40960948765461,
							0
						],
						[
							-76.45203734593603,
							42.40968148766853,
							0
						],
						[
							-76.45200034594711,
							42.4099934877278,
							0
						],
						[
							-76.45199934596333,
							42.4102184877695,
							0
						],
						[
							-76.45202834598682,
							42.41041148780408,
							0
						],
						[
							-76.45204134599422,
							42.4104554878117,
							0
						],
						[
							-76.45206634600855,
							42.41054148782662,
							0
						],
						[
							-76.45231834616497,
							42.41156948800681,
							0
						],
						[
							-76.45248834628825,
							42.41250448817307,
							0
						],
						[
							-76.45233834624587,
							42.41258248819356,
							0
						],
						[
							-76.45167734606055,
							42.41294648828766,
							0
						],
						[
							-76.45132034596168,
							42.41315948834151,
							0
						],
						[
							-76.45072834579129,
							42.41342548841465,
							0
						],
						[
							-76.45009834561094,
							42.41372148849489,
							0
						],
						[
							-76.44857334518672,
							42.41460648872031,
							0
						],
						[
							-76.44877334525933,
							42.41472148873354,
							0
						],
						[
							-76.44976234561707,
							42.41527148879545,
							0
						],
						[
							-76.45393134712597,
							42.41760148905855,
							0
						],
						[
							-76.45413634720042,
							42.41771948907211,
							0
						],
						[
							-76.45532134763123,
							42.41840748915165,
							0
						],
						[
							-76.45701734825062,
							42.41943048927254,
							0
						],
						[
							-76.45873634887803,
							42.42046248939419,
							0
						],
						[
							-76.459104349012,
							42.42067848941932,
							0
						],
						[
							-76.46045034950919,
							42.42156648952934,
							0
						],
						[
							-76.4615653499268,
							42.42238048963498,
							0
						],
						[
							-76.4617903500107,
							42.42253948965531,
							0
						],
						[
							-76.46309035049748,
							42.4234864897781,
							0
						],
						[
							-76.46409035086974,
							42.42418548986711,
							0
						],
						[
							-76.46423335092247,
							42.42427848987853,
							0
						],
						[
							-76.46437335097416,
							42.4243704898899,
							0
						],
						[
							-76.46560835142995,
							42.42517948998974,
							0
						],
						[
							-76.46722435202379,
							42.42620349011398,
							0
						],
						[
							-76.46840935245979,
							42.4269614902064,
							0
						],
						[
							-76.46879435260142,
							42.42720749023636,
							0
						],
						[
							-76.46973935294908,
							42.42781149030996,
							0
						],
						[
							-76.46990935301166,
							42.42792049032327,
							0
						],
						[
							-76.47086135335995,
							42.42850249039252,
							0
						],
						[
							-76.47137135354765,
							42.42882949043242,
							0
						],
						[
							-76.47211935382639,
							42.42935549049953,
							0
						],
						[
							-76.47189135375608,
							42.42939449051597,
							0
						],
						[
							-76.47080035340976,
							42.4294444905693,
							0
						],
						[
							-76.47030535325247,
							42.42946549059319,
							0
						],
						[
							-76.4695493530122,
							42.4294964906295,
							0
						],
						[
							-76.46836135263449,
							42.42954349068619,
							0
						],
						[
							-76.46752635236895,
							42.42957549072585,
							0
						],
						[
							-76.46699535220013,
							42.4295964907512,
							0
						],
						[
							-76.46500035156392,
							42.42964949084162,
							0
						],
						[
							-76.46248135075938,
							42.42969949095265,
							0
						],
						[
							-76.46277435099002,
							42.43155549128427,
							0
						],
						[
							-76.46280335101456,
							42.43176249132142,
							0
						],
						[
							-76.46283935104593,
							42.43203149136976,
							0
						],
						[
							-76.46311835125488,
							42.43365349165864,
							0
						],
						[
							-76.46327535137839,
							42.43464649183605,
							0
						],
						[
							-76.46335335142462,
							42.43493449188619,
							0
						],
						[
							-76.46348135148673,
							42.43522049193394,
							0
						],
						[
							-76.46356235152592,
							42.43539949196379,
							0
						],
						[
							-76.46386635166529,
							42.43596749205661,
							0
						],
						[
							-76.46390435169036,
							42.43614249208746,
							0
						],
						[
							-76.46406335174427,
							42.43618149208825,
							0
						],
						[
							-76.46417135178142,
							42.43621549209018,
							0
						],
						[
							-76.46478835199244,
							42.43639249209799,
							0
						],
						[
							-76.46505035208224,
							42.43647049210184,
							0
						],
						[
							-76.4663543525316,
							42.43689049212684,
							0
						],
						[
							-76.46767435298837,
							42.43734149215695,
							0
						],
						[
							-76.46768735299277,
							42.43734449215698,
							0
						],
						[
							-76.46805835311886,
							42.43744049215975,
							0
						],
						[
							-76.46845335325057,
							42.43750749215618,
							0
						],
						[
							-76.46903535344208,
							42.43757249214468,
							0
						],
						[
							-76.46985635370906,
							42.43762049212037,
							0
						],
						[
							-76.47103835409128,
							42.43766049208001,
							0
						],
						[
							-76.47141035421151,
							42.43767249206718,
							0
						],
						[
							-76.47179135433502,
							42.43768949205493,
							0
						],
						[
							-76.47188735436619,
							42.43769449205198,
							0
						],
						[
							-76.4720303544125,
							42.4377004920473,
							0
						],
						[
							-76.4728363546731,
							42.43772749201972,
							0
						],
						[
							-76.47333735483548,
							42.43774949200353,
							0
						],
						[
							-76.47345135487244,
							42.43775449199985,
							0
						],
						[
							-76.47424035512678,
							42.43777049197092,
							0
						],
						[
							-76.47435235516264,
							42.43776949196619,
							0
						],
						[
							-76.47447435520162,
							42.4377674919609,
							0
						],
						[
							-76.47491335534279,
							42.43777149194388,
							0
						],
						[
							-76.47524835545093,
							42.43778049193201,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>47</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090013003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>2569287</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>132753</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4256517</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4670945</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090013003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090013003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>820</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>377</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>634.88</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>78</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>5.48</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>20779</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>20441</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>21753</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12020</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>11679</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>12567</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7256</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6989</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7579</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4712</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4635</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4933</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>5.3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>8.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>8631</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>22679</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1161</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1690</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1814</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1083</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>83</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00047"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.47565235697579,
							42.45670449541606,
							0
						],
						[
							-76.47515935682009,
							42.45673849544227,
							0
						],
						[
							-76.47505135678587,
							42.45674449544777,
							0
						],
						[
							-76.47414735650328,
							42.45684649550319,
							0
						],
						[
							-76.47443235664528,
							42.45753149561833,
							0
						],
						[
							-76.47477435681544,
							42.45835049575594,
							0
						],
						[
							-76.47525135705757,
							42.45955749595985,
							0
						],
						[
							-76.47528235707327,
							42.45963549597302,
							0
						],
						[
							-76.47545635716158,
							42.46007549604735,
							0
						],
						[
							-76.47558735723277,
							42.46047049611507,
							0
						],
						[
							-76.47569435729086,
							42.46079249617029,
							0
						],
						[
							-76.47576235733555,
							42.46110249622485,
							0
						],
						[
							-76.47583135738788,
							42.4615114962977,
							0
						],
						[
							-76.4758783574212,
							42.46175849634147,
							0
						],
						[
							-76.4759693574706,
							42.46203249638845,
							0
						],
						[
							-76.47612435754242,
							42.46233149643745,
							0
						],
						[
							-76.47636435765745,
							42.46284649652297,
							0
						],
						[
							-76.47645935770845,
							42.46312449657052,
							0
						],
						[
							-76.47661935780083,
							42.46368049666683,
							0
						],
						[
							-76.47688435794315,
							42.46445649679958,
							0
						],
						[
							-76.47701435801403,
							42.46485149686735,
							0
						],
						[
							-76.47666335790491,
							42.46489949689044,
							0
						],
						[
							-76.47623335776935,
							42.46493249691393,
							0
						],
						[
							-76.47613735773811,
							42.4649264969167,
							0
						],
						[
							-76.47591535766693,
							42.46492749692587,
							0
						],
						[
							-76.47587035765285,
							42.4649324969286,
							0
						],
						[
							-76.47549735753441,
							42.46494949694685,
							0
						],
						[
							-76.47539635750236,
							42.46495449695187,
							0
						],
						[
							-76.47516635742817,
							42.46494949696026,
							0
						],
						[
							-76.47491435734443,
							42.46491049696322,
							0
						],
						[
							-76.47470635726881,
							42.46479049694946,
							0
						],
						[
							-76.47461735723539,
							42.46472449694085,
							0
						],
						[
							-76.47446935717777,
							42.4645874969215,
							0
						],
						[
							-76.47442435715719,
							42.46450449690799,
							0
						],
						[
							-76.47439435714558,
							42.46447749690423,
							0
						],
						[
							-76.47437235713407,
							42.46441749689402,
							0
						],
						[
							-76.47435035712496,
							42.46438949688972,
							0
						],
						[
							-76.47435035712297,
							42.46436249688474,
							0
						],
						[
							-76.47432035711172,
							42.46434049688187,
							0
						],
						[
							-76.4742983571006,
							42.4642854968726,
							0
						],
						[
							-76.4742763570911,
							42.4642524968674,
							0
						],
						[
							-76.47418735705567,
							42.4641594968538,
							0
						],
						[
							-76.47412735703317,
							42.46411549684808,
							0
						],
						[
							-76.47401635699467,
							42.46407649684536,
							0
						],
						[
							-76.47389035695306,
							42.4640604968475,
							0
						],
						[
							-76.47351235683136,
							42.46405549686188,
							0
						],
						[
							-76.47280035658707,
							42.46384149685111,
							0
						],
						[
							-76.4727043565534,
							42.46380249684778,
							0
						],
						[
							-76.47266735653908,
							42.46376949684318,
							0
						],
						[
							-76.47265935653415,
							42.46373749683759,
							0
						],
						[
							-76.47263035652242,
							42.46370449683267,
							0
						],
						[
							-76.47263035652034,
							42.46367649682749,
							0
						],
						[
							-76.47260735651096,
							42.46364949682342,
							0
						],
						[
							-76.47259235650291,
							42.46360549681589,
							0
						],
						[
							-76.4725703564946,
							42.46358849681362,
							0
						],
						[
							-76.47255535648372,
							42.46350649679908,
							0
						],
						[
							-76.47253335647505,
							42.46348449679591,
							0
						],
						[
							-76.47251835646175,
							42.46336949677524,
							0
						],
						[
							-76.47249635645306,
							42.46334749677207,
							0
						],
						[
							-76.47248135644499,
							42.46330349676455,
							0
						],
						[
							-76.47245135643176,
							42.46325449675669,
							0
						],
						[
							-76.47244435642708,
							42.46322149675088,
							0
						],
						[
							-76.47237035639846,
							42.46315549674168,
							0
						],
						[
							-76.47223635634815,
							42.46305649672879,
							0
						],
						[
							-76.47214035631329,
							42.46300149672248,
							0
						],
						[
							-76.4719923562609,
							42.4629354967163,
							0
						],
						[
							-76.47191735623484,
							42.46290849671433,
							0
						],
						[
							-76.4717913561928,
							42.46288649671536,
							0
						],
						[
							-76.47091735591229,
							42.46288649675071,
							0
						],
						[
							-76.47042235575637,
							42.46292649677812,
							0
						],
						[
							-76.47024935570195,
							42.46294149678789,
							0
						],
						[
							-76.47013835566759,
							42.46295849679553,
							0
						],
						[
							-76.47010135565688,
							42.46297449679999,
							0
						],
						[
							-76.47003435563622,
							42.46298549680471,
							0
						],
						[
							-76.46997535561934,
							42.4630134968123,
							0
						],
						[
							-76.46986435558695,
							42.4630574968249,
							0
						],
						[
							-76.46981235557108,
							42.46306849682907,
							0
						],
						[
							-76.4697903555652,
							42.46308449683291,
							0
						],
						[
							-76.46962735551658,
							42.46313449684873,
							0
						],
						[
							-76.4694413554585,
							42.46315649686033,
							0
						],
						[
							-76.46876735524985,
							42.46326049690681,
							0
						],
						[
							-76.46875235524631,
							42.46327749691056,
							0
						],
						[
							-76.46870035523042,
							42.4632884969147,
							0
						],
						[
							-76.46858935519805,
							42.46333249692732,
							0
						],
						[
							-76.46849335517086,
							42.46338149694027,
							0
						],
						[
							-76.46841835514886,
							42.46340949694848,
							0
						],
						[
							-76.4683303551218,
							42.463425496955,
							0
						],
						[
							-76.46830735511567,
							42.46344249695908,
							0
						],
						[
							-76.46819635508203,
							42.46346949696854,
							0
						],
						[
							-76.46806335504213,
							42.46350749698097,
							0
						],
						[
							-76.4679963550227,
							42.46353549698884,
							0
						],
						[
							-76.4678113549674,
							42.46359049700649,
							0
						],
						[
							-76.46766235492238,
							42.46362849701956,
							0
						],
						[
							-76.46751435487694,
							42.46365649703072,
							0
						],
						[
							-76.46703135472562,
							42.46370649705949,
							0
						],
						[
							-76.46694335472687,
							42.464106497137,
							0
						],
						[
							-76.4667673547576,
							42.46528849736266,
							0
						],
						[
							-76.46669435475889,
							42.46562349742757,
							0
						],
						[
							-76.46665935475532,
							42.46572749744821,
							0
						],
						[
							-76.46660435474963,
							42.46588949748038,
							0
						],
						[
							-76.46619835468682,
							42.46680449766596,
							0
						],
						[
							-76.4660343546573,
							42.46711749773047,
							0
						],
						[
							-76.46596435464419,
							42.46724449775678,
							0
						],
						[
							-76.46539735453881,
							42.46828249797164,
							0
						],
						[
							-76.46476735441829,
							42.46938949820176,
							0
						],
						[
							-76.46469535440521,
							42.4695254982298,
							0
						],
						[
							-76.46469035440471,
							42.46954049823279,
							0
						],
						[
							-76.464633354398,
							42.46969749826412,
							0
						],
						[
							-76.46460635439863,
							42.46982349828851,
							0
						],
						[
							-76.4645843544016,
							42.46995949831453,
							0
						],
						[
							-76.46453435441582,
							42.47036949839236,
							0
						],
						[
							-76.46449435448872,
							42.47153149860878,
							0
						],
						[
							-76.46452835453522,
							42.47201349869651,
							0
						],
						[
							-76.46453735454703,
							42.47213449871851,
							0
						],
						[
							-76.46462935461766,
							42.47269149881777,
							0
						],
						[
							-76.46466435463982,
							42.47283949884371,
							0
						],
						[
							-76.46468935465555,
							42.4729434988619,
							0
						],
						[
							-76.4647943547091,
							42.47321249890738,
							0
						],
						[
							-76.46493735477439,
							42.47347549895023,
							0
						],
						[
							-76.46511635485031,
							42.4737254989892,
							0
						],
						[
							-76.46525035490549,
							42.47389049901427,
							0
						],
						[
							-76.46552435501809,
							42.47422449906494,
							0
						],
						[
							-76.46573135510499,
							42.47450149910776,
							0
						],
						[
							-76.46586635516279,
							42.47469749913852,
							0
						],
						[
							-76.46594535519606,
							42.47480449915512,
							0
						],
						[
							-76.46614235528024,
							42.47508849919965,
							0
						],
						[
							-76.46668235551108,
							42.47586749932178,
							0
						],
						[
							-76.46676635554861,
							42.47601049934483,
							0
						],
						[
							-76.46684135558618,
							42.4761934993756,
							0
						],
						[
							-76.46688635561303,
							42.47636149940483,
							0
						],
						[
							-76.46689035561549,
							42.47637749940764,
							0
						],
						[
							-76.46691035563224,
							42.47651749943271,
							0
						],
						[
							-76.46693935567707,
							42.47699849952044,
							0
						],
						[
							-76.46698135574148,
							42.47768849964628,
							0
						],
						[
							-76.46701935580022,
							42.47831849976118,
							0
						],
						[
							-76.46702935581575,
							42.47848549979163,
							0
						],
						[
							-76.46703335582131,
							42.47854349980219,
							0
						],
						[
							-76.46703835582942,
							42.47863149981825,
							0
						],
						[
							-76.46876635638017,
							42.47857849973853,
							0
						],
						[
							-76.47175935733267,
							42.47846749959692,
							0
						],
						[
							-76.47214835745584,
							42.47844449957692,
							0
						],
						[
							-76.47214435745188,
							42.47840849957042,
							0
						],
						[
							-76.47212635743524,
							42.47826149954398,
							0
						],
						[
							-76.4719553572764,
							42.47685349929068,
							0
						],
						[
							-76.47196135727026,
							42.4767444992703,
							0
						],
						[
							-76.47198435726966,
							42.4766364992494,
							0
						],
						[
							-76.47202235727389,
							42.4765284992279,
							0
						],
						[
							-76.4720743572832,
							42.47642849920732,
							0
						],
						[
							-76.47214135729732,
							42.47632849918612,
							0
						],
						[
							-76.47222235731658,
							42.47623749916604,
							0
						],
						[
							-76.47231435734008,
							42.47615549914715,
							0
						],
						[
							-76.47258835741177,
							42.47593549909538,
							0
						],
						[
							-76.47265535742952,
							42.47588449908325,
							0
						],
						[
							-76.4729553575102,
							42.47567349903211,
							0
						],
						[
							-76.47320835758028,
							42.47552249899396,
							0
						],
						[
							-76.47369235771782,
							42.47528149892985,
							0
						],
						[
							-76.47391635778219,
							42.47517949890193,
							0
						],
						[
							-76.47405735782367,
							42.47512849888678,
							0
						],
						[
							-76.4742063578687,
							42.47509049887375,
							0
						],
						[
							-76.47435835791535,
							42.47506149886225,
							0
						],
						[
							-76.47451535796463,
							42.4750464988531,
							0
						],
						[
							-76.47465635800975,
							42.47504449884701,
							0
						],
						[
							-76.4750653581416,
							42.47505249883196,
							0
						],
						[
							-76.47549035827927,
							42.47506949881789,
							0
						],
						[
							-76.47556435830295,
							42.4750684988147,
							0
						],
						[
							-76.47562435832236,
							42.47507049881263,
							0
						],
						[
							-76.47607435846783,
							42.47508449879704,
							0
						],
						[
							-76.47621635851362,
							42.47508749879184,
							0
						],
						[
							-76.47631335854459,
							42.47508549878754,
							0
						],
						[
							-76.4766433586506,
							42.47508649877437,
							0
						],
						[
							-76.47685335871643,
							42.475065498762,
							0
						],
						[
							-76.47705935878035,
							42.4750354987481,
							0
						],
						[
							-76.47725935884068,
							42.47498349873041,
							0
						],
						[
							-76.47734035886464,
							42.47495549872195,
							0
						],
						[
							-76.47744635889592,
							42.47491849871084,
							0
						],
						[
							-76.47761935894532,
							42.47483549868849,
							0
						],
						[
							-76.4778143589997,
							42.4747244986601,
							0
						],
						[
							-76.47790735902504,
							42.47466349864504,
							0
						],
						[
							-76.4780703590693,
							42.47455449861829,
							0
						],
						[
							-76.47829135913034,
							42.47442049858459,
							0
						],
						[
							-76.47878935927046,
							42.47415349851507,
							0
						],
						[
							-76.47889535930972,
							42.47422449852392,
							0
						],
						[
							-76.47893735932415,
							42.4742374985246,
							0
						],
						[
							-76.47914435939303,
							42.47427049852234,
							0
						],
						[
							-76.47920235941262,
							42.47428349852239,
							0
						],
						[
							-76.47939535947937,
							42.47434849852659,
							0
						],
						[
							-76.4794493594986,
							42.47437449852921,
							0
						],
						[
							-76.47967635957865,
							42.47447149853796,
							0
						],
						[
							-76.4802303597738,
							42.47470649855897,
							0
						],
						[
							-76.4804663598573,
							42.47481149856884,
							0
						],
						[
							-76.48173536030463,
							42.47535349861764,
							0
						],
						[
							-76.48172136028086,
							42.47509249856996,
							0
						],
						[
							-76.48167636020658,
							42.47428249842207,
							0
						],
						[
							-76.48165736018638,
							42.47409149838753,
							0
						],
						[
							-76.48162836015763,
							42.4738284983401,
							0
						],
						[
							-76.48154136009057,
							42.47329849824568,
							0
						],
						[
							-76.48133135995921,
							42.47243249809408,
							0
						],
						[
							-76.48124835990836,
							42.47210449803681,
							0
						],
						[
							-76.48111435983854,
							42.47174149797515,
							0
						],
						[
							-76.48102435979577,
							42.47155349794404,
							0
						],
						[
							-76.48092835975241,
							42.47138349791651,
							0
						],
						[
							-76.48079535969082,
							42.47112749787456,
							0
						],
						[
							-76.48029535945881,
							42.47015849771569,
							0
						],
						[
							-76.4803183594608,
							42.47008549770126,
							0
						],
						[
							-76.48026535944149,
							42.47005449769767,
							0
						],
						[
							-76.48011535938589,
							42.46995349768506,
							0
						],
						[
							-76.47997335933182,
							42.46983849766954,
							0
						],
						[
							-76.48002235934578,
							42.46981449766314,
							0
						],
						[
							-76.48007435936113,
							42.4697964976577,
							0
						],
						[
							-76.48018435939467,
							42.46977249764882,
							0
						],
						[
							-76.48029935943076,
							42.46976149764214,
							0
						],
						[
							-76.48110335968939,
							42.46976949761108,
							0
						],
						[
							-76.48138135977803,
							42.46976149759836,
							0
						],
						[
							-76.48159735984152,
							42.46968249757499,
							0
						],
						[
							-76.48185335991474,
							42.46956149754227,
							0
						],
						[
							-76.48192835993646,
							42.46952949753332,
							0
						],
						[
							-76.48216036000123,
							42.4693984974997,
							0
						],
						[
							-76.48232936004712,
							42.46928549747199,
							0
						],
						[
							-76.48250136009146,
							42.46913849743785,
							0
						],
						[
							-76.48262536012187,
							42.46901149740937,
							0
						],
						[
							-76.48297136020501,
							42.46863349732546,
							0
						],
						[
							-76.48306636022738,
							42.46852349730128,
							0
						],
						[
							-76.48325136026828,
							42.46827349724759,
							0
						],
						[
							-76.48331836028308,
							42.46818249722806,
							0
						],
						[
							-76.48350536031901,
							42.46785649716022,
							0
						],
						[
							-76.48368436035196,
							42.46752449709162,
							0
						],
						[
							-76.48388736038935,
							42.46714849701387,
							0
						],
						[
							-76.4839793604055,
							42.46696749697671,
							0
						],
						[
							-76.484122360424,
							42.46659649690233,
							0
						],
						[
							-76.48414236042473,
							42.46651949688729,
							0
						],
						[
							-76.48419736042607,
							42.46629849684422,
							0
						],
						[
							-76.48426236042292,
							42.46597349678149,
							0
						],
						[
							-76.48429636041486,
							42.4657164967326,
							0
						],
						[
							-76.48429636039057,
							42.46538749667178,
							0
						],
						[
							-76.4842503603516,
							42.46505949661302,
							0
						],
						[
							-76.48415936029855,
							42.46473649655697,
							0
						],
						[
							-76.48410836027126,
							42.46458849653168,
							0
						],
						[
							-76.48403736023354,
							42.4643864964972,
							0
						],
						[
							-76.48388536015531,
							42.4639874964296,
							0
						],
						[
							-76.48353535997553,
							42.46307349627477,
							0
						],
						[
							-76.48347235994312,
							42.46290849624682,
							0
						],
						[
							-76.48330535986075,
							42.46251849618147,
							0
						],
						[
							-76.48329135985384,
							42.46248549617594,
							0
						],
						[
							-76.4832093598134,
							42.46229449614393,
							0
						],
						[
							-76.48296835969842,
							42.4617844960594,
							0
						],
						[
							-76.48284335964111,
							42.46155149602138,
							0
						],
						[
							-76.48278235961466,
							42.46145849600665,
							0
						],
						[
							-76.48267335956848,
							42.46130649598295,
							0
						],
						[
							-76.48255135951847,
							42.46115949596072,
							0
						],
						[
							-76.48217935937016,
							42.46076749590328,
							0
						],
						[
							-76.48205835931952,
							42.4606074958786,
							0
						],
						[
							-76.48201935930207,
							42.4605404958678,
							0
						],
						[
							-76.48196035927523,
							42.46043349585041,
							0
						],
						[
							-76.48188835923885,
							42.46025349582003,
							0
						],
						[
							-76.48184135921055,
							42.46007449578884,
							0
						],
						[
							-76.48182035918984,
							42.45988549575474,
							0
						],
						[
							-76.48182435917919,
							42.45972349572462,
							0
						],
						[
							-76.48184335916463,
							42.45944349567209,
							0
						],
						[
							-76.48188835916046,
							42.45919149562366,
							0
						],
						[
							-76.48191535916366,
							42.45911749560889,
							0
						],
						[
							-76.48199935917306,
							42.45887949556148,
							0
						],
						[
							-76.48209135918718,
							42.45867049551912,
							0
						],
						[
							-76.48213035919238,
							42.45857149549922,
							0
						],
						[
							-76.48214235919188,
							42.45851249548782,
							0
						],
						[
							-76.48214935918712,
							42.45841749546998,
							0
						],
						[
							-76.48214235917793,
							42.45832349545288,
							0
						],
						[
							-76.48212235916486,
							42.45823349543706,
							0
						],
						[
							-76.48209635915093,
							42.45815749542405,
							0
						],
						[
							-76.48162635891914,
							42.45706049524021,
							0
						],
						[
							-76.48135635878624,
							42.4564334951352,
							0
						],
						[
							-76.48130535876093,
							42.45631249511489,
							0
						],
						[
							-76.48111735870313,
							42.45634649512876,
							0
						],
						[
							-76.4806783585703,
							42.45645549516671,
							0
						],
						[
							-76.4798643583228,
							42.45664149523403,
							0
						],
						[
							-76.47964935825772,
							42.45669449525254,
							0
						],
						[
							-76.47934635816506,
							42.45675649527626,
							0
						],
						[
							-76.47899935805731,
							42.45680549529934,
							0
						],
						[
							-76.47864635794544,
							42.45682449531714,
							0
						],
						[
							-76.478526357907,
							42.45682549532217,
							0
						],
						[
							-76.47830335783433,
							42.45681049532842,
							0
						],
						[
							-76.47744435755446,
							42.45675349535263,
							0
						],
						[
							-76.4768653573649,
							42.45670249536663,
							0
						],
						[
							-76.47668535730632,
							42.45669149537187,
							0
						],
						[
							-76.476611357282,
							42.45668349537338,
							0
						],
						[
							-76.47632735719012,
							42.45667349538302,
							0
						],
						[
							-76.47613935712963,
							42.45667149539025,
							0
						],
						[
							-76.47565235697579,
							42.45670449541606,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>48</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090005003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>2363534</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>3095</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4678665</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4735021</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090005003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090005003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>2188</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>841</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>584.04</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>79</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>11.91</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.69</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>20096</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>19757</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>21069</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12106</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>11766</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>12654</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7527</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7260</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7850</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4557</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4480</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4778</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>5.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>2.25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>1.44</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>7806</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>11968</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1219</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1720</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2281</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1029</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00048"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.47790735902504,
							42.47466349864504,
							0
						],
						[
							-76.4778143589997,
							42.4747244986601,
							0
						],
						[
							-76.47761935894532,
							42.47483549868849,
							0
						],
						[
							-76.47744635889592,
							42.47491849871084,
							0
						],
						[
							-76.47734035886464,
							42.47495549872195,
							0
						],
						[
							-76.47725935884068,
							42.47498349873041,
							0
						],
						[
							-76.47705935878035,
							42.4750354987481,
							0
						],
						[
							-76.47685335871643,
							42.475065498762,
							0
						],
						[
							-76.4766433586506,
							42.47508649877437,
							0
						],
						[
							-76.47631335854459,
							42.47508549878754,
							0
						],
						[
							-76.47621635851362,
							42.47508749879184,
							0
						],
						[
							-76.47607435846783,
							42.47508449879704,
							0
						],
						[
							-76.47562435832236,
							42.47507049881263,
							0
						],
						[
							-76.47556435830295,
							42.4750684988147,
							0
						],
						[
							-76.47549035827927,
							42.47506949881789,
							0
						],
						[
							-76.4750653581416,
							42.47505249883196,
							0
						],
						[
							-76.47465635800975,
							42.47504449884701,
							0
						],
						[
							-76.47451535796463,
							42.4750464988531,
							0
						],
						[
							-76.47435835791535,
							42.47506149886225,
							0
						],
						[
							-76.4742063578687,
							42.47509049887375,
							0
						],
						[
							-76.47405735782367,
							42.47512849888678,
							0
						],
						[
							-76.47391635778219,
							42.47517949890193,
							0
						],
						[
							-76.47369235771782,
							42.47528149892985,
							0
						],
						[
							-76.47320835758028,
							42.47552249899396,
							0
						],
						[
							-76.4729553575102,
							42.47567349903211,
							0
						],
						[
							-76.47265535742952,
							42.47588449908325,
							0
						],
						[
							-76.47258835741177,
							42.47593549909538,
							0
						],
						[
							-76.47231435734008,
							42.47615549914715,
							0
						],
						[
							-76.47222235731658,
							42.47623749916604,
							0
						],
						[
							-76.47214135729732,
							42.47632849918612,
							0
						],
						[
							-76.4720743572832,
							42.47642849920732,
							0
						],
						[
							-76.47202235727389,
							42.4765284992279,
							0
						],
						[
							-76.47198435726966,
							42.4766364992494,
							0
						],
						[
							-76.47196135727026,
							42.4767444992703,
							0
						],
						[
							-76.4719553572764,
							42.47685349929068,
							0
						],
						[
							-76.47212635743524,
							42.47826149954398,
							0
						],
						[
							-76.47214435745188,
							42.47840849957042,
							0
						],
						[
							-76.47214835745584,
							42.47844449957692,
							0
						],
						[
							-76.47175935733267,
							42.47846749959692,
							0
						],
						[
							-76.46876635638017,
							42.47857849973853,
							0
						],
						[
							-76.46703835582942,
							42.47863149981825,
							0
						],
						[
							-76.46727435616097,
							42.4820955004489,
							0
						],
						[
							-76.46729435617507,
							42.48219950046732,
							0
						],
						[
							-76.4673133561901,
							42.48232050048891,
							0
						],
						[
							-76.4673173561967,
							42.48239250050205,
							0
						],
						[
							-76.47303835800246,
							42.48197750019384,
							0
						],
						[
							-76.47847235971712,
							42.48157749989998,
							0
						],
						[
							-76.47912635992348,
							42.48152949986461,
							0
						],
						[
							-76.4804893603538,
							42.48143249979152,
							0
						],
						[
							-76.48382836140756,
							42.48118949961143,
							0
						],
						[
							-76.48394436144434,
							42.48118349960564,
							0
						],
						[
							-76.4838143613891,
							42.48100049957709,
							0
						],
						[
							-76.48357636128794,
							42.48066549952482,
							0
						],
						[
							-76.48325136114707,
							42.48017049944649,
							0
						],
						[
							-76.48262236087461,
							42.47921549929548,
							0
						],
						[
							-76.48244536079794,
							42.47894649925294,
							0
						],
						[
							-76.48203836061847,
							42.47828549914723,
							0
						],
						[
							-76.48198336059224,
							42.47816949912803,
							0
						],
						[
							-76.48195436057858,
							42.4781104991183,
							0
						],
						[
							-76.4819373605684,
							42.47804649910714,
							0
						],
						[
							-76.48189936054608,
							42.47790949908338,
							0
						],
						[
							-76.48187536052403,
							42.47771549904851,
							0
						],
						[
							-76.4818743605184,
							42.47764349903524,
							0
						],
						[
							-76.48179636040788,
							42.47648649882456,
							0
						],
						[
							-76.48173536030463,
							42.47535349861764,
							0
						],
						[
							-76.4804663598573,
							42.47481149856884,
							0
						],
						[
							-76.4802303597738,
							42.47470649855897,
							0
						],
						[
							-76.47967635957865,
							42.47447149853796,
							0
						],
						[
							-76.4794493594986,
							42.47437449852921,
							0
						],
						[
							-76.47939535947937,
							42.47434849852659,
							0
						],
						[
							-76.47920235941262,
							42.47428349852239,
							0
						],
						[
							-76.47914435939303,
							42.47427049852234,
							0
						],
						[
							-76.47893735932415,
							42.4742374985246,
							0
						],
						[
							-76.47889535930972,
							42.47422449852392,
							0
						],
						[
							-76.47878935927046,
							42.47415349851507,
							0
						],
						[
							-76.47829135913034,
							42.47442049858459,
							0
						],
						[
							-76.4780703590693,
							42.47455449861829,
							0
						],
						[
							-76.47790735902504,
							42.47466349864504,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090005002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>792164</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4788272</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4756669</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090005002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090005002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1124</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>559</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>195.75</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>7.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>21.69</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>18037</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>17699</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>19011</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>10946</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10606</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11494</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6826</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6558</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7148</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4090</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4014</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4311</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>7.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>10.27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>2.86</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>7814</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>12669</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>128</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1147</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1448</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>3038</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1013</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>79</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00049"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48916236239543,
							42.4713894975843,
							0
						],
						[
							-76.48909036237609,
							42.47144049759665,
							0
						],
						[
							-76.48896936234169,
							42.47150049761264,
							0
						],
						[
							-76.48883536230247,
							42.47155149762747,
							0
						],
						[
							-76.48869536226063,
							42.47159349764091,
							0
						],
						[
							-76.48855036221624,
							42.47162249765214,
							0
						],
						[
							-76.48840136216991,
							42.47164249766188,
							0
						],
						[
							-76.48825236212258,
							42.47164949766921,
							0
						],
						[
							-76.48569136129713,
							42.47160149776401,
							0
						],
						[
							-76.4856173612731,
							42.47159749776628,
							0
						],
						[
							-76.4854043612046,
							42.47159549777452,
							0
						],
						[
							-76.48514636111972,
							42.47156749777977,
							0
						],
						[
							-76.48489236103481,
							42.47152149778156,
							0
						],
						[
							-76.48460936093859,
							42.47144849777952,
							0
						],
						[
							-76.4841943607958,
							42.47131849777229,
							0
						],
						[
							-76.48325536047338,
							42.47103349775762,
							0
						],
						[
							-76.48233936015933,
							42.47076149774441,
							0
						],
						[
							-76.48138035983122,
							42.4704864977324,
							0
						],
						[
							-76.48099035969715,
							42.47036549772582,
							0
						],
						[
							-76.4805393595408,
							42.47020849771506,
							0
						],
						[
							-76.4803183594608,
							42.47008549770126,
							0
						],
						[
							-76.48029535945881,
							42.47015849771569,
							0
						],
						[
							-76.48079535969082,
							42.47112749787456,
							0
						],
						[
							-76.48092835975241,
							42.47138349791651,
							0
						],
						[
							-76.48102435979577,
							42.47155349794404,
							0
						],
						[
							-76.48111435983854,
							42.47174149797515,
							0
						],
						[
							-76.48124835990836,
							42.47210449803681,
							0
						],
						[
							-76.48133135995921,
							42.47243249809408,
							0
						],
						[
							-76.48154136009057,
							42.47329849824568,
							0
						],
						[
							-76.48162836015763,
							42.4738284983401,
							0
						],
						[
							-76.48165736018638,
							42.47409149838753,
							0
						],
						[
							-76.48167636020658,
							42.47428249842207,
							0
						],
						[
							-76.48172136028086,
							42.47509249856996,
							0
						],
						[
							-76.48173536030463,
							42.47535349861764,
							0
						],
						[
							-76.48179636040788,
							42.47648649882456,
							0
						],
						[
							-76.4818743605184,
							42.47764349903524,
							0
						],
						[
							-76.48187536052403,
							42.47771549904851,
							0
						],
						[
							-76.48189936054608,
							42.47790949908338,
							0
						],
						[
							-76.4819373605684,
							42.47804649910714,
							0
						],
						[
							-76.48195436057858,
							42.4781104991183,
							0
						],
						[
							-76.48198336059224,
							42.47816949912803,
							0
						],
						[
							-76.48203836061847,
							42.47828549914723,
							0
						],
						[
							-76.48244536079794,
							42.47894649925294,
							0
						],
						[
							-76.48262236087461,
							42.47921549929548,
							0
						],
						[
							-76.48325136114707,
							42.48017049944649,
							0
						],
						[
							-76.48357636128794,
							42.48066549952482,
							0
						],
						[
							-76.4838143613891,
							42.48100049957709,
							0
						],
						[
							-76.48394436144434,
							42.48118349960564,
							0
						],
						[
							-76.49004636337003,
							42.4807394992765,
							0
						],
						[
							-76.49052036351972,
							42.48070649925121,
							0
						],
						[
							-76.4924833641332,
							42.48048249913033,
							0
						],
						[
							-76.49304136430563,
							42.48039249909109,
							0
						],
						[
							-76.49441836473109,
							42.48016949899411,
							0
						],
						[
							-76.49469236481606,
							42.48012949897563,
							0
						],
						[
							-76.49613736525181,
							42.47975049884705,
							0
						],
						[
							-76.49665536540725,
							42.47960449879911,
							0
						],
						[
							-76.49768536570951,
							42.4792214986866,
							0
						],
						[
							-76.49781836574873,
							42.47917449867254,
							0
						],
						[
							-76.49861436597314,
							42.47875449856268,
							0
						],
						[
							-76.49886936604256,
							42.47858649852128,
							0
						],
						[
							-76.49927936615424,
							42.47831749845498,
							0
						],
						[
							-76.49932236616169,
							42.47823149843735,
							0
						],
						[
							-76.49928236613658,
							42.47806549840829,
							0
						],
						[
							-76.49923736610855,
							42.47788149837611,
							0
						],
						[
							-76.49919136607988,
							42.47769349834325,
							0
						],
						[
							-76.499156366058,
							42.47754949831804,
							0
						],
						[
							-76.49906336599963,
							42.47716349825048,
							0
						],
						[
							-76.49893736592038,
							42.47663849815856,
							0
						],
						[
							-76.49879836584029,
							42.47615849807549,
							0
						],
						[
							-76.49843436565325,
							42.47520849791467,
							0
						],
						[
							-76.49815636552036,
							42.47461749781671,
							0
						],
						[
							-76.49777436535356,
							42.47401949772166,
							0
						],
						[
							-76.49703336504392,
							42.47304749757203,
							0
						],
						[
							-76.49699536502813,
							42.4729984975645,
							0
						],
						[
							-76.49690836499066,
							42.47286949754419,
							0
						],
						[
							-76.49686036496965,
							42.47279349753207,
							0
						],
						[
							-76.4966643648783,
							42.47240849746888,
							0
						],
						[
							-76.49619036465015,
							42.47137949729788,
							0
						],
						[
							-76.49605036457804,
							42.47101149723552,
							0
						],
						[
							-76.49602836456535,
							42.47093549722239,
							0
						],
						[
							-76.49594436450883,
							42.47053549715184,
							0
						],
						[
							-76.49585636445511,
							42.47019049709164,
							0
						],
						[
							-76.49584036444665,
							42.47014549708396,
							0
						],
						[
							-76.49568536437143,
							42.46980049702648,
							0
						],
						[
							-76.49556136431448,
							42.46956849698862,
							0
						],
						[
							-76.49494836403184,
							42.46840549679846,
							0
						],
						[
							-76.49469136391701,
							42.46796749672792,
							0
						],
						[
							-76.49434636376405,
							42.46739549663614,
							0
						],
						[
							-76.49387936355879,
							42.46664549651642,
							0
						],
						[
							-76.49356836342369,
							42.46616749644065,
							0
						],
						[
							-76.49339036334648,
							42.46589549639757,
							0
						],
						[
							-76.49309136321057,
							42.46535449630967,
							0
						],
						[
							-76.49299036316116,
							42.46512449627123,
							0
						],
						[
							-76.49267236300535,
							42.46439649614952,
							0
						],
						[
							-76.4925853629612,
							42.46417649611239,
							0
						],
						[
							-76.49253836293157,
							42.46397949607786,
							0
						],
						[
							-76.49251936291084,
							42.46378149604202,
							0
						],
						[
							-76.49252036290348,
							42.46367749602276,
							0
						],
						[
							-76.49253636289133,
							42.46344349597886,
							0
						],
						[
							-76.4925343628777,
							42.4632674959464,
							0
						],
						[
							-76.49251136285939,
							42.46311949591996,
							0
						],
						[
							-76.49247536283919,
							42.46300249589979,
							0
						],
						[
							-76.49227836273927,
							42.46250549581589,
							0
						],
						[
							-76.49220136270003,
							42.46230849578258,
							0
						],
						[
							-76.49183836252071,
							42.46145749563994,
							0
						],
						[
							-76.49178136249148,
							42.46130949561489,
							0
						],
						[
							-76.49175436247425,
							42.46119349559454,
							0
						],
						[
							-76.49174436246241,
							42.46107649557332,
							0
						],
						[
							-76.49175036245563,
							42.46095849555124,
							0
						],
						[
							-76.49176536245483,
							42.46088249553658,
							0
						],
						[
							-76.49194836246556,
							42.460232495409,
							0
						],
						[
							-76.4917943624238,
							42.46033649543447,
							0
						],
						[
							-76.491530362349,
							42.46047049546993,
							0
						],
						[
							-76.49102636220277,
							42.46068049552915,
							0
						],
						[
							-76.49092936217504,
							42.46072649554159,
							0
						],
						[
							-76.49084636215312,
							42.46079049555678,
							0
						],
						[
							-76.4908133621452,
							42.46082649556477,
							0
						],
						[
							-76.49078436213891,
							42.46086749557352,
							0
						],
						[
							-76.49074536213246,
							42.46094949559026,
							0
						],
						[
							-76.49072936213368,
							42.46103549560683,
							0
						],
						[
							-76.4907303621373,
							42.4610804956151,
							0
						],
						[
							-76.49073736214253,
							42.46112049562223,
							0
						],
						[
							-76.49087436221762,
							42.46154249569469,
							0
						],
						[
							-76.4909183622443,
							42.46171249572434,
							0
						],
						[
							-76.4909383622623,
							42.46186949575255,
							0
						],
						[
							-76.49100436236722,
							42.46300349595953,
							0
						],
						[
							-76.49100036238528,
							42.46326549600814,
							0
						],
						[
							-76.4909873623984,
							42.46349949605192,
							0
						],
						[
							-76.4909463624006,
							42.46370749609204,
							0
						],
						[
							-76.49091936239769,
							42.46378549610756,
							0
						],
						[
							-76.4908753623928,
							42.46391049613244,
							0
						],
						[
							-76.49077436237516,
							42.46411049617348,
							0
						],
						[
							-76.4906993623601,
							42.46423249619909,
							0
						],
						[
							-76.49056736232954,
							42.46439249623401,
							0
						],
						[
							-76.490455362303,
							42.464519496262,
							0
						],
						[
							-76.49035036227906,
							42.46465149629066,
							0
						],
						[
							-76.49031736227244,
							42.46470549630198,
							0
						],
						[
							-76.49026036226256,
							42.46481949632538,
							0
						],
						[
							-76.49016036225217,
							42.46511349638377,
							0
						],
						[
							-76.49014436225701,
							42.46524849640938,
							0
						],
						[
							-76.49012836225788,
							42.46532949642499,
							0
						],
						[
							-76.49008236227944,
							42.46582149651782,
							0
						],
						[
							-76.49008336230436,
							42.46615449657933,
							0
						],
						[
							-76.49012936234666,
							42.46652749664643,
							0
						],
						[
							-76.49025936243616,
							42.46717449676077,
							0
						],
						[
							-76.49050636260495,
							42.46838649697481,
							0
						],
						[
							-76.4906543627085,
							42.46914549710911,
							0
						],
						[
							-76.49071936277022,
							42.4696984972087,
							0
						],
						[
							-76.49072436278014,
							42.46981149722939,
							0
						],
						[
							-76.4906993627914,
							42.47007249727865,
							0
						],
						[
							-76.49065636278168,
							42.47012749729056,
							0
						],
						[
							-76.49049936274407,
							42.47030049732889,
							0
						],
						[
							-76.49025036267953,
							42.47050849737741,
							0
						],
						[
							-76.48930836243521,
							42.47129349756065,
							0
						],
						[
							-76.48916236239543,
							42.4713894975843,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>50</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090006001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>1677019</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4743335</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4902095</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090006001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090006001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1677</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>838</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>414.38</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>79</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>7.55</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>15.27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>19020</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>18682</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>19994</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>11419</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>11078</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11966</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7087</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6820</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7409</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4313</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4236</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4534</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>7.3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>3.63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>2.02</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>7167</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>11047</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>96</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1238</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1775</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2673</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1144</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00050"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.46525035490549,
							42.47389049901427,
							0
						],
						[
							-76.46511635485031,
							42.4737254989892,
							0
						],
						[
							-76.46493735477439,
							42.47347549895023,
							0
						],
						[
							-76.4647943547091,
							42.47321249890738,
							0
						],
						[
							-76.46468935465555,
							42.4729434988619,
							0
						],
						[
							-76.46466435463982,
							42.47283949884371,
							0
						],
						[
							-76.46462935461766,
							42.47269149881777,
							0
						],
						[
							-76.46453735454703,
							42.47213449871851,
							0
						],
						[
							-76.46452835453522,
							42.47201349869651,
							0
						],
						[
							-76.46449435448872,
							42.47153149860878,
							0
						],
						[
							-76.46453435441582,
							42.47036949839236,
							0
						],
						[
							-76.4645843544016,
							42.46995949831453,
							0
						],
						[
							-76.46460635439863,
							42.46982349828851,
							0
						],
						[
							-76.464633354398,
							42.46969749826412,
							0
						],
						[
							-76.46469035440471,
							42.46954049823279,
							0
						],
						[
							-76.46469535440521,
							42.4695254982298,
							0
						],
						[
							-76.46476735441829,
							42.46938949820176,
							0
						],
						[
							-76.46539735453881,
							42.46828249797164,
							0
						],
						[
							-76.46596435464419,
							42.46724449775678,
							0
						],
						[
							-76.4660343546573,
							42.46711749773047,
							0
						],
						[
							-76.46550535448831,
							42.46712849775391,
							0
						],
						[
							-76.46322135375974,
							42.46718949785755,
							0
						],
						[
							-76.46161935324837,
							42.46722749792937,
							0
						],
						[
							-76.45996935272164,
							42.46726649800331,
							0
						],
						[
							-76.45866835230665,
							42.46730149806239,
							0
						],
						[
							-76.4585063522548,
							42.4673034980693,
							0
						],
						[
							-76.45843235223141,
							42.46730849807323,
							0
						],
						[
							-76.4579033520628,
							42.46732449809756,
							0
						],
						[
							-76.45518635119596,
							42.46739549822053,
							0
						],
						[
							-76.45081534980034,
							42.46749549841574,
							0
						],
						[
							-76.45010934957543,
							42.46751849844853,
							0
						],
						[
							-76.45014834968484,
							42.46883249868989,
							0
						],
						[
							-76.45020634978975,
							42.47000249890388,
							0
						],
						[
							-76.4502333498502,
							42.47070449903256,
							0
						],
						[
							-76.45029034997536,
							42.47215349929815,
							0
						],
						[
							-76.45031335003371,
							42.47284449942497,
							0
						],
						[
							-76.45037535016701,
							42.4743814997066,
							0
						],
						[
							-76.45044335029655,
							42.47584149997375,
							0
						],
						[
							-76.45050135040599,
							42.47707250019894,
							0
						],
						[
							-76.45052035044618,
							42.47753450028358,
							0
						],
						[
							-76.45058135057208,
							42.47897550054746,
							0
						],
						[
							-76.45066335072868,
							42.48074050087038,
							0
						],
						[
							-76.45070535080954,
							42.48165350103743,
							0
						],
						[
							-76.45190235119175,
							42.48162550098387,
							0
						],
						[
							-76.45195635121003,
							42.48163850098408,
							0
						],
						[
							-76.45200635122762,
							42.48165950098594,
							0
						],
						[
							-76.4520483512431,
							42.48168650098922,
							0
						],
						[
							-76.45208335125662,
							42.48171750099355,
							0
						],
						[
							-76.452107351267,
							42.48175350099922,
							0
						],
						[
							-76.45212035127412,
							42.48179350100607,
							0
						],
						[
							-76.45213535129686,
							42.4820365010504,
							0
						],
						[
							-76.45214535130303,
							42.48207650105739,
							0
						],
						[
							-76.45216535131212,
							42.48211250106323,
							0
						],
						[
							-76.4521943513237,
							42.48214350106779,
							0
						],
						[
							-76.4522333513385,
							42.48217450107194,
							0
						],
						[
							-76.4523293513719,
							42.48220950107453,
							0
						],
						[
							-76.45240335139596,
							42.48221350107228,
							0
						],
						[
							-76.45286335154188,
							42.48218950104923,
							0
						],
						[
							-76.45358835177394,
							42.48218050101825,
							0
						],
						[
							-76.45366235179725,
							42.48217450101414,
							0
						],
						[
							-76.45442935204214,
							42.4821565009798,
							0
						],
						[
							-76.45449035206128,
							42.48215050097623,
							0
						],
						[
							-76.45455635208307,
							42.48215850097504,
							0
						],
						[
							-76.45461835210429,
							42.48217650097585,
							0
						],
						[
							-76.45467435212419,
							42.4822025009784,
							0
						],
						[
							-76.45472135214186,
							42.48223750098295,
							0
						],
						[
							-76.45475835215677,
							42.48227850098905,
							0
						],
						[
							-76.45478235216773,
							42.48232250099619,
							0
						],
						[
							-76.4547933521756,
							42.48238150100666,
							0
						],
						[
							-76.45481135220531,
							42.48270550106581,
							0
						],
						[
							-76.45483535222392,
							42.48285350109221,
							0
						],
						[
							-76.456159352646,
							42.48281350103125,
							0
						],
						[
							-76.46011835391056,
							42.48272750085522,
							0
						],
						[
							-76.46319335488974,
							42.48262050071105,
							0
						],
						[
							-76.46416835520014,
							42.48258550066513,
							0
						],
						[
							-76.46516635551725,
							42.48254150061661,
							0
						],
						[
							-76.46546335561096,
							42.48251950060053,
							0
						],
						[
							-76.46633835588608,
							42.48244150055071,
							0
						],
						[
							-76.46657835596282,
							42.48243750054026,
							0
						],
						[
							-76.4673173561967,
							42.48239250050205,
							0
						],
						[
							-76.4673133561901,
							42.48232050048891,
							0
						],
						[
							-76.46729435617507,
							42.48219950046732,
							0
						],
						[
							-76.46727435616097,
							42.4820955004489,
							0
						],
						[
							-76.46703835582942,
							42.47863149981825,
							0
						],
						[
							-76.46703335582131,
							42.47854349980219,
							0
						],
						[
							-76.46702935581575,
							42.47848549979163,
							0
						],
						[
							-76.46701935580022,
							42.47831849976118,
							0
						],
						[
							-76.46698135574148,
							42.47768849964628,
							0
						],
						[
							-76.46693935567707,
							42.47699849952044,
							0
						],
						[
							-76.46691035563224,
							42.47651749943271,
							0
						],
						[
							-76.46689035561549,
							42.47637749940764,
							0
						],
						[
							-76.46688635561303,
							42.47636149940483,
							0
						],
						[
							-76.46684135558618,
							42.4761934993756,
							0
						],
						[
							-76.46676635554861,
							42.47601049934483,
							0
						],
						[
							-76.46668235551108,
							42.47586749932178,
							0
						],
						[
							-76.46614235528024,
							42.47508849919965,
							0
						],
						[
							-76.46594535519606,
							42.47480449915512,
							0
						],
						[
							-76.46586635516279,
							42.47469749913852,
							0
						],
						[
							-76.46573135510499,
							42.47450149910776,
							0
						],
						[
							-76.46552435501809,
							42.47422449906494,
							0
						],
						[
							-76.46525035490549,
							42.47389049901427,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090005001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>2120842</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>38697</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4751070</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4586450</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090005001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090005001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1476</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>553</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>524.17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>70</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>10.12</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>21005</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>20666</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>21978</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12359</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12018</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>12906</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7595</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7328</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7917</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4763</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4686</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4984</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>5.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>5.3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>2.51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>1.05</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>6393</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>10228</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1622</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1413</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1727</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1182</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00051"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.47500936184593,
							42.5253855081311,
							0
						],
						[
							-76.47495436184235,
							42.52557550816841,
							0
						],
						[
							-76.47482036184977,
							42.52625650829953,
							0
						],
						[
							-76.47428936194427,
							42.52983450898143,
							0
						],
						[
							-76.47419036194589,
							42.53028550906868,
							0
						],
						[
							-76.47402936192671,
							42.53072450915624,
							0
						],
						[
							-76.47344236182852,
							42.53194350940497,
							0
						],
						[
							-76.47303236175829,
							42.53277250957459,
							0
						],
						[
							-76.47290036173368,
							42.53301250962424,
							0
						],
						[
							-76.47249036165017,
							42.53366250976082,
							0
						],
						[
							-76.47239436163238,
							42.53383850979716,
							0
						],
						[
							-76.47205936158421,
							42.53464050995875,
							0
						],
						[
							-76.47203636158187,
							42.53470850997224,
							0
						],
						[
							-76.4718273615786,
							42.53557051013978,
							0
						],
						[
							-76.47153836162823,
							42.53749251050616,
							0
						],
						[
							-76.4714163616536,
							42.53836351067182,
							0
						],
						[
							-76.47127736167046,
							42.5391935108306,
							0
						],
						[
							-76.47971436435904,
							42.53891151043656,
							0
						],
						[
							-76.48216336513948,
							42.53883051032233,
							0
						],
						[
							-76.48336536552253,
							42.5387905102662,
							0
						],
						[
							-76.48367436562087,
							42.53877851025148,
							0
						],
						[
							-76.48467136593828,
							42.53874151020422,
							0
						],
						[
							-76.48903336732663,
							42.53857450999651,
							0
						],
						[
							-76.4926523684791,
							42.53844450982575,
							0
						],
						[
							-76.49441236903921,
							42.53837650974182,
							0
						],
						[
							-76.4947913691592,
							42.53835350972219,
							0
						],
						[
							-76.49581836948667,
							42.53832250967481,
							0
						],
						[
							-76.49611736958337,
							42.53833150966434,
							0
						],
						[
							-76.49646936969565,
							42.53832150964821,
							0
						],
						[
							-76.4994223706357,
							42.53821150950812,
							0
						],
						[
							-76.50603837274328,
							42.53798550919797,
							0
						],
						[
							-76.50683237299614,
							42.53795750916058,
							0
						],
						[
							-76.50723637312579,
							42.53795650914401,
							0
						],
						[
							-76.50731037314976,
							42.53795950914154,
							0
						],
						[
							-76.50771437328282,
							42.53800450913345,
							0
						],
						[
							-76.50783237332152,
							42.5380155091307,
							0
						],
						[
							-76.50833937349189,
							42.53811750912893,
							0
						],
						[
							-76.51093037437606,
							42.53882150915366,
							0
						],
						[
							-76.51205137475863,
							42.5391265091644,
							0
						],
						[
							-76.51220437481065,
							42.53916550916539,
							0
						],
						[
							-76.51357037527798,
							42.53955250918133,
							0
						],
						[
							-76.5168123763872,
							42.54047250921943,
							0
						],
						[
							-76.5175903766563,
							42.54073250923581,
							0
						],
						[
							-76.51856637699848,
							42.54112050926773,
							0
						],
						[
							-76.51888337708257,
							42.54088250921096,
							0
						],
						[
							-76.51896437710452,
							42.54082750919753,
							0
						],
						[
							-76.51943937723682,
							42.54055550912808,
							0
						],
						[
							-76.519950377383,
							42.54031450906287,
							0
						],
						[
							-76.52021037745949,
							42.54022050903497,
							0
						],
						[
							-76.52064237758876,
							42.54009350899401,
							0
						],
						[
							-76.52101937770142,
							42.53998050895786,
							0
						],
						[
							-76.52121137775787,
							42.53991050893715,
							0
						],
						[
							-76.52135737779992,
							42.53984550891921,
							0
						],
						[
							-76.52149337783771,
							42.53976650889914,
							0
						],
						[
							-76.52161837787139,
							42.539679508878,
							0
						],
						[
							-76.52175537790654,
							42.53956050885049,
							0
						],
						[
							-76.52219437802134,
							42.53920850876773,
							0
						],
						[
							-76.52247237809694,
							42.53902450872251,
							0
						],
						[
							-76.5227753781819,
							42.53885850867957,
							0
						],
						[
							-76.52299237824465,
							42.53876550865359,
							0
						],
						[
							-76.52309937827559,
							42.53871950864077,
							0
						],
						[
							-76.52406437855669,
							42.5383325085302,
							0
						],
						[
							-76.5243203786319,
							42.53823850850246,
							0
						],
						[
							-76.52458837871237,
							42.53816350847774,
							0
						],
						[
							-76.5254413789736,
							42.53799350841177,
							0
						],
						[
							-76.52573937906489,
							42.53793450838877,
							0
						],
						[
							-76.5263533792537,
							42.53782250834315,
							0
						],
						[
							-76.52788937972612,
							42.53754350822931,
							0
						],
						[
							-76.52799037975609,
							42.53751050821913,
							0
						],
						[
							-76.52808637978409,
							42.53747250820823,
							0
						],
						[
							-76.52817537980926,
							42.53742650819612,
							0
						],
						[
							-76.52825837983181,
							42.53737150818262,
							0
						],
						[
							-76.52833337985145,
							42.53731150816849,
							0
						],
						[
							-76.52839937986788,
							42.537247508154,
							0
						],
						[
							-76.5284553798808,
							42.53717950813919,
							0
						],
						[
							-76.52907438001137,
							42.53626150794468,
							0
						],
						[
							-76.52909838001572,
							42.53621650793541,
							0
						],
						[
							-76.5291573800236,
							42.53606750790553,
							0
						],
						[
							-76.52919638002496,
							42.53591750787629,
							0
						],
						[
							-76.52921338001907,
							42.53576450784736,
							0
						],
						[
							-76.52920938000844,
							42.53563850782428,
							0
						],
						[
							-76.52921438000573,
							42.53558050781338,
							0
						],
						[
							-76.52912137986738,
							42.53411950754764,
							0
						],
						[
							-76.52911737986128,
							42.53405450753581,
							0
						],
						[
							-76.52897937969513,
							42.53241350723868,
							0
						],
						[
							-76.52896837968379,
							42.53230850721975,
							0
						],
						[
							-76.52895837967398,
							42.53221950720373,
							0
						],
						[
							-76.52890837964264,
							42.53201350716777,
							0
						],
						[
							-76.52883837960717,
							42.53183850713832,
							0
						],
						[
							-76.52813737927568,
							42.53040450690222,
							0
						],
						[
							-76.52802737922366,
							42.53017950686515,
							0
						],
						[
							-76.52765037904555,
							42.52941050673859,
							0
						],
						[
							-76.52754237899457,
							42.52919050670239,
							0
						],
						[
							-76.52704337875132,
							42.52807150651618,
							0
						],
						[
							-76.52692537869049,
							42.52776250646396,
							0
						],
						[
							-76.52679637860544,
							42.52717450636071,
							0
						],
						[
							-76.5267173785564,
							42.52685550630505,
							0
						],
						[
							-76.52655337847155,
							42.52642150623161,
							0
						],
						[
							-76.52600637819955,
							42.52512250601412,
							0
						],
						[
							-76.52595737817454,
							42.52499750599305,
							0
						],
						[
							-76.52592537815455,
							42.52486650597017,
							0
						],
						[
							-76.52590837813878,
							42.52472750594522,
							0
						],
						[
							-76.52606537819096,
							42.52475150594327,
							0
						],
						[
							-76.52625037825243,
							42.52477950594093,
							0
						],
						[
							-76.52635437828864,
							42.52481750594371,
							0
						],
						[
							-76.5264653783308,
							42.52490550595545,
							0
						],
						[
							-76.52649537834368,
							42.52494950596235,
							0
						],
						[
							-76.5265763783766,
							42.52504250597622,
							0
						],
						[
							-76.52659137838387,
							42.52507550598171,
							0
						],
						[
							-76.52661337839301,
							42.52510350598598,
							0
						],
						[
							-76.5266433784079,
							42.52517450599786,
							0
						],
						[
							-76.52667237841884,
							42.52519650600075,
							0
						],
						[
							-76.52668037842386,
							42.52522950600651,
							0
						],
						[
							-76.52670237843256,
							42.52525150600968,
							0
						],
						[
							-76.52671737844027,
							42.52529050601626,
							0
						],
						[
							-76.52673937844851,
							42.52530650601833,
							0
						],
						[
							-76.52674737845389,
							42.52534450602501,
							0
						],
						[
							-76.52676937846222,
							42.52536150602723,
							0
						],
						[
							-76.52678437846987,
							42.52539950603367,
							0
						],
						[
							-76.52680637847818,
							42.5254165060359,
							0
						],
						[
							-76.52681337848325,
							42.52545450604263,
							0
						],
						[
							-76.52683637849228,
							42.52547650604576,
							0
						],
						[
							-76.52683637849435,
							42.52550450605091,
							0
						],
						[
							-76.52687337850823,
							42.52553150605441,
							0
						],
						[
							-76.52688037851337,
							42.52557050606131,
							0
						],
						[
							-76.52693937853758,
							42.52564150607202,
							0
						],
						[
							-76.52697637855354,
							42.52569650608066,
							0
						],
						[
							-76.52703637857769,
							42.52576250609041,
							0
						],
						[
							-76.52708837860085,
							42.52584950610434,
							0
						],
						[
							-76.52711237861085,
							42.5258805061091,
							0
						],
						[
							-76.52721437865353,
							42.52601450612967,
							0
						],
						[
							-76.5272363786643,
							42.52606450613802,
							0
						],
						[
							-76.527273378679,
							42.52610250614354,
							0
						],
						[
							-76.52728837868509,
							42.52611950614605,
							0
						],
						[
							-76.5273703787166,
							42.52618950615564,
							0
						],
						[
							-76.52742037873986,
							42.52628650617152,
							0
						],
						[
							-76.52752437877605,
							42.5263245061743,
							0
						],
						[
							-76.52780337886777,
							42.52635350616833,
							0
						],
						[
							-76.5279403788963,
							42.52614550612438,
							0
						],
						[
							-76.52824337896212,
							42.52572150603383,
							0
						],
						[
							-76.52998137944783,
							42.52474850578372,
							0
						],
						[
							-76.53221438007684,
							42.52356550547474,
							0
						],
						[
							-76.53417038062085,
							42.52243550518681,
							0
						],
						[
							-76.53611238115975,
							42.52129750489794,
							0
						],
						[
							-76.53760238157442,
							42.52044050467926,
							0
						],
						[
							-76.53788738165373,
							42.52027650463744,
							0
						],
						[
							-76.53748738149312,
							42.51984250457358,
							0
						],
						[
							-76.53549338062484,
							42.51676650408687,
							0
						],
						[
							-76.53479138031909,
							42.51568250391532,
							0
						],
						[
							-76.53347637966846,
							42.51260150340002,
							0
						],
						[
							-76.53135037861695,
							42.5076235025674,
							0
						],
						[
							-76.5312963785902,
							42.50749650254613,
							0
						],
						[
							-76.53123337856078,
							42.5073725025258,
							0
						],
						[
							-76.53087237838056,
							42.50650450238021,
							0
						],
						[
							-76.53050237819761,
							42.50563850223534,
							0
						],
						[
							-76.53002037795923,
							42.50450950204647,
							0
						],
						[
							-76.5292753775907,
							42.50276350175434,
							0
						],
						[
							-76.52812937702406,
							42.50008050130543,
							0
						],
						[
							-76.52701337644642,
							42.49711850080375,
							0
						],
						[
							-76.51481637261922,
							42.4982985015164,
							0
						],
						[
							-76.51465337256846,
							42.49831950152689,
							0
						],
						[
							-76.51456037253749,
							42.49830450152788,
							0
						],
						[
							-76.51454137253052,
							42.49829250152644,
							0
						],
						[
							-76.51443237249485,
							42.49828350152922,
							0
						],
						[
							-76.514408372487,
							42.4982815015298,
							0
						],
						[
							-76.51429737245138,
							42.4982815015343,
							0
						],
						[
							-76.51408937238581,
							42.49829750154571,
							0
						],
						[
							-76.51400037235851,
							42.49831450155246,
							0
						],
						[
							-76.513837372309,
							42.49835250156608,
							0
						],
						[
							-76.51339137217273,
							42.49844550160134,
							0
						],
						[
							-76.51336637216515,
							42.49845150160345,
							0
						],
						[
							-76.5131513720997,
							42.49849950162104,
							0
						],
						[
							-76.51313237209449,
							42.49851150162403,
							0
						],
						[
							-76.51301337205668,
							42.49851650162977,
							0
						],
						[
							-76.51299137205048,
							42.49852850163288,
							0
						],
						[
							-76.51287837201458,
							42.4985335016384,
							0
						],
						[
							-76.51285737200868,
							42.49854450164126,
							0
						],
						[
							-76.51276937198116,
							42.49855450164668,
							0
						],
						[
							-76.51274637197423,
							42.49856050164873,
							0
						],
						[
							-76.51255637191518,
							42.49858650166124,
							0
						],
						[
							-76.51253837191035,
							42.49859950166437,
							0
						],
						[
							-76.51250937190106,
							42.49859950166555,
							0
						],
						[
							-76.51223137181455,
							42.49863650168365,
							0
						],
						[
							-76.51221237180935,
							42.49864850168662,
							0
						],
						[
							-76.5121873718014,
							42.49864950168782,
							0
						],
						[
							-76.51200437174504,
							42.49868150170116,
							0
						],
						[
							-76.51197537173572,
							42.49868150170234,
							0
						],
						[
							-76.5117303716599,
							42.4987195017193,
							0
						],
						[
							-76.51168637164608,
							42.49872350172181,
							0
						],
						[
							-76.51166437164,
							42.4987365017251,
							0
						],
						[
							-76.51152637159679,
							42.49875150173347,
							0
						],
						[
							-76.51150737159159,
							42.49876350173645,
							0
						],
						[
							-76.51141137156112,
							42.49876850174128,
							0
						],
						[
							-76.51136337154648,
							42.49877850174507,
							0
						],
						[
							-76.51134437154127,
							42.49879050174805,
							0
						],
						[
							-76.51124837151089,
							42.49879650175306,
							0
						],
						[
							-76.51118837149282,
							42.49881250175845,
							0
						],
						[
							-76.51108437146026,
							42.4988235017647,
							0
						],
						[
							-76.51089937140333,
							42.4988565017783,
							0
						],
						[
							-76.5108773713979,
							42.49887850178325,
							0
						],
						[
							-76.51082537138159,
							42.49888350178629,
							0
						],
						[
							-76.51062437132194,
							42.49894950180661,
							0
						],
						[
							-76.51040237125433,
							42.49899850182467,
							0
						],
						[
							-76.51037937124818,
							42.49901550182872,
							0
						],
						[
							-76.51025337120976,
							42.49904250183884,
							0
						],
						[
							-76.51021637119868,
							42.49905350184235,
							0
						],
						[
							-76.5099463711164,
							42.4991125018642,
							0
						],
						[
							-76.50992737111117,
							42.49912450186719,
							0
						],
						[
							-76.50978637106637,
							42.49913050187401,
							0
						],
						[
							-76.50976437106013,
							42.49914150187695,
							0
						],
						[
							-76.50965737102636,
							42.49914950188277,
							0
						],
						[
							-76.50979437097563,
							42.497870501641,
							0
						],
						[
							-76.50841137053241,
							42.49787950169873,
							0
						],
						[
							-76.50833737050844,
							42.49787650170118,
							0
						],
						[
							-76.50703537009208,
							42.49789750175784,
							0
						],
						[
							-76.503642369009,
							42.49797850191034,
							0
						],
						[
							-76.50191236845771,
							42.49803250199045,
							0
						],
						[
							-76.5018383684344,
							42.49803850199456,
							0
						],
						[
							-76.49988436781172,
							42.49809950208503,
							0
						],
						[
							-76.49041636479839,
							42.49844850253315,
							0
						],
						[
							-76.49051836493433,
							42.49984350278667,
							0
						],
						[
							-76.49055936499907,
							42.50054050291374,
							0
						],
						[
							-76.48913736454593,
							42.50058550297966,
							0
						],
						[
							-76.4859713635367,
							42.50068150312566,
							0
						],
						[
							-76.484030362919,
							42.50075450321778,
							0
						],
						[
							-76.48162736215411,
							42.50084250333137,
							0
						],
						[
							-76.48101636195945,
							42.5008625033598,
							0
						],
						[
							-76.47995736162079,
							42.50088050340604,
							0
						],
						[
							-76.47888236127169,
							42.50082650343961,
							0
						],
						[
							-76.47869436121053,
							42.50081550344518,
							0
						],
						[
							-76.47773736090139,
							42.50078950347913,
							0
						],
						[
							-76.47768136088334,
							42.50078850348123,
							0
						],
						[
							-76.47493936000728,
							42.50084550360278,
							0
						],
						[
							-76.47488335998939,
							42.50084650360523,
							0
						],
						[
							-76.47403435971873,
							42.50087250364442,
							0
						],
						[
							-76.47310535942263,
							42.5009015036874,
							0
						],
						[
							-76.47160535894714,
							42.50098350376328,
							0
						],
						[
							-76.47149335891201,
							42.50099450376983,
							0
						],
						[
							-76.47138335887838,
							42.50101750377856,
							0
						],
						[
							-76.47130735885672,
							42.50105450378845,
							0
						],
						[
							-76.47143935905046,
							42.5031015041612,
							0
						],
						[
							-76.47150835914739,
							42.50411250434512,
							0
						],
						[
							-76.47157335923929,
							42.5050725045198,
							0
						],
						[
							-76.47160935928825,
							42.50557850461179,
							0
						],
						[
							-76.47169235940092,
							42.50674150482321,
							0
						],
						[
							-76.47172135944317,
							42.50718650490423,
							0
						],
						[
							-76.47175935949863,
							42.50777150501072,
							0
						],
						[
							-76.47181135957457,
							42.50857250515652,
							0
						],
						[
							-76.47186235966116,
							42.50952150532971,
							0
						],
						[
							-76.47196535983342,
							42.51140250567289,
							0
						],
						[
							-76.47213936012602,
							42.51460150625653,
							0
						],
						[
							-76.47231436043683,
							42.51804150688457,
							0
						],
						[
							-76.47246236069954,
							42.52094850741526,
							0
						],
						[
							-76.47261736095936,
							42.52378550793268,
							0
						],
						[
							-76.4726773610506,
							42.52475750810967,
							0
						],
						[
							-76.47497936178378,
							42.52467650800143,
							0
						],
						[
							-76.47529436188412,
							42.52466550798665,
							0
						],
						[
							-76.47509336185313,
							42.52511850807841,
							0
						],
						[
							-76.47504236184815,
							42.52527250810891,
							0
						],
						[
							-76.47500936184593,
							42.5253855081311,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>52</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090015003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>18169940</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>3136815</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5190189</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4976685</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090015003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090015003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>2717</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>915</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>4489.81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>88</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>110</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>87</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>76</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>2.51</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.91</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>25670</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>25332</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>26644</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14331</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13987</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14874</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8510</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8243</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8832</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5821</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5744</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6042</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.8</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2592</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>4127</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>69</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2578</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>2587</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>2954</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>703</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>84</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00052"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.46752635663971,
							42.487481501434,
							0
						],
						[
							-76.46763735681971,
							42.48943550179055,
							0
						],
						[
							-76.46766035686308,
							42.48992250187961,
							0
						],
						[
							-76.46766835687784,
							42.49008750190977,
							0
						],
						[
							-76.46770635692248,
							42.49052650198934,
							0
						],
						[
							-76.46773235695359,
							42.49083450204519,
							0
						],
						[
							-76.46778535706008,
							42.49204550226678,
							0
						],
						[
							-76.46783735713336,
							42.49281150240622,
							0
						],
						[
							-76.46785635715995,
							42.49308850245662,
							0
						],
						[
							-76.46784635717248,
							42.49330150249637,
							0
						],
						[
							-76.46784135717877,
							42.49340850251635,
							0
						],
						[
							-76.46786235720046,
							42.49361050255281,
							0
						],
						[
							-76.4678863572185,
							42.4937505025777,
							0
						],
						[
							-76.46792135724067,
							42.49389850260364,
							0
						],
						[
							-76.46797935727318,
							42.49408650263601,
							0
						],
						[
							-76.46805235731021,
							42.49427050266705,
							0
						],
						[
							-76.46811235734006,
							42.49441350269104,
							0
						],
						[
							-76.46818935737637,
							42.49457050271693,
							0
						],
						[
							-76.46824535740198,
							42.4946735027337,
							0
						],
						[
							-76.46835035744854,
							42.4948475027616,
							0
						],
						[
							-76.46846535749766,
							42.49501250278742,
							0
						],
						[
							-76.46858835754867,
							42.49516850281126,
							0
						],
						[
							-76.4686793575858,
							42.49527550282732,
							0
						],
						[
							-76.46891335767836,
							42.49551150286146,
							0
						],
						[
							-76.46897535770299,
							42.49557550287078,
							0
						],
						[
							-76.46999935810912,
							42.49662250302274,
							0
						],
						[
							-76.47058635834364,
							42.49724550311407,
							0
						],
						[
							-76.47064835837018,
							42.49733550312817,
							0
						],
						[
							-76.47082535844778,
							42.49761650317292,
							0
						],
						[
							-76.47098035852201,
							42.49794750322779,
							0
						],
						[
							-76.4710883585816,
							42.49828450328566,
							0
						],
						[
							-76.47114735862641,
							42.49863450334794,
							0
						],
						[
							-76.47130735885672,
							42.50105450378845,
							0
						],
						[
							-76.47138335887838,
							42.50101750377856,
							0
						],
						[
							-76.47149335891201,
							42.50099450376983,
							0
						],
						[
							-76.47160535894714,
							42.50098350376328,
							0
						],
						[
							-76.47310535942263,
							42.5009015036874,
							0
						],
						[
							-76.47403435971873,
							42.50087250364442,
							0
						],
						[
							-76.47488335998939,
							42.50084650360523,
							0
						],
						[
							-76.47493936000728,
							42.50084550360278,
							0
						],
						[
							-76.47768136088334,
							42.50078850348123,
							0
						],
						[
							-76.47773736090139,
							42.50078950347913,
							0
						],
						[
							-76.47869436121053,
							42.50081550344518,
							0
						],
						[
							-76.47888236127169,
							42.50082650343961,
							0
						],
						[
							-76.47995736162079,
							42.50088050340604,
							0
						],
						[
							-76.48101636195945,
							42.5008625033598,
							0
						],
						[
							-76.48162736215411,
							42.50084250333137,
							0
						],
						[
							-76.484030362919,
							42.50075450321778,
							0
						],
						[
							-76.4859713635367,
							42.50068150312566,
							0
						],
						[
							-76.48913736454593,
							42.50058550297966,
							0
						],
						[
							-76.49055936499907,
							42.50054050291374,
							0
						],
						[
							-76.49051836493433,
							42.49984350278667,
							0
						],
						[
							-76.49041636479839,
							42.49844850253315,
							0
						],
						[
							-76.49040736478683,
							42.49833150251191,
							0
						],
						[
							-76.4903923647664,
							42.49812050247354,
							0
						],
						[
							-76.49020736447436,
							42.49497550190012,
							0
						],
						[
							-76.49019536444948,
							42.49469150184815,
							0
						],
						[
							-76.49008636423144,
							42.49221650139537,
							0
						],
						[
							-76.49005136418995,
							42.49180750132123,
							0
						],
						[
							-76.48997036413569,
							42.49142550125395,
							0
						],
						[
							-76.48994236411643,
							42.49128650122942,
							0
						],
						[
							-76.48992336410492,
							42.49121350121669,
							0
						],
						[
							-76.48973336398929,
							42.49047450108787,
							0
						],
						[
							-76.4895993639071,
							42.48994450099538,
							0
						],
						[
							-76.48952936386674,
							42.48970250095351,
							0
						],
						[
							-76.48935636377902,
							42.48926750088015,
							0
						],
						[
							-76.4892893637476,
							42.48913350085811,
							0
						],
						[
							-76.48889936357459,
							42.48848650075438,
							0
						],
						[
							-76.48888036356614,
							42.48845450074921,
							0
						],
						[
							-76.48862336345621,
							42.48808350069108,
							0
						],
						[
							-76.4885553634275,
							42.48799050067667,
							0
						],
						[
							-76.48817236326228,
							42.48741850058651,
							0
						],
						[
							-76.48751236297784,
							42.4864365004318,
							0
						],
						[
							-76.48749536296906,
							42.48639150042415,
							0
						],
						[
							-76.48731536289286,
							42.48614250038546,
							0
						],
						[
							-76.48679536266806,
							42.48535950026185,
							0
						],
						[
							-76.48585936226348,
							42.4839505000394,
							0
						],
						[
							-76.48571436220038,
							42.48372650000388,
							0
						],
						[
							-76.48540136206498,
							42.48325349992914,
							0
						],
						[
							-76.48517536196871,
							42.48293249987899,
							0
						],
						[
							-76.4847213617748,
							42.48228049977688,
							0
						],
						[
							-76.48450536168308,
							42.48197749972964,
							0
						],
						[
							-76.4843683616236,
							42.48176749969639,
							0
						],
						[
							-76.48417136154026,
							42.48149549965411,
							0
						],
						[
							-76.48394436144434,
							42.48118349960564,
							0
						],
						[
							-76.48382836140756,
							42.48118949961143,
							0
						],
						[
							-76.4804893603538,
							42.48143249979152,
							0
						],
						[
							-76.47912635992348,
							42.48152949986461,
							0
						],
						[
							-76.47847235971712,
							42.48157749989998,
							0
						],
						[
							-76.47303835800246,
							42.48197750019384,
							0
						],
						[
							-76.4673173561967,
							42.48239250050205,
							0
						],
						[
							-76.46732635621319,
							42.48257650053569,
							0
						],
						[
							-76.46733335627763,
							42.48341850069101,
							0
						],
						[
							-76.46733835633049,
							42.48411250081905,
							0
						],
						[
							-76.4673793564048,
							42.48494050097042,
							0
						],
						[
							-76.467428356482,
							42.48577250112216,
							0
						],
						[
							-76.46745535652494,
							42.48623650120681,
							0
						],
						[
							-76.46751035661374,
							42.48719950138255,
							0
						],
						[
							-76.4675143566196,
							42.48726150139382,
							0
						],
						[
							-76.46752635663971,
							42.487481501434,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090015002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>3535336</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>4655</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4924925</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4772436</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090015002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090015002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1801</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>771</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>873.6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>7.66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.65</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>20154</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>19816</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>21127</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>11902</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>11558</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>12445</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7331</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7064</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7654</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4570</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4494</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4791</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>6.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.88</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>5895</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>10066</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1428</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1807</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>3211</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1192</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>70</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00053"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.63697442124449,
							42.62458251981651,
							0
						],
						[
							-76.6450844238298,
							42.62433151943881,
							0
						],
						[
							-76.64524642388142,
							42.62432651943125,
							0
						],
						[
							-76.64530642390054,
							42.62432451942843,
							0
						],
						[
							-76.64531442390312,
							42.6243245194281,
							0
						],
						[
							-76.64534842391397,
							42.62432351942652,
							0
						],
						[
							-76.64535542391614,
							42.62432251942607,
							0
						],
						[
							-76.6453684239203,
							42.62432251942553,
							0
						],
						[
							-76.64539342392827,
							42.62432151942432,
							0
						],
						[
							-76.6454374239423,
							42.62432051942234,
							0
						],
						[
							-76.64546042394961,
							42.62431951942121,
							0
						],
						[
							-76.64549842396174,
							42.62431851941949,
							0
						],
						[
							-76.64550942396527,
							42.62431851941904,
							0
						],
						[
							-76.64571142402968,
							42.62431251940966,
							0
						],
						[
							-76.6460414241349,
							42.62430251939434,
							0
						],
						[
							-76.64624542420025,
							42.62430051938563,
							0
						],
						[
							-76.66654543065538,
							42.6234655184017,
							0
						],
						[
							-76.66355842922326,
							42.61715751736384,
							0
						],
						[
							-76.66314142902976,
							42.61636251723466,
							0
						],
						[
							-76.66024442768536,
							42.61083551633649,
							0
						],
						[
							-76.65863642698824,
							42.60842151595814,
							0
						],
						[
							-76.65622842594433,
							42.6048065153915,
							0
						],
						[
							-76.6542304251177,
							42.60233351501815,
							0
						],
						[
							-76.65171842407848,
							42.59922451454872,
							0
						],
						[
							-76.65023342346423,
							42.59738751427132,
							0
						],
						[
							-76.64965142322718,
							42.5967165141716,
							0
						],
						[
							-76.64766842241929,
							42.59442751383135,
							0
						],
						[
							-76.64531942146236,
							42.59171651342834,
							0
						],
						[
							-76.6444264211074,
							42.59080351329676,
							0
						],
						[
							-76.63921841903748,
							42.58548051252955,
							0
						],
						[
							-76.63807741859135,
							42.58441251237949,
							0
						],
						[
							-76.63249841641017,
							42.57919051164573,
							0
						],
						[
							-76.62935941518522,
							42.57628151123814,
							0
						],
						[
							-76.62676341417227,
							42.57387651090114,
							0
						],
						[
							-76.62466941337951,
							42.57226151068914,
							0
						],
						[
							-76.62444141329154,
							42.57206351066196,
							0
						],
						[
							-76.62287741268774,
							42.57070051047471,
							0
						],
						[
							-76.61824141089807,
							42.5666605099196,
							0
						],
						[
							-76.61669841033084,
							42.56569650980494,
							0
						],
						[
							-76.61628841018015,
							42.5654405097745,
							0
						],
						[
							-76.61217640866874,
							42.56287350946921,
							0
						],
						[
							-76.61202940861544,
							42.5627915094601,
							0
						],
						[
							-76.60669640668173,
							42.55981650912932,
							0
						],
						[
							-76.60598940642535,
							42.55942150908535,
							0
						],
						[
							-76.6033484054863,
							42.55819650896725,
							0
						],
						[
							-76.60088940461196,
							42.55705550885718,
							0
						],
						[
							-76.59783640352381,
							42.55560450871415,
							0
						],
						[
							-76.59378040207825,
							42.55367650852404,
							0
						],
						[
							-76.58887540032762,
							42.55131150828787,
							0
						],
						[
							-76.58654039949411,
							42.55018350817504,
							0
						],
						[
							-76.58599139929815,
							42.54991850814854,
							0
						],
						[
							-76.57769139631267,
							42.54560350769092,
							0
						],
						[
							-76.57280939455666,
							42.54306450742144,
							0
						],
						[
							-76.56792639280043,
							42.54052650715208,
							0
						],
						[
							-76.5658963920703,
							42.53947050703994,
							0
						],
						[
							-76.5638653913399,
							42.53841550692798,
							0
						],
						[
							-76.55945438975344,
							42.53612150668426,
							0
						],
						[
							-76.55695538885479,
							42.53482350654647,
							0
						],
						[
							-76.55667638875445,
							42.53467850653105,
							0
						],
						[
							-76.55635538863663,
							42.53447950650741,
							0
						],
						[
							-76.55562138836719,
							42.53402450645332,
							0
						],
						[
							-76.55559538836026,
							42.53404350645788,
							0
						],
						[
							-76.55021938691782,
							42.53785450737935,
							0
						],
						[
							-76.54997538684826,
							42.53797250741103,
							0
						],
						[
							-76.54855038644187,
							42.53865950759568,
							0
						],
						[
							-76.54571538556033,
							42.53904350778173,
							0
						],
						[
							-76.54493138531377,
							42.53911250782632,
							0
						],
						[
							-76.544748385254,
							42.53909850783118,
							0
						],
						[
							-76.54432238511485,
							42.53906650784258,
							0
						],
						[
							-76.54386438497866,
							42.53921250788814,
							0
						],
						[
							-76.54365538494032,
							42.53959950796802,
							0
						],
						[
							-76.5433973848928,
							42.54007450806611,
							0
						],
						[
							-76.54307238487083,
							42.54118250828365,
							0
						],
						[
							-76.54265838479157,
							42.54190450843365,
							0
						],
						[
							-76.54200838460446,
							42.54219450851355,
							0
						],
						[
							-76.54134638442166,
							42.54259450861422,
							0
						],
						[
							-76.54128338440381,
							42.54262650862268,
							0
						],
						[
							-76.54052738418964,
							42.54301050872422,
							0
						],
						[
							-76.54033038417397,
							42.54365050885025,
							0
						],
						[
							-76.54025138417872,
							42.54405550892817,
							0
						],
						[
							-76.5403653842214,
							42.54413750893867,
							0
						],
						[
							-76.54103338447176,
							42.54462050900058,
							0
						],
						[
							-76.54141838461476,
							42.54488150903305,
							0
						],
						[
							-76.54173938473521,
							42.54511550906318,
							0
						],
						[
							-76.54202638484645,
							42.5453725090989,
							0
						],
						[
							-76.54227538494727,
							42.54565350914061,
							0
						],
						[
							-76.5424823850356,
							42.5459475091864,
							0
						],
						[
							-76.5425683850742,
							42.54609550921018,
							0
						],
						[
							-76.5427113851437,
							42.54641250926284,
							0
						],
						[
							-76.54280538519654,
							42.54671750931527,
							0
						],
						[
							-76.54307638535491,
							42.54767750948128,
							0
						],
						[
							-76.54316238540254,
							42.54794650952737,
							0
						],
						[
							-76.54328238545936,
							42.54819250956788,
							0
						],
						[
							-76.54343738552703,
							42.548433509606,
							0
						],
						[
							-76.54423138586456,
							42.54954450977859,
							0
						],
						[
							-76.54439338593849,
							42.54983950982641,
							0
						],
						[
							-76.54444938596616,
							42.54996950984809,
							0
						],
						[
							-76.54454938602125,
							42.55027850990099,
							0
						],
						[
							-76.54460538606256,
							42.55059250995662,
							0
						],
						[
							-76.54461638607785,
							42.5507505099853,
							0
						],
						[
							-76.54467738619678,
							42.55208651022917,
							0
						],
						[
							-76.54469038622142,
							42.55236151027934,
							0
						],
						[
							-76.5447123862577,
							42.55275451035089,
							0
						],
						[
							-76.54475238632232,
							42.55345051047759,
							0
						],
						[
							-76.54477038634111,
							42.55362551050912,
							0
						],
						[
							-76.54483638638469,
							42.55392651056193,
							0
						],
						[
							-76.54494538644164,
							42.5542215106119,
							0
						],
						[
							-76.54509438651046,
							42.55450351065782,
							0
						],
						[
							-76.54519938655643,
							42.55466851068397,
							0
						],
						[
							-76.5453103866027,
							42.55481151070583,
							0
						],
						[
							-76.54556338670409,
							42.55508251074551,
							0
						],
						[
							-76.54585238681571,
							42.55533551078038,
							0
						],
						[
							-76.54613938692296,
							42.55553851080614,
							0
						],
						[
							-76.54785338755295,
							42.55660951093389,
							0
						],
						[
							-76.54808938764056,
							42.5567685109536,
							0
						],
						[
							-76.54806138763327,
							42.55679151095899,
							0
						],
						[
							-76.54802238762379,
							42.55683251096812,
							0
						],
						[
							-76.5480013876204,
							42.55687751097727,
							0
						],
						[
							-76.54793538767571,
							42.55790551116947,
							0
						],
						[
							-76.54781738774712,
							42.55937451144506,
							0
						],
						[
							-76.54769538789905,
							42.56194251192339,
							0
						],
						[
							-76.54770638796593,
							42.5627935120798,
							0
						],
						[
							-76.54777838804027,
							42.56348151220367,
							0
						],
						[
							-76.5477793880446,
							42.56353551221358,
							0
						],
						[
							-76.5478673881365,
							42.56439051236761,
							0
						],
						[
							-76.54802338827054,
							42.56551851256916,
							0
						],
						[
							-76.54820338839616,
							42.56642951272974,
							0
						],
						[
							-76.54864738873879,
							42.56911651320688,
							0
						],
						[
							-76.54932638928403,
							42.57351051398894,
							0
						],
						[
							-76.54936238931035,
							42.57370851402396,
							0
						],
						[
							-76.5493763893225,
							42.57381151404238,
							0
						],
						[
							-76.54940538934828,
							42.57403251408192,
							0
						],
						[
							-76.54950338942116,
							42.57458851418038,
							0
						],
						[
							-76.54997738977487,
							42.57729351465949,
							0
						],
						[
							-76.55021938995867,
							42.57871751491201,
							0
						],
						[
							-76.55035839005382,
							42.57939551503126,
							0
						],
						[
							-76.55065539024584,
							42.58069251525811,
							0
						],
						[
							-76.55068239026353,
							42.58081351527932,
							0
						],
						[
							-76.55101239046614,
							42.58211051550483,
							0
						],
						[
							-76.55138739070902,
							42.58375351579223,
							0
						],
						[
							-76.5514333907384,
							42.58394951582645,
							0
						],
						[
							-76.5518423910007,
							42.58570651613348,
							0
						],
						[
							-76.55192439104775,
							42.58598451618133,
							0
						],
						[
							-76.55215139116136,
							42.58653051627267,
							0
						],
						[
							-76.55313939162029,
							42.58843051658241,
							0
						],
						[
							-76.55340939175404,
							42.58906151668764,
							0
						],
						[
							-76.55354239182653,
							42.5894605167557,
							0
						],
						[
							-76.55363039188057,
							42.58980651681585,
							0
						],
						[
							-76.55369239193635,
							42.59028751690191,
							0
						],
						[
							-76.5539653923629,
							42.59483151772765,
							0
						],
						[
							-76.55408839254434,
							42.59673451807307,
							0
						],
						[
							-76.55412939261471,
							42.59750151821265,
							0
						],
						[
							-76.55414639264315,
							42.59780951826866,
							0
						],
						[
							-76.5542623928426,
							42.59998351866426,
							0
						],
						[
							-76.55433439296498,
							42.6013135189062,
							0
						],
						[
							-76.55455039333559,
							42.60535051964065,
							0
						],
						[
							-76.55466139351134,
							42.60722751998168,
							0
						],
						[
							-76.55478139370126,
							42.60925552035013,
							0
						],
						[
							-76.5549453939414,
							42.61176652080566,
							0
						],
						[
							-76.55504539411501,
							42.61366152115038,
							0
						],
						[
							-76.55505439413092,
							42.61383552118205,
							0
						],
						[
							-76.55516839430022,
							42.61561252150445,
							0
						],
						[
							-76.5553033945214,
							42.61799352193717,
							0
						],
						[
							-76.5556493950402,
							42.62345052292727,
							0
						],
						[
							-76.55567939506591,
							42.62366552296562,
							0
						],
						[
							-76.55574639510557,
							42.62390852300761,
							0
						],
						[
							-76.55580939513749,
							42.62406452303372,
							0
						],
						[
							-76.55584939515639,
							42.624145523047,
							0
						],
						[
							-76.55585639515961,
							42.62415852304912,
							0
						],
						[
							-76.56501239807439,
							42.6238045226108,
							0
						],
						[
							-76.56686939866582,
							42.62373652252262,
							0
						],
						[
							-76.56687639866807,
							42.62373652252231,
							0
						],
						[
							-76.56942439947952,
							42.62364252240113,
							0
						],
						[
							-76.57149540013907,
							42.62356652230273,
							0
						],
						[
							-76.57214340034514,
							42.62353852227115,
							0
						],
						[
							-76.5721694003534,
							42.62353752226991,
							0
						],
						[
							-76.57222640037149,
							42.62353452226703,
							0
						],
						[
							-76.57284240056742,
							42.62350852223713,
							0
						],
						[
							-76.57284940056967,
							42.62350852223683,
							0
						],
						[
							-76.57474440117232,
							42.62342752214467,
							0
						],
						[
							-76.57489540121999,
							42.6234165221365,
							0
						],
						[
							-76.5749264012298,
							42.62341452213485,
							0
						],
						[
							-76.57506040127217,
							42.62340552212773,
							0
						],
						[
							-76.57520440131803,
							42.62340052212095,
							0
						],
						[
							-76.58318040385849,
							42.62311352174284,
							0
						],
						[
							-76.58463640432257,
							42.6230655216746,
							0
						],
						[
							-76.58481240437864,
							42.62305952166634,
							0
						],
						[
							-76.5890354057247,
							42.62292152146866,
							0
						],
						[
							-76.59073140626525,
							42.62286552138917,
							0
						],
						[
							-76.59439540743305,
							42.62274552121759,
							0
						],
						[
							-76.59649240810215,
							42.62268652112115,
							0
						],
						[
							-76.59905040891823,
							42.62261352100332,
							0
						],
						[
							-76.60501441081814,
							42.62240652072179,
							0
						],
						[
							-76.60666341134346,
							42.62234952064399,
							0
						],
						[
							-76.61401841368834,
							42.62212052030154,
							0
						],
						[
							-76.61429341377598,
							42.62211152028866,
							0
						],
						[
							-76.61448141407082,
							42.62524252085692,
							0
						],
						[
							-76.61455941409572,
							42.62524052085337,
							0
						],
						[
							-76.61456641409796,
							42.62524052085308,
							0
						],
						[
							-76.61606041457559,
							42.62521152078671,
							0
						],
						[
							-76.61971141574148,
							42.62512352062142,
							0
						],
						[
							-76.62278441672137,
							42.62503052047877,
							0
						],
						[
							-76.62301241679405,
							42.62502352046816,
							0
						],
						[
							-76.62330341688684,
							42.62501452045462,
							0
						],
						[
							-76.62337541690972,
							42.62501152045114,
							0
						],
						[
							-76.62408041713418,
							42.62498552041755,
							0
						],
						[
							-76.62467141732239,
							42.62496452038953,
							0
						],
						[
							-76.62468541732682,
							42.62496352038878,
							0
						],
						[
							-76.62523341750129,
							42.62494352036271,
							0
						],
						[
							-76.62525241750733,
							42.62494252036175,
							0
						],
						[
							-76.62592241772066,
							42.62491852032996,
							0
						],
						[
							-76.62847141853292,
							42.62483452021036,
							0
						],
						[
							-76.62848541853735,
							42.62483352020962,
							0
						],
						[
							-76.62849441854024,
							42.62483352020924,
							0
						],
						[
							-76.62926241878499,
							42.62480852017325,
							0
						],
						[
							-76.63257341984125,
							42.62471552002084,
							0
						],
						[
							-76.63357242016001,
							42.62468851997505,
							0
						],
						[
							-76.63360042016893,
							42.62468751997372,
							0
						],
						[
							-76.63361042017215,
							42.62468751997332,
							0
						],
						[
							-76.63697442124449,
							42.62458251981651,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090023003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>44188477</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>16644572</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5845231</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5975568</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090023003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090023003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1269</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>584</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>10919.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27339</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28313</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14685</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14344</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15232</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8482</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8215</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8804</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6200</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6123</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6420</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.05</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1907</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2335</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>138</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3317</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1227</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1342</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>897</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>74</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00054"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48367436562087,
							42.53877851025148,
							0
						],
						[
							-76.48336536552253,
							42.5387905102662,
							0
						],
						[
							-76.48216336513948,
							42.53883051032233,
							0
						],
						[
							-76.47971436435904,
							42.53891151043656,
							0
						],
						[
							-76.47127736167046,
							42.5391935108306,
							0
						],
						[
							-76.46755136048141,
							42.53929551100043,
							0
						],
						[
							-76.46751636047254,
							42.53932751100775,
							0
						],
						[
							-76.46756836056927,
							42.54040751120493,
							0
						],
						[
							-76.46763536067216,
							42.54150551140481,
							0
						],
						[
							-76.46765836071164,
							42.54193851148376,
							0
						],
						[
							-76.46780336096494,
							42.54472751199246,
							0
						],
						[
							-76.46785436100458,
							42.54504151204831,
							0
						],
						[
							-76.46792036104307,
							42.54527451208862,
							0
						],
						[
							-76.46829536122793,
							42.54614351223377,
							0
						],
						[
							-76.46840936128514,
							42.54642151228042,
							0
						],
						[
							-76.46849236133508,
							42.54673551233496,
							0
						],
						[
							-76.46851736135511,
							42.54689751236387,
							0
						],
						[
							-76.46863436155714,
							42.5491155127683,
							0
						],
						[
							-76.46863436156693,
							42.54924751279263,
							0
						],
						[
							-76.46863536160723,
							42.54978651289202,
							0
						],
						[
							-76.46857436163944,
							42.55048551302344,
							0
						],
						[
							-76.46854936166176,
							42.55089451309988,
							0
						],
						[
							-76.46839336180417,
							42.55349051358506,
							0
						],
						[
							-76.46837436187556,
							42.55453551377856,
							0
						],
						[
							-76.46860336221607,
							42.55813451443307,
							0
						],
						[
							-76.46862836225387,
							42.55853551450602,
							0
						],
						[
							-76.46877536247297,
							42.56085251492735,
							0
						],
						[
							-76.46882736256076,
							42.5618105151019,
							0
						],
						[
							-76.46888036263655,
							42.5626025152458,
							0
						],
						[
							-76.4691523630784,
							42.56737851611543,
							0
						],
						[
							-76.46921136317468,
							42.56842051630516,
							0
						],
						[
							-76.47167936396178,
							42.56834351619087,
							0
						],
						[
							-76.47568236523784,
							42.56821151600415,
							0
						],
						[
							-76.47574936525893,
							42.56820551600033,
							0
						],
						[
							-76.47801736598197,
							42.56813151589467,
							0
						],
						[
							-76.47975736653702,
							42.56807951581449,
							0
						],
						[
							-76.48039236673958,
							42.56806051578523,
							0
						],
						[
							-76.48164836713879,
							42.56800351572374,
							0
						],
						[
							-76.48285936751991,
							42.56789751565508,
							0
						],
						[
							-76.48309436759317,
							42.56786751564,
							0
						],
						[
							-76.48400336787927,
							42.56778851558855,
							0
						],
						[
							-76.48484936814982,
							42.56777251555127,
							0
						],
						[
							-76.48517736825593,
							42.5677825155398,
							0
						],
						[
							-76.48625736860514,
							42.5678135155017,
							0
						],
						[
							-76.48695836882926,
							42.56779951547065,
							0
						],
						[
							-76.48777836909056,
							42.56777151543221,
							0
						],
						[
							-76.48861336935659,
							42.56774251539299,
							0
						],
						[
							-76.49183137038204,
							42.56763251524208,
							0
						],
						[
							-76.49297037074581,
							42.56760451519069,
							0
						],
						[
							-76.49257637067043,
							42.56829351533369,
							0
						],
						[
							-76.4924293706464,
							42.56860551539717,
							0
						],
						[
							-76.49241137064338,
							42.56864251540473,
							0
						],
						[
							-76.49229937063393,
							42.5689995154751,
							0
						],
						[
							-76.4922693706344,
							42.56913551550137,
							0
						],
						[
							-76.49221237065294,
							42.56963151559515,
							0
						],
						[
							-76.49215037067361,
							42.57017751569831,
							0
						],
						[
							-76.49214737069619,
							42.57049451575687,
							0
						],
						[
							-76.4921463707067,
							42.57064051578381,
							0
						],
						[
							-76.49216937073803,
							42.57096251584225,
							0
						],
						[
							-76.4921833707571,
							42.57115851587781,
							0
						],
						[
							-76.49257737129584,
							42.57670451688404,
							0
						],
						[
							-76.49270837149447,
							42.57881051726688,
							0
						],
						[
							-76.49283137171562,
							42.58125351771211,
							0
						],
						[
							-76.49294237181246,
							42.58207651785927,
							0
						],
						[
							-76.4930183718649,
							42.58245351792566,
							0
						],
						[
							-76.49339037212034,
							42.5842815182474,
							0
						],
						[
							-76.49353537220092,
							42.58473851832573,
							0
						],
						[
							-76.49365437225981,
							42.58501651837212,
							0
						],
						[
							-76.49410237247567,
							42.5859835185321,
							0
						],
						[
							-76.49432537257346,
							42.58633551858792,
							0
						],
						[
							-76.49458037267895,
							42.58665251863597,
							0
						],
						[
							-76.49542937301753,
							42.58753751876455,
							0
						],
						[
							-76.49557837307798,
							42.58770651878962,
							0
						],
						[
							-76.49561137309125,
							42.58774251879493,
							0
						],
						[
							-76.49574137314693,
							42.5879295188241,
							0
						],
						[
							-76.49581837318199,
							42.58806851884657,
							0
						],
						[
							-76.49590137322362,
							42.58826951888024,
							0
						],
						[
							-76.49595537325635,
							42.58847651891618,
							0
						],
						[
							-76.49596637326675,
							42.58856851893268,
							0
						],
						[
							-76.49597437327377,
							42.58862851894342,
							0
						],
						[
							-76.4959793732794,
							42.58868251895316,
							0
						],
						[
							-76.49629737375083,
							42.59364551985458,
							0
						],
						[
							-76.4964443740392,
							42.59688552044546,
							0
						],
						[
							-76.49647937410805,
							42.59765952058663,
							0
						],
						[
							-76.49657937426397,
							42.59932252088888,
							0
						],
						[
							-76.49662637433593,
							42.60008652102768,
							0
						],
						[
							-76.49669737444698,
							42.60127152124304,
							0
						],
						[
							-76.49678137457649,
							42.60264852149325,
							0
						],
						[
							-76.49679237459179,
							42.6028065215219,
							0
						],
						[
							-76.49697737485525,
							42.605546522019,
							0
						],
						[
							-76.49721737525903,
							42.60993252281693,
							0
						],
						[
							-76.49727337538467,
							42.61137752308072,
							0
						],
						[
							-76.49729237543637,
							42.61198952319263,
							0
						],
						[
							-76.49732237552581,
							42.61306052338861,
							0
						],
						[
							-76.49729637554167,
							42.61338552344952,
							0
						],
						[
							-76.49727937554648,
							42.61352352347562,
							0
						],
						[
							-76.4972473755548,
							42.61377352352296,
							0
						],
						[
							-76.49718837553998,
							42.61382852353547,
							0
						],
						[
							-76.49681037549465,
							42.61485052373899,
							0
						],
						[
							-76.49664337546602,
							42.61518652380765,
							0
						],
						[
							-76.49588437531544,
							42.61643852406902,
							0
						],
						[
							-76.49549737523176,
							42.61698452418526,
							0
						],
						[
							-76.49281037461552,
							42.62030152490512,
							0
						],
						[
							-76.49240337453243,
							42.62094152503949,
							0
						],
						[
							-76.49191337444428,
							42.62187152523061,
							0
						],
						[
							-76.49182337442952,
							42.62206152526925,
							0
						],
						[
							-76.49172437441894,
							42.62234652532573,
							0
						],
						[
							-76.49166737442245,
							42.62263952538199,
							0
						],
						[
							-76.49165137443916,
							42.62293252543656,
							0
						],
						[
							-76.49168037447262,
							42.62325652549504,
							0
						],
						[
							-76.49176437454382,
							42.62384952560079,
							0
						],
						[
							-76.49217537486417,
							42.626375526049,
							0
						],
						[
							-76.49576937601095,
							42.62626552588266,
							0
						],
						[
							-76.4978603766781,
							42.62620152578587,
							0
						],
						[
							-76.50399837863762,
							42.62602852550439,
							0
						],
						[
							-76.50413637868166,
							42.62602452549805,
							0
						],
						[
							-76.50414737868519,
							42.62602452549761,
							0
						],
						[
							-76.50436537875436,
							42.62601252548653,
							0
						],
						[
							-76.5079433798959,
							42.62590252532075,
							0
						],
						[
							-76.5085013800741,
							42.62588752529529,
							0
						],
						[
							-76.50858138009964,
							42.62588552529167,
							0
						],
						[
							-76.50865638012328,
							42.62587952528752,
							0
						],
						[
							-76.50871938014345,
							42.62587852528478,
							0
						],
						[
							-76.50873238014763,
							42.62587852528425,
							0
						],
						[
							-76.50874738015244,
							42.62587852528364,
							0
						],
						[
							-76.50887638019309,
							42.62586752527637,
							0
						],
						[
							-76.50893638021155,
							42.6258565252719,
							0
						],
						[
							-76.5090033802321,
							42.62584352526677,
							0
						],
						[
							-76.50901738023632,
							42.62583952526546,
							0
						],
						[
							-76.50902538023873,
							42.62583752526477,
							0
						],
						[
							-76.5105753807265,
							42.62569952517632,
							0
						],
						[
							-76.51306538152116,
							42.62562652506158,
							0
						],
						[
							-76.5155553823158,
							42.62555352494683,
							0
						],
						[
							-76.51623338253229,
							42.62553552491595,
							0
						],
						[
							-76.51678138270704,
							42.62551752489035,
							0
						],
						[
							-76.51726138286021,
							42.62550352486823,
							0
						],
						[
							-76.51741438290908,
							42.62549952486126,
							0
						],
						[
							-76.51868938331585,
							42.62546052480219,
							0
						],
						[
							-76.51880338335233,
							42.62545852479719,
							0
						],
						[
							-76.52036838385182,
							42.62541352472522,
							0
						],
						[
							-76.5206663839469,
							42.62540452471145,
							0
						],
						[
							-76.52096438404206,
							42.62539652469785,
							0
						],
						[
							-76.52203838438497,
							42.62536752464881,
							0
						],
						[
							-76.52205338438979,
							42.62536752464819,
							0
						],
						[
							-76.52236538448922,
							42.62535652463347,
							0
						],
						[
							-76.52238338449493,
							42.62535552463255,
							0
						],
						[
							-76.52239038449717,
							42.62535552463228,
							0
						],
						[
							-76.52267338458736,
							42.62534552461891,
							0
						],
						[
							-76.52271438460046,
							42.62534452461704,
							0
						],
						[
							-76.53184538751445,
							42.62507952419661,
							0
						],
						[
							-76.5360493888531,
							42.62491852399579,
							0
						],
						[
							-76.53610838887191,
							42.62491652399304,
							0
						],
						[
							-76.53711638919285,
							42.6248775239448,
							0
						],
						[
							-76.53806038949345,
							42.62484152389973,
							0
						],
						[
							-76.53991139008282,
							42.62477052381129,
							0
						],
						[
							-76.54001139011466,
							42.62476652380649,
							0
						],
						[
							-76.54010839014552,
							42.62476252380179,
							0
						],
						[
							-76.54019739017471,
							42.62477052379964,
							0
						],
						[
							-76.54028739020423,
							42.62477852379745,
							0
						],
						[
							-76.54046239026118,
							42.62478852379216,
							0
						],
						[
							-76.54062339031344,
							42.62479552378689,
							0
						],
						[
							-76.54063839031834,
							42.62479652378647,
							0
						],
						[
							-76.54078539036175,
							42.6247455237711,
							0
						],
						[
							-76.54095139041186,
							42.62470252375641,
							0
						],
						[
							-76.54101539043154,
							42.62469052375161,
							0
						],
						[
							-76.54103439043743,
							42.62468752375028,
							0
						],
						[
							-76.54121839049601,
							42.62468052374148,
							0
						],
						[
							-76.54215539079563,
							42.62466152369982,
							0
						],
						[
							-76.54218139080388,
							42.62466052369861,
							0
						],
						[
							-76.54233039085155,
							42.62465752369198,
							0
						],
						[
							-76.54237739086582,
							42.62464652368806,
							0
						],
						[
							-76.54249639090374,
							42.62464252368245,
							0
						],
						[
							-76.54332039116632,
							42.62461352364356,
							0
						],
						[
							-76.54460039157418,
							42.62456852358313,
							0
						],
						[
							-76.54650539218117,
							42.62450152349321,
							0
						],
						[
							-76.55022939336678,
							42.62435752331501,
							0
						],
						[
							-76.55042739342979,
							42.62434952330547,
							0
						],
						[
							-76.55324639432817,
							42.62425252317275,
							0
						],
						[
							-76.55381539450849,
							42.6242195231435,
							0
						],
						[
							-76.55438139468792,
							42.62418752311456,
							0
						],
						[
							-76.55580939513749,
							42.62406452303372,
							0
						],
						[
							-76.55574639510557,
							42.62390852300761,
							0
						],
						[
							-76.55567939506591,
							42.62366552296562,
							0
						],
						[
							-76.5556493950402,
							42.62345052292727,
							0
						],
						[
							-76.5553033945214,
							42.61799352193717,
							0
						],
						[
							-76.55516839430022,
							42.61561252150445,
							0
						],
						[
							-76.55505439413092,
							42.61383552118205,
							0
						],
						[
							-76.55504539411501,
							42.61366152115038,
							0
						],
						[
							-76.5549453939414,
							42.61176652080566,
							0
						],
						[
							-76.55478139370126,
							42.60925552035013,
							0
						],
						[
							-76.55466139351134,
							42.60722751998168,
							0
						],
						[
							-76.55455039333559,
							42.60535051964065,
							0
						],
						[
							-76.55433439296498,
							42.6013135189062,
							0
						],
						[
							-76.5542623928426,
							42.59998351866426,
							0
						],
						[
							-76.55414639264315,
							42.59780951826866,
							0
						],
						[
							-76.55412939261471,
							42.59750151821265,
							0
						],
						[
							-76.55408839254434,
							42.59673451807307,
							0
						],
						[
							-76.5539653923629,
							42.59483151772765,
							0
						],
						[
							-76.55369239193635,
							42.59028751690191,
							0
						],
						[
							-76.55363039188057,
							42.58980651681585,
							0
						],
						[
							-76.55354239182653,
							42.5894605167557,
							0
						],
						[
							-76.55340939175404,
							42.58906151668764,
							0
						],
						[
							-76.55313939162029,
							42.58843051658241,
							0
						],
						[
							-76.55215139116136,
							42.58653051627267,
							0
						],
						[
							-76.55192439104775,
							42.58598451618133,
							0
						],
						[
							-76.5518423910007,
							42.58570651613348,
							0
						],
						[
							-76.5514333907384,
							42.58394951582645,
							0
						],
						[
							-76.55138739070902,
							42.58375351579223,
							0
						],
						[
							-76.55101239046614,
							42.58211051550483,
							0
						],
						[
							-76.55068239026353,
							42.58081351527932,
							0
						],
						[
							-76.55065539024584,
							42.58069251525811,
							0
						],
						[
							-76.55035839005382,
							42.57939551503126,
							0
						],
						[
							-76.55021938995867,
							42.57871751491201,
							0
						],
						[
							-76.54997738977487,
							42.57729351465949,
							0
						],
						[
							-76.54950338942116,
							42.57458851418038,
							0
						],
						[
							-76.54940538934828,
							42.57403251408192,
							0
						],
						[
							-76.5493763893225,
							42.57381151404238,
							0
						],
						[
							-76.54936238931035,
							42.57370851402396,
							0
						],
						[
							-76.54932638928403,
							42.57351051398894,
							0
						],
						[
							-76.54864738873879,
							42.56911651320688,
							0
						],
						[
							-76.54820338839616,
							42.56642951272974,
							0
						],
						[
							-76.54802338827054,
							42.56551851256916,
							0
						],
						[
							-76.5478673881365,
							42.56439051236761,
							0
						],
						[
							-76.5477793880446,
							42.56353551221358,
							0
						],
						[
							-76.54777838804027,
							42.56348151220367,
							0
						],
						[
							-76.54770638796593,
							42.5627935120798,
							0
						],
						[
							-76.54769538789905,
							42.56194251192339,
							0
						],
						[
							-76.54781738774712,
							42.55937451144506,
							0
						],
						[
							-76.54793538767571,
							42.55790551116947,
							0
						],
						[
							-76.5480013876204,
							42.55687751097727,
							0
						],
						[
							-76.54802238762379,
							42.55683251096812,
							0
						],
						[
							-76.54806138763327,
							42.55679151095899,
							0
						],
						[
							-76.54808938764056,
							42.5567685109536,
							0
						],
						[
							-76.54785338755295,
							42.55660951093389,
							0
						],
						[
							-76.54613938692296,
							42.55553851080614,
							0
						],
						[
							-76.54585238681571,
							42.55533551078038,
							0
						],
						[
							-76.54556338670409,
							42.55508251074551,
							0
						],
						[
							-76.5453103866027,
							42.55481151070583,
							0
						],
						[
							-76.54519938655643,
							42.55466851068397,
							0
						],
						[
							-76.54509438651046,
							42.55450351065782,
							0
						],
						[
							-76.54494538644164,
							42.5542215106119,
							0
						],
						[
							-76.54483638638469,
							42.55392651056193,
							0
						],
						[
							-76.54477038634111,
							42.55362551050912,
							0
						],
						[
							-76.54475238632232,
							42.55345051047759,
							0
						],
						[
							-76.5447123862577,
							42.55275451035089,
							0
						],
						[
							-76.54469038622142,
							42.55236151027934,
							0
						],
						[
							-76.54467738619678,
							42.55208651022917,
							0
						],
						[
							-76.54461638607785,
							42.5507505099853,
							0
						],
						[
							-76.54460538606256,
							42.55059250995662,
							0
						],
						[
							-76.54454938602125,
							42.55027850990099,
							0
						],
						[
							-76.54444938596616,
							42.54996950984809,
							0
						],
						[
							-76.54439338593849,
							42.54983950982641,
							0
						],
						[
							-76.54423138586456,
							42.54954450977859,
							0
						],
						[
							-76.54343738552703,
							42.548433509606,
							0
						],
						[
							-76.54328238545936,
							42.54819250956788,
							0
						],
						[
							-76.54316238540254,
							42.54794650952737,
							0
						],
						[
							-76.54307638535491,
							42.54767750948128,
							0
						],
						[
							-76.54280538519654,
							42.54671750931527,
							0
						],
						[
							-76.5427113851437,
							42.54641250926284,
							0
						],
						[
							-76.5425683850742,
							42.54609550921018,
							0
						],
						[
							-76.5424823850356,
							42.5459475091864,
							0
						],
						[
							-76.54227538494727,
							42.54565350914061,
							0
						],
						[
							-76.54202638484645,
							42.5453725090989,
							0
						],
						[
							-76.54173938473521,
							42.54511550906318,
							0
						],
						[
							-76.54141838461476,
							42.54488150903305,
							0
						],
						[
							-76.54103338447176,
							42.54462050900058,
							0
						],
						[
							-76.5403653842214,
							42.54413750893867,
							0
						],
						[
							-76.54025138417872,
							42.54405550892817,
							0
						],
						[
							-76.54033038417397,
							42.54365050885025,
							0
						],
						[
							-76.54052738418964,
							42.54301050872422,
							0
						],
						[
							-76.54128338440381,
							42.54262650862268,
							0
						],
						[
							-76.54134638442166,
							42.54259450861422,
							0
						],
						[
							-76.54200838460446,
							42.54219450851355,
							0
						],
						[
							-76.54265838479157,
							42.54190450843365,
							0
						],
						[
							-76.54307238487083,
							42.54118250828365,
							0
						],
						[
							-76.5433973848928,
							42.54007450806611,
							0
						],
						[
							-76.54365538494032,
							42.53959950796802,
							0
						],
						[
							-76.54386438497866,
							42.53921250788814,
							0
						],
						[
							-76.54432238511485,
							42.53906650784258,
							0
						],
						[
							-76.544748385254,
							42.53909850783118,
							0
						],
						[
							-76.54493138531377,
							42.53911250782632,
							0
						],
						[
							-76.54571538556033,
							42.53904350778173,
							0
						],
						[
							-76.54855038644187,
							42.53865950759568,
							0
						],
						[
							-76.54997538684826,
							42.53797250741103,
							0
						],
						[
							-76.55021938691782,
							42.53785450737935,
							0
						],
						[
							-76.55559538836026,
							42.53404350645788,
							0
						],
						[
							-76.55562138836719,
							42.53402450645332,
							0
						],
						[
							-76.5534593875737,
							42.53268550629421,
							0
						],
						[
							-76.55062238653248,
							42.53092850608542,
							0
						],
						[
							-76.54839738571592,
							42.52955050592164,
							0
						],
						[
							-76.54549638463772,
							42.52757150567442,
							0
						],
						[
							-76.5449353844292,
							42.52718850562654,
							0
						],
						[
							-76.54101238290829,
							42.52366450513571,
							0
						],
						[
							-76.53788738165373,
							42.52027650463744,
							0
						],
						[
							-76.53760238157442,
							42.52044050467926,
							0
						],
						[
							-76.53611238115975,
							42.52129750489794,
							0
						],
						[
							-76.53417038062085,
							42.52243550518681,
							0
						],
						[
							-76.53221438007684,
							42.52356550547474,
							0
						],
						[
							-76.52998137944783,
							42.52474850578372,
							0
						],
						[
							-76.52824337896212,
							42.52572150603383,
							0
						],
						[
							-76.5279403788963,
							42.52614550612438,
							0
						],
						[
							-76.52780337886777,
							42.52635350616833,
							0
						],
						[
							-76.52752437877605,
							42.5263245061743,
							0
						],
						[
							-76.52742037873986,
							42.52628650617152,
							0
						],
						[
							-76.5273703787166,
							42.52618950615564,
							0
						],
						[
							-76.52728837868509,
							42.52611950614605,
							0
						],
						[
							-76.527273378679,
							42.52610250614354,
							0
						],
						[
							-76.5272363786643,
							42.52606450613802,
							0
						],
						[
							-76.52721437865353,
							42.52601450612967,
							0
						],
						[
							-76.52711237861085,
							42.5258805061091,
							0
						],
						[
							-76.52708837860085,
							42.52584950610434,
							0
						],
						[
							-76.52703637857769,
							42.52576250609041,
							0
						],
						[
							-76.52697637855354,
							42.52569650608066,
							0
						],
						[
							-76.52693937853758,
							42.52564150607202,
							0
						],
						[
							-76.52688037851337,
							42.52557050606131,
							0
						],
						[
							-76.52687337850823,
							42.52553150605441,
							0
						],
						[
							-76.52683637849435,
							42.52550450605091,
							0
						],
						[
							-76.52683637849228,
							42.52547650604576,
							0
						],
						[
							-76.52681337848325,
							42.52545450604263,
							0
						],
						[
							-76.52680637847818,
							42.5254165060359,
							0
						],
						[
							-76.52678437846987,
							42.52539950603367,
							0
						],
						[
							-76.52676937846222,
							42.52536150602723,
							0
						],
						[
							-76.52674737845389,
							42.52534450602501,
							0
						],
						[
							-76.52673937844851,
							42.52530650601833,
							0
						],
						[
							-76.52671737844027,
							42.52529050601626,
							0
						],
						[
							-76.52670237843256,
							42.52525150600968,
							0
						],
						[
							-76.52668037842386,
							42.52522950600651,
							0
						],
						[
							-76.52667237841884,
							42.52519650600075,
							0
						],
						[
							-76.5266433784079,
							42.52517450599786,
							0
						],
						[
							-76.52661337839301,
							42.52510350598598,
							0
						],
						[
							-76.52659137838387,
							42.52507550598171,
							0
						],
						[
							-76.5265763783766,
							42.52504250597622,
							0
						],
						[
							-76.52649537834368,
							42.52494950596235,
							0
						],
						[
							-76.5264653783308,
							42.52490550595545,
							0
						],
						[
							-76.52635437828864,
							42.52481750594371,
							0
						],
						[
							-76.52625037825243,
							42.52477950594093,
							0
						],
						[
							-76.52606537819096,
							42.52475150594327,
							0
						],
						[
							-76.52590837813878,
							42.52472750594522,
							0
						],
						[
							-76.52592537815455,
							42.52486650597017,
							0
						],
						[
							-76.52595737817454,
							42.52499750599305,
							0
						],
						[
							-76.52600637819955,
							42.52512250601412,
							0
						],
						[
							-76.52655337847155,
							42.52642150623161,
							0
						],
						[
							-76.5267173785564,
							42.52685550630505,
							0
						],
						[
							-76.52679637860544,
							42.52717450636071,
							0
						],
						[
							-76.52692537869049,
							42.52776250646396,
							0
						],
						[
							-76.52704337875132,
							42.52807150651618,
							0
						],
						[
							-76.52754237899457,
							42.52919050670239,
							0
						],
						[
							-76.52765037904555,
							42.52941050673859,
							0
						],
						[
							-76.52802737922366,
							42.53017950686515,
							0
						],
						[
							-76.52813737927568,
							42.53040450690222,
							0
						],
						[
							-76.52883837960717,
							42.53183850713832,
							0
						],
						[
							-76.52890837964264,
							42.53201350716777,
							0
						],
						[
							-76.52895837967398,
							42.53221950720373,
							0
						],
						[
							-76.52896837968379,
							42.53230850721975,
							0
						],
						[
							-76.52897937969513,
							42.53241350723868,
							0
						],
						[
							-76.52911737986128,
							42.53405450753581,
							0
						],
						[
							-76.52912137986738,
							42.53411950754764,
							0
						],
						[
							-76.52921438000573,
							42.53558050781338,
							0
						],
						[
							-76.52920938000844,
							42.53563850782428,
							0
						],
						[
							-76.52921338001907,
							42.53576450784736,
							0
						],
						[
							-76.52919638002496,
							42.53591750787629,
							0
						],
						[
							-76.5291573800236,
							42.53606750790553,
							0
						],
						[
							-76.52909838001572,
							42.53621650793541,
							0
						],
						[
							-76.52907438001137,
							42.53626150794468,
							0
						],
						[
							-76.5284553798808,
							42.53717950813919,
							0
						],
						[
							-76.52839937986788,
							42.537247508154,
							0
						],
						[
							-76.52833337985145,
							42.53731150816849,
							0
						],
						[
							-76.52825837983181,
							42.53737150818262,
							0
						],
						[
							-76.52817537980926,
							42.53742650819612,
							0
						],
						[
							-76.52808637978409,
							42.53747250820823,
							0
						],
						[
							-76.52799037975609,
							42.53751050821913,
							0
						],
						[
							-76.52788937972612,
							42.53754350822931,
							0
						],
						[
							-76.5263533792537,
							42.53782250834315,
							0
						],
						[
							-76.52573937906489,
							42.53793450838877,
							0
						],
						[
							-76.5254413789736,
							42.53799350841177,
							0
						],
						[
							-76.52458837871237,
							42.53816350847774,
							0
						],
						[
							-76.5243203786319,
							42.53823850850246,
							0
						],
						[
							-76.52406437855669,
							42.5383325085302,
							0
						],
						[
							-76.52309937827559,
							42.53871950864077,
							0
						],
						[
							-76.52299237824465,
							42.53876550865359,
							0
						],
						[
							-76.5227753781819,
							42.53885850867957,
							0
						],
						[
							-76.52247237809694,
							42.53902450872251,
							0
						],
						[
							-76.52219437802134,
							42.53920850876773,
							0
						],
						[
							-76.52175537790654,
							42.53956050885049,
							0
						],
						[
							-76.52161837787139,
							42.539679508878,
							0
						],
						[
							-76.52149337783771,
							42.53976650889914,
							0
						],
						[
							-76.52135737779992,
							42.53984550891921,
							0
						],
						[
							-76.52121137775787,
							42.53991050893715,
							0
						],
						[
							-76.52101937770142,
							42.53998050895786,
							0
						],
						[
							-76.52064237758876,
							42.54009350899401,
							0
						],
						[
							-76.52021037745949,
							42.54022050903497,
							0
						],
						[
							-76.519950377383,
							42.54031450906287,
							0
						],
						[
							-76.51943937723682,
							42.54055550912808,
							0
						],
						[
							-76.51896437710452,
							42.54082750919753,
							0
						],
						[
							-76.51888337708257,
							42.54088250921096,
							0
						],
						[
							-76.51856637699848,
							42.54112050926773,
							0
						],
						[
							-76.5175903766563,
							42.54073250923581,
							0
						],
						[
							-76.5168123763872,
							42.54047250921943,
							0
						],
						[
							-76.51357037527798,
							42.53955250918133,
							0
						],
						[
							-76.51220437481065,
							42.53916550916539,
							0
						],
						[
							-76.51205137475863,
							42.5391265091644,
							0
						],
						[
							-76.51093037437606,
							42.53882150915366,
							0
						],
						[
							-76.50833937349189,
							42.53811750912893,
							0
						],
						[
							-76.50783237332152,
							42.5380155091307,
							0
						],
						[
							-76.50771437328282,
							42.53800450913345,
							0
						],
						[
							-76.50731037314976,
							42.53795950914154,
							0
						],
						[
							-76.50723637312579,
							42.53795650914401,
							0
						],
						[
							-76.50683237299614,
							42.53795750916058,
							0
						],
						[
							-76.50603837274328,
							42.53798550919797,
							0
						],
						[
							-76.4994223706357,
							42.53821150950812,
							0
						],
						[
							-76.49646936969565,
							42.53832150964821,
							0
						],
						[
							-76.49611736958337,
							42.53833150966434,
							0
						],
						[
							-76.49581836948667,
							42.53832250967481,
							0
						],
						[
							-76.4947913691592,
							42.53835350972219,
							0
						],
						[
							-76.49441236903921,
							42.53837650974182,
							0
						],
						[
							-76.4926523684791,
							42.53844450982575,
							0
						],
						[
							-76.48903336732663,
							42.53857450999651,
							0
						],
						[
							-76.48467136593828,
							42.53874151020422,
							0
						],
						[
							-76.48367436562087,
							42.53877851025148,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090023002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>51587616</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>2330557</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5798592</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5187570</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090023002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090023002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>2312</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>835</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>12749.22</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>81</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.82</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.96</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>27411</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27073</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>28384</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14958</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14614</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15501</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8742</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8475</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9065</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6216</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6139</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6437</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>2.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.25</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.07</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2090</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2569</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>101</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2857</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1558</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1561</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>1545</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>83</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00055"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.58644538584848,
							42.36640647421724,
							0
						],
						[
							-76.58562838561205,
							42.36675147431425,
							0
						],
						[
							-76.58417938519192,
							42.36735147448411,
							0
						],
						[
							-76.58234938466174,
							42.36811547469979,
							0
						],
						[
							-76.581478384408,
							42.36846047479901,
							0
						],
						[
							-76.58121438433164,
							42.36857247483044,
							0
						],
						[
							-76.58081038421419,
							42.36873547487702,
							0
						],
						[
							-76.57977338391441,
							42.36917747500091,
							0
						],
						[
							-76.579246383761,
							42.36938747506116,
							0
						],
						[
							-76.57872538361052,
							42.36961147512375,
							0
						],
						[
							-76.57829238348677,
							42.3698154751791,
							0
						],
						[
							-76.57823538347085,
							42.36984747518733,
							0
						],
						[
							-76.57803038341298,
							42.36995347521528,
							0
						],
						[
							-76.57788038337101,
							42.37003647523672,
							0
						],
						[
							-76.57747338325996,
							42.37029947530194,
							0
						],
						[
							-76.57721938319268,
							42.37049147534781,
							0
						],
						[
							-76.57697338312873,
							42.37069347539518,
							0
						],
						[
							-76.57674038307019,
							42.3709124754452,
							0
						],
						[
							-76.57652038301646,
							42.37114047549633,
							0
						],
						[
							-76.57646538300621,
							42.37124047551709,
							0
						],
						[
							-76.57641138299229,
							42.37128647552779,
							0
						],
						[
							-76.57636538298125,
							42.37133647553893,
							0
						],
						[
							-76.57626938295888,
							42.37145047556393,
							0
						],
						[
							-76.57619538294091,
							42.37152847558137,
							0
						],
						[
							-76.5760043828981,
							42.37177847563542,
							0
						],
						[
							-76.57586238286865,
							42.37199647568156,
							0
						],
						[
							-76.57567638283379,
							42.37233247575134,
							0
						],
						[
							-76.57552738281007,
							42.37265847581777,
							0
						],
						[
							-76.57542738279702,
							42.3729164758696,
							0
						],
						[
							-76.5752433827774,
							42.37345047597597,
							0
						],
						[
							-76.57520138277397,
							42.37358647600287,
							0
						],
						[
							-76.57508438276241,
							42.37393847607282,
							0
						],
						[
							-76.5747733827281,
							42.3748254762497,
							0
						],
						[
							-76.57451238269684,
							42.37553647639196,
							0
						],
						[
							-76.5742303826598,
							42.37626047653749,
							0
						],
						[
							-76.57393438261799,
							42.37698047668285,
							0
						],
						[
							-76.5738603826069,
							42.37715147671751,
							0
						],
						[
							-76.57380438259865,
							42.37728347674424,
							0
						],
						[
							-76.5736083825693,
							42.37773747683627,
							0
						],
						[
							-76.57276238243965,
							42.37965747722614,
							0
						],
						[
							-76.5724793823947,
							42.38027847735263,
							0
						],
						[
							-76.572329382368,
							42.3805684774124,
							0
						],
						[
							-76.57206438231623,
							42.38101847750649,
							0
						],
						[
							-76.57187638227668,
							42.38129947756612,
							0
						],
						[
							-76.571679382233,
							42.38156347762302,
							0
						],
						[
							-76.57147438218578,
							42.3818144776778,
							0
						],
						[
							-76.57092238205456,
							42.38243447781498,
							0
						],
						[
							-76.57068638199675,
							42.38267647786936,
							0
						],
						[
							-76.57062238198124,
							42.38274447788456,
							0
						],
						[
							-76.57045638194114,
							42.38292247792423,
							0
						],
						[
							-76.57017138187331,
							42.38324147799486,
							0
						],
						[
							-76.56976238177818,
							42.38372947810181,
							0
						],
						[
							-76.56946838171106,
							42.38409747818186,
							0
						],
						[
							-76.56916138164317,
							42.38451147827097,
							0
						],
						[
							-76.56902238161285,
							42.38470447831233,
							0
						],
						[
							-76.56870838154455,
							42.38514347840636,
							0
						],
						[
							-76.56804038139752,
							42.38605347860193,
							0
						],
						[
							-76.56781238134825,
							42.38637647867098,
							0
						],
						[
							-76.56733238124133,
							42.38701347880837,
							0
						],
						[
							-76.56716738120754,
							42.38727247886303,
							0
						],
						[
							-76.56694438116585,
							42.38767647894688,
							0
						],
						[
							-76.56673438113022,
							42.38810647903502,
							0
						],
						[
							-76.56657938110759,
							42.38847347910926,
							0
						],
						[
							-76.56648138109455,
							42.38872247915933,
							0
						],
						[
							-76.56633938107407,
							42.38906247922805,
							0
						],
						[
							-76.56630338106858,
							42.38914447924467,
							0
						],
						[
							-76.5662763810642,
							42.38920247925651,
							0
						],
						[
							-76.56624038105805,
							42.38927547927148,
							0
						],
						[
							-76.56612938103684,
							42.38947047931207,
							0
						],
						[
							-76.56600038100957,
							42.38966147935268,
							0
						],
						[
							-76.56592738099265,
							42.38974947937194,
							0
						],
						[
							-76.56589938098627,
							42.38978447937954,
							0
						],
						[
							-76.56573338094617,
							42.38996247941923,
							0
						],
						[
							-76.56552138089268,
							42.39015847946411,
							0
						],
						[
							-76.5654413808721,
							42.39022747948013,
							0
						],
						[
							-76.56527438082801,
							42.3903554795106,
							0
						],
						[
							-76.56512338078704,
							42.39045647953542,
							0
						],
						[
							-76.56486138071398,
							42.39060447957343,
							0
						],
						[
							-76.56465638065576,
							42.39070647960062,
							0
						],
						[
							-76.56444638059493,
							42.39079447962543,
							0
						],
						[
							-76.56430138055259,
							42.39085047964167,
							0
						],
						[
							-76.56414638050666,
							42.39090147965739,
							0
						],
						[
							-76.56400138046372,
							42.39094947967216,
							0
						],
						[
							-76.56393638044494,
							42.39097747967997,
							0
						],
						[
							-76.56396138045554,
							42.39101247968546,
							0
						],
						[
							-76.5639953804688,
							42.39104447969,
							0
						],
						[
							-76.56404338048611,
							42.39107047969287,
							0
						],
						[
							-76.56408638050114,
							42.39108747969429,
							0
						],
						[
							-76.56414138051966,
							42.39109947969426,
							0
						],
						[
							-76.56421338054274,
							42.39109947969134,
							0
						],
						[
							-76.5642813805638,
							42.39108947968674,
							0
						],
						[
							-76.56483838073646,
							42.39100947964936,
							0
						],
						[
							-76.56504838080194,
							42.39098447963622,
							0
						],
						[
							-76.56536038090033,
							42.39096247961951,
							0
						],
						[
							-76.56577238103198,
							42.39095647960171,
							0
						],
						[
							-76.56592838108146,
							42.39094947959407,
							0
						],
						[
							-76.56683238137038,
							42.39093747955522,
							0
						],
						[
							-76.567076381448,
							42.39092947954386,
							0
						],
						[
							-76.56732238152665,
							42.39092647953333,
							0
						],
						[
							-76.56755638160212,
							42.39093247952497,
							0
						],
						[
							-76.56940238220265,
							42.3910514794722,
							0
						],
						[
							-76.56958038226014,
							42.3910574794661,
							0
						],
						[
							-76.57082038266303,
							42.39113047942937,
							0
						],
						[
							-76.57150538288491,
							42.39116147940734,
							0
						],
						[
							-76.57200538304637,
							42.39117747939004,
							0
						],
						[
							-76.57230738314422,
							42.39119147938039,
							0
						],
						[
							-76.57244138318732,
							42.39119347937533,
							0
						],
						[
							-76.57313438341214,
							42.3912294793539,
							0
						],
						[
							-76.57328938346195,
							42.391231479348,
							0
						],
						[
							-76.57375438361257,
							42.39125247933303,
							0
						],
						[
							-76.57457338387628,
							42.3912684793028,
							0
						],
						[
							-76.57593838431347,
							42.39126347924657,
							0
						],
						[
							-76.5764163844662,
							42.39125647922587,
							0
						],
						[
							-76.57662938453359,
							42.39124447921501,
							0
						],
						[
							-76.57710638468369,
							42.39120647918865,
							0
						],
						[
							-76.57857238513584,
							42.39096547908462,
							0
						],
						[
							-76.57897038525805,
							42.39089247905497,
							0
						],
						[
							-76.57943738540064,
							42.39079647901826,
							0
						],
						[
							-76.58012538560915,
							42.39063347896019,
							0
						],
						[
							-76.58055338573831,
							42.39052447892266,
							0
						],
						[
							-76.58131938596777,
							42.39030647885124,
							0
						],
						[
							-76.58221438623444,
							42.39003247876422,
							0
						],
						[
							-76.58274138639221,
							42.38988147871491,
							0
						],
						[
							-76.58325538654681,
							42.38974347866852,
							0
						],
						[
							-76.58363038666036,
							42.38965347863665,
							0
						],
						[
							-76.58413938681363,
							42.3895194785912,
							0
						],
						[
							-76.58437638688576,
							42.38946747857197,
							0
						],
						[
							-76.5848093870171,
							42.38936647853571,
							0
						],
						[
							-76.58513538711466,
							42.38927247850509,
							0
						],
						[
							-76.58524338714648,
							42.38923447849366,
							0
						],
						[
							-76.58535138717866,
							42.38920147848319,
							0
						],
						[
							-76.58566138726984,
							42.38909047845005,
							0
						],
						[
							-76.58570238728188,
							42.38907547844562,
							0
						],
						[
							-76.58611338740123,
							42.38890747839784,
							0
						],
						[
							-76.58638838748072,
							42.38879047836505,
							0
						],
						[
							-76.58669738757084,
							42.38866947833011,
							0
						],
						[
							-76.58700538766027,
							42.3885434782943,
							0
						],
						[
							-76.58743138778443,
							42.38837547824591,
							0
						],
						[
							-76.58766538785322,
							42.38829147822088,
							0
						],
						[
							-76.58777938788631,
							42.38824447820756,
							0
						],
						[
							-76.58814038799234,
							42.38811347816866,
							0
						],
						[
							-76.588652388142,
							42.3879174781116,
							0
						],
						[
							-76.58877638817799,
							42.38786647809715,
							0
						],
						[
							-76.5889113882178,
							42.38781947808296,
							0
						],
						[
							-76.58904338825626,
							42.38776747806799,
							0
						],
						[
							-76.58930738833334,
							42.38766547803841,
							0
						],
						[
							-76.58943938837217,
							42.38761847802434,
							0
						],
						[
							-76.58957438841169,
							42.38756747800942,
							0
						],
						[
							-76.5896643884384,
							42.3875384780004,
							0
						],
						[
							-76.58975638846553,
							42.38750647799074,
							0
						],
						[
							-76.58984638849194,
							42.387473477981,
							0
						],
						[
							-76.58993838851929,
							42.3874444779719,
							0
						],
						[
							-76.59003138854703,
							42.38741647796293,
							0
						],
						[
							-76.59012338857477,
							42.38739247795476,
							0
						],
						[
							-76.59023638860853,
							42.38735947794406,
							0
						],
						[
							-76.59050238868893,
							42.38729347792107,
							0
						],
						[
							-76.59095338882696,
							42.38720547788648,
							0
						],
						[
							-76.59108538886818,
							42.38719047787835,
							0
						],
						[
							-76.5916513890433,
							42.38710547783966,
							0
						],
						[
							-76.5918243890973,
							42.38708547782894,
							0
						],
						[
							-76.59199738915089,
							42.38706047781732,
							0
						],
						[
							-76.59217038920488,
							42.38704047780657,
							0
						],
						[
							-76.59264438935135,
							42.38696647777364,
							0
						],
						[
							-76.59277238939053,
							42.38694147776383,
							0
						],
						[
							-76.59290138943048,
							42.38692247775506,
							0
						],
						[
							-76.59315738950892,
							42.38687347773563,
							0
						],
						[
							-76.59328438954718,
							42.38684047772437,
							0
						],
						[
							-76.59338438957775,
							42.38682047771661,
							0
						],
						[
							-76.59387638972534,
							42.38668347767128,
							0
						],
						[
							-76.59405938977912,
							42.38661747765164,
							0
						],
						[
							-76.59420438982248,
							42.38657547763798,
							0
						],
						[
							-76.59434238986259,
							42.38651947762202,
							0
						],
						[
							-76.59447138989877,
							42.38644947760383,
							0
						],
						[
							-76.59457038992615,
							42.38639047758889,
							0
						],
						[
							-76.59509839006851,
							42.38602647750009,
							0
						],
						[
							-76.59565739022052,
							42.38565847740928,
							0
						],
						[
							-76.59646939043877,
							42.38508947727101,
							0
						],
						[
							-76.5965573904619,
							42.38502047725464,
							0
						],
						[
							-76.59683239053581,
							42.38482747720778,
							0
						],
						[
							-76.59693039056276,
							42.38476747719268,
							0
						],
						[
							-76.59703139059137,
							42.38471647717913,
							0
						],
						[
							-76.59713739062195,
							42.38467047716632,
							0
						],
						[
							-76.5976753907789,
							42.38446047710561,
							0
						],
						[
							-76.59800339087369,
							42.3843204770664,
							0
						],
						[
							-76.59827739095324,
							42.38420847703456,
							0
						],
						[
							-76.59864839106181,
							42.38406847699358,
							0
						],
						[
							-76.59886639112644,
							42.38399747697159,
							0
						],
						[
							-76.59942139129376,
							42.3838544769226,
							0
						],
						[
							-76.59968239137187,
							42.38377947689811,
							0
						],
						[
							-76.60167939197292,
							42.38325147671935,
							0
						],
						[
							-76.60213539211057,
							42.38313647667957,
							0
						],
						[
							-76.60257239224187,
							42.38301747663981,
							0
						],
						[
							-76.60309239239804,
							42.38287547659242,
							0
						],
						[
							-76.60357739254403,
							42.38274747654905,
							0
						],
						[
							-76.6042833927556,
							42.38254847648355,
							0
						],
						[
							-76.60451739282601,
							42.3824864764626,
							0
						],
						[
							-76.60498039296466,
							42.38235447641937,
							0
						],
						[
							-76.60632839337097,
							42.38200647630023,
							0
						],
						[
							-76.60670139348284,
							42.38190247626586,
							0
						],
						[
							-76.60699439357009,
							42.38181247623729,
							0
						],
						[
							-76.60715139361656,
							42.3817604762213,
							0
						],
						[
							-76.60730139366154,
							42.38171847620743,
							0
						],
						[
							-76.60752839373009,
							42.38166147618767,
							0
						],
						[
							-76.60778239380787,
							42.3816124761683,
							0
						],
						[
							-76.60795139386084,
							42.38159647615848,
							0
						],
						[
							-76.60812039391449,
							42.38158947615032,
							0
						],
						[
							-76.60840139400632,
							42.38161347614337,
							0
						],
						[
							-76.60844139401935,
							42.3816164761423,
							0
						],
						[
							-76.608520394031,
							42.38143147610484,
							0
						],
						[
							-76.60860639404981,
							42.38131247607932,
							0
						],
						[
							-76.60866639406495,
							42.38125747606672,
							0
						],
						[
							-76.60891939413216,
							42.38106947602163,
							0
						],
						[
							-76.60937139425002,
							42.38070347593551,
							0
						],
						[
							-76.60981639436324,
							42.38030547584378,
							0
						],
						[
							-76.61026539447472,
							42.37986647574427,
							0
						],
						[
							-76.61149539477522,
							42.37859747545937,
							0
						],
						[
							-76.6124543950108,
							42.37762547524049,
							0
						],
						[
							-76.61247139501499,
							42.37760847523666,
							0
						],
						[
							-76.61506939565393,
							42.37498547464553,
							0
						],
						[
							-76.61529239570886,
							42.37476147459499,
							0
						],
						[
							-76.61617739592705,
							42.37387547439501,
							0
						],
						[
							-76.6165543960199,
							42.37349647430952,
							0
						],
						[
							-76.61697739612275,
							42.37305347421032,
							0
						],
						[
							-76.61711639615756,
							42.37292147418023,
							0
						],
						[
							-76.61720439617969,
							42.37283947416148,
							0
						],
						[
							-76.61736639622141,
							42.37270147412936,
							0
						],
						[
							-76.61762039628854,
							42.37250847408331,
							0
						],
						[
							-76.61780239633774,
							42.37238447405295,
							0
						],
						[
							-76.6179963963917,
							42.37227347402452,
							0
						],
						[
							-76.61865339657567,
							42.3719134739312,
							0
						],
						[
							-76.61890039664587,
							42.37179247389876,
							0
						],
						[
							-76.61899039667199,
							42.37175547388825,
							0
						],
						[
							-76.61910439670513,
							42.37170947387511,
							0
						],
						[
							-76.61934139677479,
							42.37162447384975,
							0
						],
						[
							-76.61950339682286,
							42.37157247383355,
							0
						],
						[
							-76.61983339692196,
							42.3714824738035,
							0
						],
						[
							-76.62034139707625,
							42.37136747376157,
							0
						],
						[
							-76.62089039724226,
							42.37123347371448,
							0
						],
						[
							-76.62108139730029,
							42.37119047369877,
							0
						],
						[
							-76.62256739774995,
							42.37083147357198,
							0
						],
						[
							-76.62280639782261,
							42.37077847355248,
							0
						],
						[
							-76.62292139785902,
							42.3707724735467,
							0
						],
						[
							-76.62297739787726,
							42.37077647354514,
							0
						],
						[
							-76.62298539787281,
							42.37068147352724,
							0
						],
						[
							-76.62303039787254,
							42.37048247348855,
							0
						],
						[
							-76.62310739788053,
							42.37025647344359,
							0
						],
						[
							-76.62330439789591,
							42.36960947331576,
							0
						],
						[
							-76.62336939789606,
							42.36932947326128,
							0
						],
						[
							-76.62351539786631,
							42.36829247306327,
							0
						],
						[
							-76.6236533978346,
							42.36726347286711,
							0
						],
						[
							-76.62373939780488,
							42.3664874727199,
							0
						],
						[
							-76.62384839777324,
							42.36558547254839,
							0
						],
						[
							-76.62403539770241,
							42.3638134722126,
							0
						],
						[
							-76.62412739767832,
							42.36308747207438,
							0
						],
						[
							-76.62419039767016,
							42.3627034720007,
							0
						],
						[
							-76.62429839766214,
							42.36212547188925,
							0
						],
						[
							-76.62455639763556,
							42.36064447160445,
							0
						],
						[
							-76.624670397672,
							42.36064347159962,
							0
						],
						[
							-76.62488039773905,
							42.36064047159055,
							0
						],
						[
							-76.62515039782592,
							42.36064547158052,
							0
						],
						[
							-76.62528139786774,
							42.36064347157483,
							0
						],
						[
							-76.62655639827759,
							42.36066147152643,
							0
						],
						[
							-76.62686539837658,
							42.36066147151389,
							0
						],
						[
							-76.62714639846696,
							42.36066647150342,
							0
						],
						[
							-76.62729339851393,
							42.3606644714971,
							0
						],
						[
							-76.62788839870528,
							42.3606744714748,
							0
						],
						[
							-76.62803839875386,
							42.36068147147001,
							0
						],
						[
							-76.62833239884833,
							42.36068547145883,
							0
						],
						[
							-76.62853339891326,
							42.36069247145195,
							0
						],
						[
							-76.62863439894548,
							42.36069047144748,
							0
						],
						[
							-76.62883439901,
							42.36069647144048,
							0
						],
						[
							-76.62943039920131,
							42.36070147141721,
							0
						],
						[
							-76.63007639940827,
							42.360701471391,
							0
						],
						[
							-76.63124339978326,
							42.36071647134641,
							0
						],
						[
							-76.63138139982733,
							42.36071447134046,
							0
						],
						[
							-76.63196540001516,
							42.36072447131859,
							0
						],
						[
							-76.63242340016204,
							42.36072647130038,
							0
						],
						[
							-76.63263540023077,
							42.36073747129382,
							0
						],
						[
							-76.63275640026939,
							42.36073547128854,
							0
						],
						[
							-76.63287140030675,
							42.36074247128516,
							0
						],
						[
							-76.63298340034521,
							42.36077747128709,
							0
						],
						[
							-76.63304040036542,
							42.36080347128959,
							0
						],
						[
							-76.63308540038211,
							42.36083447129351,
							0
						],
						[
							-76.63311140039337,
							42.36087447129988,
							0
						],
						[
							-76.63312840040176,
							42.36091447130659,
							0
						],
						[
							-76.63314040040896,
							42.36095947131443,
							0
						],
						[
							-76.63314940041846,
							42.36104947133075,
							0
						],
						[
							-76.6331434004229,
							42.36113547134691,
							0
						],
						[
							-76.63314540043018,
							42.36122547136348,
							0
						],
						[
							-76.63316140044223,
							42.36131947138028,
							0
						],
						[
							-76.63317940045164,
							42.36136847138863,
							0
						],
						[
							-76.63321640046709,
							42.36141747139618,
							0
						],
						[
							-76.63326640048672,
							42.36146647140323,
							0
						],
						[
							-76.63332540050857,
							42.36150647140826,
							0
						],
						[
							-76.63337740052688,
							42.3615284714102,
							0
						],
						[
							-76.63343840054766,
							42.36154547141089,
							0
						],
						[
							-76.63350440056969,
							42.36155747141043,
							0
						],
						[
							-76.63388840069632,
							42.36160647140392,
							0
						],
						[
							-76.63407540075706,
							42.36161747139837,
							0
						],
						[
							-76.63482240099755,
							42.36163347137102,
							0
						],
						[
							-76.63519740111896,
							42.36165047135893,
							0
						],
						[
							-76.63625740146112,
							42.36168547132238,
							0
						],
						[
							-76.63711640173707,
							42.36169547128935,
							0
						],
						[
							-76.63924540241588,
							42.36165147119478,
							0
						],
						[
							-76.6416554031867,
							42.36163447109379,
							0
						],
						[
							-76.64218040335601,
							42.36164947107525,
							0
						],
						[
							-76.64309640365018,
							42.3616594710399,
							0
						],
						[
							-76.64343440375848,
							42.36165947102617,
							0
						],
						[
							-76.64354140379363,
							42.36167147102407,
							0
						],
						[
							-76.64364340382616,
							42.36166947101957,
							0
						],
						[
							-76.64371740384819,
							42.36164647101229,
							0
						],
						[
							-76.64376240386082,
							42.36162247100601,
							0
						],
						[
							-76.64383940388778,
							42.36165347100862,
							0
						],
						[
							-76.64391840391397,
							42.36166547100765,
							0
						],
						[
							-76.6451404043065,
							42.36167947096061,
							0
						],
						[
							-76.64521440433049,
							42.36168347095835,
							0
						],
						[
							-76.64544340440354,
							42.36167947094831,
							0
						],
						[
							-76.64567040447642,
							42.36168147093946,
							0
						],
						[
							-76.64692940487834,
							42.36166247088482,
							0
						],
						[
							-76.64717840495724,
							42.36165047087248,
							0
						],
						[
							-76.64742640503638,
							42.36164647086167,
							0
						],
						[
							-76.64761340509679,
							42.36165347085537,
							0
						],
						[
							-76.64767740511722,
							42.36165247085258,
							0
						],
						[
							-76.64778840515434,
							42.36167347085197,
							0
						],
						[
							-76.6478924051872,
							42.36166747084663,
							0
						],
						[
							-76.64789240519082,
							42.36171647085572,
							0
						],
						[
							-76.64789940519705,
							42.36177047086543,
							0
						],
						[
							-76.64791340520553,
							42.36182447087487,
							0
						],
						[
							-76.64796640523146,
							42.36194547089512,
							0
						],
						[
							-76.64804140527335,
							42.3621874709369,
							0
						],
						[
							-76.64813440532035,
							42.36242047097627,
							0
						],
						[
							-76.64832940542149,
							42.36294447106539,
							0
						],
						[
							-76.64863440558368,
							42.3638174712147,
							0
						],
						[
							-76.64870640562594,
							42.36407747125994,
							0
						],
						[
							-76.64873840564817,
							42.36423947128862,
							0
						],
						[
							-76.6487524056613,
							42.36435647130973,
							0
						],
						[
							-76.6487564057224,
							42.36516647145957,
							0
						],
						[
							-76.64878440579754,
							42.36606247162436,
							0
						],
						[
							-76.64877840593101,
							42.36789547196405,
							0
						],
						[
							-76.64876640594949,
							42.36819747202046,
							0
						],
						[
							-76.6487714059624,
							42.3683504720486,
							0
						],
						[
							-76.64879340598333,
							42.36853847208253,
							0
						],
						[
							-76.64882640600054,
							42.36862847209785,
							0
						],
						[
							-76.64887340602056,
							42.36869547210835,
							0
						],
						[
							-76.6490434060875,
							42.36886447213273,
							0
						],
						[
							-76.64923540616142,
							42.36903247215604,
							0
						],
						[
							-76.64942040623149,
							42.36917847217557,
							0
						],
						[
							-76.64970040633581,
							42.36937647220085,
							0
						],
						[
							-76.64990940641621,
							42.36955847222606,
							0
						],
						[
							-76.65010940649438,
							42.36974947225331,
							0
						],
						[
							-76.65034840658699,
							42.36996647228378,
							0
						],
						[
							-76.65067740671527,
							42.37027647232782,
							0
						],
						[
							-76.6518064071613,
							42.37141747249322,
							0
						],
						[
							-76.65218240731102,
							42.37181347255127,
							0
						],
						[
							-76.6528944075956,
							42.3725774726638,
							0
						],
						[
							-76.65317340770767,
							42.37288447270929,
							0
						],
						[
							-76.6533554077814,
							42.37309347274059,
							0
						],
						[
							-76.65355040785963,
							42.37330647277211,
							0
						],
						[
							-76.65418040805747,
							42.37325247273653,
							0
						],
						[
							-76.6543184081005,
							42.37323647272795,
							0
						],
						[
							-76.65459640818926,
							42.37323247271591,
							0
						],
						[
							-76.65473740823467,
							42.37323547271074,
							0
						],
						[
							-76.65544340846012,
							42.3732254726802,
							0
						],
						[
							-76.65565640852776,
							42.37321747267006,
							0
						],
						[
							-76.65608640866505,
							42.37321147265148,
							0
						],
						[
							-76.6562984087324,
							42.37320347264137,
							0
						],
						[
							-76.65674940887673,
							42.37320147262269,
							0
						],
						[
							-76.65742540909255,
							42.37319147259334,
							0
						],
						[
							-76.65747440910826,
							42.37319147259136,
							0
						],
						[
							-76.65795340926151,
							42.37318847257134,
							0
						],
						[
							-76.65810440931011,
							42.37319147256576,
							0
						],
						[
							-76.65825640935859,
							42.37318847255902,
							0
						],
						[
							-76.65840740940718,
							42.37319147255344,
							0
						],
						[
							-76.65855940945573,
							42.37318947254691,
							0
						],
						[
							-76.65999440991722,
							42.37321347249303,
							0
						],
						[
							-76.66084441019026,
							42.37322347246034,
							0
						],
						[
							-76.6614914103985,
							42.37323647243645,
							0
						],
						[
							-76.66163541044514,
							42.3732434724319,
							0
						],
						[
							-76.66192541053842,
							42.37324847242103,
							0
						],
						[
							-76.66266541077468,
							42.37323747238891,
							0
						],
						[
							-76.66316441093431,
							42.37323447236807,
							0
						],
						[
							-76.66369141110329,
							42.37323647234702,
							0
						],
						[
							-76.66403241121216,
							42.37323147233222,
							0
						],
						[
							-76.66469141142186,
							42.37321247230192,
							0
						],
						[
							-76.66513541156367,
							42.37320647228276,
							0
						],
						[
							-76.66527441160768,
							42.37319947227583,
							0
						],
						[
							-76.6655524116971,
							42.37320447226544,
							0
						],
						[
							-76.66577141176838,
							42.37321947225933,
							0
						],
						[
							-76.66602041185087,
							42.37325647225604,
							0
						],
						[
							-76.66633741195774,
							42.3733284722565,
							0
						],
						[
							-76.66648941201028,
							42.37338047225993,
							0
						],
						[
							-76.66663641206151,
							42.37343647226433,
							0
						],
						[
							-76.6667364120968,
							42.37348047226842,
							0
						],
						[
							-76.66692441216414,
							42.37357647227854,
							0
						],
						[
							-76.6671064122302,
							42.37368147229058,
							0
						],
						[
							-76.66733941231527,
							42.37382247230721,
							0
						],
						[
							-76.66761441241702,
							42.37400747233028,
							0
						],
						[
							-76.66788241251732,
							42.37420247235549,
							0
						],
						[
							-76.66849441274466,
							42.37462547240891,
							0
						],
						[
							-76.66876041284192,
							42.37478847242828,
							0
						],
						[
							-76.66920241300203,
							42.37503847245658,
							0
						],
						[
							-76.66950741311133,
							42.37519547247324,
							0
						],
						[
							-76.6698024132159,
							42.37533147248645,
							0
						],
						[
							-76.66998341327867,
							42.3753964724911,
							0
						],
						[
							-76.67015041333728,
							42.37546547249708,
							0
						],
						[
							-76.67055941347955,
							42.37561747250858,
							0
						],
						[
							-76.67070541352552,
							42.37560647250062,
							0
						],
						[
							-76.6708024135568,
							42.37560947249722,
							0
						],
						[
							-76.67089841358845,
							42.37562147249557,
							0
						],
						[
							-76.67126141371101,
							42.37570647249654,
							0
						],
						[
							-76.67153541380316,
							42.37576547249631,
							0
						],
						[
							-76.67161441382936,
							42.37577747249531,
							0
						],
						[
							-76.67169441385624,
							42.37579447249522,
							0
						],
						[
							-76.67185441390934,
							42.37581947249332,
							0
						],
						[
							-76.67193541393581,
							42.37582647249132,
							0
						],
						[
							-76.67225241403773,
							42.37583147247936,
							0
						],
						[
							-76.67246441410475,
							42.37581947246853,
							0
						],
						[
							-76.67269541417684,
							42.37579347245431,
							0
						],
						[
							-76.67306741429023,
							42.37571547242477,
							0
						],
						[
							-76.67345541440683,
							42.37561147238974,
							0
						],
						[
							-76.67359741444885,
							42.37556447237525,
							0
						],
						[
							-76.67452341471983,
							42.37521747227335,
							0
						],
						[
							-76.6747614147888,
							42.37511947224554,
							0
						],
						[
							-76.67498241485168,
							42.37501247221673,
							0
						],
						[
							-76.67508541488056,
							42.37495647220218,
							0
						],
						[
							-76.67538441496308,
							42.3747774721569,
							0
						],
						[
							-76.67582641508218,
							42.37447347208264,
							0
						],
						[
							-76.6759874151243,
							42.3743454720524,
							0
						],
						[
							-76.67610241515368,
							42.37424447202901,
							0
						],
						[
							-76.6762104151805,
							42.3741394720052,
							0
						],
						[
							-76.67651241525222,
							42.37380147193035,
							0
						],
						[
							-76.67705641538262,
							42.37320847179844,
							0
						],
						[
							-76.67711641540274,
							42.37322047179821,
							0
						],
						[
							-76.67725841544913,
							42.37323247179466,
							0
						],
						[
							-76.67764041557304,
							42.37325347178302,
							0
						],
						[
							-76.67825041576977,
							42.37327147176154,
							0
						],
						[
							-76.67848241584386,
							42.37326847175154,
							0
						],
						[
							-76.67859641588059,
							42.37327147174747,
							0
						],
						[
							-76.6790744160332,
							42.37326447172672,
							0
						],
						[
							-76.67919341607082,
							42.3732574717206,
							0
						],
						[
							-76.67977241625569,
							42.37324947169556,
							0
						],
						[
							-76.67988241629048,
							42.37324347168998,
							0
						],
						[
							-76.68010741636233,
							42.37324047168028,
							0
						],
						[
							-76.68021441639608,
							42.37323347167461,
							0
						],
						[
							-76.68031941642965,
							42.37323247167017,
							0
						],
						[
							-76.68053341649731,
							42.37322047165922,
							0
						],
						[
							-76.68074741656558,
							42.37321647164978,
							0
						],
						[
							-76.68126341673232,
							42.3732364716325,
							0
						],
						[
							-76.68142341678343,
							42.37323447162564,
							0
						],
						[
							-76.68147641679997,
							42.37322847162237,
							0
						],
						[
							-76.68152941681696,
							42.37322847162021,
							0
						],
						[
							-76.68167441686221,
							42.37321247161136,
							0
						],
						[
							-76.68176641689058,
							42.37319747160483,
							0
						],
						[
							-76.68191241693654,
							42.37318647159686,
							0
						],
						[
							-76.68207441698922,
							42.37319747159231,
							0
						],
						[
							-76.6822454170455,
							42.37321747158904,
							0
						],
						[
							-76.6824814171242,
							42.37325947158723,
							0
						],
						[
							-76.68250341713154,
							42.37326347158707,
							0
						],
						[
							-76.68256741715263,
							42.37327147158595,
							0
						],
						[
							-76.68272341720312,
							42.3732784715809,
							0
						],
						[
							-76.68289441725737,
							42.37327147157265,
							0
						],
						[
							-76.6830794173147,
							42.3732454715603,
							0
						],
						[
							-76.68333741739409,
							42.37320147154167,
							0
						],
						[
							-76.6834584174324,
							42.37319547153563,
							0
						],
						[
							-76.68358141747233,
							42.37320247153193,
							0
						],
						[
							-76.68364141749149,
							42.3732014715293,
							0
						],
						[
							-76.68370441751196,
							42.37320547152747,
							0
						],
						[
							-76.68411741764379,
							42.37319947150958,
							0
						],
						[
							-76.68430341770345,
							42.37320047150219,
							0
						],
						[
							-76.68505941794547,
							42.37319847147107,
							0
						],
						[
							-76.68517941798414,
							42.37320147146674,
							0
						],
						[
							-76.6852984180221,
							42.37319947146154,
							0
						],
						[
							-76.68541741806044,
							42.37320247145724,
							0
						],
						[
							-76.68564741813388,
							42.37319947144734,
							0
						],
						[
							-76.68584641819778,
							42.3732014714396,
							0
						],
						[
							-76.68594041822797,
							42.37320247143597,
							0
						],
						[
							-76.68594341822902,
							42.37320347143601,
							0
						],
						[
							-76.68598241824151,
							42.37320347143443,
							0
						],
						[
							-76.68609541827755,
							42.37320147142947,
							0
						],
						[
							-76.68662941844934,
							42.37321147140961,
							0
						],
						[
							-76.6874034186991,
							42.37323647138275,
							0
						],
						[
							-76.68823341896439,
							42.37322847134748,
							0
						],
						[
							-76.69013841957464,
							42.37322947127016,
							0
						],
						[
							-76.69042241966518,
							42.3732234712575,
							0
						],
						[
							-76.69042341966549,
							42.37322347125745,
							0
						],
						[
							-76.6905544197076,
							42.3732254712525,
							0
						],
						[
							-76.69052641943283,
							42.36963347058869,
							0
						],
						[
							-76.69052641942868,
							42.36957747057831,
							0
						],
						[
							-76.69048341896874,
							42.36354646946347,
							0
						],
						[
							-76.6904604187503,
							42.36069246893592,
							0
						],
						[
							-76.69041041824157,
							42.35402846770388,
							0
						],
						[
							-76.69041141823864,
							42.35398446769568,
							0
						],
						[
							-76.69038441795858,
							42.35031246701667,
							0
						],
						[
							-76.69028441692505,
							42.3367564645094,
							0
						],
						[
							-76.69026141668634,
							42.33362346392976,
							0
						],
						[
							-76.69018041641169,
							42.33025446330873,
							0
						],
						[
							-76.6902364163834,
							42.32962846319044,
							0
						],
						[
							-76.69024441630343,
							42.32851046298292,
							0
						],
						[
							-76.69019241611902,
							42.32623746256378,
							0
						],
						[
							-76.69016641606427,
							42.32560846244824,
							0
						],
						[
							-76.69015341599265,
							42.32469446227935,
							0
						],
						[
							-76.69007641589052,
							42.32364446208787,
							0
						],
						[
							-76.68972941502749,
							42.31345146021237,
							0
						],
						[
							-76.69107041545452,
							42.31342046015213,
							0
						],
						[
							-76.691071415448,
							42.31332746013485,
							0
						],
						[
							-76.69114941506312,
							42.3077694591011,
							0
						],
						[
							-76.6911544150303,
							42.3073024590143,
							0
						],
						[
							-76.69116041501017,
							42.30700345895862,
							0
						],
						[
							-76.6911604150098,
							42.30699845895769,
							0
						],
						[
							-76.69116341499851,
							42.30683245892679,
							0
						],
						[
							-76.69131941424367,
							42.29591245689514,
							0
						],
						[
							-76.69132941419257,
							42.29517545675805,
							0
						],
						[
							-76.69133041418993,
							42.29513545675057,
							0
						],
						[
							-76.6913874138996,
							42.29094645597119,
							0
						],
						[
							-76.69139641386221,
							42.29039945586933,
							0
						],
						[
							-76.69140541382207,
							42.28981545576062,
							0
						],
						[
							-76.69140841380322,
							42.28954645571059,
							0
						],
						[
							-76.69141941374731,
							42.28873945556041,
							0
						],
						[
							-76.69142441372917,
							42.28847145551049,
							0
						],
						[
							-76.69145441358266,
							42.28635145511594,
							0
						],
						[
							-76.69140841341802,
							42.28431545474004,
							0
						],
						[
							-76.68964141285458,
							42.28434445481717,
							0
						],
						[
							-76.67013740658204,
							42.28394145553381,
							0
						],
						[
							-76.66793540587386,
							42.28389645561477,
							0
						],
						[
							-76.65745840250416,
							42.28368045599954,
							0
						],
						[
							-76.64589639878525,
							42.28344145642384,
							0
						],
						[
							-76.64573339873284,
							42.28343845642988,
							0
						],
						[
							-76.62707239273023,
							42.28305445711459,
							0
						],
						[
							-76.62567139227954,
							42.28302545716593,
							0
						],
						[
							-76.62556039224384,
							42.28302345717006,
							0
						],
						[
							-76.62469139196438,
							42.2830064572021,
							0
						],
						[
							-76.61930539022926,
							42.28286145739324,
							0
						],
						[
							-76.6192933903864,
							42.28505445780083,
							0
						],
						[
							-76.61926239053275,
							42.28718245819708,
							0
						],
						[
							-76.61925939056226,
							42.28759745827423,
							0
						],
						[
							-76.61926639062108,
							42.28836745841687,
							0
						],
						[
							-76.6193373908048,
							42.29055945882083,
							0
						],
						[
							-76.6193403908491,
							42.2911494589302,
							0
						],
						[
							-76.61931339088711,
							42.29178445904916,
							0
						],
						[
							-76.6192723909174,
							42.29237545916048,
							0
						],
						[
							-76.61921639094223,
							42.29295745927078,
							0
						],
						[
							-76.61920439095425,
							42.29317345931134,
							0
						],
						[
							-76.61922039099905,
							42.2937134594109,
							0
						],
						[
							-76.61926039107202,
							42.29453245956128,
							0
						],
						[
							-76.6192913911524,
							42.295491459738,
							0
						],
						[
							-76.61929039121492,
							42.2963464598967,
							0
						],
						[
							-76.61923139139957,
							42.2991164604131,
							0
						],
						[
							-76.61921839152248,
							42.30084546073443,
							0
						],
						[
							-76.61922439168956,
							42.3030924611511,
							0
						],
						[
							-76.61919639184946,
							42.30538946157839,
							0
						],
						[
							-76.61914739184141,
							42.30549346159967,
							0
						],
						[
							-76.61905639181771,
							42.3055674616171,
							0
						],
						[
							-76.61887339176387,
							42.30563246163654,
							0
						],
						[
							-76.61857539166911,
							42.3056414616503,
							0
						],
						[
							-76.61751939133438,
							42.30568846170179,
							0
						],
						[
							-76.61721639123897,
							42.30571046171815,
							0
						],
						[
							-76.61692139114678,
							42.30574146173584,
							0
						],
						[
							-76.61678039110308,
							42.30576146174526,
							0
						],
						[
							-76.61649739101605,
							42.30581046176582,
							0
						],
						[
							-76.61621939093129,
							42.30586846178782,
							0
						],
						[
							-76.61598539086054,
							42.3059254618079,
							0
						],
						[
							-76.61545839070287,
							42.30607646185726,
							0
						],
						[
							-76.61408239029117,
							42.30647046198607,
							0
						],
						[
							-76.61321439003059,
							42.30670746206521,
							0
						],
						[
							-76.61266638986663,
							42.30686446211652,
							0
						],
						[
							-76.61217338971984,
							42.3070154621645,
							0
						],
						[
							-76.61174538959092,
							42.30712646220245,
							0
						],
						[
							-76.61147438950928,
							42.30719646222639,
							0
						],
						[
							-76.61094038934803,
							42.30732946227269,
							0
						],
						[
							-76.61040538918684,
							42.30746746231998,
							0
						],
						[
							-76.60933238886452,
							42.30775746241723,
							0
						],
						[
							-76.60852738862403,
							42.3079934624936,
							0
						],
						[
							-76.60773438838775,
							42.30823446257044,
							0
						],
						[
							-76.60715838821646,
							42.30841346262695,
							0
						],
						[
							-76.60701038817287,
							42.30846546264261,
							0
						],
						[
							-76.60679238810958,
							42.30855446266794,
							0
						],
						[
							-76.606497388026,
							42.30870246270734,
							0
						],
						[
							-76.60642138800401,
							42.30873446271635,
							0
						],
						[
							-76.60634138798146,
							42.30877646272738,
							0
						],
						[
							-76.60617538793373,
							42.30885046274784,
							0
						],
						[
							-76.60592138785967,
							42.30894946277648,
							0
						],
						[
							-76.60580638782555,
							42.30898646278801,
							0
						],
						[
							-76.60556838775425,
							42.30905346281008,
							0
						],
						[
							-76.6054503877185,
							42.30908146282005,
							0
						],
						[
							-76.60533238768315,
							42.30911446283096,
							0
						],
						[
							-76.60511638761949,
							42.3091894628536,
							0
						],
						[
							-76.60491938756228,
							42.30926946287642,
							0
						],
						[
							-76.6047293875075,
							42.30935246289952,
							0
						],
						[
							-76.60445938743192,
							42.30950046293789,
							0
						],
						[
							-76.60397838730057,
							42.30980946301472,
							0
						],
						[
							-76.60313238706723,
							42.31032146314394,
							0
						],
						[
							-76.60296938702177,
							42.31041346316761,
							0
						],
						[
							-76.60281238697893,
							42.31051446319271,
							0
						],
						[
							-76.60251538689901,
							42.31072146324315,
							0
						],
						[
							-76.60246338688573,
							42.31076746325377,
							0
						],
						[
							-76.60234338685663,
							42.31089446328221,
							0
						],
						[
							-76.60227538684154,
							42.31098546330183,
							0
						],
						[
							-76.60221838683064,
							42.31108546332269,
							0
						],
						[
							-76.60217738682582,
							42.31119846334531,
							0
						],
						[
							-76.6021103868253,
							42.3114834634009,
							0
						],
						[
							-76.60210338682634,
							42.31152846340953,
							0
						],
						[
							-76.60197038687593,
							42.31278246364754,
							0
						],
						[
							-76.60193838688355,
							42.3130254636939,
							0
						],
						[
							-76.60189738688835,
							42.31326946374084,
							0
						],
						[
							-76.60182138688921,
							42.31361246380754,
							0
						],
						[
							-76.6017673868872,
							42.31382046384831,
							0
						],
						[
							-76.60168638688023,
							42.31407846389946,
							0
						],
						[
							-76.60156638686406,
							42.31438146396052,
							0
						],
						[
							-76.60138838683476,
							42.31475846403765,
							0
						],
						[
							-76.60111238678567,
							42.31529346414807,
							0
						],
						[
							-76.60095438675478,
							42.31556146420417,
							0
						],
						[
							-76.6007583867134,
							42.31585246426609,
							0
						],
						[
							-76.6005783866728,
							42.31608446431642,
							0
						],
						[
							-76.60043238663744,
							42.31623946435108,
							0
						],
						[
							-76.60007138654434,
							42.31654646442263,
							0
						],
						[
							-76.59982938648493,
							42.31679246447807,
							0
						],
						[
							-76.59976338647049,
							42.31688346449761,
							0
						],
						[
							-76.59971438646147,
							42.31697446451649,
							0
						],
						[
							-76.59964938645463,
							42.31716446455437,
							0
						],
						[
							-76.59963038645552,
							42.31725946457274,
							0
						],
						[
							-76.59962238645996,
							42.31735446459069,
							0
						],
						[
							-76.59963238649188,
							42.31774546466282,
							0
						],
						[
							-76.59961438659603,
							42.31924046494085,
							0
						],
						[
							-76.59951038680552,
							42.32254246555746,
							0
						],
						[
							-76.5994953868544,
							42.32327246569344,
							0
						],
						[
							-76.59947238691593,
							42.32420946586816,
							0
						],
						[
							-76.59943238698035,
							42.32525946606448,
							0
						],
						[
							-76.5994143870607,
							42.32643046628237,
							0
						],
						[
							-76.59937638712107,
							42.32741646646676,
							0
						],
						[
							-76.59937038719139,
							42.32839846664908,
							0
						],
						[
							-76.59938538725446,
							42.32919046679534,
							0
						],
						[
							-76.59938238729556,
							42.32976246690152,
							0
						],
						[
							-76.59938238730388,
							42.3298754669225,
							0
						],
						[
							-76.59935938733955,
							42.33046046703188,
							0
						],
						[
							-76.59931738736957,
							42.33105146714317,
							0
						],
						[
							-76.59927938739057,
							42.33150246722833,
							0
						],
						[
							-76.59927138742576,
							42.33201546732377,
							0
						],
						[
							-76.59929038744443,
							42.3321864673547,
							0
						],
						[
							-76.59932938746782,
							42.33233446738056,
							0
						],
						[
							-76.599383387496,
							42.33248246740581,
							0
						],
						[
							-76.59944938752804,
							42.33263046743058,
							0
						],
						[
							-76.59955538757548,
							42.33281346746022,
							0
						],
						[
							-76.59968238762923,
							42.33299146748807,
							0
						],
						[
							-76.60003538777609,
							42.3334504675589,
							0
						],
						[
							-76.60026838787171,
							42.33373546760229,
							0
						],
						[
							-76.60064338802422,
							42.33417546766867,
							0
						],
						[
							-76.60133938830519,
							42.33496346778658,
							0
						],
						[
							-76.60160538841366,
							42.33527946783437,
							0
						],
						[
							-76.60200138857519,
							42.33575046790563,
							0
						],
						[
							-76.6026093888217,
							42.33645346801135,
							0
						],
						[
							-76.60272038886744,
							42.33659146803242,
							0
						],
						[
							-76.6028253889116,
							42.33673446805469,
							0
						],
						[
							-76.60297838897769,
							42.33696646809149,
							0
						],
						[
							-76.60306838901838,
							42.3371274681177,
							0
						],
						[
							-76.6031053890358,
							42.33720346813028,
							0
						],
						[
							-76.60315438906174,
							42.33734246815407,
							0
						],
						[
							-76.60320138909263,
							42.33755746819202,
							0
						],
						[
							-76.60323038911451,
							42.33772846822254,
							0
						],
						[
							-76.60326938916941,
							42.33830446832774,
							0
						],
						[
							-76.60329738919958,
							42.33859246838,
							0
						],
						[
							-76.60329938921244,
							42.3387584684107,
							0
						],
						[
							-76.60327438922504,
							42.33903846846362,
							0
						],
						[
							-76.60317938923775,
							42.33962446857609,
							0
						],
						[
							-76.60316438924295,
							42.3397604686019,
							0
						],
						[
							-76.60304338935975,
							42.34187346899848,
							0
						],
						[
							-76.60290838957695,
							42.34541046965954,
							0
						],
						[
							-76.60289538959039,
							42.34564946970438,
							0
						],
						[
							-76.60282738964159,
							42.34664046989079,
							0
						],
						[
							-76.60276838967086,
							42.34729447001439,
							0
						],
						[
							-76.60267638969816,
							42.34806547016099,
							0
						],
						[
							-76.60254138971943,
							42.34894147032883,
							0
						],
						[
							-76.60241738974483,
							42.34982547049768,
							0
						],
						[
							-76.60210238977726,
							42.35163547084587,
							0
						],
						[
							-76.60190438980028,
							42.35280947107143,
							0
						],
						[
							-76.60184738980958,
							42.35318347114307,
							0
						],
						[
							-76.6017923898156,
							42.35350447120477,
							0
						],
						[
							-76.60174238981651,
							42.35373447124942,
							0
						],
						[
							-76.60156738980245,
							42.35430447136213,
							0
						],
						[
							-76.6014863897888,
							42.35447147139636,
							0
						],
						[
							-76.60124738973468,
							42.35477647146256,
							0
						],
						[
							-76.60117038971578,
							42.35485447148014,
							0
						],
						[
							-76.60102738968268,
							42.35502747151799,
							0
						],
						[
							-76.60090138965508,
							42.35520047155514,
							0
						],
						[
							-76.60074938962376,
							42.35543647160504,
							0
						],
						[
							-76.6006653896079,
							42.35558647163623,
							0
						],
						[
							-76.60059738959717,
							42.3557364716668,
							0
						],
						[
							-76.60056238959295,
							42.35583147168582,
							0
						],
						[
							-76.60053438959098,
							42.35592647170454,
							0
						],
						[
							-76.60049538959278,
							42.35612047174207,
							0
						],
						[
							-76.60046738959772,
							42.35630947177823,
							0
						],
						[
							-76.60045538960722,
							42.35649047181227,
							0
						],
						[
							-76.60045438961353,
							42.35658047182897,
							0
						],
						[
							-76.6004613896426,
							42.35694447189614,
							0
						],
						[
							-76.60046838965089,
							42.35702647191103,
							0
						],
						[
							-76.60048238966723,
							42.35718747194029,
							0
						],
						[
							-76.6004923896837,
							42.35736747197325,
							0
						],
						[
							-76.60049038969072,
							42.3574714719926,
							0
						],
						[
							-76.60045438970076,
							42.35776447204835,
							0
						],
						[
							-76.60040938970064,
							42.35795847208612,
							0
						],
						[
							-76.60035238969543,
							42.35813547212123,
							0
						],
						[
							-76.6002823896853,
							42.35830247215502,
							0
						],
						[
							-76.60015338966174,
							42.35854347220487,
							0
						],
						[
							-76.60008338964735,
							42.35865247222793,
							0
						],
						[
							-76.59992338961146,
							42.35886147227313,
							0
						],
						[
							-76.59973938956762,
							42.35906647231857,
							0
						],
						[
							-76.59956038952272,
							42.35923547235712,
							0
						],
						[
							-76.59941238948406,
							42.35935447238517,
							0
						],
						[
							-76.59920738942995,
							42.35951147242258,
							0
						],
						[
							-76.59902638938073,
							42.35963047245196,
							0
						],
						[
							-76.59875138930417,
							42.35978747249219,
							0
						],
						[
							-76.59959638960382,
							42.36017947253057,
							0
						],
						[
							-76.59969338963822,
							42.36022447253497,
							0
						],
						[
							-76.59953538959635,
							42.36034347256343,
							0
						],
						[
							-76.59937038955265,
							42.36046747259311,
							0
						],
						[
							-76.59921138951083,
							42.36059147262251,
							0
						],
						[
							-76.59905438946929,
							42.36071047265093,
							0
						],
						[
							-76.59889038942624,
							42.36083947268145,
							0
						],
						[
							-76.59854038933368,
							42.36110547274496,
							0
						],
						[
							-76.5982283892486,
							42.36130747279502,
							0
						],
						[
							-76.59811638921846,
							42.36138547281401,
							0
						],
						[
							-76.5976453890886,
							42.36167147288609,
							0
						],
						[
							-76.59715338895042,
							42.36193547295495,
							0
						],
						[
							-76.59697638890017,
							42.36202347297841,
							0
						],
						[
							-76.59661338879617,
							42.36219047302406,
							0
						],
						[
							-76.59625738869336,
							42.36234347306686,
							0
						],
						[
							-76.59588138858476,
							42.36250447311193,
							0
						],
						[
							-76.59578838855789,
							42.36254447312307,
							0
						],
						[
							-76.59495538831564,
							42.36287947321893,
							0
						],
						[
							-76.59467838823485,
							42.36298747325015,
							0
						],
						[
							-76.59414838808115,
							42.3632064733122,
							0
						],
						[
							-76.59389438800795,
							42.36331747334307,
							0
						],
						[
							-76.59364138793444,
							42.3634204733724,
							0
						],
						[
							-76.59339038786227,
							42.36353247340333,
							0
						],
						[
							-76.59068938707875,
							42.36464547371898,
							0
						],
						[
							-76.59054738703767,
							42.36470547373587,
							0
						],
						[
							-76.59039338699318,
							42.36477147375432,
							0
						],
						[
							-76.58979838682033,
							42.36501347382328,
							0
						],
						[
							-76.58950238673476,
							42.36513947385862,
							0
						],
						[
							-76.58768938620905,
							42.36588947407103,
							0
						],
						[
							-76.58738838612216,
							42.36601947410733,
							0
						],
						[
							-76.58657438588581,
							42.366352474202,
							0
						],
						[
							-76.58644538584848,
							42.36640647421724,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>56</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090018003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>73406577</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>192724</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.3448002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.6458515</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090018003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090018003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1035</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>432</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>18138.87</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>75</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>39</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.51</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.27</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.99</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>28077</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>27739</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>29051</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>15255</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14915</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15803</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8884</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8616</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9206</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6367</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6290</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6588</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>8</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>9</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>6</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.15</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.02</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2218</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>72</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2388</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>239</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>5</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>3669</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1341</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1446</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>913</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>80</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00056"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.59054738703767,
							42.36470547373587,
							0
						],
						[
							-76.59068938707875,
							42.36464547371898,
							0
						],
						[
							-76.59339038786227,
							42.36353247340333,
							0
						],
						[
							-76.59364138793444,
							42.3634204733724,
							0
						],
						[
							-76.59389438800795,
							42.36331747334307,
							0
						],
						[
							-76.59414838808115,
							42.3632064733122,
							0
						],
						[
							-76.59467838823485,
							42.36298747325015,
							0
						],
						[
							-76.59495538831564,
							42.36287947321893,
							0
						],
						[
							-76.59578838855789,
							42.36254447312307,
							0
						],
						[
							-76.59588138858476,
							42.36250447311193,
							0
						],
						[
							-76.59625738869336,
							42.36234347306686,
							0
						],
						[
							-76.59661338879617,
							42.36219047302406,
							0
						],
						[
							-76.59697638890017,
							42.36202347297841,
							0
						],
						[
							-76.59715338895042,
							42.36193547295495,
							0
						],
						[
							-76.5976453890886,
							42.36167147288609,
							0
						],
						[
							-76.59811638921846,
							42.36138547281401,
							0
						],
						[
							-76.5982283892486,
							42.36130747279502,
							0
						],
						[
							-76.59854038933368,
							42.36110547274496,
							0
						],
						[
							-76.59889038942624,
							42.36083947268145,
							0
						],
						[
							-76.59905438946929,
							42.36071047265093,
							0
						],
						[
							-76.59921138951083,
							42.36059147262251,
							0
						],
						[
							-76.59937038955265,
							42.36046747259311,
							0
						],
						[
							-76.59953538959635,
							42.36034347256343,
							0
						],
						[
							-76.59969338963822,
							42.36022447253497,
							0
						],
						[
							-76.59959638960382,
							42.36017947253057,
							0
						],
						[
							-76.59875138930417,
							42.35978747249219,
							0
						],
						[
							-76.59902638938073,
							42.35963047245196,
							0
						],
						[
							-76.59920738942995,
							42.35951147242258,
							0
						],
						[
							-76.59941238948406,
							42.35935447238517,
							0
						],
						[
							-76.59956038952272,
							42.35923547235712,
							0
						],
						[
							-76.59973938956762,
							42.35906647231857,
							0
						],
						[
							-76.59992338961146,
							42.35886147227313,
							0
						],
						[
							-76.60008338964735,
							42.35865247222793,
							0
						],
						[
							-76.60015338966174,
							42.35854347220487,
							0
						],
						[
							-76.6002823896853,
							42.35830247215502,
							0
						],
						[
							-76.60035238969543,
							42.35813547212123,
							0
						],
						[
							-76.60040938970064,
							42.35795847208612,
							0
						],
						[
							-76.60045438970076,
							42.35776447204835,
							0
						],
						[
							-76.60049038969072,
							42.3574714719926,
							0
						],
						[
							-76.6004923896837,
							42.35736747197325,
							0
						],
						[
							-76.60048238966723,
							42.35718747194029,
							0
						],
						[
							-76.60046838965089,
							42.35702647191103,
							0
						],
						[
							-76.6004613896426,
							42.35694447189614,
							0
						],
						[
							-76.60045438961353,
							42.35658047182897,
							0
						],
						[
							-76.60045538960722,
							42.35649047181227,
							0
						],
						[
							-76.60046738959772,
							42.35630947177823,
							0
						],
						[
							-76.60049538959278,
							42.35612047174207,
							0
						],
						[
							-76.60053438959098,
							42.35592647170454,
							0
						],
						[
							-76.60056238959295,
							42.35583147168582,
							0
						],
						[
							-76.60059738959717,
							42.3557364716668,
							0
						],
						[
							-76.6006653896079,
							42.35558647163623,
							0
						],
						[
							-76.60074938962376,
							42.35543647160504,
							0
						],
						[
							-76.60090138965508,
							42.35520047155514,
							0
						],
						[
							-76.60102738968268,
							42.35502747151799,
							0
						],
						[
							-76.60117038971578,
							42.35485447148014,
							0
						],
						[
							-76.60124738973468,
							42.35477647146256,
							0
						],
						[
							-76.6014863897888,
							42.35447147139636,
							0
						],
						[
							-76.60156738980245,
							42.35430447136213,
							0
						],
						[
							-76.60174238981651,
							42.35373447124942,
							0
						],
						[
							-76.6017923898156,
							42.35350447120477,
							0
						],
						[
							-76.60184738980958,
							42.35318347114307,
							0
						],
						[
							-76.60190438980028,
							42.35280947107143,
							0
						],
						[
							-76.60210238977726,
							42.35163547084587,
							0
						],
						[
							-76.60241738974483,
							42.34982547049768,
							0
						],
						[
							-76.60254138971943,
							42.34894147032883,
							0
						],
						[
							-76.60267638969816,
							42.34806547016099,
							0
						],
						[
							-76.60276838967086,
							42.34729447001439,
							0
						],
						[
							-76.60282738964159,
							42.34664046989079,
							0
						],
						[
							-76.60289538959039,
							42.34564946970438,
							0
						],
						[
							-76.60290838957695,
							42.34541046965954,
							0
						],
						[
							-76.60304338935975,
							42.34187346899848,
							0
						],
						[
							-76.60316438924295,
							42.3397604686019,
							0
						],
						[
							-76.60317938923775,
							42.33962446857609,
							0
						],
						[
							-76.60327438922504,
							42.33903846846362,
							0
						],
						[
							-76.60329938921244,
							42.3387584684107,
							0
						],
						[
							-76.60329738919958,
							42.33859246838,
							0
						],
						[
							-76.60326938916941,
							42.33830446832774,
							0
						],
						[
							-76.60323038911451,
							42.33772846822254,
							0
						],
						[
							-76.60320138909263,
							42.33755746819202,
							0
						],
						[
							-76.60315438906174,
							42.33734246815407,
							0
						],
						[
							-76.6031053890358,
							42.33720346813028,
							0
						],
						[
							-76.60306838901838,
							42.3371274681177,
							0
						],
						[
							-76.60297838897769,
							42.33696646809149,
							0
						],
						[
							-76.6028253889116,
							42.33673446805469,
							0
						],
						[
							-76.60272038886744,
							42.33659146803242,
							0
						],
						[
							-76.6026093888217,
							42.33645346801135,
							0
						],
						[
							-76.60200138857519,
							42.33575046790563,
							0
						],
						[
							-76.60160538841366,
							42.33527946783437,
							0
						],
						[
							-76.60133938830519,
							42.33496346778658,
							0
						],
						[
							-76.60064338802422,
							42.33417546766867,
							0
						],
						[
							-76.60026838787171,
							42.33373546760229,
							0
						],
						[
							-76.60003538777609,
							42.3334504675589,
							0
						],
						[
							-76.59968238762923,
							42.33299146748807,
							0
						],
						[
							-76.59955538757548,
							42.33281346746022,
							0
						],
						[
							-76.59944938752804,
							42.33263046743058,
							0
						],
						[
							-76.599383387496,
							42.33248246740581,
							0
						],
						[
							-76.59932938746782,
							42.33233446738056,
							0
						],
						[
							-76.59929038744443,
							42.3321864673547,
							0
						],
						[
							-76.59927138742576,
							42.33201546732377,
							0
						],
						[
							-76.59927938739057,
							42.33150246722833,
							0
						],
						[
							-76.59931738736957,
							42.33105146714317,
							0
						],
						[
							-76.59935938733955,
							42.33046046703188,
							0
						],
						[
							-76.59938238730388,
							42.3298754669225,
							0
						],
						[
							-76.59938238729556,
							42.32976246690152,
							0
						],
						[
							-76.59938538725446,
							42.32919046679534,
							0
						],
						[
							-76.59937038719139,
							42.32839846664908,
							0
						],
						[
							-76.59937638712107,
							42.32741646646676,
							0
						],
						[
							-76.5994143870607,
							42.32643046628237,
							0
						],
						[
							-76.59943238698035,
							42.32525946606448,
							0
						],
						[
							-76.59947238691593,
							42.32420946586816,
							0
						],
						[
							-76.5994953868544,
							42.32327246569344,
							0
						],
						[
							-76.59951038680552,
							42.32254246555746,
							0
						],
						[
							-76.59961438659603,
							42.31924046494085,
							0
						],
						[
							-76.59963238649188,
							42.31774546466282,
							0
						],
						[
							-76.59962238645996,
							42.31735446459069,
							0
						],
						[
							-76.59963038645552,
							42.31725946457274,
							0
						],
						[
							-76.59964938645463,
							42.31716446455437,
							0
						],
						[
							-76.59971438646147,
							42.31697446451649,
							0
						],
						[
							-76.59976338647049,
							42.31688346449761,
							0
						],
						[
							-76.59982938648493,
							42.31679246447807,
							0
						],
						[
							-76.60007138654434,
							42.31654646442263,
							0
						],
						[
							-76.60043238663744,
							42.31623946435108,
							0
						],
						[
							-76.6005783866728,
							42.31608446431642,
							0
						],
						[
							-76.6007583867134,
							42.31585246426609,
							0
						],
						[
							-76.60095438675478,
							42.31556146420417,
							0
						],
						[
							-76.60111238678567,
							42.31529346414807,
							0
						],
						[
							-76.60138838683476,
							42.31475846403765,
							0
						],
						[
							-76.60156638686406,
							42.31438146396052,
							0
						],
						[
							-76.60168638688023,
							42.31407846389946,
							0
						],
						[
							-76.6017673868872,
							42.31382046384831,
							0
						],
						[
							-76.60182138688921,
							42.31361246380754,
							0
						],
						[
							-76.60189738688835,
							42.31326946374084,
							0
						],
						[
							-76.60193838688355,
							42.3130254636939,
							0
						],
						[
							-76.60197038687593,
							42.31278246364754,
							0
						],
						[
							-76.60210338682634,
							42.31152846340953,
							0
						],
						[
							-76.6021103868253,
							42.3114834634009,
							0
						],
						[
							-76.60217738682582,
							42.31119846334531,
							0
						],
						[
							-76.60221838683064,
							42.31108546332269,
							0
						],
						[
							-76.60227538684154,
							42.31098546330183,
							0
						],
						[
							-76.60234338685663,
							42.31089446328221,
							0
						],
						[
							-76.60246338688573,
							42.31076746325377,
							0
						],
						[
							-76.60251538689901,
							42.31072146324315,
							0
						],
						[
							-76.60281238697893,
							42.31051446319271,
							0
						],
						[
							-76.60296938702177,
							42.31041346316761,
							0
						],
						[
							-76.60313238706723,
							42.31032146314394,
							0
						],
						[
							-76.60397838730057,
							42.30980946301472,
							0
						],
						[
							-76.60445938743192,
							42.30950046293789,
							0
						],
						[
							-76.6047293875075,
							42.30935246289952,
							0
						],
						[
							-76.60491938756228,
							42.30926946287642,
							0
						],
						[
							-76.60511638761949,
							42.3091894628536,
							0
						],
						[
							-76.60533238768315,
							42.30911446283096,
							0
						],
						[
							-76.6054503877185,
							42.30908146282005,
							0
						],
						[
							-76.60556838775425,
							42.30905346281008,
							0
						],
						[
							-76.60580638782555,
							42.30898646278801,
							0
						],
						[
							-76.60592138785967,
							42.30894946277648,
							0
						],
						[
							-76.60617538793373,
							42.30885046274784,
							0
						],
						[
							-76.60634138798146,
							42.30877646272738,
							0
						],
						[
							-76.60642138800401,
							42.30873446271635,
							0
						],
						[
							-76.606497388026,
							42.30870246270734,
							0
						],
						[
							-76.60679238810958,
							42.30855446266794,
							0
						],
						[
							-76.60701038817287,
							42.30846546264261,
							0
						],
						[
							-76.60715838821646,
							42.30841346262695,
							0
						],
						[
							-76.60773438838775,
							42.30823446257044,
							0
						],
						[
							-76.60852738862403,
							42.3079934624936,
							0
						],
						[
							-76.60933238886452,
							42.30775746241723,
							0
						],
						[
							-76.61040538918684,
							42.30746746231998,
							0
						],
						[
							-76.61094038934803,
							42.30732946227269,
							0
						],
						[
							-76.61147438950928,
							42.30719646222639,
							0
						],
						[
							-76.61174538959092,
							42.30712646220245,
							0
						],
						[
							-76.61217338971984,
							42.3070154621645,
							0
						],
						[
							-76.61266638986663,
							42.30686446211652,
							0
						],
						[
							-76.61321439003059,
							42.30670746206521,
							0
						],
						[
							-76.61408239029117,
							42.30647046198607,
							0
						],
						[
							-76.61545839070287,
							42.30607646185726,
							0
						],
						[
							-76.61598539086054,
							42.3059254618079,
							0
						],
						[
							-76.61621939093129,
							42.30586846178782,
							0
						],
						[
							-76.61649739101605,
							42.30581046176582,
							0
						],
						[
							-76.61678039110308,
							42.30576146174526,
							0
						],
						[
							-76.61692139114678,
							42.30574146173584,
							0
						],
						[
							-76.61721639123897,
							42.30571046171815,
							0
						],
						[
							-76.61751939133438,
							42.30568846170179,
							0
						],
						[
							-76.61857539166911,
							42.3056414616503,
							0
						],
						[
							-76.61887339176387,
							42.30563246163654,
							0
						],
						[
							-76.61905639181771,
							42.3055674616171,
							0
						],
						[
							-76.61914739184141,
							42.30549346159967,
							0
						],
						[
							-76.61919639184946,
							42.30538946157839,
							0
						],
						[
							-76.61922439168956,
							42.3030924611511,
							0
						],
						[
							-76.61921839152248,
							42.30084546073443,
							0
						],
						[
							-76.61923139139957,
							42.2991164604131,
							0
						],
						[
							-76.61929039121492,
							42.2963464598967,
							0
						],
						[
							-76.6192913911524,
							42.295491459738,
							0
						],
						[
							-76.61926039107202,
							42.29453245956128,
							0
						],
						[
							-76.61922039099905,
							42.2937134594109,
							0
						],
						[
							-76.61920439095425,
							42.29317345931134,
							0
						],
						[
							-76.61921639094223,
							42.29295745927078,
							0
						],
						[
							-76.6192723909174,
							42.29237545916048,
							0
						],
						[
							-76.61931339088711,
							42.29178445904916,
							0
						],
						[
							-76.6193403908491,
							42.2911494589302,
							0
						],
						[
							-76.6193373908048,
							42.29055945882083,
							0
						],
						[
							-76.61926639062108,
							42.28836745841687,
							0
						],
						[
							-76.61925939056226,
							42.28759745827423,
							0
						],
						[
							-76.61926239053275,
							42.28718245819708,
							0
						],
						[
							-76.6192933903864,
							42.28505445780083,
							0
						],
						[
							-76.61930539022926,
							42.28286145739324,
							0
						],
						[
							-76.61868839003131,
							42.2828564574173,
							0
						],
						[
							-76.60913638696807,
							42.28279145779185,
							0
						],
						[
							-76.59568038265253,
							42.28269945831921,
							0
						],
						[
							-76.59556738261627,
							42.28269845832357,
							0
						],
						[
							-76.5955143825993,
							42.28269845832572,
							0
						],
						[
							-76.58458737909528,
							42.28263245875535,
							0
						],
						[
							-76.58257737845078,
							42.28262145883456,
							0
						],
						[
							-76.57961637750121,
							42.28260345895092,
							0
						],
						[
							-76.57949137746081,
							42.28259845895506,
							0
						],
						[
							-76.57946537746152,
							42.28272145897895,
							0
						],
						[
							-76.5793913774494,
							42.28287945901129,
							0
						],
						[
							-76.5793143774347,
							42.28301545903965,
							0
						],
						[
							-76.57919937741056,
							42.28318845907643,
							0
						],
						[
							-76.57902637737809,
							42.28350145914153,
							0
						],
						[
							-76.57872937731011,
							42.28387145922223,
							0
						],
						[
							-76.5785213772688,
							42.2842164592947,
							0
						],
						[
							-76.57836137724048,
							42.28452945935928,
							0
						],
						[
							-76.57804237718027,
							42.28510145947838,
							0
						],
						[
							-76.57792437716176,
							42.28536445953198,
							0
						],
						[
							-76.57785937715423,
							42.2855454595682,
							0
						],
						[
							-76.5778173771539,
							42.28572445960315,
							0
						],
						[
							-76.5777793771583,
							42.28595045964664,
							0
						],
						[
							-76.57771137715835,
							42.28624845970471,
							0
						],
						[
							-76.5776743771525,
							42.28633045972143,
							0
						],
						[
							-76.57736237708825,
							42.28681645982427,
							0
						],
						[
							-76.57716537704215,
							42.28704845987531,
							0
						],
						[
							-76.57692637698247,
							42.28727845992768,
							0
						],
						[
							-76.57670437692414,
							42.28745245996897,
							0
						],
						[
							-76.57658437689209,
							42.28753945998997,
							0
						],
						[
							-76.57650637687179,
							42.287603460005,
							0
						],
						[
							-76.57635137683388,
							42.28776346004096,
							0
						],
						[
							-76.57618937679571,
							42.28795046008223,
							0
						],
						[
							-76.57595937674009,
							42.2881964601372,
							0
						],
						[
							-76.57580437670511,
							42.28839646018061,
							0
						],
						[
							-76.57561737666391,
							42.2886514602355,
							0
						],
						[
							-76.57540137662002,
							42.28899646030827,
							0
						],
						[
							-76.57532637660634,
							42.28913746033747,
							0
						],
						[
							-76.57520737658159,
							42.2893194603761,
							0
						],
						[
							-76.57509937655998,
							42.28949646041332,
							0
						],
						[
							-76.57492837652288,
							42.28973746046498,
							0
						],
						[
							-76.57483137650179,
							42.28987346049413,
							0
						],
						[
							-76.57445737641441,
							42.29031546059132,
							0
						],
						[
							-76.57418637635006,
							42.29062146065909,
							0
						],
						[
							-76.57396637629961,
							42.29089446071865,
							0
						],
						[
							-76.57360837622163,
							42.29139446082593,
							0
						],
						[
							-76.57318437613313,
							42.29203946096281,
							0
						],
						[
							-76.57301637610095,
							42.29233446102437,
							0
						],
						[
							-76.57277337605207,
							42.29272946110753,
							0
						],
						[
							-76.57259037601649,
							42.29304346117321,
							0
						],
						[
							-76.57248137599817,
							42.29326946121957,
							0
						],
						[
							-76.5724123759897,
							42.29345546125689,
							0
						],
						[
							-76.57239337599219,
							42.29357246127938,
							0
						],
						[
							-76.5723853759999,
							42.29371246130568,
							0
						],
						[
							-76.57240437603465,
							42.2941034613775,
							0
						],
						[
							-76.57242637606122,
							42.29436946142597,
							0
						],
						[
							-76.57243737608351,
							42.29462546147306,
							0
						],
						[
							-76.57245037609347,
							42.2947044614872,
							0
						],
						[
							-76.57246737610859,
							42.29483646151102,
							0
						],
						[
							-76.57251237614574,
							42.29514646156674,
							0
						],
						[
							-76.57256337617858,
							42.29537146160644,
							0
						],
						[
							-76.57260737620919,
							42.29559646164643,
							0
						],
						[
							-76.57264037623551,
							42.29581146168501,
							0
						],
						[
							-76.5726783762609,
							42.2959914617169,
							0
						],
						[
							-76.57275037632218,
							42.29651246181067,
							0
						],
						[
							-76.5727803763562,
							42.29684546187128,
							0
						],
						[
							-76.57281837643441,
							42.29774546203679,
							0
						],
						[
							-76.57281737646151,
							42.29811946210625,
							0
						],
						[
							-76.57276837650069,
							42.29886746224705,
							0
						],
						[
							-76.57271537653229,
							42.29952946237208,
							0
						],
						[
							-76.57265837655606,
							42.30010246248072,
							0
						],
						[
							-76.5726523765667,
							42.30027346251271,
							0
						],
						[
							-76.57271337664764,
							42.30111046266559,
							0
						],
						[
							-76.57277837672092,
							42.30182546279566,
							0
						],
						[
							-76.57285837684128,
							42.30311646303201,
							0
						],
						[
							-76.57290137693003,
							42.30413846321995,
							0
						],
						[
							-76.57296037701792,
							42.30507846339202,
							0
						],
						[
							-76.57297037703934,
							42.3053264634376,
							0
						],
						[
							-76.57296737707573,
							42.3058354635322,
							0
						],
						[
							-76.57295837708833,
							42.30604646357171,
							0
						],
						[
							-76.57296037711085,
							42.30634446362693,
							0
						],
						[
							-76.5729803771383,
							42.30663146367939,
							0
						],
						[
							-76.57302037716602,
							42.30683446371544,
							0
						],
						[
							-76.57316137724501,
							42.30729546379526,
							0
						],
						[
							-76.57328437730548,
							42.30758246384356,
							0
						],
						[
							-76.57336437734095,
							42.30771646386517,
							0
						],
						[
							-76.5735253774102,
							42.3079574639034,
							0
						],
						[
							-76.57368537747719,
							42.30817146393664,
							0
						],
						[
							-76.57394337758367,
							42.30849646398651,
							0
						],
						[
							-76.57444937779019,
							42.30910146407831,
							0
						],
						[
							-76.57481037793885,
							42.3095514641472,
							0
						],
						[
							-76.57494737799685,
							42.30974346417728,
							0
						],
						[
							-76.57509537806128,
							42.30997546421435,
							0
						],
						[
							-76.5752173781171,
							42.31020346425172,
							0
						],
						[
							-76.57525737813785,
							42.31031146427012,
							0
						],
						[
							-76.57536437819313,
							42.31059746431887,
							0
						],
						[
							-76.57551837827504,
							42.31104146439501,
							0
						],
						[
							-76.5756373783365,
							42.31135946444922,
							0
						],
						[
							-76.57573537838202,
							42.31155146448088,
							0
						],
						[
							-76.57585537843491,
							42.31174846451258,
							0
						],
						[
							-76.57604337851143,
							42.31197046454616,
							0
						],
						[
							-76.57617937856514,
							42.31210846456627,
							0
						],
						[
							-76.57636337863642,
							42.31227646458999,
							0
						],
						[
							-76.57641737865731,
							42.31232546459691,
							0
						],
						[
							-76.57703537889897,
							42.31292046468229,
							0
						],
						[
							-76.57728937899701,
							42.31314746471413,
							0
						],
						[
							-76.57744637905537,
							42.31325746472818,
							0
						],
						[
							-76.5779423792346,
							42.31353446475951,
							0
						],
						[
							-76.57834937937879,
							42.31372246477792,
							0
						],
						[
							-76.57854537944863,
							42.3138184647878,
							0
						],
						[
							-76.57877137953174,
							42.31396446480575,
							0
						],
						[
							-76.57900637961936,
							42.31413246482741,
							0
						],
						[
							-76.57923137970408,
							42.31430446485021,
							0
						],
						[
							-76.57938437976453,
							42.31446046487297,
							0
						],
						[
							-76.57947937980444,
							42.31458946489306,
							0
						],
						[
							-76.57953837983054,
							42.31468746490885,
							0
						],
						[
							-76.5796133798661,
							42.31484446493495,
							0
						],
						[
							-76.5797323799289,
							42.31518046499246,
							0
						],
						[
							-76.57977637995417,
							42.31533246501887,
							0
						],
						[
							-76.57993638005456,
							42.31600146513651,
							0
						],
						[
							-76.5800153801069,
							42.31636946520159,
							0
						],
						[
							-76.58008038015909,
							42.31679646527817,
							0
						],
						[
							-76.58015138022407,
							42.31737146538196,
							0
						],
						[
							-76.58019938028146,
							42.31794346548612,
							0
						],
						[
							-76.58020338029597,
							42.31812346551936,
							0
						],
						[
							-76.58019238030333,
							42.31827146554725,
							0
						],
						[
							-76.58016738031155,
							42.31849246558926,
							0
						],
						[
							-76.58014838031242,
							42.31858746560766,
							0
						],
						[
							-76.58010738030863,
							42.31871446563288,
							0
						],
						[
							-76.57996938028639,
							42.31901346569392,
							0
						],
						[
							-76.57984438026796,
							42.31930746575352,
							0
						],
						[
							-76.57974138025156,
							42.31953346579961,
							0
						],
						[
							-76.5796763802411,
							42.31967446582839,
							0
						],
						[
							-76.57953338021396,
							42.31992846588128,
							0
						],
						[
							-76.57930238016206,
							42.32022946594647,
							0
						],
						[
							-76.57924838014911,
							42.32028846595959,
							0
						],
						[
							-76.57891938007477,
							42.32071146605137,
							0
						],
						[
							-76.57882338005474,
							42.32085746608234,
							0
						],
						[
							-76.57875638004394,
							42.32100246611196,
							0
						],
						[
							-76.57870938003983,
							42.32115146614149,
							0
						],
						[
							-76.57868938004239,
							42.32127346616492,
							0
						],
						[
							-76.57868138006201,
							42.32157546622128,
							0
						],
						[
							-76.57867038013659,
							42.32263846641889,
							0
						],
						[
							-76.57864838020427,
							42.32365546660839,
							0
						],
						[
							-76.57858338035169,
							42.32594446703557,
							0
						],
						[
							-76.5785353804353,
							42.32729146728733,
							0
						],
						[
							-76.57851938050645,
							42.32832946748047,
							0
						],
						[
							-76.57851638052217,
							42.3285564675227,
							0
						],
						[
							-76.57852938056377,
							42.32906546761657,
							0
						],
						[
							-76.57647937990704,
							42.32906646769973,
							0
						],
						[
							-76.57442737924902,
							42.32905846778127,
							0
						],
						[
							-76.57278337872084,
							42.32903846784409,
							0
						],
						[
							-76.57250137863026,
							42.32903546785492,
							0
						],
						[
							-76.56915037755574,
							42.3290234679883,
							0
						],
						[
							-76.56875037742796,
							42.32902846800542,
							0
						],
						[
							-76.56851037735032,
							42.32901846801327,
							0
						],
						[
							-76.56850737736362,
							42.32921246804936,
							0
						],
						[
							-76.56849637737164,
							42.32936946807892,
							0
						],
						[
							-76.56847737742514,
							42.33018046823011,
							0
						],
						[
							-76.56845837746285,
							42.33077646834141,
							0
						],
						[
							-76.56845637746575,
							42.33082446835037,
							0
						],
						[
							-76.56846437747264,
							42.33088346836098,
							0
						],
						[
							-76.56834937764275,
							42.33369946888786,
							0
						],
						[
							-76.56833237767435,
							42.33420346898202,
							0
						],
						[
							-76.56831237771554,
							42.33485146910299,
							0
						],
						[
							-76.56824937784415,
							42.33687546948083,
							0
						],
						[
							-76.56818437793808,
							42.33843646977289,
							0
						],
						[
							-76.5681603779726,
							42.33901046988031,
							0
						],
						[
							-76.56814437809395,
							42.34073047019984,
							0
						],
						[
							-76.56807137826466,
							42.34337047069224,
							0
						],
						[
							-76.56806537827106,
							42.34348347071344,
							0
						],
						[
							-76.56796837838479,
							42.34545247108238,
							0
						],
						[
							-76.56792737842203,
							42.34613747121103,
							0
						],
						[
							-76.5679153784712,
							42.34685847134517,
							0
						],
						[
							-76.56791337850764,
							42.34736247143866,
							0
						],
						[
							-76.5678963785389,
							42.34786147153185,
							0
						],
						[
							-76.56789637853993,
							42.34787547153446,
							0
						],
						[
							-76.56778237864235,
							42.34976447188922,
							0
						],
						[
							-76.56777337866426,
							42.35010147195204,
							0
						],
						[
							-76.56777837867948,
							42.35028647198613,
							0
						],
						[
							-76.56784737876316,
							42.35112347213848,
							0
						],
						[
							-76.56787237878898,
							42.35136547218232,
							0
						],
						[
							-76.56792537883508,
							42.35176147225357,
							0
						],
						[
							-76.56798137887453,
							42.35205347230543,
							0
						],
						[
							-76.56803837890831,
							42.35226447234224,
							0
						],
						[
							-76.56806237892059,
							42.35232647235274,
							0
						],
						[
							-76.56801437890894,
							42.35237747236415,
							0
						],
						[
							-76.56794537889382,
							42.35247247238456,
							0
						],
						[
							-76.56771237884622,
							42.35284047246218,
							0
						],
						[
							-76.56762437882739,
							42.35296747248928,
							0
						],
						[
							-76.56759937882275,
							42.35301347249882,
							0
						],
						[
							-76.56756037881885,
							42.3531304725221,
							0
						],
						[
							-76.5675443788247,
							42.35327947255036,
							0
						],
						[
							-76.56754537883428,
							42.35340547257367,
							0
						],
						[
							-76.56757237886148,
							42.35365747261928,
							0
						],
						[
							-76.56759137890731,
							42.3541974727186,
							0
						],
						[
							-76.56759537894966,
							42.35475547282185,
							0
						],
						[
							-76.56757437900694,
							42.35562547298392,
							0
						],
						[
							-76.56753637907998,
							42.35678347320009,
							0
						],
						[
							-76.56749537915731,
							42.3580124734295,
							0
						],
						[
							-76.56746137923494,
							42.3592154736538,
							0
						],
						[
							-76.56739437932455,
							42.36072447393615,
							0
						],
						[
							-76.56738637934818,
							42.36108047400244,
							0
						],
						[
							-76.56735937938967,
							42.36176147412972,
							0
						],
						[
							-76.56732337941544,
							42.36226847422511,
							0
						],
						[
							-76.56729937943345,
							42.36261747429075,
							0
						],
						[
							-76.56729437945343,
							42.36291047434525,
							0
						],
						[
							-76.56728337945681,
							42.3630044743631,
							0
						],
						[
							-76.56726337945742,
							42.36309947438153,
							0
						],
						[
							-76.56721237945173,
							42.36324447441047,
							0
						],
						[
							-76.56714537944065,
							42.36338547443931,
							0
						],
						[
							-76.56706737942596,
							42.3635254744684,
							0
						],
						[
							-76.56683337937112,
							42.36379947452866,
							0
						],
						[
							-76.56670237934314,
							42.36398947456915,
							0
						],
						[
							-76.5666243793282,
							42.3641264745977,
							0
						],
						[
							-76.56659937932514,
							42.36419347461113,
							0
						],
						[
							-76.5665803793244,
							42.36426647462544,
							0
						],
						[
							-76.56657437932978,
							42.36436547464402,
							0
						],
						[
							-76.56660437935466,
							42.36457247468115,
							0
						],
						[
							-76.56662537936563,
							42.36463047469103,
							0
						],
						[
							-76.56674337941921,
							42.36484447472591,
							0
						],
						[
							-76.56675837942801,
							42.36489847473532,
							0
						],
						[
							-76.56676337943293,
							42.36494347474344,
							0
						],
						[
							-76.56687137948535,
							42.36518547478392,
							0
						],
						[
							-76.5667613794512,
							42.36520047479115,
							0
						],
						[
							-76.56654937939078,
							42.36530247481863,
							0
						],
						[
							-76.56638237934371,
							42.3653904748417,
							0
						],
						[
							-76.56626337930933,
							42.36544147485597,
							0
						],
						[
							-76.56613937927268,
							42.36548347486877,
							0
						],
						[
							-76.56559537911019,
							42.36564447492061,
							0
						],
						[
							-76.56494337891209,
							42.36579247497446,
							0
						],
						[
							-76.56443437875781,
							42.36591247501729,
							0
						],
						[
							-76.56425937870452,
							42.36595047503142,
							0
						],
						[
							-76.5639153786006,
							42.36603647506128,
							0
						],
						[
							-76.56361337851006,
							42.36612147508925,
							0
						],
						[
							-76.56322137839375,
							42.36624847512865,
							0
						],
						[
							-76.56309337835621,
							42.36629547514254,
							0
						],
						[
							-76.56297037832054,
							42.36634647515697,
							0
						],
						[
							-76.56270137824418,
							42.36648047519268,
							0
						],
						[
							-76.56231937813875,
							42.36671147525096,
							0
						],
						[
							-76.56187837801603,
							42.3669644753157,
							0
						],
						[
							-76.56124737783963,
							42.36731547540627,
							0
						],
						[
							-76.56088237773598,
							42.36749647545457,
							0
						],
						[
							-76.56050637762804,
							42.36766747550148,
							0
						],
						[
							-76.56008737750584,
							42.36783147554883,
							0
						],
						[
							-76.55994437746345,
							42.36787847556334,
							0
						],
						[
							-76.55965937737999,
							42.36798547559469,
							0
						],
						[
							-76.55909337721307,
							42.36818247565411,
							0
						],
						[
							-76.55881337713119,
							42.36828947568527,
							0
						],
						[
							-76.5583103769864,
							42.36851247574696,
							0
						],
						[
							-76.55807237691864,
							42.36862847577808,
							0
						],
						[
							-76.55793337687955,
							42.36870247579742,
							0
						],
						[
							-76.55778637683655,
							42.36875847581375,
							0
						],
						[
							-76.55766337679992,
							42.36879647582577,
							0
						],
						[
							-76.55753537676132,
							42.36882947583707,
							0
						],
						[
							-76.55740537672112,
							42.36884947584602,
							0
						],
						[
							-76.55732237669488,
							42.3688544758503,
							0
						],
						[
							-76.55706937661306,
							42.36884447585869,
							0
						],
						[
							-76.55535137605781,
							42.36878247591675,
							0
						],
						[
							-76.55497837593695,
							42.36876447592852,
							0
						],
						[
							-76.55473037585739,
							42.36876347593837,
							0
						],
						[
							-76.55449437578166,
							42.36876247594774,
							0
						],
						[
							-76.55430137571994,
							42.36876447595593,
							0
						],
						[
							-76.55373237553815,
							42.36877247598044,
							0
						],
						[
							-76.55361637550075,
							42.36876947598457,
							0
						],
						[
							-76.5534023754321,
							42.36876847599304,
							0
						],
						[
							-76.55315237535056,
							42.36874947599966,
							0
						],
						[
							-76.55209437500253,
							42.36862847602005,
							0
						],
						[
							-76.55118337480752,
							42.36994647630112,
							0
						],
						[
							-76.55101837477434,
							42.37021447635745,
							0
						],
						[
							-76.5508813747531,
							42.37052247642007,
							0
						],
						[
							-76.55078837474693,
							42.37084347648329,
							0
						],
						[
							-76.5507473747524,
							42.37109647653183,
							0
						],
						[
							-76.5507093747671,
							42.371461476601,
							0
						],
						[
							-76.55070637480162,
							42.37194347669042,
							0
						],
						[
							-76.55077237485818,
							42.37242447677684,
							0
						],
						[
							-76.55090437493547,
							42.37289947685952,
							0
						],
						[
							-76.5511033750329,
							42.37335647693612,
							0
						],
						[
							-76.55136637514974,
							42.37379847700735,
							0
						],
						[
							-76.5515273752191,
							42.37403947704547,
							0
						],
						[
							-76.55184837535748,
							42.37452147712178,
							0
						],
						[
							-76.551949375402,
							42.37468647714826,
							0
						],
						[
							-76.5520953754712,
							42.37499047719867,
							0
						],
						[
							-76.55220337553092,
							42.37533147725748,
							0
						],
						[
							-76.55283137593165,
							42.37803947773369,
							0
						],
						[
							-76.55305937607706,
							42.37902147790633,
							0
						],
						[
							-76.55340137629989,
							42.38055847817718,
							0
						],
						[
							-76.55342837631747,
							42.3806794781985,
							0
						],
						[
							-76.55347937635062,
							42.38090747823866,
							0
						],
						[
							-76.55349937636659,
							42.38103747826194,
							0
						],
						[
							-76.55359737644766,
							42.3817114783828,
							0
						],
						[
							-76.55364537648683,
							42.38203447844067,
							0
						],
						[
							-76.55366837651408,
							42.38230447848976,
							0
						],
						[
							-76.55369137654371,
							42.38260647854477,
							0
						],
						[
							-76.55380237668598,
							42.38405447880844,
							0
						],
						[
							-76.55389337680931,
							42.38533247904144,
							0
						],
						[
							-76.55392337685062,
							42.38576247911986,
							0
						],
						[
							-76.55397237691679,
							42.38644747924472,
							0
						],
						[
							-76.55398237692397,
							42.38650147925433,
							0
						],
						[
							-76.55400237696325,
							42.38694747933612,
							0
						],
						[
							-76.55395637698336,
							42.38742047942556,
							0
						],
						[
							-76.55391737698515,
							42.38761447946308,
							0
						],
						[
							-76.55387537698303,
							42.3877684794933,
							0
						],
						[
							-76.55423837710104,
							42.38779047948267,
							0
						],
						[
							-76.55425237710845,
							42.3878304794895,
							0
						],
						[
							-76.55437637715707,
							42.38795047950669,
							0
						],
						[
							-76.55441037717128,
							42.38799547951366,
							0
						],
						[
							-76.55445237718999,
							42.38806647952512,
							0
						],
						[
							-76.5545143772198,
							42.38820147954759,
							0
						],
						[
							-76.55453637723178,
							42.3882684795591,
							0
						],
						[
							-76.55455037724123,
							42.38833547957095,
							0
						],
						[
							-76.55455337724719,
							42.38840347958342,
							0
						],
						[
							-76.55454637725025,
							42.38847547959703,
							0
						],
						[
							-76.55453037724976,
							42.38853847960936,
							0
						],
						[
							-76.55450537724677,
							42.38860647962296,
							0
						],
						[
							-76.55444737723516,
							42.3887014796429,
							0
						],
						[
							-76.55417537717649,
							42.38908847972557,
							0
						],
						[
							-76.55413437716902,
							42.38916547974149,
							0
						],
						[
							-76.55411537716691,
							42.38921947975226,
							0
						],
						[
							-76.55410037716939,
							42.3893184797712,
							0
						],
						[
							-76.5540763772082,
							42.38994947988902,
							0
						],
						[
							-76.554090377221,
							42.39006247990938,
							0
						],
						[
							-76.55410837723187,
							42.39013147992143,
							0
						],
						[
							-76.5541203772389,
							42.39017447992891,
							0
						],
						[
							-76.55427537731629,
							42.39055047999226,
							0
						],
						[
							-76.55431437733772,
							42.39067148001308,
							0
						],
						[
							-76.55434137735766,
							42.39082448004032,
							0
						],
						[
							-76.55436737741904,
							42.39154448017258,
							0
						],
						[
							-76.55440037745079,
							42.3918314802244,
							0
						],
						[
							-76.55441737746317,
							42.3919254802411,
							0
						],
						[
							-76.55446437749785,
							42.39219148028846,
							0
						],
						[
							-76.55452637754485,
							42.39255948035407,
							0
						],
						[
							-76.55455237756048,
							42.39265848037135,
							0
						],
						[
							-76.55459337757887,
							42.39272948038283,
							0
						],
						[
							-76.55466337760623,
							42.39279648039242,
							0
						],
						[
							-76.55474037763484,
							42.39284948039911,
							0
						],
						[
							-76.55482537765714,
							42.39278248038325,
							0
						],
						[
							-76.55572837789452,
							42.39207548021577,
							0
						],
						[
							-76.5561423780072,
							42.39180348014865,
							0
						],
						[
							-76.55659137813251,
							42.39155048008361,
							0
						],
						[
							-76.5569553782382,
							42.39140148004128,
							0
						],
						[
							-76.55735237835509,
							42.3912604799991,
							0
						],
						[
							-76.5577153784641,
							42.39116047996587,
							0
						],
						[
							-76.55810837858346,
							42.39107047993329,
							0
						],
						[
							-76.55865237875167,
							42.3909864798957,
							0
						],
						[
							-76.55920337892506,
							42.39094247986522,
							0
						],
						[
							-76.55975837910341,
							42.39094847984386,
							0
						],
						[
							-76.5599663791709,
							42.39095947983747,
							0
						],
						[
							-76.56019437924542,
							42.39097847983175,
							0
						],
						[
							-76.56030137927993,
							42.39098147982799,
							0
						],
						[
							-76.56071137941336,
							42.39100847981638,
							0
						],
						[
							-76.56091937948108,
							42.39102247981053,
							0
						],
						[
							-76.56131537961097,
							42.3910624798019,
							0
						],
						[
							-76.56164537971875,
							42.39108947979352,
							0
						],
						[
							-76.56216637988791,
							42.39111847977778,
							0
						],
						[
							-76.5626893800564,
							42.39112947975865,
							0
						],
						[
							-76.56288738011963,
							42.39112647975006,
							0
						],
						[
							-76.56326838023942,
							42.39109447972869,
							0
						],
						[
							-76.56361338034604,
							42.39104047970472,
							0
						],
						[
							-76.56384838041748,
							42.39098747968539,
							0
						],
						[
							-76.56393638044494,
							42.39097747967997,
							0
						],
						[
							-76.56400138046372,
							42.39094947967216,
							0
						],
						[
							-76.56414638050666,
							42.39090147965739,
							0
						],
						[
							-76.56430138055259,
							42.39085047964167,
							0
						],
						[
							-76.56444638059493,
							42.39079447962543,
							0
						],
						[
							-76.56465638065576,
							42.39070647960062,
							0
						],
						[
							-76.56486138071398,
							42.39060447957343,
							0
						],
						[
							-76.56512338078704,
							42.39045647953542,
							0
						],
						[
							-76.56527438082801,
							42.3903554795106,
							0
						],
						[
							-76.5654413808721,
							42.39022747948013,
							0
						],
						[
							-76.56552138089268,
							42.39015847946411,
							0
						],
						[
							-76.56573338094617,
							42.38996247941923,
							0
						],
						[
							-76.56589938098627,
							42.38978447937954,
							0
						],
						[
							-76.56592738099265,
							42.38974947937194,
							0
						],
						[
							-76.56600038100957,
							42.38966147935268,
							0
						],
						[
							-76.56612938103684,
							42.38947047931207,
							0
						],
						[
							-76.56624038105805,
							42.38927547927148,
							0
						],
						[
							-76.5662763810642,
							42.38920247925651,
							0
						],
						[
							-76.56630338106858,
							42.38914447924467,
							0
						],
						[
							-76.56633938107407,
							42.38906247922805,
							0
						],
						[
							-76.56648138109455,
							42.38872247915933,
							0
						],
						[
							-76.56657938110759,
							42.38847347910926,
							0
						],
						[
							-76.56673438113022,
							42.38810647903502,
							0
						],
						[
							-76.56694438116585,
							42.38767647894688,
							0
						],
						[
							-76.56716738120754,
							42.38727247886303,
							0
						],
						[
							-76.56733238124133,
							42.38701347880837,
							0
						],
						[
							-76.56781238134825,
							42.38637647867098,
							0
						],
						[
							-76.56804038139752,
							42.38605347860193,
							0
						],
						[
							-76.56870838154455,
							42.38514347840636,
							0
						],
						[
							-76.56902238161285,
							42.38470447831233,
							0
						],
						[
							-76.56916138164317,
							42.38451147827097,
							0
						],
						[
							-76.56946838171106,
							42.38409747818186,
							0
						],
						[
							-76.56976238177818,
							42.38372947810181,
							0
						],
						[
							-76.57017138187331,
							42.38324147799486,
							0
						],
						[
							-76.57045638194114,
							42.38292247792423,
							0
						],
						[
							-76.57062238198124,
							42.38274447788456,
							0
						],
						[
							-76.57068638199675,
							42.38267647786936,
							0
						],
						[
							-76.57092238205456,
							42.38243447781498,
							0
						],
						[
							-76.57147438218578,
							42.3818144776778,
							0
						],
						[
							-76.571679382233,
							42.38156347762302,
							0
						],
						[
							-76.57187638227668,
							42.38129947756612,
							0
						],
						[
							-76.57206438231623,
							42.38101847750649,
							0
						],
						[
							-76.572329382368,
							42.3805684774124,
							0
						],
						[
							-76.5724793823947,
							42.38027847735263,
							0
						],
						[
							-76.57276238243965,
							42.37965747722614,
							0
						],
						[
							-76.5736083825693,
							42.37773747683627,
							0
						],
						[
							-76.57380438259865,
							42.37728347674424,
							0
						],
						[
							-76.5738603826069,
							42.37715147671751,
							0
						],
						[
							-76.57393438261799,
							42.37698047668285,
							0
						],
						[
							-76.5742303826598,
							42.37626047653749,
							0
						],
						[
							-76.57451238269684,
							42.37553647639196,
							0
						],
						[
							-76.5747733827281,
							42.3748254762497,
							0
						],
						[
							-76.57508438276241,
							42.37393847607282,
							0
						],
						[
							-76.57520138277397,
							42.37358647600287,
							0
						],
						[
							-76.5752433827774,
							42.37345047597597,
							0
						],
						[
							-76.57542738279702,
							42.3729164758696,
							0
						],
						[
							-76.57552738281007,
							42.37265847581777,
							0
						],
						[
							-76.57567638283379,
							42.37233247575134,
							0
						],
						[
							-76.57586238286865,
							42.37199647568156,
							0
						],
						[
							-76.5760043828981,
							42.37177847563542,
							0
						],
						[
							-76.57619538294091,
							42.37152847558137,
							0
						],
						[
							-76.57626938295888,
							42.37145047556393,
							0
						],
						[
							-76.57636538298125,
							42.37133647553893,
							0
						],
						[
							-76.57641138299229,
							42.37128647552779,
							0
						],
						[
							-76.57646538300621,
							42.37124047551709,
							0
						],
						[
							-76.57652038301646,
							42.37114047549633,
							0
						],
						[
							-76.57674038307019,
							42.3709124754452,
							0
						],
						[
							-76.57697338312873,
							42.37069347539518,
							0
						],
						[
							-76.57721938319268,
							42.37049147534781,
							0
						],
						[
							-76.57747338325996,
							42.37029947530194,
							0
						],
						[
							-76.57788038337101,
							42.37003647523672,
							0
						],
						[
							-76.57803038341298,
							42.36995347521528,
							0
						],
						[
							-76.57823538347085,
							42.36984747518733,
							0
						],
						[
							-76.57829238348677,
							42.3698154751791,
							0
						],
						[
							-76.57872538361052,
							42.36961147512375,
							0
						],
						[
							-76.579246383761,
							42.36938747506116,
							0
						],
						[
							-76.57977338391441,
							42.36917747500091,
							0
						],
						[
							-76.58081038421419,
							42.36873547487702,
							0
						],
						[
							-76.58121438433164,
							42.36857247483044,
							0
						],
						[
							-76.581478384408,
							42.36846047479901,
							0
						],
						[
							-76.58234938466174,
							42.36811547469979,
							0
						],
						[
							-76.58417938519192,
							42.36735147448411,
							0
						],
						[
							-76.58562838561205,
							42.36675147431425,
							0
						],
						[
							-76.58644538584848,
							42.36640647421724,
							0
						],
						[
							-76.58657438588581,
							42.366352474202,
							0
						],
						[
							-76.58738838612216,
							42.36601947410733,
							0
						],
						[
							-76.58768938620905,
							42.36588947407103,
							0
						],
						[
							-76.58950238673476,
							42.36513947385862,
							0
						],
						[
							-76.58979838682033,
							42.36501347382328,
							0
						],
						[
							-76.59039338699318,
							42.36477147375432,
							0
						],
						[
							-76.59054738703767,
							42.36470547373587,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090018002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>30170883</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>44829</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.3425721</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5786169</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090018002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090018002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1581</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>770</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>7456.09</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>68</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>27</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>11.06</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.88</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26652</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26314</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27626</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14434</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14093</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14981</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8376</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8109</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8698</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6044</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5967</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6265</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>18</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>2.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.89</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2186</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>2733</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>129</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2521</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1170</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1229</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>858</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>84</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00057"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.61629140602744,
							42.50969549949654,
							0
						],
						[
							-76.61705040631773,
							42.51032449958168,
							0
						],
						[
							-76.61760440652947,
							42.51078149964344,
							0
						],
						[
							-76.61989040740313,
							42.51266649989812,
							0
						],
						[
							-76.61996140743035,
							42.5127264999063,
							0
						],
						[
							-76.62011740749016,
							42.51285749992412,
							0
						],
						[
							-76.62152040802853,
							42.51404350008577,
							0
						],
						[
							-76.62197540820316,
							42.51442850013827,
							0
						],
						[
							-76.62221340829507,
							42.51463750016712,
							0
						],
						[
							-76.62227640831952,
							42.51469450017506,
							0
						],
						[
							-76.62412740902637,
							42.51621250037968,
							0
						],
						[
							-76.62681041005264,
							42.51843550068043,
							0
						],
						[
							-76.62903741091024,
							42.52035750094421,
							0
						],
						[
							-76.63110041171817,
							42.52231850122181,
							0
						],
						[
							-76.6322894122007,
							42.52367550142361,
							0
						],
						[
							-76.63234741222432,
							42.5237425014336,
							0
						],
						[
							-76.63274441238543,
							42.52419550150096,
							0
						],
						[
							-76.6356054135315,
							42.52725750194902,
							0
						],
						[
							-76.63595241367463,
							42.5276845020136,
							0
						],
						[
							-76.63604041371153,
							42.5278005020314,
							0
						],
						[
							-76.6364604138941,
							42.52844250213267,
							0
						],
						[
							-76.63678741404865,
							42.52910850224215,
							0
						],
						[
							-76.6368904141014,
							42.52937250228661,
							0
						],
						[
							-76.63700441415988,
							42.52966650233618,
							0
						],
						[
							-76.63702041416815,
							42.52970850234327,
							0
						],
						[
							-76.6370644141906,
							42.52982050236213,
							0
						],
						[
							-76.63710641421204,
							42.52992750238014,
							0
						],
						[
							-76.63714041422938,
							42.53001350239462,
							0
						],
						[
							-76.63724341427839,
							42.53022750242987,
							0
						],
						[
							-76.63770941442975,
							42.53025250241549,
							0
						],
						[
							-76.6377644144486,
							42.53026850241619,
							0
						],
						[
							-76.63787541448652,
							42.53029950241739,
							0
						],
						[
							-76.63798941452704,
							42.5303525024225,
							0
						],
						[
							-76.63812341457584,
							42.53043050243142,
							0
						],
						[
							-76.6384024146775,
							42.53059350245011,
							0
						],
						[
							-76.63856841473792,
							42.53068950246104,
							0
						],
						[
							-76.63999441525748,
							42.53152150255628,
							0
						],
						[
							-76.64017941532568,
							42.53164050257067,
							0
						],
						[
							-76.64185441593244,
							42.53257050267383,
							0
						],
						[
							-76.6420144159887,
							42.53263650267948,
							0
						],
						[
							-76.64218241604677,
							42.53269250268296,
							0
						],
						[
							-76.64235741610604,
							42.53273450268355,
							0
						],
						[
							-76.64253841616598,
							42.53275950268078,
							0
						],
						[
							-76.64255241617055,
							42.5327605026804,
							0
						],
						[
							-76.64272141622583,
							42.5327745026761,
							0
						],
						[
							-76.64297041630542,
							42.53277050266518,
							0
						],
						[
							-76.64345241645819,
							42.53274550264094,
							0
						],
						[
							-76.64364941652124,
							42.53274350263252,
							0
						],
						[
							-76.6438094165737,
							42.53275850262877,
							0
						],
						[
							-76.6439654166256,
							42.53278350262701,
							0
						],
						[
							-76.64416141669199,
							42.53283050262768,
							0
						],
						[
							-76.6445464168255,
							42.53296450263667,
							0
						],
						[
							-76.6446324168545,
							42.53298350263667,
							0
						],
						[
							-76.64475641689633,
							42.53301050263659,
							0
						],
						[
							-76.64485741692931,
							42.53301850263394,
							0
						],
						[
							-76.6449604169626,
							42.53302150263031,
							0
						],
						[
							-76.64506241699488,
							42.53301550262503,
							0
						],
						[
							-76.6452624170565,
							42.53298150261061,
							0
						],
						[
							-76.64535741708481,
							42.53295250260138,
							0
						],
						[
							-76.6471514176061,
							42.53222450239399,
							0
						],
						[
							-76.64780041779663,
							42.53198750232382,
							0
						],
						[
							-76.64794641783953,
							42.53193450230809,
							0
						],
						[
							-76.64803241786494,
							42.53190550229923,
							0
						],
						[
							-76.64808241788003,
							42.53189250229481,
							0
						],
						[
							-76.64832441795296,
							42.53182950227333,
							0
						],
						[
							-76.6486624180567,
							42.53176650224791,
							0
						],
						[
							-76.64890541813236,
							42.53173550223227,
							0
						],
						[
							-76.65036641858572,
							42.5315295021347,
							0
						],
						[
							-76.65062241866427,
							42.53148150211541,
							0
						],
						[
							-76.65094441876153,
							42.53140050208733,
							0
						],
						[
							-76.65119141883542,
							42.53132850206398,
							0
						],
						[
							-76.6526084192539,
							42.53084450191694,
							0
						],
						[
							-76.65423041973699,
							42.53034450175857,
							0
						],
						[
							-76.65589942023936,
							42.52990150160881,
							0
						],
						[
							-76.65756942074273,
							42.52946750146062,
							0
						],
						[
							-76.65891142114998,
							42.52915550134835,
							0
						],
						[
							-76.65903042109797,
							42.5279465011206,
							0
						],
						[
							-76.65907142109636,
							42.52774850108241,
							0
						],
						[
							-76.6591294211031,
							42.52758950105075,
							0
						],
						[
							-76.65920942111757,
							42.52743950101981,
							0
						],
						[
							-76.65949042117961,
							42.52706250093883,
							0
						],
						[
							-76.65959742120639,
							42.52696150091585,
							0
						],
						[
							-76.65969342123205,
							42.5268925008992,
							0
						],
						[
							-76.65979742126056,
							42.52682750088297,
							0
						],
						[
							-76.65990942129267,
							42.526776500869,
							0
						],
						[
							-76.66002942132775,
							42.52673050085563,
							0
						],
						[
							-76.66093942160153,
							42.52648750077369,
							0
						],
						[
							-76.66117742167222,
							42.52641150074996,
							0
						],
						[
							-76.66135742172406,
							42.52633250072805,
							0
						],
						[
							-76.66152542177142,
							42.52624450070498,
							0
						],
						[
							-76.66167942181289,
							42.52613850067914,
							0
						],
						[
							-76.6619364218793,
							42.525923500629,
							0
						],
						[
							-76.66228642196636,
							42.52558550055241,
							0
						],
						[
							-76.66237542198739,
							42.52548450053014,
							0
						],
						[
							-76.66244742200234,
							42.5253755005071,
							0
						],
						[
							-76.6639724226132,
							42.52700650074559,
							0
						],
						[
							-76.66480242295042,
							42.52795750088706,
							0
						],
						[
							-76.6648664229769,
							42.5280375008992,
							0
						],
						[
							-76.66493742300834,
							42.52815350091768,
							0
						],
						[
							-76.66496742302226,
							42.52821150092716,
							0
						],
						[
							-76.66501242304574,
							42.52833250094762,
							0
						],
						[
							-76.66504042306413,
							42.52845850096971,
							0
						],
						[
							-76.66505142307705,
							42.52858450099249,
							0
						],
						[
							-76.66497942318125,
							42.53029050130996,
							0
						],
						[
							-76.66497342319141,
							42.53045250134007,
							0
						],
						[
							-76.66496142321391,
							42.53080550140564,
							0
						],
						[
							-76.66487142341957,
							42.53394850198871,
							0
						],
						[
							-76.66481942354793,
							42.53589150234899,
							0
						],
						[
							-76.66479242364817,
							42.53735050261903,
							0
						],
						[
							-76.66478642365199,
							42.53742750263346,
							0
						],
						[
							-76.66489642368674,
							42.53742050262769,
							0
						],
						[
							-76.66862842487596,
							42.5373125024554,
							0
						],
						[
							-76.67017542536888,
							42.53726750238394,
							0
						],
						[
							-76.67059642550177,
							42.53723850236141,
							0
						],
						[
							-76.67076342555549,
							42.53724050235495,
							0
						],
						[
							-76.67058842551235,
							42.53741450239417,
							0
						],
						[
							-76.66911742515565,
							42.53895750273863,
							0
						],
						[
							-76.66830442495896,
							42.53981650293016,
							0
						],
						[
							-76.66782442484285,
							42.54032350304318,
							0
						],
						[
							-76.66734242472434,
							42.54080750315207,
							0
						],
						[
							-76.66659842453524,
							42.54147150330483,
							0
						],
						[
							-76.66656842452763,
							42.54149850331103,
							0
						],
						[
							-76.66646942450235,
							42.5415855033311,
							0
						],
						[
							-76.66637542447899,
							42.54167650335172,
							0
						],
						[
							-76.6658004243362,
							42.54223450347804,
							0
						],
						[
							-76.665866424359,
							42.5422565034794,
							0
						],
						[
							-76.66611242444502,
							42.54235150348685,
							0
						],
						[
							-76.6661574244611,
							42.54237350348908,
							0
						],
						[
							-76.66634442452796,
							42.54246550349838,
							0
						],
						[
							-76.66655842460646,
							42.54259750351399,
							0
						],
						[
							-76.66666042464503,
							42.54267550352419,
							0
						],
						[
							-76.66675342468022,
							42.54274750353366,
							0
						],
						[
							-76.66693442475086,
							42.54291550355723,
							0
						],
						[
							-76.66729842489751,
							42.5433155036161,
							0
						],
						[
							-76.6674744249666,
							42.54348450364005,
							0
						],
						[
							-76.66767342504164,
							42.54363450365956,
							0
						],
						[
							-76.66781142509285,
							42.54372750367106,
							0
						],
						[
							-76.66804342517678,
							42.543854503685,
							0
						],
						[
							-76.66829142526412,
							42.54395850369404,
							0
						],
						[
							-76.66854642535338,
							42.54405850370204,
							0
						],
						[
							-76.66921742559113,
							42.54435950373011,
							0
						],
						[
							-76.67045442603438,
							42.54498050379404,
							0
						],
						[
							-76.67087542618724,
							42.5452185038207,
							0
						],
						[
							-76.67128742634077,
							42.54550450385656,
							0
						],
						[
							-76.6714614264075,
							42.54565050387637,
							0
						],
						[
							-76.67157642645202,
							42.54575250389047,
							0
						],
						[
							-76.67168242649296,
							42.54584550390327,
							0
						],
						[
							-76.67176642652649,
							42.54593350391608,
							0
						],
						[
							-76.672483426813,
							42.54668950402608,
							0
						],
						[
							-76.67256342684547,
							42.54678050403958,
							0
						],
						[
							-76.67281642694839,
							42.54707150408287,
							0
						],
						[
							-76.67302142703544,
							42.54735650412702,
							0
						],
						[
							-76.6735164271932,
							42.54734250410421,
							0
						],
						[
							-76.67430542744476,
							42.54732150406809,
							0
						],
						[
							-76.67607342801013,
							42.54729650399128,
							0
						],
						[
							-76.67694942828885,
							42.54726550394977,
							0
						],
						[
							-76.6780544286429,
							42.54725950390352,
							0
						],
						[
							-76.67919142900573,
							42.54723350385228,
							0
						],
						[
							-76.68373743045606,
							42.54712550364662,
							0
						],
						[
							-76.68661243137338,
							42.5470585035168,
							0
						],
						[
							-76.68688543146013,
							42.54704750350359,
							0
						],
						[
							-76.68702143150352,
							42.54704450349749,
							0
						],
						[
							-76.68870843204212,
							42.5470095034221,
							0
						],
						[
							-76.6937674336547,
							42.54687150318988,
							0
						],
						[
							-76.69642743450297,
							42.54680450306879,
							0
						],
						[
							-76.69654443454027,
							42.54680150306347,
							0
						],
						[
							-76.69665743457631,
							42.54679850305828,
							0
						],
						[
							-76.69665243456835,
							42.54671350304282,
							0
						],
						[
							-76.696071433728,
							42.53796550145465,
							0
						],
						[
							-76.69606043371103,
							42.53778550142192,
							0
						],
						[
							-76.69600443363028,
							42.53694550126941,
							0
						],
						[
							-76.69598543360304,
							42.53666250121803,
							0
						],
						[
							-76.6959654335834,
							42.53648550118621,
							0
						],
						[
							-76.69595443357254,
							42.53638750116861,
							0
						],
						[
							-76.69585343342095,
							42.53479250087879,
							0
						],
						[
							-76.69495243200775,
							42.51974049814093,
							0
						],
						[
							-76.69479143177735,
							42.51734549770591,
							0
						],
						[
							-76.69434543118975,
							42.51138849662562,
							0
						],
						[
							-76.6943174311148,
							42.51050449646373,
							0
						],
						[
							-76.69431443110929,
							42.51044349645262,
							0
						],
						[
							-76.69420843099664,
							42.50938949626256,
							0
						],
						[
							-76.6942144309811,
							42.50915549621915,
							0
						],
						[
							-76.69415543088796,
							42.50816049603806,
							0
						],
						[
							-76.69408743078797,
							42.50711249584754,
							0
						],
						[
							-76.69380643037252,
							42.50275049505444,
							0
						],
						[
							-76.69374243027816,
							42.50176049487443,
							0
						],
						[
							-76.6936414301275,
							42.50017449458599,
							0
						],
						[
							-76.69363543011849,
							42.50007949456869,
							0
						],
						[
							-76.6936344301178,
							42.50007449456783,
							0
						],
						[
							-76.6936164300908,
							42.49978949451597,
							0
						],
						[
							-76.69350642985822,
							42.49714349403232,
							0
						],
						[
							-76.69344842983092,
							42.49702649401309,
							0
						],
						[
							-76.69331042943826,
							42.49235249315638,
							0
						],
						[
							-76.69329442941665,
							42.49213149311625,
							0
						],
						[
							-76.69271242923428,
							42.49218849315052,
							0
						],
						[
							-76.6926874292265,
							42.4921914931521,
							0
						],
						[
							-76.69168242891155,
							42.4922894932112,
							0
						],
						[
							-76.69039642850667,
							42.49238949328214,
							0
						],
						[
							-76.68840142787315,
							42.49247249337889,
							0
						],
						[
							-76.68626642719632,
							42.4925764934852,
							0
						],
						[
							-76.67548742377227,
							42.49301049400511,
							0
						],
						[
							-76.6739544232853,
							42.49307249407908,
							0
						],
						[
							-76.66781242133438,
							42.49332349437592,
							0
						],
						[
							-76.66367942002282,
							42.49350949457878,
							0
						],
						[
							-76.65887441849378,
							42.49366949480422,
							0
						],
						[
							-76.65750541805853,
							42.49372049486944,
							0
						],
						[
							-76.65305641664487,
							42.49389749508347,
							0
						],
						[
							-76.65293541660621,
							42.49389949508878,
							0
						],
						[
							-76.65115941604154,
							42.49396549517334,
							0
						],
						[
							-76.64395741375083,
							42.49422249551427,
							0
						],
						[
							-76.63731141163873,
							42.49448449583339,
							0
						],
						[
							-76.63485241085544,
							42.49455749594704,
							0
						],
						[
							-76.63384641053501,
							42.49458749599356,
							0
						],
						[
							-76.6336964104877,
							42.49459849600169,
							0
						],
						[
							-76.63178940987977,
							42.49464849608859,
							0
						],
						[
							-76.62699540835686,
							42.49484749632058,
							0
						],
						[
							-76.62618440809823,
							42.49486749635727,
							0
						],
						[
							-76.62002040613261,
							42.49502349663705,
							0
						],
						[
							-76.61850240564858,
							42.49506249670604,
							0
						],
						[
							-76.61808040551433,
							42.49507749672598,
							0
						],
						[
							-76.61758840535776,
							42.49509449674915,
							0
						],
						[
							-76.61736640528716,
							42.49510249675968,
							0
						],
						[
							-76.61447540436721,
							42.4952024968958,
							0
						],
						[
							-76.61414740426281,
							42.49521349691118,
							0
						],
						[
							-76.61392140419122,
							42.4952254969226,
							0
						],
						[
							-76.61379840415226,
							42.49523249692891,
							0
						],
						[
							-76.61242740371597,
							42.49527949699338,
							0
						],
						[
							-76.60854040247911,
							42.4954144971765,
							0
						],
						[
							-76.60679040192262,
							42.49548049725989,
							0
						],
						[
							-76.60455240121092,
							42.49556449736645,
							0
						],
						[
							-76.60227140048458,
							42.49563749747276,
							0
						],
						[
							-76.59900739944482,
							42.4957364976238,
							0
						],
						[
							-76.59893939942344,
							42.49574249762767,
							0
						],
						[
							-76.59640539861482,
							42.49580049774147,
							0
						],
						[
							-76.59624239856238,
							42.49579849774773,
							0
						],
						[
							-76.59605839850313,
							42.49579549775465,
							0
						],
						[
							-76.59617339854465,
							42.49585749776141,
							0
						],
						[
							-76.59786139914864,
							42.49669849784799,
							0
						],
						[
							-76.5979353991746,
							42.49672849785054,
							0
						],
						[
							-76.59971939981082,
							42.4975884979367,
							0
						],
						[
							-76.59983239985115,
							42.49764349794226,
							0
						],
						[
							-76.60106940029823,
							42.49831949801672,
							0
						],
						[
							-76.60220440071943,
							42.49908749811227,
							0
						],
						[
							-76.6036194012525,
							42.50015249825129,
							0
						],
						[
							-76.6047704016885,
							42.5010504983702,
							0
						],
						[
							-76.60966740352572,
							42.50463149883177,
							0
						],
						[
							-76.61016440371225,
							42.50499549887871,
							0
						],
						[
							-76.61030340376406,
							42.50509249889095,
							0
						],
						[
							-76.61039740379881,
							42.50515449889856,
							0
						],
						[
							-76.61215240445777,
							42.50644449906518,
							0
						],
						[
							-76.61236640453848,
							42.50660649908636,
							0
						],
						[
							-76.61292540474919,
							42.50702849914148,
							0
						],
						[
							-76.61463340539282,
							42.50831449930922,
							0
						],
						[
							-76.61473540543177,
							42.50839849932058,
							0
						],
						[
							-76.6148304054685,
							42.50848249933222,
							0
						],
						[
							-76.61492140550327,
							42.50855749934234,
							0
						],
						[
							-76.61629140602744,
							42.50969549949654,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090016003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>29345749</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>161844</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5145989</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.6571500</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090016003</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090016003</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1652</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>537</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>7251.54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>37</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>34</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.06</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.89</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.91</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26398</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26059</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27371</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14494</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14151</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15038</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8508</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8241</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8831</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5986</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5909</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6207</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>4.6</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.73</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.07</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>1980</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3088</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>99</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2771</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1252</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1414</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>852</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00058"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.67157642645202,
							42.54575250389047,
							0
						],
						[
							-76.6714614264075,
							42.54565050387637,
							0
						],
						[
							-76.67128742634077,
							42.54550450385656,
							0
						],
						[
							-76.67087542618724,
							42.5452185038207,
							0
						],
						[
							-76.67045442603438,
							42.54498050379404,
							0
						],
						[
							-76.66921742559113,
							42.54435950373011,
							0
						],
						[
							-76.66854642535338,
							42.54405850370204,
							0
						],
						[
							-76.66829142526412,
							42.54395850369404,
							0
						],
						[
							-76.66804342517678,
							42.543854503685,
							0
						],
						[
							-76.66781142509285,
							42.54372750367106,
							0
						],
						[
							-76.66767342504164,
							42.54363450365956,
							0
						],
						[
							-76.6674744249666,
							42.54348450364005,
							0
						],
						[
							-76.66729842489751,
							42.5433155036161,
							0
						],
						[
							-76.66693442475086,
							42.54291550355723,
							0
						],
						[
							-76.66675342468022,
							42.54274750353366,
							0
						],
						[
							-76.66666042464503,
							42.54267550352419,
							0
						],
						[
							-76.66655842460646,
							42.54259750351399,
							0
						],
						[
							-76.66634442452796,
							42.54246550349838,
							0
						],
						[
							-76.6661574244611,
							42.54237350348908,
							0
						],
						[
							-76.66611242444502,
							42.54235150348685,
							0
						],
						[
							-76.665866424359,
							42.5422565034794,
							0
						],
						[
							-76.6658004243362,
							42.54223450347804,
							0
						],
						[
							-76.66637542447899,
							42.54167650335172,
							0
						],
						[
							-76.66646942450235,
							42.5415855033311,
							0
						],
						[
							-76.66656842452763,
							42.54149850331103,
							0
						],
						[
							-76.66659842453524,
							42.54147150330483,
							0
						],
						[
							-76.66734242472434,
							42.54080750315207,
							0
						],
						[
							-76.66782442484285,
							42.54032350304318,
							0
						],
						[
							-76.66830442495896,
							42.53981650293016,
							0
						],
						[
							-76.66911742515565,
							42.53895750273863,
							0
						],
						[
							-76.67058842551235,
							42.53741450239417,
							0
						],
						[
							-76.67076342555549,
							42.53724050235495,
							0
						],
						[
							-76.67059642550177,
							42.53723850236141,
							0
						],
						[
							-76.67017542536888,
							42.53726750238394,
							0
						],
						[
							-76.66862842487596,
							42.5373125024554,
							0
						],
						[
							-76.66489642368674,
							42.53742050262769,
							0
						],
						[
							-76.66478642365199,
							42.53742750263346,
							0
						],
						[
							-76.66479242364817,
							42.53735050261903,
							0
						],
						[
							-76.66481942354793,
							42.53589150234899,
							0
						],
						[
							-76.66487142341957,
							42.53394850198871,
							0
						],
						[
							-76.66496142321391,
							42.53080550140564,
							0
						],
						[
							-76.66497342319141,
							42.53045250134007,
							0
						],
						[
							-76.66497942318125,
							42.53029050130996,
							0
						],
						[
							-76.66505142307705,
							42.52858450099249,
							0
						],
						[
							-76.66504042306413,
							42.52845850096971,
							0
						],
						[
							-76.66501242304574,
							42.52833250094762,
							0
						],
						[
							-76.66496742302226,
							42.52821150092716,
							0
						],
						[
							-76.66493742300834,
							42.52815350091768,
							0
						],
						[
							-76.6648664229769,
							42.5280375008992,
							0
						],
						[
							-76.66480242295042,
							42.52795750088706,
							0
						],
						[
							-76.6639724226132,
							42.52700650074559,
							0
						],
						[
							-76.66244742200234,
							42.5253755005071,
							0
						],
						[
							-76.66237542198739,
							42.52548450053014,
							0
						],
						[
							-76.66228642196636,
							42.52558550055241,
							0
						],
						[
							-76.6619364218793,
							42.525923500629,
							0
						],
						[
							-76.66167942181289,
							42.52613850067914,
							0
						],
						[
							-76.66152542177142,
							42.52624450070498,
							0
						],
						[
							-76.66135742172406,
							42.52633250072805,
							0
						],
						[
							-76.66117742167222,
							42.52641150074996,
							0
						],
						[
							-76.66093942160153,
							42.52648750077369,
							0
						],
						[
							-76.66002942132775,
							42.52673050085563,
							0
						],
						[
							-76.65990942129267,
							42.526776500869,
							0
						],
						[
							-76.65979742126056,
							42.52682750088297,
							0
						],
						[
							-76.65969342123205,
							42.5268925008992,
							0
						],
						[
							-76.65959742120639,
							42.52696150091585,
							0
						],
						[
							-76.65949042117961,
							42.52706250093883,
							0
						],
						[
							-76.65920942111757,
							42.52743950101981,
							0
						],
						[
							-76.6591294211031,
							42.52758950105075,
							0
						],
						[
							-76.65907142109636,
							42.52774850108241,
							0
						],
						[
							-76.65903042109797,
							42.5279465011206,
							0
						],
						[
							-76.65891142114998,
							42.52915550134835,
							0
						],
						[
							-76.65756942074273,
							42.52946750146062,
							0
						],
						[
							-76.65589942023936,
							42.52990150160881,
							0
						],
						[
							-76.65423041973699,
							42.53034450175857,
							0
						],
						[
							-76.6526084192539,
							42.53084450191694,
							0
						],
						[
							-76.65119141883542,
							42.53132850206398,
							0
						],
						[
							-76.65094441876153,
							42.53140050208733,
							0
						],
						[
							-76.65062241866427,
							42.53148150211541,
							0
						],
						[
							-76.65036641858572,
							42.5315295021347,
							0
						],
						[
							-76.64890541813236,
							42.53173550223227,
							0
						],
						[
							-76.6486624180567,
							42.53176650224791,
							0
						],
						[
							-76.64832441795296,
							42.53182950227333,
							0
						],
						[
							-76.64808241788003,
							42.53189250229481,
							0
						],
						[
							-76.64803241786494,
							42.53190550229923,
							0
						],
						[
							-76.64794641783953,
							42.53193450230809,
							0
						],
						[
							-76.64780041779663,
							42.53198750232382,
							0
						],
						[
							-76.6471514176061,
							42.53222450239399,
							0
						],
						[
							-76.64535741708481,
							42.53295250260138,
							0
						],
						[
							-76.6452624170565,
							42.53298150261061,
							0
						],
						[
							-76.64506241699488,
							42.53301550262503,
							0
						],
						[
							-76.6449604169626,
							42.53302150263031,
							0
						],
						[
							-76.64485741692931,
							42.53301850263394,
							0
						],
						[
							-76.64475641689633,
							42.53301050263659,
							0
						],
						[
							-76.6446324168545,
							42.53298350263667,
							0
						],
						[
							-76.6445464168255,
							42.53296450263667,
							0
						],
						[
							-76.64416141669199,
							42.53283050262768,
							0
						],
						[
							-76.6439654166256,
							42.53278350262701,
							0
						],
						[
							-76.6438094165737,
							42.53275850262877,
							0
						],
						[
							-76.64364941652124,
							42.53274350263252,
							0
						],
						[
							-76.64345241645819,
							42.53274550264094,
							0
						],
						[
							-76.64297041630542,
							42.53277050266518,
							0
						],
						[
							-76.64272141622583,
							42.5327745026761,
							0
						],
						[
							-76.64255241617055,
							42.5327605026804,
							0
						],
						[
							-76.64253841616598,
							42.53275950268078,
							0
						],
						[
							-76.64235741610604,
							42.53273450268355,
							0
						],
						[
							-76.64218241604677,
							42.53269250268296,
							0
						],
						[
							-76.6420144159887,
							42.53263650267948,
							0
						],
						[
							-76.64185441593244,
							42.53257050267383,
							0
						],
						[
							-76.64017941532568,
							42.53164050257067,
							0
						],
						[
							-76.63999441525748,
							42.53152150255628,
							0
						],
						[
							-76.63856841473792,
							42.53068950246104,
							0
						],
						[
							-76.6384024146775,
							42.53059350245011,
							0
						],
						[
							-76.63812341457584,
							42.53043050243142,
							0
						],
						[
							-76.63798941452704,
							42.5303525024225,
							0
						],
						[
							-76.63787541448652,
							42.53029950241739,
							0
						],
						[
							-76.6377644144486,
							42.53026850241619,
							0
						],
						[
							-76.63770941442975,
							42.53025250241549,
							0
						],
						[
							-76.63724341427839,
							42.53022750242987,
							0
						],
						[
							-76.637328414319,
							42.53040650245941,
							0
						],
						[
							-76.63742941436543,
							42.53059450248996,
							0
						],
						[
							-76.63769941448432,
							42.53102750255879,
							0
						],
						[
							-76.63807541464043,
							42.53150350263122,
							0
						],
						[
							-76.6382614147147,
							42.53169950265977,
							0
						],
						[
							-76.63873041489725,
							42.53212950271994,
							0
						],
						[
							-76.63933341512332,
							42.5325665027759,
							0
						],
						[
							-76.6399184153362,
							42.53290450281438,
							0
						],
						[
							-76.64054641555923,
							42.53319350284205,
							0
						],
						[
							-76.64058441557337,
							42.53321950284528,
							0
						],
						[
							-76.64238241620706,
							42.53398150291243,
							0
						],
						[
							-76.64320741649911,
							42.53434850294645,
							0
						],
						[
							-76.6441904168497,
							42.53482050299337,
							0
						],
						[
							-76.64662441772131,
							42.53603650311825,
							0
						],
						[
							-76.64741241800353,
							42.53643050315873,
							0
						],
						[
							-76.64713741802981,
							42.53796550345292,
							0
						],
						[
							-76.64712541803239,
							42.53805150346927,
							0
						],
						[
							-76.64687541805559,
							42.53943750373495,
							0
						],
						[
							-76.64686741805838,
							42.53950950374855,
							0
						],
						[
							-76.64686741807986,
							42.53979750380164,
							0
						],
						[
							-76.64690741811418,
							42.54008550385309,
							0
						],
						[
							-76.64695441814105,
							42.54024350388028,
							0
						],
						[
							-76.64700041816745,
							42.54039950390719,
							0
						],
						[
							-76.64713341823266,
							42.54070150395741,
							0
						],
						[
							-76.64724141828552,
							42.54094550399798,
							0
						],
						[
							-76.6472884183103,
							42.54107550402004,
							0
						],
						[
							-76.64732141833258,
							42.54123250404764,
							0
						],
						[
							-76.64737141837176,
							42.54154250410272,
							0
						],
						[
							-76.64738741838086,
							42.54159550411184,
							0
						],
						[
							-76.6474304184027,
							42.54170350412998,
							0
						],
						[
							-76.6475554184579,
							42.54190550416212,
							0
						],
						[
							-76.64760241847887,
							42.54198450417477,
							0
						],
						[
							-76.64813241863622,
							42.54181450412181,
							0
						],
						[
							-76.64980941913117,
							42.54123650394683,
							0
						],
						[
							-76.64995041917358,
							42.54119850393408,
							0
						],
						[
							-76.65007241921093,
							42.54117450392468,
							0
						],
						[
							-76.65019641924958,
							42.54115950391685,
							0
						],
						[
							-76.65045741933369,
							42.54116450390714,
							0
						],
						[
							-76.65031841929834,
							42.54128850393565,
							0
						],
						[
							-76.6502804192882,
							42.54131550394217,
							0
						],
						[
							-76.65021841927346,
							42.54138450395743,
							0
						],
						[
							-76.65017841926635,
							42.54146150397325,
							0
						],
						[
							-76.65016741926583,
							42.54150150398107,
							0
						],
						[
							-76.6501604192717,
							42.54161050400144,
							0
						],
						[
							-76.65017541936115,
							42.54274450420984,
							0
						],
						[
							-76.65003441945024,
							42.54454450454735,
							0
						],
						[
							-76.64993641951158,
							42.54578750478041,
							0
						],
						[
							-76.64992241953566,
							42.5461705048516,
							0
						],
						[
							-76.64991641954516,
							42.54632350488004,
							0
						],
						[
							-76.64987741960259,
							42.5472605050543,
							0
						],
						[
							-76.64986141961224,
							42.54745850509145,
							0
						],
						[
							-76.64988041963916,
							42.54773750514208,
							0
						],
						[
							-76.64994241968019,
							42.54802050519171,
							0
						],
						[
							-76.6500304197085,
							42.5480215051883,
							0
						],
						[
							-76.6517544202557,
							42.5479415051032,
							0
						],
						[
							-76.65189542030043,
							42.54793450509614,
							0
						],
						[
							-76.65360742084458,
							42.54786550501355,
							0
						],
						[
							-76.6556344214907,
							42.54780850492031,
							0
						],
						[
							-76.65737042204495,
							42.54777150484262,
							0
						],
						[
							-76.66229442361437,
							42.54763150461578,
							0
						],
						[
							-76.6643664242767,
							42.54759850452509,
							0
						],
						[
							-76.66439042428425,
							42.54759650452374,
							0
						],
						[
							-76.66899342575083,
							42.54745950431052,
							0
						],
						[
							-76.67142242652572,
							42.54740050420043,
							0
						],
						[
							-76.67302142703544,
							42.54735650412702,
							0
						],
						[
							-76.67281642694839,
							42.54707150408287,
							0
						],
						[
							-76.67256342684547,
							42.54678050403958,
							0
						],
						[
							-76.672483426813,
							42.54668950402608,
							0
						],
						[
							-76.67176642652649,
							42.54593350391608,
							0
						],
						[
							-76.67168242649296,
							42.54584550390327,
							0
						],
						[
							-76.67157642645202,
							42.54575250389047,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090016002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>3364759</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>10455</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5381411</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.6574728</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090016002</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090016002</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1340</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>594</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>831.41</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>67</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>54</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>28</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>9.48</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>6.78</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.74</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>23359</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>23021</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>24333</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13048</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12707</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13595</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7738</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7471</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8060</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5297</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5220</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5518</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>16</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>17</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>10</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>13</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>4.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>1.56</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.71</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2336</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>4083</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>21</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1140</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1232</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1536</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>791</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>59</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00059"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.61492140550327,
							42.50855749934234,
							0
						],
						[
							-76.6148304054685,
							42.50848249933222,
							0
						],
						[
							-76.61473540543177,
							42.50839849932058,
							0
						],
						[
							-76.61463340539282,
							42.50831449930922,
							0
						],
						[
							-76.61292540474919,
							42.50702849914148,
							0
						],
						[
							-76.61236640453848,
							42.50660649908636,
							0
						],
						[
							-76.61215240445777,
							42.50644449906518,
							0
						],
						[
							-76.61039740379881,
							42.50515449889856,
							0
						],
						[
							-76.61030340376406,
							42.50509249889095,
							0
						],
						[
							-76.61016440371225,
							42.50499549887871,
							0
						],
						[
							-76.60966740352572,
							42.50463149883177,
							0
						],
						[
							-76.6047704016885,
							42.5010504983702,
							0
						],
						[
							-76.6036194012525,
							42.50015249825129,
							0
						],
						[
							-76.60220440071943,
							42.49908749811227,
							0
						],
						[
							-76.60106940029823,
							42.49831949801672,
							0
						],
						[
							-76.59983239985115,
							42.49764349794226,
							0
						],
						[
							-76.59971939981082,
							42.4975884979367,
							0
						],
						[
							-76.5979353991746,
							42.49672849785054,
							0
						],
						[
							-76.59786139914864,
							42.49669849784799,
							0
						],
						[
							-76.59617339854465,
							42.49585749776141,
							0
						],
						[
							-76.59605839850313,
							42.49579549775465,
							0
						],
						[
							-76.59378739768299,
							42.49456249761941,
							0
						],
						[
							-76.59042139645648,
							42.49258749739166,
							0
						],
						[
							-76.58991239627255,
							42.49230949736104,
							0
						],
						[
							-76.5866473950928,
							42.49052749716478,
							0
						],
						[
							-76.58524539458696,
							42.48977249708236,
							0
						],
						[
							-76.58446439430749,
							42.48938249704211,
							0
						],
						[
							-76.58367439403146,
							42.48907849701809,
							0
						],
						[
							-76.58335939392269,
							42.48897449701169,
							0
						],
						[
							-76.57932539254044,
							42.48778749695646,
							0
						],
						[
							-76.5782533921741,
							42.48748549694427,
							0
						],
						[
							-76.57757339194178,
							42.48729449693663,
							0
						],
						[
							-76.57685639169684,
							42.48709349692865,
							0
						],
						[
							-76.57360339058532,
							42.48617849689186,
							0
						],
						[
							-76.57342939052526,
							42.4861214968884,
							0
						],
						[
							-76.57326139046722,
							42.48606549688488,
							0
						],
						[
							-76.57213439008044,
							42.48572549686789,
							0
						],
						[
							-76.5707533896915,
							42.48645549705882,
							0
						],
						[
							-76.56928938927506,
							42.48717349725089,
							0
						],
						[
							-76.56921538925442,
							42.48721549726164,
							0
						],
						[
							-76.56703638863897,
							42.48834349755847,
							0
						],
						[
							-76.5655483882269,
							42.48922449778161,
							0
						],
						[
							-76.56440738791262,
							42.48992349795704,
							0
						],
						[
							-76.563428387643,
							42.49052349810759,
							0
						],
						[
							-76.56302038752915,
							42.49075349816665,
							0
						],
						[
							-76.56262238741489,
							42.49093449821623,
							0
						],
						[
							-76.5622003872903,
							42.49108049826035,
							0
						],
						[
							-76.56173538714985,
							42.49119849830102,
							0
						],
						[
							-76.56100638692604,
							42.49133449835574,
							0
						],
						[
							-76.56061638680832,
							42.49143449839005,
							0
						],
						[
							-76.55783838597686,
							42.49224249865208,
							0
						],
						[
							-76.55473438504679,
							42.4931314989423,
							0
						],
						[
							-76.55460138498216,
							42.49283549889304,
							0
						],
						[
							-76.55370738454569,
							42.49081749855669,
							0
						],
						[
							-76.550342383515,
							42.49147949881557,
							0
						],
						[
							-76.54953238326428,
							42.49160349887136,
							0
						],
						[
							-76.54945538323994,
							42.49160849887542,
							0
						],
						[
							-76.54573338208141,
							42.49209149911573,
							0
						],
						[
							-76.54545538199517,
							42.49213149913437,
							0
						],
						[
							-76.54521938192327,
							42.49218349915358,
							0
						],
						[
							-76.54499238185572,
							42.49225449917589,
							0
						],
						[
							-76.54484638181302,
							42.49231049919217,
							0
						],
						[
							-76.54451738171944,
							42.49247249923543,
							0
						],
						[
							-76.54442538169236,
							42.49250549924526,
							0
						],
						[
							-76.54429038165216,
							42.4925474992585,
							0
						],
						[
							-76.54415138160971,
							42.49257649926948,
							0
						],
						[
							-76.54400838156529,
							42.492596499279,
							0
						],
						[
							-76.54392038153749,
							42.49260249928368,
							0
						],
						[
							-76.54158738079383,
							42.49266949939074,
							0
						],
						[
							-76.5414903807624,
							42.49266549939392,
							0
						],
						[
							-76.54138538072787,
							42.49265449939616,
							0
						],
						[
							-76.54127038068943,
							42.49263349939696,
							0
						],
						[
							-76.54115838065125,
							42.49260349939597,
							0
						],
						[
							-76.54105138061404,
							42.49256449939311,
							0
						],
						[
							-76.54095038057807,
							42.49251649938835,
							0
						],
						[
							-76.54085638054397,
							42.49246349938236,
							0
						],
						[
							-76.540726380495,
							42.49236549936953,
							0
						],
						[
							-76.53967038007514,
							42.49127249921055,
							0
						],
						[
							-76.53954138002152,
							42.49110749918529,
							0
						],
						[
							-76.5397743801875,
							42.49233849940319,
							0
						],
						[
							-76.53992738027209,
							42.49281749948544,
							0
						],
						[
							-76.53994638030487,
							42.49317749955116,
							0
						],
						[
							-76.5399573803141,
							42.49325449956494,
							0
						],
						[
							-76.53996238033105,
							42.49346149960294,
							0
						],
						[
							-76.53994138033764,
							42.49364149963705,
							0
						],
						[
							-76.53992938033817,
							42.49370049964843,
							0
						],
						[
							-76.5393473802711,
							42.49531549997029,
							0
						],
						[
							-76.53933238027035,
							42.49537049998106,
							0
						],
						[
							-76.53932538027277,
							42.49543349999298,
							0
						],
						[
							-76.53932538027395,
							42.49544949999594,
							0
						],
						[
							-76.53928038025884,
							42.49544049999609,
							0
						],
						[
							-76.53925838025252,
							42.49545049999884,
							0
						],
						[
							-76.53923738024496,
							42.49543949999764,
							0
						],
						[
							-76.53908738019604,
							42.49542850000171,
							0
						],
						[
							-76.53906438018821,
							42.49542250000155,
							0
						],
						[
							-76.53902038017408,
							42.49542250000334,
							0
						],
						[
							-76.5388503801179,
							42.49540050000614,
							0
						],
						[
							-76.53870138007215,
							42.49542850001738,
							0
						],
						[
							-76.52965637719255,
							42.49574050044204,
							0
						],
						[
							-76.52653437619853,
							42.49584750058845,
							0
						],
						[
							-76.52701337644642,
							42.49711850080375,
							0
						],
						[
							-76.52812937702406,
							42.50008050130543,
							0
						],
						[
							-76.5292753775907,
							42.50276350175434,
							0
						],
						[
							-76.53002037795923,
							42.50450950204647,
							0
						],
						[
							-76.53050237819761,
							42.50563850223534,
							0
						],
						[
							-76.53087237838056,
							42.50650450238021,
							0
						],
						[
							-76.53123337856078,
							42.5073725025258,
							0
						],
						[
							-76.5312963785902,
							42.50749650254613,
							0
						],
						[
							-76.53135037861695,
							42.5076235025674,
							0
						],
						[
							-76.53347637966846,
							42.51260150340002,
							0
						],
						[
							-76.53479138031909,
							42.51568250391532,
							0
						],
						[
							-76.53549338062484,
							42.51676650408687,
							0
						],
						[
							-76.53748738149312,
							42.51984250457358,
							0
						],
						[
							-76.53788738165373,
							42.52027650463744,
							0
						],
						[
							-76.54101238290829,
							42.52366450513571,
							0
						],
						[
							-76.5449353844292,
							42.52718850562654,
							0
						],
						[
							-76.54549638463772,
							42.52757150567442,
							0
						],
						[
							-76.54839738571592,
							42.52955050592164,
							0
						],
						[
							-76.55062238653248,
							42.53092850608542,
							0
						],
						[
							-76.5534593875737,
							42.53268550629421,
							0
						],
						[
							-76.55562138836719,
							42.53402450645332,
							0
						],
						[
							-76.55635538863663,
							42.53447950650741,
							0
						],
						[
							-76.55667638875445,
							42.53467850653105,
							0
						],
						[
							-76.55695538885479,
							42.53482350654647,
							0
						],
						[
							-76.55945438975344,
							42.53612150668426,
							0
						],
						[
							-76.5638653913399,
							42.53841550692798,
							0
						],
						[
							-76.5658963920703,
							42.53947050703994,
							0
						],
						[
							-76.56792639280043,
							42.54052650715208,
							0
						],
						[
							-76.57280939455666,
							42.54306450742144,
							0
						],
						[
							-76.57769139631267,
							42.54560350769092,
							0
						],
						[
							-76.58599139929815,
							42.54991850814854,
							0
						],
						[
							-76.58672439953179,
							42.54989650811461,
							0
						],
						[
							-76.59640840261812,
							42.54960150766586,
							0
						],
						[
							-76.59882940338967,
							42.5495275075536,
							0
						],
						[
							-76.59891640341736,
							42.54952450754951,
							0
						],
						[
							-76.59897740343679,
							42.54952250754665,
							0
						],
						[
							-76.60671240590186,
							42.54928750718819,
							0
						],
						[
							-76.61065940715967,
							42.54916750700522,
							0
						],
						[
							-76.6107524071893,
							42.54916450700089,
							0
						],
						[
							-76.61089840723585,
							42.54916050699419,
							0
						],
						[
							-76.61104540728273,
							42.54915650698747,
							0
						],
						[
							-76.61120340733306,
							42.5491515069801,
							0
						],
						[
							-76.61149040742451,
							42.54914250696675,
							0
						],
						[
							-76.61152340743503,
							42.54914150696524,
							0
						],
						[
							-76.61158940745605,
							42.54913950696216,
							0
						],
						[
							-76.6126264077865,
							42.549107506914,
							0
						],
						[
							-76.61341640803822,
							42.54908350687737,
							0
						],
						[
							-76.61356740808631,
							42.54907850687029,
							0
						],
						[
							-76.61390940819676,
							42.54908750685802,
							0
						],
						[
							-76.61504140855332,
							42.5489975067953,
							0
						],
						[
							-76.61518840859961,
							42.54898550678709,
							0
						],
						[
							-76.61607740889148,
							42.54907350676705,
							0
						],
						[
							-76.61639440899343,
							42.5490765067547,
							0
						],
						[
							-76.61659240905692,
							42.54907550674646,
							0
						],
						[
							-76.61685440914093,
							42.54907450673559,
							0
						],
						[
							-76.61711340922398,
							42.54907350672484,
							0
						],
						[
							-76.6173944093143,
							42.54907550671376,
							0
						],
						[
							-76.61745540933389,
							42.54907550671126,
							0
						],
						[
							-76.61758940937696,
							42.54907650670599,
							0
						],
						[
							-76.61765640939846,
							42.54907650670326,
							0
						],
						[
							-76.62224341085548,
							42.54887450647902,
							0
						],
						[
							-76.62300441109655,
							42.54883250644024,
							0
						],
						[
							-76.62398341140477,
							42.54875250638559,
							0
						],
						[
							-76.62633341215108,
							42.54864750627041,
							0
						],
						[
							-76.6264714121962,
							42.54865850626681,
							0
						],
						[
							-76.6266534122551,
							42.54866550626069,
							0
						],
						[
							-76.62888741296754,
							42.54860550615852,
							0
						],
						[
							-76.63058941351164,
							42.54857750608395,
							0
						],
						[
							-76.63066341353554,
							42.54857950608129,
							0
						],
						[
							-76.63072841355654,
							42.54858150607902,
							0
						],
						[
							-76.63078541357588,
							42.54859550607926,
							0
						],
						[
							-76.6308464135971,
							42.54861750608084,
							0
						],
						[
							-76.63093241362401,
							42.54860850607567,
							0
						],
						[
							-76.63138841376684,
							42.54856150604842,
							0
						],
						[
							-76.63987441647085,
							42.54830550565506,
							0
						],
						[
							-76.63989541647753,
							42.54830450565402,
							0
						],
						[
							-76.64107741685397,
							42.54826650559879,
							0
						],
						[
							-76.64141641696216,
							42.54825850558348,
							0
						],
						[
							-76.64239541727466,
							42.5482365055395,
							0
						],
						[
							-76.64270441737314,
							42.54822750552522,
							0
						],
						[
							-76.6477224189718,
							42.54807350529208,
							0
						],
						[
							-76.64983441964576,
							42.54802350519668,
							0
						],
						[
							-76.64994241968019,
							42.54802050519171,
							0
						],
						[
							-76.64988041963916,
							42.54773750514208,
							0
						],
						[
							-76.64986141961224,
							42.54745850509145,
							0
						],
						[
							-76.64987741960259,
							42.5472605050543,
							0
						],
						[
							-76.64991641954516,
							42.54632350488004,
							0
						],
						[
							-76.64992241953566,
							42.5461705048516,
							0
						],
						[
							-76.64993641951158,
							42.54578750478041,
							0
						],
						[
							-76.65003441945024,
							42.54454450454735,
							0
						],
						[
							-76.65017541936115,
							42.54274450420984,
							0
						],
						[
							-76.6501604192717,
							42.54161050400144,
							0
						],
						[
							-76.65016741926583,
							42.54150150398107,
							0
						],
						[
							-76.65017841926635,
							42.54146150397325,
							0
						],
						[
							-76.65021841927346,
							42.54138450395743,
							0
						],
						[
							-76.6502804192882,
							42.54131550394217,
							0
						],
						[
							-76.65031841929834,
							42.54128850393565,
							0
						],
						[
							-76.65045741933369,
							42.54116450390714,
							0
						],
						[
							-76.65019641924958,
							42.54115950391685,
							0
						],
						[
							-76.65007241921093,
							42.54117450392468,
							0
						],
						[
							-76.64995041917358,
							42.54119850393408,
							0
						],
						[
							-76.64980941913117,
							42.54123650394683,
							0
						],
						[
							-76.64813241863622,
							42.54181450412181,
							0
						],
						[
							-76.64760241847887,
							42.54198450417477,
							0
						],
						[
							-76.6475554184579,
							42.54190550416212,
							0
						],
						[
							-76.6474304184027,
							42.54170350412998,
							0
						],
						[
							-76.64738741838086,
							42.54159550411184,
							0
						],
						[
							-76.64737141837176,
							42.54154250410272,
							0
						],
						[
							-76.64732141833258,
							42.54123250404764,
							0
						],
						[
							-76.6472884183103,
							42.54107550402004,
							0
						],
						[
							-76.64724141828552,
							42.54094550399798,
							0
						],
						[
							-76.64713341823266,
							42.54070150395741,
							0
						],
						[
							-76.64700041816745,
							42.54039950390719,
							0
						],
						[
							-76.64695441814105,
							42.54024350388028,
							0
						],
						[
							-76.64690741811418,
							42.54008550385309,
							0
						],
						[
							-76.64686741807986,
							42.53979750380164,
							0
						],
						[
							-76.64686741805838,
							42.53950950374855,
							0
						],
						[
							-76.64687541805559,
							42.53943750373495,
							0
						],
						[
							-76.64712541803239,
							42.53805150346927,
							0
						],
						[
							-76.64713741802981,
							42.53796550345292,
							0
						],
						[
							-76.64741241800353,
							42.53643050315873,
							0
						],
						[
							-76.64662441772131,
							42.53603650311825,
							0
						],
						[
							-76.6441904168497,
							42.53482050299337,
							0
						],
						[
							-76.64320741649911,
							42.53434850294645,
							0
						],
						[
							-76.64238241620706,
							42.53398150291243,
							0
						],
						[
							-76.64058441557337,
							42.53321950284528,
							0
						],
						[
							-76.64054641555923,
							42.53319350284205,
							0
						],
						[
							-76.6399184153362,
							42.53290450281438,
							0
						],
						[
							-76.63933341512332,
							42.5325665027759,
							0
						],
						[
							-76.63873041489725,
							42.53212950271994,
							0
						],
						[
							-76.6382614147147,
							42.53169950265977,
							0
						],
						[
							-76.63807541464043,
							42.53150350263122,
							0
						],
						[
							-76.63769941448432,
							42.53102750255879,
							0
						],
						[
							-76.63742941436543,
							42.53059450248996,
							0
						],
						[
							-76.637328414319,
							42.53040650245941,
							0
						],
						[
							-76.63724341427839,
							42.53022750242987,
							0
						],
						[
							-76.63714041422938,
							42.53001350239462,
							0
						],
						[
							-76.63710641421204,
							42.52992750238014,
							0
						],
						[
							-76.6370644141906,
							42.52982050236213,
							0
						],
						[
							-76.63702041416815,
							42.52970850234327,
							0
						],
						[
							-76.63700441415988,
							42.52966650233618,
							0
						],
						[
							-76.6368904141014,
							42.52937250228661,
							0
						],
						[
							-76.63678741404865,
							42.52910850224215,
							0
						],
						[
							-76.6364604138941,
							42.52844250213267,
							0
						],
						[
							-76.63604041371153,
							42.5278005020314,
							0
						],
						[
							-76.63595241367463,
							42.5276845020136,
							0
						],
						[
							-76.6356054135315,
							42.52725750194902,
							0
						],
						[
							-76.63274441238543,
							42.52419550150096,
							0
						],
						[
							-76.63234741222432,
							42.5237425014336,
							0
						],
						[
							-76.6322894122007,
							42.52367550142361,
							0
						],
						[
							-76.63110041171817,
							42.52231850122181,
							0
						],
						[
							-76.62903741091024,
							42.52035750094421,
							0
						],
						[
							-76.62681041005264,
							42.51843550068043,
							0
						],
						[
							-76.62412740902637,
							42.51621250037968,
							0
						],
						[
							-76.62227640831952,
							42.51469450017506,
							0
						],
						[
							-76.62221340829507,
							42.51463750016712,
							0
						],
						[
							-76.62197540820316,
							42.51442850013827,
							0
						],
						[
							-76.62152040802853,
							42.51404350008577,
							0
						],
						[
							-76.62011740749016,
							42.51285749992412,
							0
						],
						[
							-76.61996140743035,
							42.5127264999063,
							0
						],
						[
							-76.61989040740313,
							42.51266649989812,
							0
						],
						[
							-76.61760440652947,
							42.51078149964344,
							0
						],
						[
							-76.61705040631773,
							42.51032449958168,
							0
						],
						[
							-76.61629140602744,
							42.50969549949654,
							0
						],
						[
							-76.61492140550327,
							42.50855749934234,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>60</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090016001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>34443465</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>8584679</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.5218883</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5886068</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090016001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090016001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1101</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>494</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>8509.96</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>33</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>36</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>12.09</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.99</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>26913</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>26574</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>27886</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>14974</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>14630</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>15517</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8871</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>8603</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>9193</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>6103</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>6026</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>6324</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.18</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.06</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>2280</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>85</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>3174</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>12</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2248</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1410</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1449</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>861</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>93</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>7</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00060"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.51822436912751,
							42.43627548991474,
							0
						],
						[
							-76.51812736910827,
							42.43643648994844,
							0
						],
						[
							-76.51766736902204,
							42.4372674901208,
							0
						],
						[
							-76.51653136880627,
							42.43928149053932,
							0
						],
						[
							-76.51618336873885,
							42.43988049066423,
							0
						],
						[
							-76.51575036865515,
							42.44062849082008,
							0
						],
						[
							-76.51564636863257,
							42.44077449085132,
							0
						],
						[
							-76.51557136861486,
							42.44086049087026,
							0
						],
						[
							-76.51538436856742,
							42.44103049090926,
							0
						],
						[
							-76.51548336860166,
							42.44106449091152,
							0
						],
						[
							-76.51554636862247,
							42.44107249091046,
							0
						],
						[
							-76.51560536864073,
							42.44106349090641,
							0
						],
						[
							-76.51565536865567,
							42.44104849090162,
							0
						],
						[
							-76.515761368686,
							42.44099849088809,
							0
						],
						[
							-76.51601836875285,
							42.44078749083865,
							0
						],
						[
							-76.51644136886388,
							42.44045349075974,
							0
						],
						[
							-76.51677436895015,
							42.44017449069465,
							0
						],
						[
							-76.51687836897737,
							42.44009149067511,
							0
						],
						[
							-76.51708836903056,
							42.43989949063107,
							0
						],
						[
							-76.51762436916214,
							42.4393524905082,
							0
						],
						[
							-76.51778636919734,
							42.43912549045965,
							0
						],
						[
							-76.51792136922153,
							42.43886649040626,
							0
						],
						[
							-76.51795236922845,
							42.43882549039745,
							0
						],
						[
							-76.5181463692785,
							42.43866049035905,
							0
						],
						[
							-76.51839036934527,
							42.43850449032033,
							0
						],
						[
							-76.51856536939425,
							42.4384074902953,
							0
						],
						[
							-76.51864336941654,
							42.43837049028528,
							0
						],
						[
							-76.51884436947385,
							42.43827349025921,
							0
						],
						[
							-76.5193883696302,
							42.43802749019168,
							0
						],
						[
							-76.52008936983077,
							42.43769849010243,
							0
						],
						[
							-76.52135837019476,
							42.43711448994301,
							0
						],
						[
							-76.5218783703434,
							42.43686848987645,
							0
						],
						[
							-76.52222637044343,
							42.43671148983332,
							0
						],
						[
							-76.52257337054279,
							42.43654948978929,
							0
						],
						[
							-76.5229233706437,
							42.43639548974662,
							0
						],
						[
							-76.52300737066827,
							42.43636348973733,
							0
						],
						[
							-76.52311037069954,
							42.43633948972871,
							0
						],
						[
							-76.52322537073563,
							42.43632848972199,
							0
						],
						[
							-76.5237283708955,
							42.43630848969794,
							0
						],
						[
							-76.52461737117882,
							42.43628348965731,
							0
						],
						[
							-76.52521537137004,
							42.43627548963162,
							0
						],
						[
							-76.52561837149754,
							42.43625148961085,
							0
						],
						[
							-76.52603737163186,
							42.43625048959369,
							0
						],
						[
							-76.52810737229319,
							42.43621448950319,
							0
						],
						[
							-76.52901337258196,
							42.43618948946187,
							0
						],
						[
							-76.52967137279163,
							42.43617048943169,
							0
						],
						[
							-76.53058937308491,
							42.43615448939153,
							0
						],
						[
							-76.5322813736246,
							42.43611348931542,
							0
						],
						[
							-76.53271237376241,
							42.43610748929685,
							0
						],
						[
							-76.5335433740268,
							42.4360784892578,
							0
						],
						[
							-76.53378737410485,
							42.43607548924737,
							0
						],
						[
							-76.53641637494219,
							42.43599548912604,
							0
						],
						[
							-76.53750537528906,
							42.43596248907581,
							0
						],
						[
							-76.54008737611233,
							42.43589648895897,
							0
						],
						[
							-76.54031737618656,
							42.43590248895076,
							0
						],
						[
							-76.54041837621948,
							42.43590948894796,
							0
						],
						[
							-76.54050237624739,
							42.43592248894695,
							0
						],
						[
							-76.54067437630668,
							42.43597848895035,
							0
						],
						[
							-76.54081837635869,
							42.43605748895912,
							0
						],
						[
							-76.54102137643488,
							42.43620748897864,
							0
						],
						[
							-76.54123237651571,
							42.43638548900301,
							0
						],
						[
							-76.54139937658073,
							42.43654048902491,
							0
						],
						[
							-76.54148037661159,
							42.43660648903383,
							0
						],
						[
							-76.54164837667368,
							42.43671748904755,
							0
						],
						[
							-76.54171137669645,
							42.43675248905148,
							0
						],
						[
							-76.54179837672723,
							42.43679148905516,
							0
						],
						[
							-76.54188237675646,
							42.43682248905748,
							0
						],
						[
							-76.54199637679555,
							42.43685648905916,
							0
						],
						[
							-76.54207637682248,
							42.43687348905905,
							0
						],
						[
							-76.54241837693512,
							42.43691348905259,
							0
						],
						[
							-76.54473937768827,
							42.43703148898035,
							0
						],
						[
							-76.54500737777393,
							42.43702748896876,
							0
						],
						[
							-76.5451043778046,
							42.43702148896371,
							0
						],
						[
							-76.54534237787871,
							42.43699148894851,
							0
						],
						[
							-76.54556537794669,
							42.43694348893058,
							0
						],
						[
							-76.54678137831087,
							42.43659348881657,
							0
						],
						[
							-76.54692437835429,
							42.43656048880465,
							0
						],
						[
							-76.54702137838464,
							42.43655048879888,
							0
						],
						[
							-76.54720437844313,
							42.43654748879091,
							0
						],
						[
							-76.54762637858173,
							42.43659148878194,
							0
						],
						[
							-76.54777937863264,
							42.43661648878035,
							0
						],
						[
							-76.54793837868644,
							42.43665448878093,
							0
						],
						[
							-76.54802937871756,
							42.43668048878206,
							0
						],
						[
							-76.54818437877215,
							42.43674648878798,
							0
						],
						[
							-76.54827037880327,
							42.43679448879338,
							0
						],
						[
							-76.54836137883667,
							42.43685148880022,
							0
						],
						[
							-76.54859937892645,
							42.43703348882423,
							0
						],
						[
							-76.54866537895353,
							42.43711348883636,
							0
						],
						[
							-76.54890837904856,
							42.43734448886922,
							0
						],
						[
							-76.54904737910059,
							42.43744548888227,
							0
						],
						[
							-76.54922437916488,
							42.43754748889396,
							0
						],
						[
							-76.54943337923702,
							42.43761648889826,
							0
						],
						[
							-76.54969437931948,
							42.43759948888452,
							0
						],
						[
							-76.54974737933597,
							42.43759248888109,
							0
						],
						[
							-76.54995037939901,
							42.43756448886768,
							0
						],
						[
							-76.55034537952459,
							42.43754948884889,
							0
						],
						[
							-76.55045037955817,
							42.43754848884444,
							0
						],
						[
							-76.55069837963616,
							42.43752748883049,
							0
						],
						[
							-76.55117537978434,
							42.43746248879913,
							0
						],
						[
							-76.55146937987533,
							42.43741748877891,
							0
						],
						[
							-76.55156037990376,
							42.43740748877336,
							0
						],
						[
							-76.55216438009556,
							42.43738148874407,
							0
						],
						[
							-76.55229238013551,
							42.43736648873609,
							0
						],
						[
							-76.5525493802146,
							42.43732148871735,
							0
						],
						[
							-76.55281538029467,
							42.43725048869344,
							0
						],
						[
							-76.55297238034059,
							42.43719048867598,
							0
						],
						[
							-76.55309938037585,
							42.43711648865714,
							0
						],
						[
							-76.55319238040096,
							42.43705248864154,
							0
						],
						[
							-76.55329838042654,
							42.43693848861615,
							0
						],
						[
							-76.55333238043339,
							42.43688348860461,
							0
						],
						[
							-76.55336038043801,
							42.43682448859256,
							0
						],
						[
							-76.55341038044367,
							42.43668448856463,
							0
						],
						[
							-76.55347238044153,
							42.436386488507,
							0
						],
						[
							-76.5535703804313,
							42.43582248839873,
							0
						],
						[
							-76.55360938043309,
							42.43567748837033,
							0
						],
						[
							-76.55366038044176,
							42.43557348834902,
							0
						],
						[
							-76.55375038045992,
							42.43542848831856,
							0
						],
						[
							-76.55383538048969,
							42.43546248832139,
							0
						],
						[
							-76.55391038051498,
							42.43547948832151,
							0
						],
						[
							-76.5541583805946,
							42.43548048831163,
							0
						],
						[
							-76.55443538068286,
							42.43547248829893,
							0
						],
						[
							-76.55450938070622,
							42.435467488295,
							0
						],
						[
							-76.5558783811432,
							42.43543948823429,
							0
						],
						[
							-76.55928938222976,
							42.4353394880775,
							0
						],
						[
							-76.56225038317369,
							42.43526248794315,
							0
						],
						[
							-76.56232438319704,
							42.43525748793923,
							0
						],
						[
							-76.56413038377305,
							42.43521448785804,
							0
						],
						[
							-76.56606638439001,
							42.4351614877697,
							0
						],
						[
							-76.56642338450374,
							42.43515148775337,
							0
						],
						[
							-76.56717438474297,
							42.43512948771883,
							0
						],
						[
							-76.5675853848739,
							42.43511748769993,
							0
						],
						[
							-76.57053538581401,
							42.43503748756546,
							0
						],
						[
							-76.5704383856468,
							42.43319648722894,
							0
						],
						[
							-76.57035838551808,
							42.43180248697436,
							0
						],
						[
							-76.57026538534788,
							42.4299034866269,
							0
						],
						[
							-76.57023838527026,
							42.42897048645544,
							0
						],
						[
							-76.57022738526709,
							42.42897548645681,
							0
						],
						[
							-76.57015838511528,
							42.42722048613499,
							0
						],
						[
							-76.57011138500812,
							42.42597448590643,
							0
						],
						[
							-76.5700073847952,
							42.42354448546114,
							0
						],
						[
							-76.57000538479264,
							42.42351848545642,
							0
						],
						[
							-76.56996838474147,
							42.4229864853595,
							0
						],
						[
							-76.57031038485077,
							42.42298148534469,
							0
						],
						[
							-76.57056938493307,
							42.42297148533234,
							0
						],
						[
							-76.57066038496197,
							42.4229674853279,
							0
						],
						[
							-76.57116538512308,
							42.4229564853054,
							0
						],
						[
							-76.57167038528381,
							42.42294048528194,
							0
						],
						[
							-76.57324238578492,
							42.4229004852108,
							0
						],
						[
							-76.5745093861886,
							42.42286548515291,
							0
						],
						[
							-76.57480638628354,
							42.42286148514013,
							0
						],
						[
							-76.57511338638129,
							42.42285248512602,
							0
						],
						[
							-76.57541438647753,
							42.42284848511306,
							0
						],
						[
							-76.5759783866572,
							42.42283248508722,
							0
						],
						[
							-76.57626038674725,
							42.42282748507486,
							0
						],
						[
							-76.57811338733784,
							42.42277948499081,
							0
						],
						[
							-76.57836538741843,
							42.42277648498003,
							0
						],
						[
							-76.578799387557,
							42.42276848496093,
							0
						],
						[
							-76.57974838786009,
							42.42275248491949,
							0
						],
						[
							-76.58019838800328,
							42.42273748489844,
							0
						],
						[
							-76.58049938809951,
							42.42273348488548,
							0
						],
						[
							-76.58072838817337,
							42.42273948487731,
							0
						],
						[
							-76.58080938819991,
							42.4227474848755,
							0
						],
						[
							-76.58096838825142,
							42.42275448487035,
							0
						],
						[
							-76.58112638830319,
							42.42276948486672,
							0
						],
						[
							-76.58154338844216,
							42.42284048486292,
							0
						],
						[
							-76.58163438847221,
							42.42285248486145,
							0
						],
						[
							-76.58172738850328,
							42.42286948486081,
							0
						],
						[
							-76.58190138856055,
							42.42288948485747,
							0
						],
						[
							-76.58214638864023,
							42.4229044848503,
							0
						],
						[
							-76.58239938872106,
							42.4229004848393,
							0
						],
						[
							-76.58249138875017,
							42.42289548483463,
							0
						],
						[
							-76.58253938876513,
							42.42288948483158,
							0
						],
						[
							-76.58321038897428,
							42.42280848478936,
							0
						],
						[
							-76.58356738908505,
							42.42275848476563,
							0
						],
						[
							-76.58391138919268,
							42.42272248474501,
							0
						],
						[
							-76.58417838927639,
							42.42269648472936,
							0
						],
						[
							-76.58469138943863,
							42.42266648470301,
							0
						],
						[
							-76.58520338960096,
							42.4226414846776,
							0
						],
						[
							-76.58546038968277,
							42.42263348466568,
							0
						],
						[
							-76.58585838980896,
							42.42261448464601,
							0
						],
						[
							-76.58637838997451,
							42.42259848462197,
							0
						],
						[
							-76.58651039001667,
							42.42259648461624,
							0
						],
						[
							-76.5866573900633,
							42.42258948460899,
							0
						],
						[
							-76.589012390814,
							42.42253048450247,
							0
						],
						[
							-76.58931439091046,
							42.42252548448929,
							0
						],
						[
							-76.58947139096065,
							42.42252348448254,
							0
						],
						[
							-76.58965939102042,
							42.42251648447365,
							0
						],
						[
							-76.58968639101708,
							42.42235448444257,
							0
						],
						[
							-76.58968439100744,
							42.42223248442006,
							0
						],
						[
							-76.58966839098899,
							42.42205248438744,
							0
						],
						[
							-76.58965839096885,
							42.42182348434548,
							0
						],
						[
							-76.58963639089659,
							42.42094148418322,
							0
						],
						[
							-76.58957339078457,
							42.41969948395605,
							0
						],
						[
							-76.58954339073902,
							42.41921348386735,
							0
						],
						[
							-76.58949939069134,
							42.41875948378514,
							0
						],
						[
							-76.58948439066857,
							42.4185164837408,
							0
						],
						[
							-76.58946239059132,
							42.41756648356594,
							0
						],
						[
							-76.58940039046632,
							42.4161444833054,
							0
						],
						[
							-76.58938039044129,
							42.41589248325957,
							0
						],
						[
							-76.5893693904141,
							42.41557248320082,
							0
						],
						[
							-76.58934839039813,
							42.41544748317855,
							0
						],
						[
							-76.58930839037534,
							42.4153124831552,
							0
						],
						[
							-76.58923239033841,
							42.41514248312682,
							0
						],
						[
							-76.58913639029478,
							42.41496848309854,
							0
						],
						[
							-76.58909039026938,
							42.41482448307374,
							0
						],
						[
							-76.58907039024737,
							42.41461348303553,
							0
						],
						[
							-76.58916539026475,
							42.41443648299894,
							0
						],
						[
							-76.58927139028795,
							42.41429048296762,
							0
						],
						[
							-76.58932239029662,
							42.4141864829463,
							0
						],
						[
							-76.58932939028858,
							42.4140474829203,
							0
						],
						[
							-76.58931239027183,
							42.41389448289267,
							0
						],
						[
							-76.58925339023097,
							42.41359748284013,
							0
						],
						[
							-76.58921239019661,
							42.4133104827887,
							0
						],
						[
							-76.58916939010635,
							42.41227548259894,
							0
						],
						[
							-76.58908539000132,
							42.41121848240677,
							0
						],
						[
							-76.58904038989239,
							42.40993948217195,
							0
						],
						[
							-76.5890393898435,
							42.40928248205041,
							0
						],
						[
							-76.58902038982013,
							42.40904848200789,
							0
						],
						[
							-76.58896438976731,
							42.40857648192281,
							0
						],
						[
							-76.58885938968355,
							42.40789848180163,
							0
						],
						[
							-76.58884938967172,
							42.40778148178039,
							0
						],
						[
							-76.58886838967308,
							42.40771748176776,
							0
						],
						[
							-76.58889438967913,
							42.40768648176097,
							0
						],
						[
							-76.5889083896576,
							42.40733448169526,
							0
						],
						[
							-76.58891038963395,
							42.40700548163429,
							0
						],
						[
							-76.58892738962278,
							42.40678048159198,
							0
						],
						[
							-76.58900738964998,
							42.40680148159262,
							0
						],
						[
							-76.58915638970157,
							42.4068534815962,
							0
						],
						[
							-76.58945038980454,
							42.4069714816061,
							0
						],
						[
							-76.5897033898937,
							42.40708048161601,
							0
						],
						[
							-76.59012539004553,
							42.40730448164032,
							0
						],
						[
							-76.59039839014244,
							42.40743148165276,
							0
						],
						[
							-76.59048139017223,
							42.40747448165736,
							0
						],
						[
							-76.5906513902316,
							42.40754048166266,
							0
						],
						[
							-76.59081139028606,
							42.40758348166414,
							0
						],
						[
							-76.59098939034453,
							42.40760248166043,
							0
						],
						[
							-76.59102539035636,
							42.40760648165971,
							0
						],
						[
							-76.59110139038133,
							42.40761448165809,
							0
						],
						[
							-76.59118239040787,
							42.4076224816563,
							0
						],
						[
							-76.5913363904571,
							42.40762048164968,
							0
						],
						[
							-76.59164639055486,
							42.40759848163303,
							0
						],
						[
							-76.59188939063218,
							42.40759048162168,
							0
						],
						[
							-76.59201239067183,
							42.40759348161725,
							0
						],
						[
							-76.59225639074974,
							42.40758948160662,
							0
						],
						[
							-76.59260239086133,
							42.40759848159424,
							0
						],
						[
							-76.5930503910065,
							42.40761948157994,
							0
						],
						[
							-76.59327239107876,
							42.40763448157371,
							0
						],
						[
							-76.59402839132363,
							42.40766848154933,
							0
						],
						[
							-76.5943533914285,
							42.4076774815378,
							0
						],
						[
							-76.59449239147357,
							42.40768448153346,
							0
						],
						[
							-76.59464739152348,
							42.40768748152772,
							0
						],
						[
							-76.59531939173816,
							42.40767748149859,
							0
						],
						[
							-76.5958833919174,
							42.40765648147183,
							0
						],
						[
							-76.5959893919513,
							42.40765548146734,
							0
						],
						[
							-76.59624239203345,
							42.40766948145967,
							0
						],
						[
							-76.59638839208179,
							42.40769048145763,
							0
						],
						[
							-76.5966003921514,
							42.40771248145309,
							0
						],
						[
							-76.59664739216683,
							42.40771748145212,
							0
						],
						[
							-76.59676239220497,
							42.4077344814506,
							0
						],
						[
							-76.59687639224201,
							42.40774148144728,
							0
						],
						[
							-76.59696439227014,
							42.4077404814435,
							0
						],
						[
							-76.59713539232415,
							42.40772948143454,
							0
						],
						[
							-76.59722139235062,
							42.40771448142827,
							0
						],
						[
							-76.59762339247636,
							42.40767248140417,
							0
						],
						[
							-76.59770239250133,
							42.40766748140004,
							0
						],
						[
							-76.59777839252496,
							42.40765748139511,
							0
						],
						[
							-76.59804939261153,
							42.40765348138337,
							0
						],
						[
							-76.59831639269817,
							42.40766748137512,
							0
						],
						[
							-76.59865639281159,
							42.40772748137244,
							0
						],
						[
							-76.59876739284812,
							42.40774048137033,
							0
						],
						[
							-76.5989243928998,
							42.4077584813673,
							0
						],
						[
							-76.5989983929244,
							42.4077704813665,
							0
						],
						[
							-76.59924639300529,
							42.40778948135996,
							0
						],
						[
							-76.59934039303566,
							42.4077924813567,
							0
						],
						[
							-76.59943239306574,
							42.40780048135444,
							0
						],
						[
							-76.59960339312106,
							42.4078074813488,
							0
						],
						[
							-76.59996239323844,
							42.40783848133997,
							0
						],
						[
							-76.59965239313041,
							42.4077214813309,
							0
						],
						[
							-76.59913439294826,
							42.40750348131158,
							0
						],
						[
							-76.59908239292997,
							42.40748148130963,
							0
						],
						[
							-76.59887339285514,
							42.40737548129849,
							0
						],
						[
							-76.59859239275339,
							42.40721748128066,
							0
						],
						[
							-76.5985063927216,
							42.4071604812736,
							0
						],
						[
							-76.59834139265858,
							42.40702348125495,
							0
						],
						[
							-76.5981873925974,
							42.4068634812316,
							0
						],
						[
							-76.59806239254513,
							42.40669848120613,
							0
						],
						[
							-76.59774239240656,
							42.406211481129,
							0
						],
						[
							-76.59772739240006,
							42.40618848112536,
							0
						],
						[
							-76.59746739228649,
							42.40577948106022,
							0
						],
						[
							-76.5973693922445,
							42.40563648103774,
							0
						],
						[
							-76.59705739211287,
							42.4052084809712,
							0
						],
						[
							-76.59690339205005,
							42.40502648094377,
							0
						],
						[
							-76.59682039201687,
							42.40493748093066,
							0
						],
						[
							-76.59668539196407,
							42.40480848091229,
							0
						],
						[
							-76.59646339187915,
							42.40462248088686,
							0
						],
						[
							-76.59621939178757,
							42.40444148086326,
							0
						],
						[
							-76.59604139172171,
							42.40432248084846,
							0
						],
						[
							-76.59586239165621,
							42.40421248083538,
							0
						],
						[
							-76.59558739155632,
							42.40405348081711,
							0
						],
						[
							-76.59521539141882,
							42.40380648078649,
							0
						],
						[
							-76.59513439138931,
							42.4037584807809,
							0
						],
						[
							-76.5948883912987,
							42.40359948076146,
							0
						],
						[
							-76.59439539111791,
							42.40329148072445,
							0
						],
						[
							-76.59397739096508,
							42.40303648069422,
							0
						],
						[
							-76.5934683907785,
							42.4027194806562,
							0
						],
						[
							-76.59311639065135,
							42.40252548063458,
							0
						],
						[
							-76.59285839055926,
							42.40239848062156,
							0
						],
						[
							-76.59259139046493,
							42.40228048061055,
							0
						],
						[
							-76.59236639038677,
							42.4021984806045,
							0
						],
						[
							-76.59224939034675,
							42.40216448060296,
							0
						],
						[
							-76.59213239030636,
							42.40212548060049,
							0
						],
						[
							-76.59189539022557,
							42.40206048059808,
							0
						],
						[
							-76.59171539016478,
							42.40201848059761,
							0
						],
						[
							-76.5917603901758,
							42.40197248058726,
							0
						],
						[
							-76.5918113901895,
							42.40193648057852,
							0
						],
						[
							-76.59206239026304,
							42.40184248055095,
							0
						],
						[
							-76.59221839030755,
							42.40176848053094,
							0
						],
						[
							-76.5922883903269,
							42.40172648052032,
							0
						],
						[
							-76.59234939034305,
							42.40168048050933,
							0
						],
						[
							-76.59240339035667,
							42.40163048049789,
							0
						],
						[
							-76.59244739036679,
							42.40157648048611,
							0
						],
						[
							-76.59252239038175,
							42.40145348046029,
							0
						],
						[
							-76.5925983903937,
							42.40128548042612,
							0
						],
						[
							-76.59266539039983,
							42.4010774803849,
							0
						],
						[
							-76.5927143904068,
							42.40095948036108,
							0
						],
						[
							-76.592752390415,
							42.40090548034956,
							0
						],
						[
							-76.59280539042898,
							42.4008644803398,
							0
						],
						[
							-76.59287139044767,
							42.40083148033101,
							0
						],
						[
							-76.5929383904671,
							42.40080348032311,
							0
						],
						[
							-76.59300939048845,
							42.40078448031671,
							0
						],
						[
							-76.59308539051207,
							42.40077448031179,
							0
						],
						[
							-76.59324739056349,
							42.40076748030392,
							0
						],
						[
							-76.59332739058942,
							42.40077148030142,
							0
						],
						[
							-76.59358239066998,
							42.40075548028812,
							0
						],
						[
							-76.59381539074364,
							42.40074148027607,
							0
						],
						[
							-76.59422539087403,
							42.40072748025684,
							0
						],
						[
							-76.59471839103153,
							42.40072048023554,
							0
						],
						[
							-76.59504739113636,
							42.40071148022053,
							0
						],
						[
							-76.5954573912677,
							42.40071048020371,
							0
						],
						[
							-76.59616839149413,
							42.40069048017116,
							0
						],
						[
							-76.59955439257241,
							42.400594480016,
							0
						],
						[
							-76.5998013926506,
							42.40058148000358,
							0
						],
						[
							-76.60154039320442,
							42.40053247992393,
							0
						],
						[
							-76.60231839345218,
							42.40051047988829,
							0
						],
						[
							-76.60264039355442,
							42.40049747987282,
							0
						],
						[
							-76.60296039365663,
							42.40049247985888,
							0
						],
						[
							-76.60360039386015,
							42.40047047982885,
							0
						],
						[
							-76.6038603939432,
							42.40046647981757,
							0
						],
						[
							-76.60328039364677,
							42.39897047956423,
							0
						],
						[
							-76.6030183935152,
							42.39832647945567,
							0
						],
						[
							-76.60295139348443,
							42.39820047943506,
							0
						],
						[
							-76.6028703934493,
							42.39807647941539,
							0
						],
						[
							-76.60278939341609,
							42.39797847940056,
							0
						],
						[
							-76.60271439338644,
							42.39790247938954,
							0
						],
						[
							-76.6025093933073,
							42.39772047936419,
							0
						],
						[
							-76.60194939309315,
							42.39725147930007,
							0
						],
						[
							-76.60162939296958,
							42.39696747926051,
							0
						],
						[
							-76.60130139284423,
							42.39669347922311,
							0
						],
						[
							-76.60084739267256,
							42.39633947917602,
							0
						],
						[
							-76.60027239245295,
							42.39586147911086,
							0
						],
						[
							-76.59969039222875,
							42.39535147904008,
							0
						],
						[
							-76.59904939198002,
							42.39476547895762,
							0
						],
						[
							-76.59875939186874,
							42.39451747892348,
							0
						],
						[
							-76.59842839174338,
							42.39425647888861,
							0
						],
						[
							-76.59820539166053,
							42.39410247886914,
							0
						],
						[
							-76.59809439162007,
							42.39403647886143,
							0
						],
						[
							-76.59798639158022,
							42.39396547885266,
							0
						],
						[
							-76.59789339154486,
							42.39389047884255,
							0
						],
						[
							-76.59781039151207,
							42.39380647883036,
							0
						],
						[
							-76.59773639148207,
							42.39372147881764,
							0
						],
						[
							-76.59770739146944,
							42.39367647881048,
							0
						],
						[
							-76.59767439145392,
							42.39360947879943,
							0
						],
						[
							-76.59763839143477,
							42.39350647878182,
							0
						],
						[
							-76.5974763913624,
							42.39322947873711,
							0
						],
						[
							-76.59743739134318,
							42.39313847872185,
							0
						],
						[
							-76.59742039133485,
							42.39309947871532,
							0
						],
						[
							-76.59740039132188,
							42.39301047869967,
							0
						],
						[
							-76.59739639131358,
							42.39291547868224,
							0
						],
						[
							-76.59741939127008,
							42.39222647855377,
							0
						],
						[
							-76.59737139125477,
							42.39222747855589,
							0
						],
						[
							-76.59730439123233,
							42.39221447855621,
							0
						],
						[
							-76.59724439121183,
							42.3921974785555,
							0
						],
						[
							-76.59718339119,
							42.39216647855222,
							0
						],
						[
							-76.59711939116661,
							42.39212747854761,
							0
						],
						[
							-76.59699639111928,
							42.3920204785328,
							0
						],
						[
							-76.5969613911055,
							42.39198547852773,
							0
						],
						[
							-76.59665639098175,
							42.39163347847494,
							0
						],
						[
							-76.59653039093219,
							42.3915094784571,
							0
						],
						[
							-76.5964803909132,
							42.39146947845171,
							0
						],
						[
							-76.59640939088757,
							42.39143047844738,
							0
						],
						[
							-76.59633239086031,
							42.39139547844403,
							0
						],
						[
							-76.59619939081415,
							42.39134747844054,
							0
						],
						[
							-76.59609639077921,
							42.39132147843989,
							0
						],
						[
							-76.59598839074341,
							42.39130547844133,
							0
						],
						[
							-76.59593539072547,
							42.39129247844105,
							0
						],
						[
							-76.5957073906493,
							42.39125047844253,
							0
						],
						[
							-76.5954053905488,
							42.39120047844553,
							0
						],
						[
							-76.59518839047719,
							42.39117247844914,
							0
						],
						[
							-76.59494139039327,
							42.39110847844731,
							0
						],
						[
							-76.59478739033943,
							42.39104747844227,
							0
						],
						[
							-76.5946783902996,
							42.39098147843448,
							0
						],
						[
							-76.59462139027809,
							42.39093747842863,
							0
						],
						[
							-76.59457539025973,
							42.39088847842142,
							0
						],
						[
							-76.5945513902491,
							42.390848478415,
							0
						],
						[
							-76.5945293902354,
							42.39075847839924,
							0
						],
						[
							-76.59451039021297,
							42.39053747835909,
							0
						],
						[
							-76.59452739017621,
							42.38996547825251,
							0
						],
						[
							-76.59452639009109,
							42.38881647803984,
							0
						],
						[
							-76.59452639003005,
							42.38798947788672,
							0
						],
						[
							-76.59449738992902,
							42.38674647765777,
							0
						],
						[
							-76.59448238991955,
							42.38668347764671,
							0
						],
						[
							-76.59445838990729,
							42.3866214776362,
							0
						],
						[
							-76.59442738989308,
							42.38656347762672,
							0
						],
						[
							-76.59434238986259,
							42.38651947762202,
							0
						],
						[
							-76.59420438982248,
							42.38657547763798,
							0
						],
						[
							-76.59405938977912,
							42.38661747765164,
							0
						],
						[
							-76.59387638972534,
							42.38668347767128,
							0
						],
						[
							-76.59338438957775,
							42.38682047771661,
							0
						],
						[
							-76.59328438954718,
							42.38684047772437,
							0
						],
						[
							-76.59315738950892,
							42.38687347773563,
							0
						],
						[
							-76.59290138943048,
							42.38692247775506,
							0
						],
						[
							-76.59277238939053,
							42.38694147776383,
							0
						],
						[
							-76.59264438935135,
							42.38696647777364,
							0
						],
						[
							-76.59217038920488,
							42.38704047780657,
							0
						],
						[
							-76.59199738915089,
							42.38706047781732,
							0
						],
						[
							-76.5918243890973,
							42.38708547782894,
							0
						],
						[
							-76.5916513890433,
							42.38710547783966,
							0
						],
						[
							-76.59108538886818,
							42.38719047787835,
							0
						],
						[
							-76.59095338882696,
							42.38720547788648,
							0
						],
						[
							-76.59050238868893,
							42.38729347792107,
							0
						],
						[
							-76.59023638860853,
							42.38735947794406,
							0
						],
						[
							-76.59012338857477,
							42.38739247795476,
							0
						],
						[
							-76.59003138854703,
							42.38741647796293,
							0
						],
						[
							-76.58993838851929,
							42.3874444779719,
							0
						],
						[
							-76.58984638849194,
							42.387473477981,
							0
						],
						[
							-76.58975638846553,
							42.38750647799074,
							0
						],
						[
							-76.5896643884384,
							42.3875384780004,
							0
						],
						[
							-76.58957438841169,
							42.38756747800942,
							0
						],
						[
							-76.58943938837217,
							42.38761847802434,
							0
						],
						[
							-76.58930738833334,
							42.38766547803841,
							0
						],
						[
							-76.58904338825626,
							42.38776747806799,
							0
						],
						[
							-76.5889113882178,
							42.38781947808296,
							0
						],
						[
							-76.58877638817799,
							42.38786647809715,
							0
						],
						[
							-76.588652388142,
							42.3879174781116,
							0
						],
						[
							-76.58814038799234,
							42.38811347816866,
							0
						],
						[
							-76.58777938788631,
							42.38824447820756,
							0
						],
						[
							-76.58766538785322,
							42.38829147822088,
							0
						],
						[
							-76.58743138778443,
							42.38837547824591,
							0
						],
						[
							-76.58700538766027,
							42.3885434782943,
							0
						],
						[
							-76.58669738757084,
							42.38866947833011,
							0
						],
						[
							-76.58638838748072,
							42.38879047836505,
							0
						],
						[
							-76.58611338740123,
							42.38890747839784,
							0
						],
						[
							-76.58570238728188,
							42.38907547844562,
							0
						],
						[
							-76.58566138726984,
							42.38909047845005,
							0
						],
						[
							-76.58535138717866,
							42.38920147848319,
							0
						],
						[
							-76.58524338714648,
							42.38923447849366,
							0
						],
						[
							-76.58513538711466,
							42.38927247850509,
							0
						],
						[
							-76.5848093870171,
							42.38936647853571,
							0
						],
						[
							-76.58437638688576,
							42.38946747857197,
							0
						],
						[
							-76.58413938681363,
							42.3895194785912,
							0
						],
						[
							-76.58363038666036,
							42.38965347863665,
							0
						],
						[
							-76.58325538654681,
							42.38974347866852,
							0
						],
						[
							-76.58274138639221,
							42.38988147871491,
							0
						],
						[
							-76.58221438623444,
							42.39003247876422,
							0
						],
						[
							-76.58131938596777,
							42.39030647885124,
							0
						],
						[
							-76.58055338573831,
							42.39052447892266,
							0
						],
						[
							-76.58012538560915,
							42.39063347896019,
							0
						],
						[
							-76.57943738540064,
							42.39079647901826,
							0
						],
						[
							-76.57897038525805,
							42.39089247905497,
							0
						],
						[
							-76.57857238513584,
							42.39096547908462,
							0
						],
						[
							-76.57710638468369,
							42.39120647918865,
							0
						],
						[
							-76.57662938453359,
							42.39124447921501,
							0
						],
						[
							-76.5764163844662,
							42.39125647922587,
							0
						],
						[
							-76.57593838431347,
							42.39126347924657,
							0
						],
						[
							-76.57457338387628,
							42.3912684793028,
							0
						],
						[
							-76.57375438361257,
							42.39125247933303,
							0
						],
						[
							-76.57328938346195,
							42.391231479348,
							0
						],
						[
							-76.57313438341214,
							42.3912294793539,
							0
						],
						[
							-76.57244138318732,
							42.39119347937533,
							0
						],
						[
							-76.57230738314422,
							42.39119147938039,
							0
						],
						[
							-76.57200538304637,
							42.39117747939004,
							0
						],
						[
							-76.57150538288491,
							42.39116147940734,
							0
						],
						[
							-76.57082038266303,
							42.39113047942937,
							0
						],
						[
							-76.56958038226014,
							42.3910574794661,
							0
						],
						[
							-76.56940238220265,
							42.3910514794722,
							0
						],
						[
							-76.56755638160212,
							42.39093247952497,
							0
						],
						[
							-76.56732238152665,
							42.39092647953333,
							0
						],
						[
							-76.567076381448,
							42.39092947954386,
							0
						],
						[
							-76.56683238137038,
							42.39093747955522,
							0
						],
						[
							-76.56592838108146,
							42.39094947959407,
							0
						],
						[
							-76.56577238103198,
							42.39095647960171,
							0
						],
						[
							-76.56536038090033,
							42.39096247961951,
							0
						],
						[
							-76.56504838080194,
							42.39098447963622,
							0
						],
						[
							-76.56483838073646,
							42.39100947964936,
							0
						],
						[
							-76.5642813805638,
							42.39108947968674,
							0
						],
						[
							-76.56421338054274,
							42.39109947969134,
							0
						],
						[
							-76.56414138051966,
							42.39109947969426,
							0
						],
						[
							-76.56408638050114,
							42.39108747969429,
							0
						],
						[
							-76.56404338048611,
							42.39107047969287,
							0
						],
						[
							-76.5639953804688,
							42.39104447969,
							0
						],
						[
							-76.56396138045554,
							42.39101247968546,
							0
						],
						[
							-76.56393638044494,
							42.39097747967997,
							0
						],
						[
							-76.56384838041748,
							42.39098747968539,
							0
						],
						[
							-76.56361338034604,
							42.39104047970472,
							0
						],
						[
							-76.56326838023942,
							42.39109447972869,
							0
						],
						[
							-76.56288738011963,
							42.39112647975006,
							0
						],
						[
							-76.5626893800564,
							42.39112947975865,
							0
						],
						[
							-76.56216637988791,
							42.39111847977778,
							0
						],
						[
							-76.56164537971875,
							42.39108947979352,
							0
						],
						[
							-76.56131537961097,
							42.3910624798019,
							0
						],
						[
							-76.56091937948108,
							42.39102247981053,
							0
						],
						[
							-76.56071137941336,
							42.39100847981638,
							0
						],
						[
							-76.56030137927993,
							42.39098147982799,
							0
						],
						[
							-76.56019437924542,
							42.39097847983175,
							0
						],
						[
							-76.5599663791709,
							42.39095947983747,
							0
						],
						[
							-76.55975837910341,
							42.39094847984386,
							0
						],
						[
							-76.55920337892506,
							42.39094247986522,
							0
						],
						[
							-76.55865237875167,
							42.3909864798957,
							0
						],
						[
							-76.55810837858346,
							42.39107047993329,
							0
						],
						[
							-76.5577153784641,
							42.39116047996587,
							0
						],
						[
							-76.55735237835509,
							42.3912604799991,
							0
						],
						[
							-76.5569553782382,
							42.39140148004128,
							0
						],
						[
							-76.55659137813251,
							42.39155048008361,
							0
						],
						[
							-76.5561423780072,
							42.39180348014865,
							0
						],
						[
							-76.55572837789452,
							42.39207548021577,
							0
						],
						[
							-76.55482537765714,
							42.39278248038325,
							0
						],
						[
							-76.55474037763484,
							42.39284948039911,
							0
						],
						[
							-76.55466337760623,
							42.39279648039242,
							0
						],
						[
							-76.55459337757887,
							42.39272948038283,
							0
						],
						[
							-76.55455237756048,
							42.39265848037135,
							0
						],
						[
							-76.55452637754485,
							42.39255948035407,
							0
						],
						[
							-76.55446437749785,
							42.39219148028846,
							0
						],
						[
							-76.55441737746317,
							42.3919254802411,
							0
						],
						[
							-76.55440037745079,
							42.3918314802244,
							0
						],
						[
							-76.55436737741904,
							42.39154448017258,
							0
						],
						[
							-76.55434137735766,
							42.39082448004032,
							0
						],
						[
							-76.55431437733772,
							42.39067148001308,
							0
						],
						[
							-76.55427537731629,
							42.39055047999226,
							0
						],
						[
							-76.5541203772389,
							42.39017447992891,
							0
						],
						[
							-76.55410837723187,
							42.39013147992143,
							0
						],
						[
							-76.554090377221,
							42.39006247990938,
							0
						],
						[
							-76.5540763772082,
							42.38994947988902,
							0
						],
						[
							-76.55410037716939,
							42.3893184797712,
							0
						],
						[
							-76.55411537716691,
							42.38921947975226,
							0
						],
						[
							-76.55413437716902,
							42.38916547974149,
							0
						],
						[
							-76.55417537717649,
							42.38908847972557,
							0
						],
						[
							-76.55444737723516,
							42.3887014796429,
							0
						],
						[
							-76.55450537724677,
							42.38860647962296,
							0
						],
						[
							-76.55453037724976,
							42.38853847960936,
							0
						],
						[
							-76.55454637725025,
							42.38847547959703,
							0
						],
						[
							-76.55455337724719,
							42.38840347958342,
							0
						],
						[
							-76.55455037724123,
							42.38833547957095,
							0
						],
						[
							-76.55453637723178,
							42.3882684795591,
							0
						],
						[
							-76.5545143772198,
							42.38820147954759,
							0
						],
						[
							-76.55445237718999,
							42.38806647952512,
							0
						],
						[
							-76.55441037717128,
							42.38799547951366,
							0
						],
						[
							-76.55437637715707,
							42.38795047950669,
							0
						],
						[
							-76.55425237710845,
							42.3878304794895,
							0
						],
						[
							-76.55423837710104,
							42.38779047948267,
							0
						],
						[
							-76.55387537698303,
							42.3877684794933,
							0
						],
						[
							-76.55391737698515,
							42.38761447946308,
							0
						],
						[
							-76.55395637698336,
							42.38742047942556,
							0
						],
						[
							-76.55400237696325,
							42.38694747933612,
							0
						],
						[
							-76.55398237692397,
							42.38650147925433,
							0
						],
						[
							-76.55397237691679,
							42.38644747924472,
							0
						],
						[
							-76.55392337685062,
							42.38576247911986,
							0
						],
						[
							-76.55389337680931,
							42.38533247904144,
							0
						],
						[
							-76.55380237668598,
							42.38405447880844,
							0
						],
						[
							-76.5532293765025,
							42.3840574788322,
							0
						],
						[
							-76.55297137641905,
							42.38404747884079,
							0
						],
						[
							-76.55271937633637,
							42.38402147884617,
							0
						],
						[
							-76.55262737630612,
							42.38401147884805,
							0
						],
						[
							-76.55229237619417,
							42.38394947885013,
							0
						],
						[
							-76.55200537609612,
							42.38386747884658,
							0
						],
						[
							-76.55184337604037,
							42.38381547884349,
							0
						],
						[
							-76.5516013759577,
							42.38374647884052,
							0
						],
						[
							-76.55134537587195,
							42.38369647884164,
							0
						],
						[
							-76.5507963756888,
							42.38359947884588,
							0
						],
						[
							-76.55053037559823,
							42.38352747884332,
							0
						],
						[
							-76.55032137552578,
							42.38345347883806,
							0
						],
						[
							-76.55024437549947,
							42.38343147883712,
							0
						],
						[
							-76.55016437547258,
							42.3834144788372,
							0
						],
						[
							-76.5500823754454,
							42.38340247883831,
							0
						],
						[
							-76.54993937539933,
							42.38339947884354,
							0
						],
						[
							-76.54958737528723,
							42.38340947885963,
							0
						],
						[
							-76.54939137522425,
							42.38340747886721,
							0
						],
						[
							-76.54927737518645,
							42.38339047886867,
							0
						],
						[
							-76.54920737516277,
							42.38337347886836,
							0
						],
						[
							-76.54913337513815,
							42.38336147886913,
							0
						],
						[
							-76.5487233749995,
							42.38326347886757,
							0
						],
						[
							-76.54858737495302,
							42.38322447886586,
							0
						],
						[
							-76.54811837479647,
							42.38314047886928,
							0
						],
						[
							-76.54789537472057,
							42.38308047886721,
							0
						],
						[
							-76.54783437470013,
							42.38306847886745,
							0
						],
						[
							-76.5477103746595,
							42.38305647887025,
							0
						],
						[
							-76.54758537461989,
							42.38306247887642,
							0
						],
						[
							-76.54746637458348,
							42.38308647888569,
							0
						],
						[
							-76.54735637455168,
							42.38313347889883,
							0
						],
						[
							-76.54730637453764,
							42.38316047890586,
							0
						],
						[
							-76.54726137452558,
							42.38319247891361,
							0
						],
						[
							-76.5472273745171,
							42.3832254789211,
							0
						],
						[
							-76.54704937447647,
							42.38344847896961,
							0
						],
						[
							-76.54665037437873,
							42.3838584790617,
							0
						],
						[
							-76.54651537434451,
							42.38398147908995,
							0
						],
						[
							-76.5464043743164,
							42.38408247911315,
							0
						],
						[
							-76.5463403742996,
							42.38413347912518,
							0
						],
						[
							-76.54523637400312,
							42.38491347931434,
							0
						],
						[
							-76.54512537397366,
							42.3849964793342,
							0
						],
						[
							-76.54498137393855,
							42.38514647936781,
							0
						],
						[
							-76.5446583738585,
							42.38546547943997,
							0
						],
						[
							-76.54432037376972,
							42.38573147950291,
							0
						],
						[
							-76.54341337352497,
							42.38635647965538,
							0
						],
						[
							-76.54282737336952,
							42.38679647976059,
							0
						],
						[
							-76.54278237335679,
							42.38681947976667,
							0
						],
						[
							-76.54272937334082,
							42.38683347977139,
							0
						],
						[
							-76.54267437332297,
							42.38683047977307,
							0
						],
						[
							-76.54262237330563,
							42.3868214797735,
							0
						],
						[
							-76.54257737328929,
							42.38679547977053,
							0
						],
						[
							-76.54254437327643,
							42.38676447976611,
							0
						],
						[
							-76.54246137323331,
							42.38654047972799,
							0
						],
						[
							-76.54235437318053,
							42.38628947968584,
							0
						],
						[
							-76.54222637312334,
							42.38607047965046,
							0
						],
						[
							-76.54206937305793,
							42.38586547961886,
							0
						],
						[
							-76.54195037301064,
							42.38574147960068,
							0
						],
						[
							-76.54182637296205,
							42.38562147958348,
							0
						],
						[
							-76.54174337292822,
							42.3855234795687,
							0
						],
						[
							-76.54167337289789,
							42.38541647955172,
							0
						],
						[
							-76.54161837287201,
							42.3853044795332,
							0
						],
						[
							-76.54136137272623,
							42.38444347938414,
							0
						],
						[
							-76.54131637270605,
							42.38436547937152,
							0
						],
						[
							-76.54125837268198,
							42.38429147936015,
							0
						],
						[
							-76.541211372664,
							42.38425147935465,
							0
						],
						[
							-76.5411503726412,
							42.38420747934896,
							0
						],
						[
							-76.54071737248226,
							42.38393447931593,
							0
						],
						[
							-76.54029637232948,
							42.38369247928815,
							0
						],
						[
							-76.54000637222384,
							42.38352047926801,
							0
						],
						[
							-76.53973337212697,
							42.38339347925554,
							0
						],
						[
							-76.53945537203047,
							42.38329347924829,
							0
						],
						[
							-76.53870637177452,
							42.38307847923876,
							0
						],
						[
							-76.53857037172841,
							42.38304447923797,
							0
						],
						[
							-76.53812937157917,
							42.38293747923599,
							0
						],
						[
							-76.53781837147216,
							42.38283847923024,
							0
						],
						[
							-76.5366473710697,
							42.38247147920966,
							0
						],
						[
							-76.5364413710005,
							42.38242847921003,
							0
						],
						[
							-76.53641337113186,
							42.38433447956419,
							0
						],
						[
							-76.5362803713652,
							42.38808248026373,
							0
						],
						[
							-76.53625537150707,
							42.39011748064161,
							0
						],
						[
							-76.53624537154715,
							42.39070548075092,
							0
						],
						[
							-76.5362213716392,
							42.39205948100263,
							0
						],
						[
							-76.53618737176296,
							42.39388748134251,
							0
						],
						[
							-76.5324573705915,
							42.39422048155514,
							0
						],
						[
							-76.53090737010238,
							42.39432748163767,
							0
						],
						[
							-76.53083437007838,
							42.39431948163914,
							0
						],
						[
							-76.53052336997764,
							42.39430548164913,
							0
						],
						[
							-76.53032236991307,
							42.39430348165691,
							0
						],
						[
							-76.52620636859864,
							42.39437648183697,
							0
						],
						[
							-76.5246853681124,
							42.39439648190223,
							0
						],
						[
							-76.5241913679545,
							42.3944034819235,
							0
						],
						[
							-76.52258836744241,
							42.39442948199319,
							0
						],
						[
							-76.52191136722665,
							42.3944474820239,
							0
						],
						[
							-76.52190736723428,
							42.39456848204647,
							0
						],
						[
							-76.52170136726961,
							42.39594548230978,
							0
						],
						[
							-76.52162436727284,
							42.39632448238309,
							0
						],
						[
							-76.52153736726393,
							42.39658248243438,
							0
						],
						[
							-76.51996936702426,
							42.40015548315942,
							0
						],
						[
							-76.51936036693023,
							42.40153048343866,
							0
						],
						[
							-76.51865136682079,
							42.40313148376376,
							0
						],
						[
							-76.51852136680141,
							42.40343448382511,
							0
						],
						[
							-76.51835836677706,
							42.40381348390186,
							0
						],
						[
							-76.51818636675137,
							42.40421348398289,
							0
						],
						[
							-76.51810136674415,
							42.40448548403666,
							0
						],
						[
							-76.51805836674842,
							42.40473048408379,
							0
						],
						[
							-76.51804936674935,
							42.40478248409378,
							0
						],
						[
							-76.51804036676643,
							42.4050534841443,
							0
						],
						[
							-76.51802736686281,
							42.40641848439756,
							0
						],
						[
							-76.51802336689336,
							42.40685048447767,
							0
						],
						[
							-76.51801936689893,
							42.40694348449505,
							0
						],
						[
							-76.51801536690522,
							42.4070464845143,
							0
						],
						[
							-76.51800436692278,
							42.40733248456767,
							0
						],
						[
							-76.5179483669337,
							42.40772448464251,
							0
						],
						[
							-76.51791336693117,
							42.40784248466576,
							0
						],
						[
							-76.51786036692286,
							42.40796048468977,
							0
						],
						[
							-76.51779236690936,
							42.40807348471343,
							0
						],
						[
							-76.51768036688318,
							42.4082054847424,
							0
						],
						[
							-76.5174183668183,
							42.40846548480113,
							0
						],
						[
							-76.51736336680509,
							42.40852548481446,
							0
						],
						[
							-76.51725036677689,
							42.40863448483921,
							0
						],
						[
							-76.51712436674754,
							42.40878448487208,
							0
						],
						[
							-76.51702136672658,
							42.40894848490661,
							0
						],
						[
							-76.51694036671292,
							42.40911548494079,
							0
						],
						[
							-76.51678536669922,
							42.40960448503759,
							0
						],
						[
							-76.51673536669021,
							42.40969948505719,
							0
						],
						[
							-76.51668136667891,
							42.40978148507455,
							0
						],
						[
							-76.51658636665617,
							42.40988648509785,
							0
						],
						[
							-76.5165043666352,
							42.40995848511448,
							0
						],
						[
							-76.51645136662158,
							42.41000448512516,
							0
						],
						[
							-76.5163273665883,
							42.41009248514645,
							0
						],
						[
							-76.51624636656572,
							42.41013848515824,
							0
						],
						[
							-76.5159823664899,
							42.41025848519115,
							0
						],
						[
							-76.51584136644746,
							42.4102964852039,
							0
						],
						[
							-76.51576536642419,
							42.41031148520973,
							0
						],
						[
							-76.51561336637589,
							42.41031748521701,
							0
						],
						[
							-76.51548536633366,
							42.41030148521921,
							0
						],
						[
							-76.51471336607287,
							42.41012248521732,
							0
						],
						[
							-76.5145533660204,
							42.41010648522083,
							0
						],
						[
							-76.51446736599289,
							42.41010748522449,
							0
						],
						[
							-76.51429936594054,
							42.41012848523517,
							0
						],
						[
							-76.51417536590328,
							42.4101624852465,
							0
						],
						[
							-76.51419036590956,
							42.4101824852496,
							0
						],
						[
							-76.51419236591154,
							42.41020048525283,
							0
						],
						[
							-76.51422736592548,
							42.41023748525827,
							0
						],
						[
							-76.51423536593005,
							42.41026448526294,
							0
						],
						[
							-76.5142643659406,
							42.41028148526492,
							0
						],
						[
							-76.51426636594258,
							42.41029948526816,
							0
						],
						[
							-76.51436136598062,
							42.41040248528337,
							0
						],
						[
							-76.51436936598442,
							42.4104194852862,
							0
						],
						[
							-76.5144053659988,
							42.41045748529179,
							0
						],
						[
							-76.5144133660026,
							42.41047448529462,
							0
						],
						[
							-76.51451636604124,
							42.41055048530451,
							0
						],
						[
							-76.51466436609554,
							42.41064348531574,
							0
						],
						[
							-76.51475336612616,
							42.41067148531732,
							0
						],
						[
							-76.51502036621665,
							42.41073748531874,
							0
						],
						[
							-76.51504536622474,
							42.41073848531792,
							0
						],
						[
							-76.51522736628584,
							42.41077548531739,
							0
						],
						[
							-76.51533136632125,
							42.41080348531838,
							0
						],
						[
							-76.51540836634787,
							42.41082948532007,
							0
						],
						[
							-76.51542736635484,
							42.41084148532152,
							0
						],
						[
							-76.51545236636308,
							42.41084448532106,
							0
						],
						[
							-76.51547136637058,
							42.41086348532382,
							0
						],
						[
							-76.51556036640038,
							42.41088048532336,
							0
						],
						[
							-76.51567136643796,
							42.41090748532388,
							0
						],
						[
							-76.51572336645671,
							42.41093548532695,
							0
						],
						[
							-76.51574836646488,
							42.41093748532631,
							0
						],
						[
							-76.51579036648018,
							42.41096248532924,
							0
						],
						[
							-76.51587936651161,
							42.41100148533283,
							0
						],
						[
							-76.51595336653814,
							42.41103948533689,
							0
						],
						[
							-76.51597836654629,
							42.41104148533626,
							0
						],
						[
							-76.51600536655606,
							42.41105648533794,
							0
						],
						[
							-76.51636736667982,
							42.41116048534254,
							0
						],
						[
							-76.51644136670635,
							42.41119848534657,
							0
						],
						[
							-76.51647136671598,
							42.41119848534536,
							0
						],
						[
							-76.51651636673249,
							42.41122648534871,
							0
						],
						[
							-76.51657536675302,
							42.41124848535042,
							0
						],
						[
							-76.51667836679009,
							42.41130348535642,
							0
						],
						[
							-76.51671536680395,
							42.41133048535992,
							0
						],
						[
							-76.5168863668697,
							42.41147848538041,
							0
						],
						[
							-76.51690836687999,
							42.41152248538765,
							0
						],
						[
							-76.51693036688867,
							42.41154448539084,
							0
						],
						[
							-76.51701136692807,
							42.41172648542126,
							0
						],
						[
							-76.51715936698763,
							42.41189048544562,
							0
						],
						[
							-76.5171973670035,
							42.41194048545334,
							0
						],
						[
							-76.51723436701779,
							42.41197348545794,
							0
						],
						[
							-76.51725636702727,
							42.41200648546316,
							0
						],
						[
							-76.51730736704806,
							42.41206648547221,
							0
						],
						[
							-76.51730036704743,
							42.41208848547655,
							0
						],
						[
							-76.51736736707335,
							42.41214848548496,
							0
						],
						[
							-76.51738936708446,
							42.41220348549424,
							0
						],
						[
							-76.51741036709274,
							42.41222448549728,
							0
						],
						[
							-76.5174113670944,
							42.41224248550058,
							0
						],
						[
							-76.5174263671003,
							42.41225748550274,
							0
						],
						[
							-76.51742636710199,
							42.41228048550699,
							0
						],
						[
							-76.51746336711592,
							42.41230848551069,
							0
						],
						[
							-76.51746436711757,
							42.41232648551398,
							0
						],
						[
							-76.51749236712921,
							42.41236248551952,
							0
						],
						[
							-76.51749336713084,
							42.41238048552281,
							0
						],
						[
							-76.5175293671443,
							42.41240648552616,
							0
						],
						[
							-76.51753036714625,
							42.41242848553019,
							0
						],
						[
							-76.51759536717107,
							42.41248248553755,
							0
						],
						[
							-76.51760536717694,
							42.41251848554379,
							0
						],
						[
							-76.5176403671909,
							42.41255548554924,
							0
						],
						[
							-76.51764236719288,
							42.41257348555249,
							0
						],
						[
							-76.51767836720713,
							42.4126104855579,
							0
						],
						[
							-76.51767736720845,
							42.412632485562,
							0
						],
						[
							-76.51769436721536,
							42.41265248556501,
							0
						],
						[
							-76.51771436722268,
							42.41266448556642,
							0
						],
						[
							-76.5177153672246,
							42.41268648557045,
							0
						],
						[
							-76.51773736723291,
							42.41270348557271,
							0
						],
						[
							-76.51775936724601,
							42.41278548558699,
							0
						],
						[
							-76.51778136725432,
							42.41280248558926,
							0
						],
						[
							-76.51778136725629,
							42.41282948559427,
							0
						],
						[
							-76.51781836727105,
							42.41286848559996,
							0
						],
						[
							-76.51782036727302,
							42.41288648560324,
							0
						],
						[
							-76.51785536728691,
							42.41292248560848,
							0
						],
						[
							-76.51787736729881,
							42.41298848561979,
							0
						],
						[
							-76.51789236730488,
							42.41300548562233,
							0
						],
						[
							-76.51795136733273,
							42.41312648564234,
							0
						],
						[
							-76.51796636733869,
							42.41314248564471,
							0
						],
						[
							-76.51798836734982,
							42.41319748565399,
							0
						],
						[
							-76.5180103673585,
							42.41321948565717,
							0
						],
						[
							-76.51801236736046,
							42.41323748566043,
							0
						],
						[
							-76.51808436738827,
							42.41330148566935,
							0
						],
						[
							-76.51808536738992,
							42.41331948567266,
							0
						],
						[
							-76.5182623674595,
							42.4134934856977,
							0
						],
						[
							-76.51826336746115,
							42.41351148570099,
							0
						],
						[
							-76.518292367472,
							42.4135324857037,
							0
						],
						[
							-76.51833636749018,
							42.4135874857121,
							0
						],
						[
							-76.51833936749246,
							42.41360548571529,
							0
						],
						[
							-76.51837336750528,
							42.41363148571874,
							0
						],
						[
							-76.51838836751207,
							42.41365848572313,
							0
						],
						[
							-76.5183883675137,
							42.41368048572721,
							0
						],
						[
							-76.51842536752763,
							42.41370848573089,
							0
						],
						[
							-76.51842636752929,
							42.41372648573418,
							0
						],
						[
							-76.51846436754485,
							42.41377248574115,
							0
						],
						[
							-76.5184693675478,
							42.41379048574429,
							0
						],
						[
							-76.51849236755635,
							42.41380648574631,
							0
						],
						[
							-76.51849136755764,
							42.41382848575044,
							0
						],
						[
							-76.51852836757156,
							42.41385648575411,
							0
						],
						[
							-76.51852936757321,
							42.41387448575743,
							0
						],
						[
							-76.51860336760292,
							42.4139554857694,
							0
						],
						[
							-76.51881036768346,
							42.41414748579656,
							0
						],
						[
							-76.51883236769456,
							42.41420248580585,
							0
						],
						[
							-76.51886936771005,
							42.41425148581343,
							0
						],
						[
							-76.5188703677117,
							42.41426948581673,
							0
						],
						[
							-76.51894336774107,
							42.41435048582876,
							0
						],
						[
							-76.51895136774489,
							42.41436748583158,
							0
						],
						[
							-76.51898036775574,
							42.41438848583429,
							0
						],
						[
							-76.5189813677574,
							42.41440648583759,
							0
						],
						[
							-76.51907636779464,
							42.41449848585076,
							0
						],
						[
							-76.51908436779847,
							42.41451548585359,
							0
						],
						[
							-76.51911336781019,
							42.41454848585852,
							0
						],
						[
							-76.51912236781435,
							42.4145654858613,
							0
						],
						[
							-76.51914536782343,
							42.41458848586463,
							0
						],
						[
							-76.51915836782905,
							42.41460848586782,
							0
						],
						[
							-76.51915836783067,
							42.41463048587189,
							0
						],
						[
							-76.51918036783897,
							42.41464748587412,
							0
						],
						[
							-76.51920936785352,
							42.41471848588611,
							0
						],
						[
							-76.51921636785833,
							42.4147534858923,
							0
						],
						[
							-76.51923236786449,
							42.41476748589425,
							0
						],
						[
							-76.51923236786583,
							42.41478548589758,
							0
						],
						[
							-76.51925136787614,
							42.41484248590735,
							0
						],
						[
							-76.51926936788286,
							42.41485548590902,
							0
						],
						[
							-76.51926936788574,
							42.41489448591624,
							0
						],
						[
							-76.5193133679079,
							42.41500348593464,
							0
						],
						[
							-76.51933536791701,
							42.41503148593893,
							0
						],
						[
							-76.51933536791863,
							42.41505348594301,
							0
						],
						[
							-76.51935736792684,
							42.41506948594508,
							0
						],
						[
							-76.51935736793008,
							42.41511348595324,
							0
						],
						[
							-76.51939436794484,
							42.41515248595894,
							0
						],
						[
							-76.51941736795702,
							42.41521748597003,
							0
						],
						[
							-76.51949036798572,
							42.41528948598041,
							0
						],
						[
							-76.51949836798956,
							42.41530648598325,
							0
						],
						[
							-76.51957936801996,
							42.41536648599107,
							0
						],
						[
							-76.52009036821421,
							42.41577848604663,
							0
						],
						[
							-76.52011136822168,
							42.41578848604764,
							0
						],
						[
							-76.52018736824975,
							42.41583848605381,
							0
						],
						[
							-76.52023836826653,
							42.41584448605286,
							0
						],
						[
							-76.52026136827465,
							42.41585448605378,
							0
						],
						[
							-76.52035736830751,
							42.41588248605506,
							0
						],
						[
							-76.52037936831537,
							42.41589348605621,
							0
						],
						[
							-76.52043636833469,
							42.4159074860565,
							0
						],
						[
							-76.5204533683411,
							42.41592048605823,
							0
						],
						[
							-76.52048336835071,
							42.415920486057,
							0
						],
						[
							-76.52052736836688,
							42.41594848606039,
							0
						],
						[
							-76.52055736837653,
							42.41594848605919,
							0
						],
						[
							-76.52065336841137,
							42.41600348606548,
							0
						],
						[
							-76.52072736843952,
							42.41606348607359,
							0
						],
						[
							-76.52084636848579,
							42.41617348608914,
							0
						],
						[
							-76.52086936849368,
							42.41618048608952,
							0
						],
						[
							-76.52097136853112,
							42.41624448609722,
							0
						],
						[
							-76.5209793685337,
							42.4162444860969,
							0
						],
						[
							-76.5214453686925,
							42.41637148610153,
							0
						],
						[
							-76.5214603686973,
							42.41637148610093,
							0
						],
						[
							-76.52148336870586,
							42.41638748610296,
							0
						],
						[
							-76.52152036872141,
							42.41643748611072,
							0
						],
						[
							-76.52187536885268,
							42.41667348614002,
							0
						],
						[
							-76.52187536885349,
							42.41668448614205,
							0
						],
						[
							-76.52191236886534,
							42.41668448614055,
							0
						],
						[
							-76.52196936888585,
							42.41671448614381,
							0
						],
						[
							-76.52206836892144,
							42.41676648614942,
							0
						],
						[
							-76.52215636895208,
							42.41679948615198,
							0
						],
						[
							-76.52217936896074,
							42.41681648615418,
							0
						],
						[
							-76.52220836897001,
							42.416816486153,
							0
						],
						[
							-76.52229036899956,
							42.41686048615784,
							0
						],
						[
							-76.52241436904272,
							42.41690648616131,
							0
						],
						[
							-76.52243836905065,
							42.41690948616093,
							0
						],
						[
							-76.52246036905895,
							42.41692648616317,
							0
						],
						[
							-76.52250836907508,
							42.41693648616307,
							0
						],
						[
							-76.52252736908207,
							42.41694848616452,
							0
						],
						[
							-76.52255236909022,
							42.41695048616389,
							0
						],
						[
							-76.52257136909735,
							42.4169644861657,
							0
						],
						[
							-76.52262336911484,
							42.41697548616564,
							0
						],
						[
							-76.52275636916038,
							42.41701448616747,
							0
						],
						[
							-76.52277936916855,
							42.41702548616858,
							0
						],
						[
							-76.52285336919347,
							42.41704148616855,
							0
						],
						[
							-76.52288236920403,
							42.41705848617052,
							0
						],
						[
							-76.52300136924462,
							42.4170914861718,
							0
						],
						[
							-76.52305336926167,
							42.41709648617063,
							0
						],
						[
							-76.52307236926863,
							42.41710848617208,
							0
						],
						[
							-76.52316436929888,
							42.4171184861702,
							0
						],
						[
							-76.52321636931676,
							42.41713448617107,
							0
						],
						[
							-76.52340836938002,
							42.41715748616753,
							0
						],
						[
							-76.52343036938781,
							42.41716748616852,
							0
						],
						[
							-76.52350436941279,
							42.41718448616866,
							0
						],
						[
							-76.52357936943886,
							42.41721148617063,
							0
						],
						[
							-76.52360836944816,
							42.41721148616945,
							0
						],
						[
							-76.52363036945682,
							42.41723348617261,
							0
						],
						[
							-76.52379736951355,
							42.41727648617381,
							0
						],
						[
							-76.52381636952055,
							42.41728848617527,
							0
						],
						[
							-76.52384136952871,
							42.41729048617463,
							0
						],
						[
							-76.52389036954634,
							42.41731648617746,
							0
						],
						[
							-76.52393436956126,
							42.41732748617771,
							0
						],
						[
							-76.52400136958474,
							42.41735448618001,
							0
						],
						[
							-76.52408836961426,
							42.41737648618054,
							0
						],
						[
							-76.52498936987823,
							42.41703748608136,
							0
						],
						[
							-76.52619437023128,
							42.41658448594872,
							0
						],
						[
							-76.52701137047059,
							42.41627648585863,
							0
						],
						[
							-76.527511370617,
							42.41608748580341,
							0
						],
						[
							-76.52949537119807,
							42.41533848558447,
							0
						],
						[
							-76.52956937121944,
							42.41530648557556,
							0
						],
						[
							-76.53005337136139,
							42.41512648552264,
							0
						],
						[
							-76.53008137136955,
							42.41511548551947,
							0
						],
						[
							-76.53012037138096,
							42.41510048551513,
							0
						],
						[
							-76.53021537140877,
							42.4150644855046,
							0
						],
						[
							-76.53030537143505,
							42.41502948549449,
							0
						],
						[
							-76.53035637145,
							42.41501048548891,
							0
						],
						[
							-76.53111337167124,
							42.41471848540422,
							0
						],
						[
							-76.53119537169977,
							42.41474848540643,
							0
						],
						[
							-76.53125737172088,
							42.41476548540709,
							0
						],
						[
							-76.53130737173922,
							42.41479648541079,
							0
						],
						[
							-76.53134237175375,
							42.41484148541772,
							0
						],
						[
							-76.53134937176027,
							42.41489948542816,
							0
						],
						[
							-76.53112437171724,
							42.41529448551037,
							0
						],
						[
							-76.53106637170802,
							42.41542148553623,
							0
						],
						[
							-76.53100037170086,
							42.41561148557405,
							0
						],
						[
							-76.53095237170271,
							42.41584548561931,
							0
						],
						[
							-76.53083137171184,
							42.41649548574451,
							0
						],
						[
							-76.53055237173486,
							42.41802048603801,
							0
						],
						[
							-76.53048037174081,
							42.41841448611384,
							0
						],
						[
							-76.53020037176557,
							42.41996748641258,
							0
						],
						[
							-76.53018037176703,
							42.42007448643318,
							0
						],
						[
							-76.53011337177196,
							42.42043248650215,
							0
						],
						[
							-76.53003737176957,
							42.42073048656037,
							0
						],
						[
							-76.52995937176055,
							42.42094748660367,
							0
						],
						[
							-76.52977237172736,
							42.42131048667841,
							0
						],
						[
							-76.52926437163364,
							42.42224848687255,
							0
						],
						[
							-76.5292333716279,
							42.42230548688436,
							0
						],
						[
							-76.52920337162242,
							42.42236148689594,
							0
						],
						[
							-76.5290713715982,
							42.42260748694679,
							0
						],
						[
							-76.52879837154813,
							42.42311548705185,
							0
						],
						[
							-76.52840537147306,
							42.42380648719563,
							0
						],
						[
							-76.52818937143182,
							42.42418648727469,
							0
						],
						[
							-76.52783137136215,
							42.42479848740242,
							0
						],
						[
							-76.5276203713256,
							42.42522048748904,
							0
						],
						[
							-76.52756137131769,
							42.42536948751901,
							0
						],
						[
							-76.52743837131128,
							42.42581748760688,
							0
						],
						[
							-76.52736237131015,
							42.42613248766823,
							0
						],
						[
							-76.5272473713083,
							42.42660748776076,
							0
						],
						[
							-76.52721837130792,
							42.42672848778433,
							0
						],
						[
							-76.5271973713079,
							42.42681948780201,
							0
						],
						[
							-76.5270923713056,
							42.4272444878849,
							0
						],
						[
							-76.52701637130187,
							42.42752448793979,
							0
						],
						[
							-76.52696937129551,
							42.42764248796352,
							0
						],
						[
							-76.5268943712831,
							42.42780048799579,
							0
						],
						[
							-76.52675037125537,
							42.42805048804789,
							0
						],
						[
							-76.52657537121672,
							42.4282874880988,
							0
						],
						[
							-76.52630237115072,
							42.42857948816388,
							0
						],
						[
							-76.52617237111772,
							42.42869748819099,
							0
						],
						[
							-76.52545737093664,
							42.42935148834094,
							0
						],
						[
							-76.52496837081249,
							42.4297944884427,
							0
						],
						[
							-76.52490837079694,
							42.42984448845438,
							0
						],
						[
							-76.52478037076429,
							42.42995848848066,
							0
						],
						[
							-76.52441537067119,
							42.43028348855556,
							0
						],
						[
							-76.52385637052369,
							42.43071448865795,
							0
						],
						[
							-76.52257237018055,
							42.43164548888216,
							0
						],
						[
							-76.52241137013738,
							42.43176048890995,
							0
						],
						[
							-76.52165036992893,
							42.43224348903012,
							0
						],
						[
							-76.52120836980951,
							42.43254648910409,
							0
						],
						[
							-76.52101036975847,
							42.43271548914337,
							0
						],
						[
							-76.5207823697015,
							42.4329344891931,
							0
						],
						[
							-76.5206563696705,
							42.43306248922189,
							0
						],
						[
							-76.52053236963982,
							42.43318548924966,
							0
						],
						[
							-76.52037136960132,
							42.43336348928912,
							0
						],
						[
							-76.52026736957696,
							42.43348548931589,
							0
						],
						[
							-76.5201883695587,
							42.43358148933685,
							0
						],
						[
							-76.51989636949293,
							42.43395948941861,
							0
						],
						[
							-76.51856236919792,
							42.43576048980579,
							0
						],
						[
							-76.5183723691577,
							42.43604148986545,
							0
						],
						[
							-76.51822436912751,
							42.43627548991474,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090010001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>27567130</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>124681</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4091355</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5582992</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090010001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090010001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1761</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>756</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>6811.06</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>55</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>45</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>20</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>19</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>25</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.7</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>0.97</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.74</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22520</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>22182</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23494</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>12860</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>12517</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>13405</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>7753</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7486</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8075</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5107</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5030</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5328</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>4.5</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>3.4</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>2.08</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.11</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>4141</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>30</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>8207</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>64</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>80</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>14</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>2279</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>857</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>866</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>851</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>38</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00061"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.50431736573657,
							42.45078049316056,
							0
						],
						[
							-76.50432436573928,
							42.45078649316139,
							0
						],
						[
							-76.50434736575028,
							42.4508354931695,
							0
						],
						[
							-76.50443936578621,
							42.45092249318187,
							0
						],
						[
							-76.50451036581394,
							42.45098949319139,
							0
						],
						[
							-76.5045913658448,
							42.45105549320031,
							0
						],
						[
							-76.50460636584961,
							42.4510554931997,
							0
						],
						[
							-76.50479936591766,
							42.45113849320725,
							0
						],
						[
							-76.50544036613212,
							42.45125749320328,
							0
						],
						[
							-76.50600836632172,
							42.45135749319879,
							0
						],
						[
							-76.50615336637078,
							42.45139149319921,
							0
						],
						[
							-76.50650036648815,
							42.45147349320031,
							0
						],
						[
							-76.5070423666735,
							42.45162849320704,
							0
						],
						[
							-76.50746136680829,
							42.451633493191,
							0
						],
						[
							-76.51023236768818,
							42.45150949305585,
							0
						],
						[
							-76.5108423678819,
							42.45148249302613,
							0
						],
						[
							-76.51082836786028,
							42.45125049298381,
							0
						],
						[
							-76.51078836779885,
							42.45059249286377,
							0
						],
						[
							-76.51118736787696,
							42.44991649272261,
							0
						],
						[
							-76.51179036798698,
							42.44878649248922,
							0
						],
						[
							-76.51195136801627,
							42.44848349242666,
							0
						],
						[
							-76.51235036806668,
							42.44743249221614,
							0
						],
						[
							-76.51260436809878,
							42.44676349208213,
							0
						],
						[
							-76.51267636811315,
							42.4466454920574,
							0
						],
						[
							-76.51279036813594,
							42.4464584920182,
							0
						],
						[
							-76.5133363682448,
							42.44556049183002,
							0
						],
						[
							-76.51341236825994,
							42.44543549180384,
							0
						],
						[
							-76.51353836826095,
							42.44490149169997,
							0
						],
						[
							-76.51389236826415,
							42.44340649140913,
							0
						],
						[
							-76.5138783682133,
							42.44277849129355,
							0
						],
						[
							-76.51465136834,
							42.44113549095837,
							0
						],
						[
							-76.51474436835383,
							42.44091849091446,
							0
						],
						[
							-76.5152963684608,
							42.43996849071639,
							0
						],
						[
							-76.51565036853583,
							42.43944649060552,
							0
						],
						[
							-76.51537436844936,
							42.43947449062187,
							0
						],
						[
							-76.51533636843642,
							42.43946449062155,
							0
						],
						[
							-76.51334436778234,
							42.43926049066447,
							0
						],
						[
							-76.51265536755608,
							42.43918949067925,
							0
						],
						[
							-76.51238436744177,
							42.43881849062159,
							0
						],
						[
							-76.51188536726582,
							42.43860349060203,
							0
						],
						[
							-76.51105736696057,
							42.43806649053622,
							0
						],
						[
							-76.51098636693425,
							42.43801849053021,
							0
						],
						[
							-76.50956336640661,
							42.4370544904095,
							0
						],
						[
							-76.50832536594676,
							42.43620449030237,
							0
						],
						[
							-76.50819836589962,
							42.4361174902914,
							0
						],
						[
							-76.50820236591093,
							42.43625349031643,
							0
						],
						[
							-76.508213365938,
							42.43657249037499,
							0
						],
						[
							-76.50822136595117,
							42.4367164904013,
							0
						],
						[
							-76.50825836601683,
							42.43744549053465,
							0
						],
						[
							-76.50830336609833,
							42.43835449070097,
							0
						],
						[
							-76.50834436617855,
							42.43926349086746,
							0
						],
						[
							-76.50838836625606,
							42.44012249102457,
							0
						],
						[
							-76.50843636633851,
							42.44103149119077,
							0
						],
						[
							-76.50850636645691,
							42.44233149142838,
							0
						],
						[
							-76.50855636653974,
							42.44323649159374,
							0
						],
						[
							-76.50861536663905,
							42.44432549179279,
							0
						],
						[
							-76.50698236611869,
							42.44437349186777,
							0
						],
						[
							-76.50688836608934,
							42.4443844918736,
							0
						],
						[
							-76.5068353660727,
							42.44438949187667,
							0
						],
						[
							-76.50643236594415,
							42.44439949189484,
							0
						],
						[
							-76.50630536590319,
							42.44439649189943,
							0
						],
						[
							-76.50591036577711,
							42.44440549191706,
							0
						],
						[
							-76.50495136547175,
							42.44443649196163,
							0
						],
						[
							-76.50418936522904,
							42.44446049199693,
							0
						],
						[
							-76.5037123650771,
							42.44447549201901,
							0
						],
						[
							-76.50355036502529,
							42.44447749202594,
							0
						],
						[
							-76.50217436458685,
							42.44451849208922,
							0
						],
						[
							-76.50198136452543,
							42.44452549209832,
							0
						],
						[
							-76.500998364212,
							42.44455149214291,
							0
						],
						[
							-76.50076836413871,
							42.44455849215353,
							0
						],
						[
							-76.49941536370766,
							42.44459949221586,
							0
						],
						[
							-76.49927136366189,
							42.4446054922228,
							0
						],
						[
							-76.49927136366448,
							42.44464049222928,
							0
						],
						[
							-76.4992993636742,
							42.44465049223,
							0
						],
						[
							-76.49936636369894,
							42.44469449223541,
							0
						],
						[
							-76.49961136379657,
							42.44495249227322,
							0
						],
						[
							-76.4996553638135,
							42.44499049227846,
							0
						],
						[
							-76.49966236381573,
							42.44499049227819,
							0
						],
						[
							-76.49966836383322,
							42.44520149231699,
							0
						],
						[
							-76.49972036385074,
							42.44521249231689,
							0
						],
						[
							-76.49980136387916,
							42.44524549231972,
							0
						],
						[
							-76.49982836389003,
							42.44527549232419,
							0
						],
						[
							-76.49983436389351,
							42.44529649232781,
							0
						],
						[
							-76.49986836390634,
							42.44532249233125,
							0
						],
						[
							-76.49987036390831,
							42.44534049233452,
							0
						],
						[
							-76.49994936394044,
							42.44543249234832,
							0
						],
						[
							-76.4999793639517,
							42.44545449235118,
							0
						],
						[
							-76.49998136395365,
							42.44547249235443,
							0
						],
						[
							-76.50001636396753,
							42.44550849235968,
							0
						],
						[
							-76.50003836397785,
							42.44555249236692,
							0
						],
						[
							-76.50009736400085,
							42.4456074923747,
							0
						],
						[
							-76.5000983640025,
							42.44562549237798,
							0
						],
						[
							-76.50013436401595,
							42.44565149238134,
							0
						],
						[
							-76.50013436401758,
							42.44567349238541,
							0
						],
						[
							-76.50017136403152,
							42.44570149238908,
							0
						],
						[
							-76.50017336403349,
							42.44571949239233,
							0
						],
						[
							-76.5002453640613,
							42.44578349240127,
							0
						],
						[
							-76.50024736406327,
							42.44580149240451,
							0
						],
						[
							-76.50027536407418,
							42.44582749240818,
							0
						],
						[
							-76.5002753640758,
							42.44584949241225,
							0
						],
						[
							-76.50034936410398,
							42.44590949242036,
							0
						],
						[
							-76.50034936410559,
							42.44593149242444,
							0
						],
						[
							-76.50037836411614,
							42.4459484924264,
							0
						],
						[
							-76.50040936412913,
							42.44598949243272,
							0
						],
						[
							-76.50042436413536,
							42.44600849243563,
							0
						],
						[
							-76.50043836414108,
							42.4460254924382,
							0
						],
						[
							-76.50046036414932,
							42.44604149244029,
							0
						],
						[
							-76.50046136415096,
							42.44605949244357,
							0
						],
						[
							-76.50050436416831,
							42.44610749245069,
							0
						],
						[
							-76.50050536416995,
							42.44612549245399,
							0
						],
						[
							-76.50053436418037,
							42.44614049245558,
							0
						],
						[
							-76.50059336420499,
							42.44621749246743,
							0
						],
						[
							-76.50061536421323,
							42.4462334924695,
							0
						],
						[
							-76.50061536421485,
							42.44625549247359,
							0
						],
						[
							-76.50063836422348,
							42.44627249247579,
							0
						],
						[
							-76.50072636425857,
							42.44636549248943,
							0
						],
						[
							-76.50072736426024,
							42.44638349249272,
							0
						],
						[
							-76.50074936426839,
							42.44639849249461,
							0
						],
						[
							-76.500808364293,
							42.44647549250645,
							0
						],
						[
							-76.5008373643035,
							42.44649149250824,
							0
						],
						[
							-76.50083736430511,
							42.44651349251232,
							0
						],
						[
							-76.50086036431375,
							42.44653049251453,
							0
						],
						[
							-76.5009413643466,
							42.44662349252845,
							0
						],
						[
							-76.50094236434825,
							42.44664149253173,
							0
						],
						[
							-76.5009933643686,
							42.44669549253965,
							0
						],
						[
							-76.50100136437241,
							42.44671249254247,
							0
						],
						[
							-76.50103036438327,
							42.44673349254519,
							0
						],
						[
							-76.50103336438556,
							42.44675149254839,
							0
						],
						[
							-76.5010673643984,
							42.44677749255183,
							0
						],
						[
							-76.50106736440001,
							42.44679949255591,
							0
						],
						[
							-76.50109736441162,
							42.44682649255969,
							0
						],
						[
							-76.50109836441328,
							42.44684449256297,
							0
						],
						[
							-76.50112636442336,
							42.44685949256461,
							0
						],
						[
							-76.50117436444336,
							42.44692149257412,
							0
						],
						[
							-76.50118536444798,
							42.44693649257646,
							0
						],
						[
							-76.50120836445662,
							42.44695349257868,
							0
						],
						[
							-76.50120836445824,
							42.44697549258274,
							0
						],
						[
							-76.50124536447211,
							42.44700249258622,
							0
						],
						[
							-76.50124636447374,
							42.44702049258952,
							0
						],
						[
							-76.5012673644816,
							42.44703549259145,
							0
						],
						[
							-76.5013263645062,
							42.4471124926033,
							0
						],
						[
							-76.50135636451701,
							42.44712849260505,
							0
						],
						[
							-76.50135736451865,
							42.44714649260831,
							0
						],
						[
							-76.50139336453213,
							42.4471724926117,
							0
						],
						[
							-76.50139336453377,
							42.44719449261576,
							0
						],
						[
							-76.50143036454769,
							42.44722249261943,
							0
						],
						[
							-76.50142536454742,
							42.44724049262297,
							0
						],
						[
							-76.50145236455757,
							42.44726049262556,
							0
						],
						[
							-76.5015113645818,
							42.4473324926365,
							0
						],
						[
							-76.50153836459253,
							42.44736049264059,
							0
						],
						[
							-76.50155636459992,
							42.44738249264393,
							0
						],
						[
							-76.50158536461078,
							42.44740349264664,
							0
						],
						[
							-76.50158536461241,
							42.4474254926507,
							0
						],
						[
							-76.50162236462629,
							42.44745249265421,
							0
						],
						[
							-76.50162336462792,
							42.44747049265749,
							0
						],
						[
							-76.5016893646547,
							42.44754649266888,
							0
						],
						[
							-76.50169236465699,
							42.44756449267208,
							0
						],
						[
							-76.50171836466644,
							42.44757949267378,
							0
						],
						[
							-76.50183736471556,
							42.44772749269637,
							0
						],
						[
							-76.50184536471936,
							42.44774449269917,
							0
						],
						[
							-76.50187436473021,
							42.44776549270188,
							0
						],
						[
							-76.50187536473187,
							42.44778349270517,
							0
						],
						[
							-76.50191136474534,
							42.44780949270854,
							0
						],
						[
							-76.50191136474696,
							42.44783149271261,
							0
						],
						[
							-76.5019303647543,
							42.44784849271498,
							0
						],
						[
							-76.50194836476126,
							42.44786449271719,
							0
						],
						[
							-76.50195536476514,
							42.44788649272098,
							0
						],
						[
							-76.50198536477681,
							42.44791449272494,
							0
						],
						[
							-76.50199236478106,
							42.44794149272965,
							0
						],
						[
							-76.502029364795,
							42.44796949273334,
							0
						],
						[
							-76.50203236479729,
							42.44798749273654,
							0
						],
						[
							-76.50206636481012,
							42.44801349273998,
							0
						],
						[
							-76.50206636481167,
							42.44803449274387,
							0
						],
						[
							-76.50210336482562,
							42.44806249274755,
							0
						],
						[
							-76.50210636482791,
							42.44808049275074,
							0
						],
						[
							-76.50212636483543,
							42.44809549275271,
							0
						],
						[
							-76.50220436486732,
							42.44818849276676,
							0
						],
						[
							-76.50222136487454,
							42.44821249277052,
							0
						],
						[
							-76.5022443648834,
							42.44823249277328,
							0
						],
						[
							-76.50224436488502,
							42.44825449277734,
							0
						],
						[
							-76.50228136489896,
							42.44828249278103,
							0
						],
						[
							-76.50228136490095,
							42.44830949278601,
							0
						],
						[
							-76.50235536492957,
							42.44837549279521,
							0
						],
						[
							-76.50235736493154,
							42.44839349279847,
							0
						],
						[
							-76.50242936496062,
							42.44847449281054,
							0
						],
						[
							-76.50245136497092,
							42.44851849281779,
							0
						],
						[
							-76.5025113649946,
							42.44857849282644,
							0
						],
						[
							-76.50251236499625,
							42.44859649282974,
							0
						],
						[
							-76.50263036504363,
							42.44872549284881,
							0
						],
						[
							-76.5026363650469,
							42.4487434928519,
							0
						],
						[
							-76.50265936505545,
							42.44875949285392,
							0
						],
						[
							-76.5026603650571,
							42.44877749285721,
							0
						],
						[
							-76.50279236511028,
							42.44892449287906,
							0
						],
						[
							-76.50279936511416,
							42.44894649288285,
							0
						],
						[
							-76.50282936512578,
							42.44897349288664,
							0
						],
						[
							-76.5028363651301,
							42.44900149289153,
							0
						],
						[
							-76.50287336514396,
							42.44902849289502,
							0
						],
						[
							-76.5028743651456,
							42.4490464928983,
							0
						],
						[
							-76.5029253651655,
							42.44909449290513,
							0
						],
						[
							-76.50292636516716,
							42.4491124929084,
							0
						],
						[
							-76.50296236518064,
							42.44913849291176,
							0
						],
						[
							-76.5029633651823,
							42.44915649291506,
							0
						],
						[
							-76.50304436521505,
							42.44924849292877,
							0
						],
						[
							-76.50306636522336,
							42.44926549293105,
							0
						],
						[
							-76.50306636522491,
							42.44928649293493,
							0
						],
						[
							-76.50310336523886,
							42.44931449293859,
							0
						],
						[
							-76.50310636524115,
							42.44933249294181,
							0
						],
						[
							-76.50314036525397,
							42.44935849294523,
							0
						],
						[
							-76.50314036525559,
							42.44938049294931,
							0
						],
						[
							-76.50317736526947,
							42.4494074929528,
							0
						],
						[
							-76.50317836527111,
							42.44942549295608,
							0
						],
						[
							-76.50322936528941,
							42.44945149295884,
							0
						],
						[
							-76.5032513652997,
							42.44949549296608,
							0
						],
						[
							-76.50325136530132,
							42.44951749297015,
							0
						],
						[
							-76.50328836531527,
							42.44954549297383,
							0
						],
						[
							-76.50329136531757,
							42.44956349297704,
							0
						],
						[
							-76.50332536533038,
							42.44958949298047,
							0
						],
						[
							-76.50332736533235,
							42.4496074929837,
							0
						],
						[
							-76.50340636536443,
							42.44969849299734,
							0
						],
						[
							-76.50340636536605,
							42.44972049300142,
							0
						],
						[
							-76.50351736540897,
							42.44981949301523,
							0
						],
						[
							-76.50351836541063,
							42.44983749301852,
							0
						],
						[
							-76.50355436542453,
							42.44986949302297,
							0
						],
						[
							-76.50355736542681,
							42.44988749302619,
							0
						],
						[
							-76.50357736543435,
							42.44990249302816,
							0
						],
						[
							-76.50364836546385,
							42.4499934930421,
							0
						],
						[
							-76.50365836546838,
							42.450011493045,
							0
						],
						[
							-76.50369536548233,
							42.45003949304869,
							0
						],
						[
							-76.50369536548394,
							42.45006149305277,
							0
						],
						[
							-76.5037323654978,
							42.45008849305627,
							0
						],
						[
							-76.50373336549947,
							42.45010649305955,
							0
						],
						[
							-76.50381436553224,
							42.45019849307329,
							0
						],
						[
							-76.50384336554272,
							42.45021449307507,
							0
						],
						[
							-76.50384336554434,
							42.45023649307915,
							0
						],
						[
							-76.50388836556203,
							42.45028049308546,
							0
						],
						[
							-76.50388936556368,
							42.45029849308874,
							0
						],
						[
							-76.50391736557422,
							42.45031949309149,
							0
						],
						[
							-76.50399936560738,
							42.45041249310538,
							0
						],
						[
							-76.50400036560903,
							42.45043049310866,
							0
						],
						[
							-76.50403636562251,
							42.45045649311201,
							0
						],
						[
							-76.50403736562417,
							42.45047449311529,
							0
						],
						[
							-76.50407336563764,
							42.45050049311864,
							0
						],
						[
							-76.50407336563926,
							42.45052249312272,
							0
						],
						[
							-76.50415436567128,
							42.45060449313461,
							0
						],
						[
							-76.50417636568042,
							42.45063249313889,
							0
						],
						[
							-76.50421336569511,
							42.45067049314443,
							0
						],
						[
							-76.50422836570117,
							42.45068749314696,
							0
						],
						[
							-76.50424736570905,
							42.45071149315063,
							0
						],
						[
							-76.50428736572496,
							42.45075349315677,
							0
						],
						[
							-76.50431736573657,
							42.45078049316056,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>62</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090008001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>899676</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>94864</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4457362</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.5080862</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090008001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090008001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>1259</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>410</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>222.26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>31</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>24</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>22</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>8.14</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>15.02</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.54</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>1</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>18794</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>18456</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>19768</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>11178</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>10838</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>11726</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>6855</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>6588</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>7178</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>4262</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>4185</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>4483</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>61</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>46</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>49</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>7.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>6.9</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>7.85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>1.84</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>10643</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>44</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>18267</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>239</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>564</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>1047</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>1339</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>891</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>35</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>65</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00062"
		},
		{
			"type": "Feature",
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						[
							-76.48940435859592,
							42.41882248785137,
							0
						],
						[
							-76.4878103580893,
							42.41888648792765,
							0
						],
						[
							-76.48684035779831,
							42.4191604880176,
							0
						],
						[
							-76.48619735760354,
							42.41931648807245,
							0
						],
						[
							-76.48584135749671,
							42.41941648810536,
							0
						],
						[
							-76.48476735717273,
							42.41969548820043,
							0
						],
						[
							-76.48450335709428,
							42.41978048822683,
							0
						],
						[
							-76.48427135702605,
							42.41986448825175,
							0
						],
						[
							-76.48380435688331,
							42.4199604882884,
							0
						],
						[
							-76.48306235665957,
							42.42015448835429,
							0
						],
						[
							-76.48335435677613,
							42.42046548840008,
							0
						],
						[
							-76.48346735682196,
							42.42059548841957,
							0
						],
						[
							-76.48361135688288,
							42.42079548845076,
							0
						],
						[
							-76.48380835697148,
							42.42114048850666,
							0
						],
						[
							-76.48406835709311,
							42.4216594885922,
							0
						],
						[
							-76.48444335726074,
							42.42230248869605,
							0
						],
						[
							-76.48459235732365,
							42.42250748872797,
							0
						],
						[
							-76.4851583575478,
							42.42308548881206,
							0
						],
						[
							-76.48600335788112,
							42.4239304889343,
							0
						],
						[
							-76.48621535796518,
							42.42414848896608,
							0
						],
						[
							-76.4881823587406,
							42.42610848924927,
							0
						],
						[
							-76.48860535890773,
							42.42653548931119,
							0
						],
						[
							-76.48959635929897,
							42.42753048945524,
							0
						],
						[
							-76.49032435958695,
							42.42826948956257,
							0
						],
						[
							-76.49081135977887,
							42.42875348963242,
							0
						],
						[
							-76.49084635979207,
							42.42878048963601,
							0
						],
						[
							-76.49112035990062,
							42.42906048967672,
							0
						],
						[
							-76.49117335992227,
							42.42912348968623,
							0
						],
						[
							-76.49119435993092,
							42.4291494896902,
							0
						],
						[
							-76.49151136004227,
							42.42928048970163,
							0
						],
						[
							-76.49189436018003,
							42.42948248972352,
							0
						],
						[
							-76.49195136020023,
							42.42950848972603,
							0
						],
						[
							-76.4920903602477,
							42.42954748972761,
							0
						],
						[
							-76.4921753602762,
							42.42956448972732,
							0
						],
						[
							-76.49246736037092,
							42.4295784897181,
							0
						],
						[
							-76.49351436070481,
							42.42955148967077,
							0
						],
						[
							-76.49375836078286,
							42.42954848966033,
							0
						],
						[
							-76.4940973608903,
							42.42953048964329,
							0
						],
						[
							-76.49427836094718,
							42.42951448963302,
							0
						],
						[
							-76.49445136100151,
							42.42949848962305,
							0
						],
						[
							-76.49451436102098,
							42.42948848961865,
							0
						],
						[
							-76.49468736107329,
							42.4294454896037,
							0
						],
						[
							-76.4949183611416,
							42.42936648957974,
							0
						],
						[
							-76.49504636117896,
							42.4293164895653,
							0
						],
						[
							-76.49525436123972,
							42.4292354895419,
							0
						],
						[
							-76.49575536138674,
							42.42904948948723,
							0
						],
						[
							-76.4964103615783,
							42.42879748941409,
							0
						],
						[
							-76.49645836159198,
							42.42877448940789,
							0
						],
						[
							-76.49662636164139,
							42.42871348938982,
							0
						],
						[
							-76.49700636175133,
							42.42855148934446,
							0
						],
						[
							-76.4975733619154,
							42.42830948927676,
							0
						],
						[
							-76.49805036205501,
							42.42812748922376,
							0
						],
						[
							-76.49824536211742,
							42.42812548921553,
							0
						],
						[
							-76.49839336214778,
							42.42789348916659,
							0
						],
						[
							-76.49891536225502,
							42.4270764889943,
							0
						],
						[
							-76.49941036235559,
							42.42628648882808,
							0
						],
						[
							-76.49984436242966,
							42.42540248864695,
							0
						],
						[
							-76.50006236245456,
							42.42479148852507,
							0
						],
						[
							-76.50013336245867,
							42.42453848847536,
							0
						],
						[
							-76.50036136248016,
							42.42383748833642,
							0
						],
						[
							-76.50089736253081,
							42.42219148801011,
							0
						],
						[
							-76.50101736254297,
							42.42183448793919,
							0
						],
						[
							-76.50105736254682,
							42.42171248791501,
							0
						],
						[
							-76.50130936257202,
							42.42095748776509,
							0
						],
						[
							-76.50138836258468,
							42.42078548773004,
							0
						],
						[
							-76.50224536267903,
							42.41833548724194,
							0
						],
						[
							-76.50139636238904,
							42.41809548723185,
							0
						],
						[
							-76.49841436143947,
							42.41818948736987,
							0
						],
						[
							-76.49800836130473,
							42.41812848737499,
							0
						],
						[
							-76.49704536103368,
							42.41864248750908,
							0
						],
						[
							-76.49630636079827,
							42.41866448754304,
							0
						],
						[
							-76.49490636034116,
							42.41855548757948,
							0
						],
						[
							-76.49442136019053,
							42.41862248761148,
							0
						],
						[
							-76.48940435859592,
							42.41882248785137,
							0
						]
					]
				]
			},
			"properties": {
				"styleUrl": "#PolyStyle00",
				"styleHash": "4dce3828",
				"description": "<html xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\">\r\r\n<head>\r\r\n<META http-equiv=\"Content-Type\" content=\"text/html\">\r\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\r\r\n</head>\r\r\n<body style=\"margin:0px 0px 0px 0px;overflow:auto;background:#FFFFFF;\">\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-collapse:collapse;padding:3px 3px 3px 3px\">\r\r\n<tr style=\"text-align:center;font-weight:bold;background:#9CBCE2\">\r\r\n<td></td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>\r\r\n<table style=\"font-family:Arial,Verdana,Times;font-size:12px;text-align:left;width:100%;border-spacing:0px; padding:3px 3px 3px 3px\">\r\r\n<tr>\r\r\n<td>FID</td>\r\r\n<td>63</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>GEOID10</td>\r\r\n<td>361090012001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ALAND10</td>\r\r\n<td>1306205</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>AWATER10</td>\r\r\n<td>5365</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>INTPTLAT10</td>\r\r\n<td>+42.4218758</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>INTPTLON10</td>\r\r\n<td>-076.4951171</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ID</td>\r\r\n<td>361090012001</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>blkgrp</td>\r\r\n<td>361090012001</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>population</td>\r\r\n<td>3226</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>households</td>\r\r\n<td>41</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>land_acres</td>\r\r\n<td>322.77</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_ami</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>ht_80ami</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>ht_nmi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_ami</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_80ami</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>h_nmi</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_ami</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_80ami</td>\r\r\n<td>32</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_nmi</td>\r\r\n<td>26</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>co2_per_hh</td>\r\r\n<td>10.08</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>co2_per_ac</td>\r\r\n<td>1.28</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_per_</td>\r\r\n<td>1.85</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>autos_per1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>autos_pe_1</td>\r\r\n<td>2</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per_hh</td>\r\r\n<td>22851</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_per__1</td>\r\r\n<td>22513</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_per__2</td>\r\r\n<td>23824</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_transi</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_tran_1</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_tran_2</td>\r\r\n<td>3</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_ami</td>\r\r\n<td>13464</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>t_cost_80a</td>\r\r\n<td>13124</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>t_cost_nmi</td>\r\r\n<td>14012</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_owner</td>\r\r\n<td>8229</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>auto_own_1</td>\r\r\n<td>7962</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>auto_own_2</td>\r\r\n<td>8552</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_a</td>\r\r\n<td>5182</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>vmt_cost_8</td>\r\r\n<td>5105</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>vmt_cost_n</td>\r\r\n<td>5403</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit_co</td>\r\r\n<td>53</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__1</td>\r\r\n<td>57</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__2</td>\r\r\n<td>58</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit_tr</td>\r\r\n<td>40</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>transit__3</td>\r\r\n<td>42</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>transit__4</td>\r\r\n<td>43</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>compact_nd</td>\r\r\n<td>1.8</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ovrll_</td>\r\r\n<td>7.7</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>res_densit</td>\r\r\n<td>0.4</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>gross_hh_d</td>\r\r\n<td>0.13</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>hh_gravity</td>\r\r\n<td>10425</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>frac_sfd</td>\r\r\n<td>90</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>emp_gravit</td>\r\r\n<td>20565</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>emp_ndx</td>\r\r\n<td>66</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>block_size</td>\r\r\n<td>23</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>intersecti</td>\r\r\n<td>69</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>avg_block_</td>\r\r\n<td>1005</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>h_cost</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>median_smo</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>median_gro</td>\r\r\n<td>0</td>\r\r\n</tr>\r\r\n<tr>\r\r\n<td>pct_owner_</td>\r\r\n<td>71</td>\r\r\n</tr>\r\r\n<tr bgcolor=\"#D4E4F3\">\r\r\n<td>pct_renter</td>\r\r\n<td>29</td>\r\r\n</tr>\r\r\n</table>\r\r\n</td>\r\r\n</tr>\r\r\n</table>\r\r\n</body>\r\r\n</html>\r\r\n",
				"stroke": "#6e6e6e",
				"stroke-opacity": 1,
				"stroke-width": 0.4,
				"fill": "#baf5e7",
				"fill-opacity": 1
			},
			"id": "ID_00063"
		}
	]
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(124);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(123);

var _reactDom2 = _interopRequireDefault(_reactDom);

__webpack_require__(121);

var _data = __webpack_require__(125);

var _data2 = _interopRequireDefault(_data);

var _cheerio = __webpack_require__(120);

var _cheerio2 = _interopRequireDefault(_cheerio);

var _lodash = __webpack_require__(122);

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Main = function (_React$Component) {
  _inherits(Main, _React$Component);

  function Main(props) {
    _classCallCheck(this, Main);

    var _this = _possibleConstructorReturn(this, (Main.__proto__ || Object.getPrototypeOf(Main)).call(this, props));

    _this.ranges = {};
    _this.blockgroups = [];
    _this.marker = null;
    return _this;
  }

  _createClass(Main, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'wdic' },
        _react2.default.createElement(
          'div',
          { className: 'wdic-header' },
          _react2.default.createElement(
            'div',
            { className: 'row' },
            _react2.default.createElement(
              'div',
              { className: 'col-lg-12 text-center' },
              _react2.default.createElement(
                'div',
                { className: 'btn-group' },
                _react2.default.createElement(
                  'button',
                  { type: 'button', className: 'btn btn-default', onClick: this._changeMetric.bind(this, 'h_ami') },
                  'h_ami'
                ),
                _react2.default.createElement(
                  'button',
                  { type: 'button', className: 'btn btn-default', onClick: this._changeMetric.bind(this, 'h_80ami') },
                  'h_80ami'
                ),
                _react2.default.createElement(
                  'button',
                  { type: 'button', className: 'btn btn-default', onClick: this._changeMetric.bind(this, 'h_nmi') },
                  'h_nmi'
                ),
                _react2.default.createElement(
                  'button',
                  { type: 'button', className: 'btn btn-default', onClick: this._changeMetric.bind(this, 'ht_ami') },
                  'ht_ami'
                ),
                _react2.default.createElement(
                  'button',
                  { type: 'button', className: 'btn btn-default', onClick: this._changeMetric.bind(this, 'ht_80ami') },
                  'ht_80ami'
                ),
                _react2.default.createElement(
                  'button',
                  { type: 'button', className: 'btn btn-default', onClick: this._changeMetric.bind(this, 'ht_nmi') },
                  'ht_nmi'
                )
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'wdic-body' },
          _react2.default.createElement(
            'div',
            { className: 'wdic-sidebar' },
            _react2.default.createElement(
              'div',
              { className: 'form' },
              _react2.default.createElement(
                'h2',
                null,
                'Find My House'
              ),
              _react2.default.createElement(
                'p',
                null,
                'Enter your address below to find out the specific details for your home'
              ),
              _react2.default.createElement(
                'form',
                { onSubmit: this._handleSubmit.bind(this) },
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement('input', { type: 'text', className: 'form-control', ref: 'street', id: 'street', placeholder: 'Street' })
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement('input', { type: 'text', className: 'form-control', ref: 'city', id: 'city', placeholder: 'City' })
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement('input', { type: 'text', className: 'form-control', ref: 'state', id: 'state', placeholder: 'State', defaultValue: 'New York' })
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement('input', { type: 'text', className: 'form-control', ref: 'zip', id: 'zip', placeholder: 'Zip' })
                ),
                _react2.default.createElement(
                  'button',
                  { type: 'submit', className: 'btn btn-default btn-block btn-danger' },
                  'Locate'
                )
              )
            )
          ),
          _react2.default.createElement('div', { className: 'wdic-map', ref: 'map' })
        ),
        _react2.default.createElement(
          'div',
          { className: 'wdic-footer' },
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (index) {
            return _react2.default.createElement(
              'div',
              { className: 'segment', key: 'metric' + index },
              _react2.default.createElement('div', { className: 'key segment' + index }),
              _react2.default.createElement('span', { ref: 'metric' + index })
            );
          })
        )
      );
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._prepareData();
      this._drawMap();
      this._changeMetric('h_ami');
    }
  }, {
    key: '_prepareData',
    value: function _prepareData() {
      var _this2 = this;

      this.blockgroups = _data2.default.features.map(function (feature, index) {
        var coordinates = feature.geometry.coordinates[0].map(function (coordinates) {
          return { lat: coordinates[1], lng: coordinates[0] };
        });
        var table = _cheerio2.default.load(feature.properties.description);
        var rows = table('table table tr');
        var metadata = Object.keys(rows).reduce(function (metadata, index) {
          var row = rows[index];
          if (row && row.children && row.children[1]) {
            var key = row.children[1].children[0].data;
            var value = row.children[3].children[0].data;
            var min = _lodash2.default.get(_this2.ranges, key + '.min');
            var max = _lodash2.default.get(_this2.ranges, key + '.max');
            if (_lodash2.default.isNil(min) || value < min) _lodash2.default.set(_this2.ranges, key + '.min', parseFloat(value));
            if (_lodash2.default.isNil(max) || value > max) _lodash2.default.set(_this2.ranges, key + '.max', parseFloat(value));
            return _extends({}, metadata, _defineProperty({}, key, value));
          }
          return metadata;
        }, {});
        return { coordinates: coordinates, metadata: metadata };
      });
      this.ranges = Object.keys(this.ranges).reduce(function (ranges, key) {
        return _extends({}, ranges, _defineProperty({}, key, _extends({}, _this2.ranges[key], {
          step: (_this2.ranges[key].max - _this2.ranges[key].min) / 10
        })));
      }, {});
    }
  }, {
    key: '_drawMap',
    value: function _drawMap() {
      var _this3 = this;

      var tompkins = { lat: 42.44738962079579, lng: -76.46789477832033 };
      this.map = new google.maps.Map(this.refs.map, {
        zoom: 11,
        center: tompkins
      });
      this.geocoder = new google.maps.Geocoder();

      this.blockgroups.map(function (blockgroup, index) {
        _this3.blockgroups[index].polygon = new google.maps.Polygon({
          path: blockgroup.coordinates,
          strokeColor: '#FF0000',
          strokeOpacity: 0.8,
          strokeWeight: 1,
          fillColor: '#FF0000',
          fillOpacity: 0.35
        });
        _this3.blockgroups[index].polygon.setMap(_this3.map);
      });
    }
  }, {
    key: '_changeMetric',
    value: function _changeMetric(key) {
      var _this4 = this;

      this.blockgroups.map(function (blockgroup, index) {
        var value = blockgroup.metadata[key];
        var step = _this4.ranges[key].step;
        var fillOpacity = Math.floor(value / step) / 10;
        blockgroup.polygon.setOptions({ fillOpacity: fillOpacity });
      });
      var segments = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
      segments.map(function (segment) {
        var min = _this4.ranges[key].min + _this4.ranges[key].step * segment;
        var max = (min + _this4.ranges[key].step).toFixed(2) - .01;
        _this4.refs['metric' + segment].innerHTML = min.toFixed(2) + ' - ' + max.toFixed(2);
      });
    }
  }, {
    key: '_handleSubmit',
    value: function _handleSubmit(e) {
      var _this5 = this;

      var street = this.refs.street.value;
      var city = this.refs.city.value;
      var state = this.refs.state.value;
      var zip = this.refs.zip.value;
      var address = street + ' ' + city + ' ' + state + ' ' + zip;
      this.geocoder.geocode({ address: address }, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          if (_this5.marker) {
            _this5.marker.setMap(null);
            _this5.marker = null;
          }
          _this5.marker = new google.maps.Marker({
            map: _this5.map,
            position: results[0].geometry.location
          });
        } else {
          console.log('foo');
        }
      });
      e.preventDefault();
      return false;
    }
  }]);

  return Main;
}(_react2.default.Component);

_reactDom2.default.render(_react2.default.createElement(Main, null), document.getElementById('app'));

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(48),
    utils = __webpack_require__(28),
    isTag = utils.isTag,
    domEach = utils.domEach,
    hasOwn = Object.prototype.hasOwnProperty,
    camelCase = utils.camelCase,
    cssCase = utils.cssCase,
    rspace = /\s+/,
    dataAttrPrefix = 'data-',
    _ = {
      forEach: __webpack_require__(38),
      extend: __webpack_require__(89),
      some: __webpack_require__(177)
    },

  // Lookup table for coercing string data-* attributes to their corresponding
  // JavaScript primitives
  primitives = {
    null: null,
    true: true,
    false: false
  },

  // Attributes that are booleans
  rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
  // Matches strings that look like JSON objects or arrays
  rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;


var getAttr = function(elem, name) {
  if (!elem || !isTag(elem)) return;

  if (!elem.attribs) {
    elem.attribs = {};
  }

  // Return the entire attribs object if no attribute specified
  if (!name) {
    return elem.attribs;
  }

  if (hasOwn.call(elem.attribs, name)) {
    // Get the (decoded) attribute
    return rboolean.test(name) ? name : elem.attribs[name];
  }

  // Mimic the DOM and return text content as value for `option's`
  if (elem.name === 'option' && name === 'value') {
    return $.text(elem.children);
  }

  // Mimic DOM with default value for radios/checkboxes
  if (elem.name === 'input' &&
      (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') &&
      name === 'value') {
    return 'on';
  }
};

var setAttr = function(el, name, value) {

  if (value === null) {
    removeAttribute(el, name);
  } else {
    el.attribs[name] = value+'';
  }
};

exports.attr = function(name, value) {
  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    if (typeof value === 'function') {
      return domEach(this, function(i, el) {
        setAttr(el, name, value.call(el, i, el.attribs[name]));
      });
    }
    return domEach(this, function(i, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {
        _.forEach(name, function(value, name) {
          setAttr(el, name, value);
        });
      } else {
        setAttr(el, name, value);
      }
    });
  }

  return getAttr(this[0], name);
};

var getProp = function (el, name) {
  if (!el || !isTag(el)) return;
  
  return el.hasOwnProperty(name)
      ? el[name]
      : rboolean.test(name)
          ? getAttr(el, name) !== undefined
          : getAttr(el, name);
};

var setProp = function (el, name, value) {
  el[name] = rboolean.test(name) ? !!value : value;
};

exports.prop = function (name, value) {
  var i = 0,
      property;

  if (typeof name === 'string' && value === undefined) {

    switch (name) {
      case 'style':
        property = this.css();

        _.forEach(property, function (v, p) {
          property[i++] = p;
        });

        property.length = i;

        break;
      case 'tagName':
      case 'nodeName':
        property = this[0].name.toUpperCase();
        break;
      default:
        property = getProp(this[0], name);
    }

    return property;
  }

  if (typeof name === 'object' || value !== undefined) {

    if (typeof value === 'function') {
      return domEach(this, function(i, el) {
        setProp(el, name, value.call(el, i, getProp(el, name)));
      });
    }

    return domEach(this, function(i, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {

        _.forEach(name, function(val, name) {
          setProp(el, name, val);
        });

      } else {
        setProp(el, name, value);
      }
    });

  }
};

var setData = function(el, name, value) {
  if (!el.data) {
    el.data = {};
  }

  if (typeof name === 'object') return _.extend(el.data, name);
  if (typeof name === 'string' && value !== undefined) {
    el.data[name] = value;
  } else if (typeof name === 'object') {
    _.extend(el.data, name);
  }
};

// Read the specified attribute from the equivalent HTML5 `data-*` attribute,
// and (if present) cache the value in the node's internal data store. If no
// attribute name is specified, read *all* HTML5 `data-*` attributes in this
// manner.
var readData = function(el, name) {
  var readAll = arguments.length === 1;
  var domNames, domName, jsNames, jsName, value, idx, length;

  if (readAll) {
    domNames = Object.keys(el.attribs).filter(function(attrName) {
      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;
    });
    jsNames = domNames.map(function(domName) {
      return camelCase(domName.slice(dataAttrPrefix.length));
    });
  } else {
    domNames = [dataAttrPrefix + cssCase(name)];
    jsNames = [name];
  }

  for (idx = 0, length = domNames.length; idx < length; ++idx) {
    domName = domNames[idx];
    jsName = jsNames[idx];
    if (hasOwn.call(el.attribs, domName)) {
      value = el.attribs[domName];

      if (hasOwn.call(primitives, value)) {
        value = primitives[value];
      } else if (value === String(Number(value))) {
        value = Number(value);
      } else if (rbrace.test(value)) {
        try {
          value = JSON.parse(value);
        } catch(e){ }
      }

      el.data[jsName] = value;
    }
  }

  return readAll ? el.data : value;
};

exports.data = function(name, value) {
  var elem = this[0];

  if (!elem || !isTag(elem)) return;

  if (!elem.data) {
    elem.data = {};
  }

  // Return the entire data object if no data specified
  if (!name) {
    return readData(elem);
  }

  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    domEach(this, function(i, el) {
      setData(el, name, value);
    });
    return this;
  } else if (hasOwn.call(elem.data, name)) {
    return elem.data[name];
  }

  return readData(elem, name);
};

/**
 * Get the value of an element
 */

exports.val = function(value) {
  var querying = arguments.length === 0,
      element = this[0];

  if(!element) return;

  switch (element.name) {
    case 'textarea':
      return this.text(value);
    case 'input':
      switch (this.attr('type')) {
        case 'radio':
          if (querying) {
            return this.attr('value');
          } else {
            this.attr('value', value);
            return this;
          }
          break;
        default:
          return this.attr('value', value);
      }
      return;
    case 'select':
      var option = this.find('option:selected'),
          returnValue;
      if (option === undefined) return undefined;
      if (!querying) {
        if (!this.attr().hasOwnProperty('multiple') && typeof value == 'object') {
          return this;
        }
        if (typeof value != 'object') {
          value = [value];
        }
        this.find('option').removeAttr('selected');
        for (var i = 0; i < value.length; i++) {
          this.find('option[value="' + value[i] + '"]').attr('selected', '');
        }
        return this;
      }
      returnValue = option.attr('value');
      if (this.attr().hasOwnProperty('multiple')) {
        returnValue = [];
        domEach(option, function(i, el) {
          returnValue.push(getAttr(el, 'value'));
        });
      }
      return returnValue;
    case 'option':
      if (!querying) {
        this.attr('value', value);
        return this;
      }
      return this.attr('value');
  }
};

/**
 * Remove an attribute
 */

var removeAttribute = function(elem, name) {
  if (!elem.attribs || !hasOwn.call(elem.attribs, name))
    return;

  delete elem.attribs[name];
};


exports.removeAttr = function(name) {
  domEach(this, function(i, elem) {
    removeAttribute(elem, name);
  });

  return this;
};

exports.hasClass = function(className) {
  return _.some(this, function(elem) {
    var attrs = elem.attribs,
        clazz = attrs && attrs['class'],
        idx = -1,
        end;

    if (clazz) {
      while ((idx = clazz.indexOf(className, idx+1)) > -1) {
        end = idx + className.length;

        if ((idx === 0 || rspace.test(clazz[idx-1]))
            && (end === clazz.length || rspace.test(clazz[end]))) {
          return true;
        }
      }
    }
  });
};

exports.addClass = function(value) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      var className = el.attribs['class'] || '';
      exports.addClass.call([el], value.call(el, i, className));
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace),
      numElements = this.length;


  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    // If we don't already have classes
    var className = getAttr(this[i], 'class'),
        numClasses,
        setClass;

    if (!className) {
      setAttr(this[i], 'class', classNames.join(' ').trim());
    } else {
      setClass = ' ' + className + ' ';
      numClasses = classNames.length;

      // Check if class already exists
      for (var j = 0; j < numClasses; j++) {
        var appendClass = classNames[j] + ' ';
        if (setClass.indexOf(' ' + appendClass) < 0)
          setClass += appendClass;
      }

      setAttr(this[i], 'class', setClass.trim());
    }
  }

  return this;
};

var splitClass = function(className) {
  return className ? className.trim().split(rspace) : [];
};

exports.removeClass = function(value) {
  var classes,
      numClasses,
      removeAll;

  // Handle if value is a function
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      exports.removeClass.call(
        [el], value.call(el, i, el.attribs['class'] || '')
      );
    });
  }

  classes = splitClass(value);
  numClasses = classes.length;
  removeAll = arguments.length === 0;

  return domEach(this, function(i, el) {
    if (!isTag(el)) return;

    if (removeAll) {
      // Short circuit the remove all case as this is the nice one
      el.attribs.class = '';
    } else {
      var elClasses = splitClass(el.attribs.class),
          index,
          changed;

      for (var j = 0; j < numClasses; j++) {
        index = elClasses.indexOf(classes[j]);

        if (index >= 0) {
          elClasses.splice(index, 1);
          changed = true;

          // We have to do another pass to ensure that there are not duplicate
          // classes listed
          j--;
        }
      }
      if (changed) {
        el.attribs.class = elClasses.join(' ');
      }
    }
  });
};

exports.toggleClass = function(value, stateVal) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      exports.toggleClass.call(
        [el],
        value.call(el, i, el.attribs['class'] || '', stateVal),
        stateVal
      );
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace),
    numClasses = classNames.length,
    state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0,
    numElements = this.length,
    elementClasses,
    index;

  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    elementClasses = splitClass(this[i].attribs.class);

    // Check if class already exists
    for (var j = 0; j < numClasses; j++) {
      // Check if the class name is currently defined
      index = elementClasses.indexOf(classNames[j]);

      // Add if stateValue === true or we are toggling and there is no value
      if (state >= 0 && index < 0) {
        elementClasses.push(classNames[j]);
      } else if (state <= 0 && index >= 0) {
        // Otherwise remove but only if the item exists
        elementClasses.splice(index, 1);
      }
    }

    this[i].attribs.class = elementClasses.join(' ');
  }

  return this;
};

exports.is = function (selector) {
  if (selector) {
    return this.filter(selector).length > 0;
  }
  return false;
};



/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var domEach = __webpack_require__(28).domEach,
    _ = {
      pick: __webpack_require__(174),
    };

var toString = Object.prototype.toString;

/**
 * Set / Get css.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @return {self}
 * @api public
 */

exports.css = function(prop, val) {
  if (arguments.length === 2 ||
    // When `prop` is a "plain" object
    (toString.call(prop) === '[object Object]')) {
    return domEach(this, function(idx, el) {
      setCss(el, prop, val, idx);
    });
  } else {
    return getCss(this[0], prop);
  }
};

/**
 * Set styles of all elements.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @param {Number} idx - optional index within the selection
 * @return {self}
 * @api private
 */

function setCss(el, prop, val, idx) {
  if ('string' == typeof prop) {
    var styles = getCss(el);
    if (typeof val === 'function') {
      val = val.call(el, idx, styles[prop]);
    }

    if (val === '') {
      delete styles[prop];
    } else if (val != null) {
      styles[prop] = val;
    }

    el.attribs.style = stringify(styles);
  } else if ('object' == typeof prop) {
    Object.keys(prop).forEach(function(k){
      setCss(el, k, prop[k]);
    });
  }
}

/**
 * Get parsed styles of the first element.
 *
 * @param {String} prop
 * @return {Object}
 * @api private
 */

function getCss(el, prop) {
  var styles = parse(el.attribs.style);
  if (typeof prop === 'string') {
    return styles[prop];
  } else if (Array.isArray(prop)) {
    return _.pick(styles, prop);
  } else {
    return styles;
  }
}

/**
 * Stringify `obj` to styles.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function stringify(obj) {
  return Object.keys(obj || {})
    .reduce(function(str, prop){
      return str += ''
        + (str ? ' ' : '')
        + prop
        + ': '
        + obj[prop]
        + ';';
    }, '');
}

/**
 * Parse `styles`.
 *
 * @param {String} styles
 * @return {Object}
 * @api private
 */

function parse(styles) {
  styles = (styles || '').trim();

  if (!styles) return {};

  return styles
    .split(';')
    .reduce(function(obj, str){
      var n = str.indexOf(':');
      // skip if there is no :, or if it is the first/last character
      if (n < 1 || n === str.length-1) return obj;
      obj[str.slice(0,n).trim()] = str.slice(n+1).trim();
      return obj;
    }, {});
}


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js
// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js
var submittableSelector = 'input,select,textarea,keygen',
    r20 = /%20/g,
    rCRLF = /\r?\n/g,
    _ = {
      map: __webpack_require__(172)
    };

exports.serialize = function() {
  // Convert form elements into name/value objects
  var arr = this.serializeArray();

  // Serialize each element into a key/value string
  var retArr = _.map(arr, function(data) {
    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);
  });

  // Return the resulting serialization
  return retArr.join('&').replace(r20, '+');
};

exports.serializeArray = function() {
  // Resolve all form elements from either forms or collections of form elements
  var Cheerio = this.constructor;
  return this.map(function() {
      var elem = this;
      var $elem = Cheerio(elem);
      if (elem.name === 'form') {
        return $elem.find(submittableSelector).toArray();
      } else {
        return $elem.filter(submittableSelector).toArray();
      }
    }).filter(
        // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)
        '[name!=""]:not(:disabled)'
        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)
        + ':not(:submit, :button, :image, :reset, :file)'
        // and are either checked/don't have a checkable state
        + ':matches([checked], :not(:checkbox, :radio))'
    // Convert each of the elements to its value(s)
    ).map(function(i, elem) {
      var $elem = Cheerio(elem);
      var name = $elem.attr('name');
      var val = $elem.val();

      // If there is no value set (e.g. `undefined`, `null`), then return nothing
      if (val == null) {
        return null;
      } else {
        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs
        if (Array.isArray(val)) {
          return _.map(val, function(val) {
            // We trim replace any line endings (e.g. `\r` or `\r\n` with `\r\n`) to guarantee consistency across platforms
            //   These can occur inside of `<textarea>'s`
            return {name: name, value: val.replace( rCRLF, '\r\n' )};
          });
        // Otherwise (e.g. `<input type="text">`, return only one key/value pair
        } else {
          return {name: name, value: val.replace( rCRLF, '\r\n' )};
        }
      }
    // Convert our result to an array
    }).get();
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(37),
    $ = __webpack_require__(48),
    updateDOM = parse.update,
    evaluate = parse.evaluate,
    utils = __webpack_require__(28),
    domEach = utils.domEach,
    cloneDom = utils.cloneDom,
    isHtml = utils.isHtml,
    slice = Array.prototype.slice,
    _ = {
      flatten: __webpack_require__(171),
      bind: __webpack_require__(54),
      forEach: __webpack_require__(38)
    };

// Create an array of nodes, recursing into arrays and parsing strings if
// necessary
exports._makeDomArray = function makeDomArray(elem, clone) {
  if (elem == null) {
    return [];
  } else if (elem.cheerio) {
    return clone ? cloneDom(elem.get(), elem.options) : elem.get();
  } else if (Array.isArray(elem)) {
    return _.flatten(elem.map(function(el) {
      return this._makeDomArray(el, clone);
    }, this));
  } else if (typeof elem === 'string') {
    return evaluate(elem, this.options);
  } else {
    return clone ? cloneDom([elem]) : [elem];
  }
};

var _insert = function(concatenator) {
  return function() {
    var elems = slice.call(arguments),
        lastIdx = this.length - 1;

    return domEach(this, function(i, el) {
      var dom, domSrc;

      if (typeof elems[0] === 'function') {
        domSrc = elems[0].call(el, i, $.html(el.children));
      } else {
        domSrc = elems;
      }

      dom = this._makeDomArray(domSrc, i < lastIdx);
      concatenator(dom, el.children, el);
    });
  };
};

/*
 * Modify an array in-place, removing some number of elements and adding new
 * elements directly following them.
 *
 * @param {Array} array Target array to splice.
 * @param {Number} spliceIdx Index at which to begin changing the array.
 * @param {Number} spliceCount Number of elements to remove from the array.
 * @param {Array} newElems Elements to insert into the array.
 *
 * @api private
 */
var uniqueSplice = function(array, spliceIdx, spliceCount, newElems, parent) {
  var spliceArgs = [spliceIdx, spliceCount].concat(newElems),
      prev = array[spliceIdx - 1] || null,
      next = array[spliceIdx] || null;
  var idx, len, prevIdx, node, oldParent;

  // Before splicing in new elements, ensure they do not already appear in the
  // current array.
  for (idx = 0, len = newElems.length; idx < len; ++idx) {
    node = newElems[idx];
    oldParent = node.parent || node.root;
    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);

    if (oldParent && prevIdx > -1) {
      oldParent.children.splice(prevIdx, 1);
      if (parent === oldParent && spliceIdx > prevIdx) {
        spliceArgs[0]--;
      }
    }

    node.root = null;
    node.parent = parent;

    if (node.prev) {
      node.prev.next = node.next || null;
    }

    if (node.next) {
      node.next.prev = node.prev || null;
    }

    node.prev = newElems[idx - 1] || prev;
    node.next = newElems[idx + 1] || next;
  }

  if (prev) {
    prev.next = newElems[0];
  }
  if (next) {
    next.prev = newElems[newElems.length - 1];
  }
  return array.splice.apply(array, spliceArgs);
};

exports.appendTo = function(target) {
  if (!target.cheerio) {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }

  target.append(this);

  return this;
};

exports.prependTo = function(target) {
  if (!target.cheerio) {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }

  target.prepend(this);

  return this;
};

exports.append = _insert(function(dom, children, parent) {
  uniqueSplice(children, children.length, 0, dom, parent);
});

exports.prepend = _insert(function(dom, children, parent) {
  uniqueSplice(children, 0, 0, dom, parent);
});

exports.wrap = function(wrapper) {
  var wrapperFn = typeof wrapper === 'function' && wrapper,
      lastIdx = this.length - 1;

  _.forEach(this, _.bind(function(el, i) {
    var parent = el.parent || el.root,
        siblings = parent.children,
        dom, index;

    if (!parent) {
      return;
    }

    if (wrapperFn) {
      wrapper = wrapperFn.call(el, i);
    }

    if (typeof wrapper === 'string' && !isHtml(wrapper)) {
      wrapper = this.parents().last().find(wrapper).clone();
    }

    dom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);
    index = siblings.indexOf(el);

    updateDOM([el], dom[0]);
    // The previous operation removed the current element from the `siblings`
    // array, so the `dom` array can be inserted without removing any
    // additional elements.
    uniqueSplice(siblings, index, 0, dom, parent);
  }, this));

  return this;
};

exports.after = function() {
  var elems = slice.call(arguments),
      lastIdx = this.length - 1;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el),
        domSrc, dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, $.html(el.children));
    } else {
      domSrc = elems;
    }
    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element after `this` element
    uniqueSplice(siblings, index + 1, 0, dom, parent);
  });

  return this;
};

exports.insertAfter = function(target) {
  var clones = [],
      self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function(i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

exports.before = function() {
  var elems = slice.call(arguments),
      lastIdx = this.length - 1;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el),
        domSrc, dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, $.html(el.children));
    } else {
      domSrc = elems;
    }

    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element before `el` element
    uniqueSplice(siblings, index, 0, dom, parent);
  });

  return this;
};

exports.insertBefore = function(target) {
  var clones = [],
      self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function(i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

/*
  remove([selector])
*/
exports.remove = function(selector) {
  var elems = this;

  // Filter if we have selector
  if (selector)
    elems = elems.filter(selector);

  domEach(elems, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    if (index < 0) return;

    siblings.splice(index, 1);
    if (el.prev) {
      el.prev.next = el.next;
    }
    if (el.next) {
      el.next.prev = el.prev;
    }
    el.prev = el.next = el.parent = el.root = null;
  });

  return this;
};

exports.replaceWith = function(content) {
  var self = this;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        dom = self._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content),
        index;

    // In the case that `dom` contains nodes that already exist in other
    // structures, ensure those nodes are properly removed.
    updateDOM(dom, null);

    index = siblings.indexOf(el);

    // Completely remove old element
    uniqueSplice(siblings, index, 1, dom, parent);
    el.parent = el.prev = el.next = el.root = null;
  });

  return this;
};

exports.empty = function() {
  domEach(this, function(i, el) {
    _.forEach(el.children, function(el) {
      el.next = el.prev = el.parent = null;
    });

    el.children.length = 0;
  });
  return this;
};

/**
 * Set/Get the HTML
 */
exports.html = function(str) {
  if (str === undefined) {
    if (!this[0] || !this[0].children) return null;
    return $.html(this[0].children, this.options);
  }

  var opts = this.options;

  domEach(this, function(i, el) {
    _.forEach(el.children, function(el) {
      el.next = el.prev = el.parent = null;
    });

    var content = str.cheerio ? str.clone().get() : evaluate('' + str, opts);

    updateDOM(content, el);
  });

  return this;
};

exports.toString = function() {
  return $.html(this, this.options);
};

exports.text = function(str) {
  // If `str` is undefined, act as a "getter"
  if (str === undefined) {
    return $.text(this);
  } else if (typeof str === 'function') {
    // Function support
    return domEach(this, function(i, el) {
      var $el = [el];
      return exports.text.call($el, str.call(el, i, $.text($el)));
    });
  }

  // Append text node to each selected elements
  domEach(this, function(i, el) {
    _.forEach(el.children, function(el) {
      el.next = el.prev = el.parent = null;
    });

    var elem = {
      data: '' + str,
      type: 'text',
      parent: el,
      prev: null,
      next: null,
      children: []
    };

    updateDOM(elem, el);
  });

  return this;
};

exports.clone = function() {
  return this._make(cloneDom(this.get(), this.options));
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var select = __webpack_require__(76),
    utils = __webpack_require__(28),
    domEach = utils.domEach,
    uniqueSort = __webpack_require__(23).DomUtils.uniqueSort,
    isTag = utils.isTag,
    _ = {
      bind: __webpack_require__(54),
      forEach: __webpack_require__(38),
      reject: __webpack_require__(176),
      filter: __webpack_require__(170),
      reduce: __webpack_require__(175)
    };

exports.find = function(selectorOrHaystack) {
  var elems = _.reduce(this, function(memo, elem) {
    return memo.concat(_.filter(elem.children, isTag));
  }, []);
  var contains = this.constructor.contains;
  var haystack;

  if (selectorOrHaystack && typeof selectorOrHaystack !== 'string') {
    if (selectorOrHaystack.cheerio) {
      haystack = selectorOrHaystack.get();
    } else {
      haystack = [selectorOrHaystack];
    }

    return this._make(haystack.filter(function(elem) {
      var idx, len;
      for (idx = 0, len = this.length; idx < len; ++idx) {
        if (contains(this[idx], elem)) {
          return true;
        }
      }
    }, this));
  }

  var options = {__proto__: this.options, context: this.toArray()};

  return this._make(select(selectorOrHaystack, elems, options));
};

// Get the parent of each element in the current set of matched elements,
// optionally filtered by a selector.
exports.parent = function(selector) {
  var set = [];

  domEach(this, function(idx, elem) {
    var parentElem = elem.parent;
    if (parentElem && set.indexOf(parentElem) < 0) {
      set.push(parentElem);
    }
  });

  if (arguments.length) {
    set = exports.filter.call(set, selector, this);
  }

  return this._make(set);
};

exports.parents = function(selector) {
  var parentNodes = [];

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.
  this.get().reverse().forEach(function(elem) {
    traverseParents(this, elem.parent, selector, Infinity)
      .forEach(function(node) {
        if (parentNodes.indexOf(node) === -1) {
          parentNodes.push(node);
        }
      }
    );
  }, this);

  return this._make(parentNodes);
};

exports.parentsUntil = function(selector, filter) {
  var parentNodes = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.parents().toArray(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.toArray();
  } else if (selector) {
    untilNode = selector;
  }

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.

  this.toArray().reverse().forEach(function(elem) {
    while ((elem = elem.parent)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && parentNodes.indexOf(elem) === -1) { parentNodes.push(elem); }
      } else {
        break;
      }
    }
  }, this);

  return this._make(filter ? select(filter, parentNodes, this.options) : parentNodes);
};

// For each element in the set, get the first element that matches the selector
// by testing the element itself and traversing up through its ancestors in the
// DOM tree.
exports.closest = function(selector) {
  var set = [];

  if (!selector) {
    return this._make(set);
  }

  domEach(this, function(idx, elem) {
    var closestElem = traverseParents(this, elem, selector, 1)[0];

    // Do not add duplicate elements to the set
    if (closestElem && set.indexOf(closestElem) < 0) {
      set.push(closestElem);
    }
  }.bind(this));

  return this._make(set);
};

exports.next = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.nextAll = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.nextUntil = function(selector, filterSelector) {
  if (!this[0]) { return this; }
  var elems = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.nextAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector ?
    exports.filter.call(elems, filterSelector, this) :
    this._make(elems);
};

exports.prev = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.prevAll = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.prevUntil = function(selector, filterSelector) {
  if (!this[0]) { return this; }
  var elems = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.prevAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector ?
    exports.filter.call(elems, filterSelector, this) :
    this._make(elems);
};

exports.siblings = function(selector) {
  var parent = this.parent();

  var elems = _.filter(
    parent ? parent.children() : this.siblingsAndMe(),
    _.bind(function(elem) { return isTag(elem) && !this.is(elem); }, this)
  );

  if (selector !== undefined) {
    return exports.filter.call(elems, selector, this);
  } else {
    return this._make(elems);
  }
};

exports.children = function(selector) {

  var elems = _.reduce(this, function(memo, elem) {
    return memo.concat(_.filter(elem.children, isTag));
  }, []);

  if (selector === undefined) return this._make(elems);

  return exports.filter.call(elems, selector, this);
};

exports.contents = function() {
  return this._make(_.reduce(this, function(all, elem) {
    all.push.apply(all, elem.children);
    return all;
  }, []));
};

exports.each = function(fn) {
  var i = 0, len = this.length;
  while (i < len && fn.call(this[i], i, this[i]) !== false) ++i;
  return this;
};

exports.map = function(fn) {
  return this._make(_.reduce(this, function(memo, el, i) {
    var val = fn.call(el, i, el);
    return val == null ? memo : memo.concat(val);
  }, []));
};

var makeFilterMethod = function(filterFn) {
  return function(match, container) {
    var testFn;
    container = container || this;

    if (typeof match === 'string') {
      testFn = select.compile(match, container.options);
    } else if (typeof match === 'function') {
      testFn = function(el, i) {
        return match.call(el, i, el);
      };
    } else if (match.cheerio) {
      testFn = match.is.bind(match);
    } else {
      testFn = function(el) {
        return match === el;
      };
    }

    return container._make(filterFn(this, testFn));
  };
};

exports.filter = makeFilterMethod(_.filter);
exports.not = makeFilterMethod(_.reject);

exports.has = function(selectorOrHaystack) {
  var that = this;
  return exports.filter.call(this, function() {
    return that._make(this).find(selectorOrHaystack).length > 0;
  });
};

exports.first = function() {
  return this.length > 1 ? this._make(this[0]) : this;
};

exports.last = function() {
  return this.length > 1 ? this._make(this[this.length - 1]) : this;
};

// Reduce the set of matched elements to the one at the specified index.
exports.eq = function(i) {
  i = +i;

  // Use the first identity optimization if possible
  if (i === 0 && this.length <= 1) return this;

  if (i < 0) i = this.length + i;
  return this[i] ? this._make(this[i]) : this._make([]);
};

// Retrieve the DOM elements matched by the jQuery object.
exports.get = function(i) {
  if (i == null) {
    return Array.prototype.slice.call(this);
  } else {
    return this[i < 0 ? (this.length + i) : i];
  }
};

// Search for a given element from among the matched elements.
exports.index = function(selectorOrNeedle) {
  var $haystack, needle;

  if (arguments.length === 0) {
    $haystack = this.parent().children();
    needle = this[0];
  } else if (typeof selectorOrNeedle === 'string') {
    $haystack = this._make(selectorOrNeedle);
    needle = this[0];
  } else {
    $haystack = this;
    needle = selectorOrNeedle.cheerio ? selectorOrNeedle[0] : selectorOrNeedle;
  }

  return $haystack.get().indexOf(needle);
};

exports.slice = function() {
  return this._make([].slice.apply(this, arguments));
};

function traverseParents(self, elem, selector, limit) {
  var elems = [];
  while (elem && elems.length < limit) {
    if (!selector || exports.filter.call([elem], selector, self).length) {
      elems.push(elem);
    }
    elem = elem.parent;
  }
  return elems;
}

// End the most recent filtering operation in the current chain and return the
// set of matched elements to its previous state.
exports.end = function() {
  return this.prevObject || this._make([]);
};

exports.add = function(other, context) {
  var selection = this._make(other, context);
  var contents = uniqueSort(selection.get().concat(this.get()));

  for (var i = 0; i < contents.length; ++i) {
    selection[i] = contents[i];
  }
  selection.length = contents.length;

  return selection;
};

// Add the previous set of elements on the stack to the current set, optionally
// filtered by a selector.
exports.addBack = function(selector) {
  return this.add(
    arguments.length ? this.prevObject.filter(selector) : this.prevObject
  );
};


/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = {
	"name": "cheerio",
	"version": "0.22.0",
	"description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
	"author": "Matt Mueller <mattmuelle@gmail.com> (mat.io)",
	"license": "MIT",
	"keywords": [
		"htmlparser",
		"jquery",
		"selector",
		"scraper",
		"parser",
		"html"
	],
	"repository": {
		"type": "git",
		"url": "git://github.com/cheeriojs/cheerio.git"
	},
	"main": "./index.js",
	"files": [
		"index.js",
		"lib"
	],
	"engines": {
		"node": ">= 0.6"
	},
	"dependencies": {
		"css-select": "~1.2.0",
		"dom-serializer": "~0.1.0",
		"entities": "~1.1.1",
		"htmlparser2": "^3.9.1",
		"lodash.assignin": "^4.0.9",
		"lodash.bind": "^4.1.4",
		"lodash.defaults": "^4.0.1",
		"lodash.filter": "^4.4.0",
		"lodash.flatten": "^4.2.0",
		"lodash.foreach": "^4.3.0",
		"lodash.map": "^4.4.0",
		"lodash.merge": "^4.4.0",
		"lodash.pick": "^4.2.1",
		"lodash.reduce": "^4.4.0",
		"lodash.reject": "^4.4.0",
		"lodash.some": "^4.4.0"
	},
	"devDependencies": {
		"benchmark": "^2.1.0",
		"coveralls": "^2.11.9",
		"expect.js": "~0.3.1",
		"istanbul": "^0.4.3",
		"jsdom": "^9.2.1",
		"jquery": "^3.0.0",
		"jshint": "^2.9.2",
		"mocha": "^2.5.3",
		"xyz": "~0.5.0"
	},
	"scripts": {
		"test": "make test"
	}
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

/*
	compiles a selector to an executable function
*/

module.exports = compile;
module.exports.compileUnsafe = compileUnsafe;
module.exports.compileToken = compileToken;

var parse       = __webpack_require__(137),
    DomUtils    = __webpack_require__(22),
    isTag       = DomUtils.isTag,
    Rules       = __webpack_require__(135),
    sortRules   = __webpack_require__(136),
    BaseFuncs   = __webpack_require__(27),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc,
    procedure   = __webpack_require__(78);

function compile(selector, options, context){
	var next = compileUnsafe(selector, options, context);
	return wrap(next);
}

function wrap(next){
	return function base(elem){
		return isTag(elem) && next(elem);
	};
}

function compileUnsafe(selector, options, context){
	var token = parse(selector, options);
	return compileToken(token, options, context);
}

function includesScopePseudo(t){
    return t.type === "pseudo" && (
        t.name === "scope" || (
            Array.isArray(t.data) &&
            t.data.some(function(data){
                return data.some(includesScopePseudo);
            })
        )
    );
}

var DESCENDANT_TOKEN = {type: "descendant"},
    SCOPE_TOKEN = {type: "pseudo", name: "scope"},
    PLACEHOLDER_ELEMENT = {},
    getParent = DomUtils.getParent;

//CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector
//http://www.w3.org/TR/selectors4/#absolutizing
function absolutize(token, context){
    //TODO better check if context is document
    var hasContext = !!context && !!context.length && context.every(function(e){
        return e === PLACEHOLDER_ELEMENT || !!getParent(e);
    });


    token.forEach(function(t){
        if(t.length > 0 && isTraversal(t[0]) && t[0].type !== "descendant"){
            //don't return in else branch
        } else if(hasContext && !includesScopePseudo(t)){
            t.unshift(DESCENDANT_TOKEN);
        } else {
            return;
        }

        t.unshift(SCOPE_TOKEN);
    });
}

function compileToken(token, options, context){
    token = token.filter(function(t){ return t.length > 0; });

	token.forEach(sortRules);

	var isArrayContext = Array.isArray(context);

    context = (options && options.context) || context;

    if(context && !isArrayContext) context = [context];

    absolutize(token, context);

	return token
		.map(function(rules){ return compileRules(rules, options, context, isArrayContext); })
		.reduce(reduceRules, falseFunc);
}

function isTraversal(t){
	return procedure[t.type] < 0;
}

function compileRules(rules, options, context, isArrayContext){
	var acceptSelf = (isArrayContext && rules[0].name === "scope" && rules[1].type === "descendant");
	return rules.reduce(function(func, rule, index){
		if(func === falseFunc) return func;
		return Rules[rule.type](func, rule, options, context, acceptSelf && index === 1);
	}, options && options.rootFunc || trueFunc);
}

function reduceRules(a, b){
	if(b === falseFunc || a === trueFunc){
		return a;
	}
	if(a === falseFunc || b === trueFunc){
		return b;
	}

	return function combine(elem){
		return a(elem) || b(elem);
	};
}

//:not, :has and :matches have to compile selectors
//doing this in lib/pseudos.js would lead to circular dependencies,
//so we add them here

var Pseudos     = __webpack_require__(49),
    filters     = Pseudos.filters,
    existsOne   = DomUtils.existsOne,
    isTag       = DomUtils.isTag,
    getChildren = DomUtils.getChildren;


function containsTraversal(t){
	return t.some(isTraversal);
}

filters.not = function(next, token, options, context){
	var opts = {
	    	xmlMode: !!(options && options.xmlMode),
	    	strict: !!(options && options.strict)
	    };

	if(opts.strict){
		if(token.length > 1 || token.some(containsTraversal)){
			throw new SyntaxError("complex selectors in :not aren't allowed in strict mode");
		}
	}

    var func = compileToken(token, opts, context);

	if(func === falseFunc) return next;
	if(func === trueFunc)  return falseFunc;

	return function(elem){
		return !func(elem) && next(elem);
	};
};

filters.has = function(next, token, options){
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict)
	};

    //FIXME: Uses an array as a pointer to the current element (side effects)
    var context = token.some(containsTraversal) ? [PLACEHOLDER_ELEMENT] : null;

	var func = compileToken(token, opts, context);

	if(func === falseFunc) return falseFunc;
	if(func === trueFunc)  return function(elem){
			return getChildren(elem).some(isTag) && next(elem);
		};

	func = wrap(func);

    if(context){
        return function has(elem){
		return next(elem) && (
                (context[0] = elem), existsOne(func, getChildren(elem))
            );
	};
    }

    return function has(elem){
		return next(elem) && existsOne(func, getChildren(elem));
	};
};

filters.matches = function(next, token, options, context){
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict),
		rootFunc: next
	};

	return compileToken(token, opts, context);
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var DomUtils    = __webpack_require__(22),
    isTag       = DomUtils.isTag,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    getName     = DomUtils.getName;

/*
	all available rules
*/
module.exports = {
	__proto__: null,

	attribute: __webpack_require__(77).compile,
	pseudo: __webpack_require__(49).compile,

	//tags
	tag: function(next, data){
		var name = data.name;
		return function tag(elem){
			return getName(elem) === name && next(elem);
		};
	},

	//traversal
	descendant: function(next, rule, options, context, acceptSelf){
		return function descendant(elem){

			if (acceptSelf && next(elem)) return true;

			var found = false;

			while(!found && (elem = getParent(elem))){
				found = next(elem);
			}

			return found;
		};
	},
	parent: function(next, data, options){
		if(options && options.strict) throw SyntaxError("Parent selector isn't part of CSS3");

		return function parent(elem){
			return getChildren(elem).some(test);
		};

		function test(elem){
			return isTag(elem) && next(elem);
		}
	},
	child: function(next){
		return function child(elem){
			var parent = getParent(elem);
			return !!parent && next(parent);
		};
	},
	sibling: function(next){
		return function sibling(elem){
			var siblings = getSiblings(elem);

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(next(siblings[i])) return true;
				}
			}

			return false;
		};
	},
	adjacent: function(next){
		return function adjacent(elem){
			var siblings = getSiblings(elem),
			    lastElement;

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					lastElement = siblings[i];
				}
			}

			return !!lastElement && next(lastElement);
		};
	},
	universal: function(next){
		return next;
	}
};

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = sortByProcedure;

/*
	sort the parts of the passed selector,
	as there is potential for optimization
	(some types of selectors are faster than others)
*/

var procedure = __webpack_require__(78);

var attributes = {
	__proto__: null,
	exists: 10,
	equals: 8,
	not: 7,
	start: 6,
	end: 6,
	any: 5,
	hyphen: 4,
	element: 4
};

function sortByProcedure(arr){
	var procs = arr.map(getProcedure);
	for(var i = 1; i < arr.length; i++){
		var procNew = procs[i];

		if(procNew < 0) continue;

		for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){
			var token = arr[j + 1];
			arr[j + 1] = arr[j];
			arr[j] = token;
			procs[j + 1] = procs[j];
			procs[j] = procNew;
		}
	}
}

function getProcedure(token){
	var proc = procedure[token.type];

	if(proc === procedure.attribute){
		proc = attributes[token.action];

		if(proc === attributes.equals && token.name === "id"){
			//prefer ID selectors (eg. #ID)
			proc = 9;
		}

		if(token.ignoreCase){
			//ignoreCase adds some overhead, prefer "normal" token
			//this is a binary operation, to ensure it's still an int
			proc >>= 1;
		}
	} else if(proc === procedure.pseudo){
		if(!token.data){
			proc = 3;
		} else if(token.name === "has" || token.name === "contains"){
			proc = 0; //expensive in any case
		} else if(token.name === "matches" || token.name === "not"){
			proc = 0;
			for(var i = 0; i < token.data.length; i++){
				//TODO better handling of complex selectors
				if(token.data[i].length !== 1) continue;
				var cur = getProcedure(token.data[i][0]);
				//avoid executing :has or :contains
				if(cur === 0){
					proc = 0;
					break;
				}
				if(cur > proc) proc = cur;
			}
			if(token.data.length > 1 && proc > 0) proc -= 1;
		} else {
			proc = 1;
		}
	}
	return proc;
}


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = parse;

var re_name = /^(?:\\.|[\w\-\u00c0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00c0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])(.*?)\3|(#?(?:\\.|[\w\u00c0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//pseudos, whose data-property is parsed as well
var unpackPseudos = {
	__proto__: null,
	"has": true,
	"not": true,
	"matches": true
};

var stripQuotesFromPseudos = {
	__proto__: null,
	"contains": true,
	"icontains": true
};

var quotes = {
	__proto__: null,
	"\"": true,
	"'": true
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function isWhitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function parse(selector, options){
	var subselects = [];

	selector = parseSelector(subselects, selector + "", options);

	if(selector !== ""){
		throw new SyntaxError("Unmatched selector: " + selector);
	}

	return subselects;
}

function parseSelector(subselects, selector, options){
	var tokens = [],
		sawWS = false,
		data, firstChar, name, quot;

	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	function stripWhitespace(start){
		while(isWhitespace(selector.charAt(start))) start++;
		selector = selector.substr(start);
	}

	stripWhitespace(0);

	while(selector !== ""){
		firstChar = selector.charAt(0);

		if(isWhitespace(firstChar)){
			sawWS = true;
			stripWhitespace(1);
		} else if(firstChar in simpleSelectors){
			tokens.push({type: simpleSelectors[firstChar]});
			sawWS = false;

			stripWhitespace(1);
		} else if(firstChar === ","){
			if(tokens.length === 0){
				throw new SyntaxError("empty sub-selector");
			}
			subselects.push(tokens);
			tokens = [];
			sawWS = false;
			stripWhitespace(1);
		} else {
			if(sawWS){
				if(tokens.length > 0){
					tokens.push({type: "descendant"});
				}
				sawWS = false;
			}

			if(firstChar === "*"){
				selector = selector.substr(1);
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				selector = selector.substr(1);
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				selector = selector.substr(1);
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});

			} else if(firstChar === ":"){
				if(selector.charAt(1) === ":"){
					selector = selector.substr(2);
					tokens.push({type: "pseudo-element", name: getName().toLowerCase()});
					continue;
				}

				selector = selector.substr(1);

				name = getName().toLowerCase();
				data = null;

				if(selector.charAt(0) === "("){
					if(name in unpackPseudos){
						quot = selector.charAt(1);
						var quoted = quot in quotes;

						selector = selector.substr(quoted + 1);

						data = [];
						selector = parseSelector(data, selector, options);

						if(quoted){
							if(selector.charAt(0) !== quot){
								throw new SyntaxError("unmatched quotes in :" + name);
							} else {
								selector = selector.substr(1);
							}
						}

						if(selector.charAt(0) !== ")"){
							throw new SyntaxError("missing closing parenthesis in :" + name + " " + selector);
						}

						selector = selector.substr(1);
					} else {
						var pos = 1, counter = 1;

						for(; counter > 0 && pos < selector.length; pos++){
							if(selector.charAt(pos) === "(") counter++;
							else if(selector.charAt(pos) === ")") counter--;
						}

						if(counter){
							throw new SyntaxError("parenthesis not matched");
						}

						data = selector.substr(1, pos - 2);
						selector = selector.substr(pos);

						if(name in stripQuotesFromPseudos){
							quot = data.charAt(0);

							if(quot === data.slice(-1) && quot in quotes){
								data = data.slice(1, -1);
							}

							data = unescapeCSS(data);
						}
					}
				}

				tokens.push({type: "pseudo", name: name, data: data});
			} else if(re_name.test(selector)){
				name = getName();

				if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
					name = name.toLowerCase();
				}

				tokens.push({type: "tag", name: name});
			} else {
				if(tokens.length && tokens[tokens.length - 1].type === "descendant"){
					tokens.pop();
				}
				addToken(subselects, tokens);
				return selector;
			}
		}
	}

	addToken(subselects, tokens);

	return selector;
}

function addToken(subselects, tokens){
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}

	subselects.push(tokens);
}


/***/ }),
/* 138 */
/***/ (function(module, exports) {

//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var ElementType = __webpack_require__(30);

var re_whitespace = /\s+/g;
var NodePrototype = __webpack_require__(79);
var ElementPrototype = __webpack_require__(140);

function DomHandler(callback, options, elementCB){
	if(typeof callback === "object"){
		elementCB = options;
		options = callback;
		callback = null;
	} else if(typeof options === "function"){
		elementCB = options;
		options = defaultOpts;
	}
	this._callback = callback;
	this._options = options || defaultOpts;
	this._elementCB = elementCB;
	this.dom = [];
	this._done = false;
	this._tagStack = [];
	this._parser = this._parser || null;
}

//default options
var defaultOpts = {
	normalizeWhitespace: false, //Replace all whitespace with single spaces
	withStartIndices: false, //Add startIndex properties to nodes
};

DomHandler.prototype.onparserinit = function(parser){
	this._parser = parser;
};

//Resets the handler back to starting state
DomHandler.prototype.onreset = function(){
	DomHandler.call(this, this._callback, this._options, this._elementCB);
};

//Signals the handler that parsing is done
DomHandler.prototype.onend = function(){
	if(this._done) return;
	this._done = true;
	this._parser = null;
	this._handleCallback(null);
};

DomHandler.prototype._handleCallback =
DomHandler.prototype.onerror = function(error){
	if(typeof this._callback === "function"){
		this._callback(error, this.dom);
	} else {
		if(error) throw error;
	}
};

DomHandler.prototype.onclosetag = function(){
	//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
	var elem = this._tagStack.pop();
	if(this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._addDomElement = function(element){
	var parent = this._tagStack[this._tagStack.length - 1];
	var siblings = parent ? parent.children : this.dom;
	var previousSibling = siblings[siblings.length - 1];

	element.next = null;

	if(this._options.withStartIndices){
		element.startIndex = this._parser.startIndex;
	}

	if (this._options.withDomLvl1) {
		element.__proto__ = element.type === "tag" ? ElementPrototype : NodePrototype;
	}

	if(previousSibling){
		element.prev = previousSibling;
		previousSibling.next = element;
	} else {
		element.prev = null;
	}

	siblings.push(element);
	element.parent = parent || null;
};

DomHandler.prototype.onopentag = function(name, attribs){
	var element = {
		type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
		name: name,
		attribs: attribs,
		children: []
	};

	this._addDomElement(element);

	this._tagStack.push(element);
};

DomHandler.prototype.ontext = function(data){
	//the ignoreWhitespace is officially dropped, but for now,
	//it's an alias for normalizeWhitespace
	var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

	var lastTag;

	if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
		if(normalize){
			lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
		} else {
			lastTag.data += data;
		}
	} else {
		if(
			this._tagStack.length &&
			(lastTag = this._tagStack[this._tagStack.length - 1]) &&
			(lastTag = lastTag.children[lastTag.children.length - 1]) &&
			lastTag.type === ElementType.Text
		){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(normalize){
				data = data.replace(re_whitespace, " ");
			}

			this._addDomElement({
				data: data,
				type: ElementType.Text
			});
		}
	}
};

DomHandler.prototype.oncomment = function(data){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag && lastTag.type === ElementType.Comment){
		lastTag.data += data;
		return;
	}

	var element = {
		data: data,
		type: ElementType.Comment
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function(){
	var element = {
		children: [{
			data: "",
			type: ElementType.Text
		}],
		type: ElementType.CDATA
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
	this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function(name, data){
	this._addDomElement({
		name: name,
		data: data,
		type: ElementType.Directive
	});
};

module.exports = DomHandler;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

// DOM-Level-1-compliant structure
var NodePrototype = __webpack_require__(79);
var ElementPrototype = module.exports = Object.create(NodePrototype);

var domLvl1 = {
	tagName: "name"
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(ElementPrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});


/***/ }),
/* 141 */
/***/ (function(module, exports) {

// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function(nodes) {
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while (--idx > -1) {
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while (ancestor) {
			if (nodes.indexOf(ancestor) > -1) {
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = ancestor.parent;
		}

		// If the node has been found to be unique, re-insert it.
		if (replace) {
			nodes[idx] = node;
		}
	}

	return nodes;
};

// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
var POSITION = {
	DISCONNECTED: 1,
	PRECEDING: 2,
	FOLLOWING: 4,
	CONTAINS: 8,
	CONTAINED_BY: 16
};

// Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.
var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
	var aParents = [];
	var bParents = [];
	var current, sharedParent, siblings, aSibling, bSibling, idx;

	if (nodeA === nodeB) {
		return 0;
	}

	current = nodeA;
	while (current) {
		aParents.unshift(current);
		current = current.parent;
	}
	current = nodeB;
	while (current) {
		bParents.unshift(current);
		current = current.parent;
	}

	idx = 0;
	while (aParents[idx] === bParents[idx]) {
		idx++;
	}

	if (idx === 0) {
		return POSITION.DISCONNECTED;
	}

	sharedParent = aParents[idx - 1];
	siblings = sharedParent.children;
	aSibling = aParents[idx];
	bSibling = bParents[idx];

	if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
		if (sharedParent === nodeB) {
			return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
		}
		return POSITION.FOLLOWING;
	} else {
		if (sharedParent === nodeA) {
			return POSITION.PRECEDING | POSITION.CONTAINS;
		}
		return POSITION.PRECEDING;
	}
};

// Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order
exports.uniqueSort = function(nodes) {
	var idx = nodes.length, node, position;

	nodes = nodes.slice();

	while (--idx > -1) {
		node = nodes[idx];
		position = nodes.indexOf(node);
		if (position > -1 && position < idx) {
			nodes.splice(idx, 1);
		}
	}
	nodes.sort(function(a, b) {
		var relative = comparePos(a, b);
		if (relative & POSITION.PRECEDING) {
			return -1;
		} else if (relative & POSITION.FOLLOWING) {
			return 1;
		}
		return 0;
	});

	return nodes;
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var ElementType = __webpack_require__(30);
var isTag = exports.isTag = ElementType.isTag;

exports.testElement = function(options, element){
	for(var key in options){
		if(!options.hasOwnProperty(key));
		else if(key === "tag_name"){
			if(!isTag(element) || !options.tag_name(element.name)){
				return false;
			}
		} else if(key === "tag_type"){
			if(!options.tag_type(element.type)) return false;
		} else if(key === "tag_contains"){
			if(isTag(element) || !options.tag_contains(element.data)){
				return false;
			}
		} else if(!element.attribs || !options[key](element.attribs[key])){
			return false;
		}
	}
	return true;
};

var Checks = {
	tag_name: function(name){
		if(typeof name === "function"){
			return function(elem){ return isTag(elem) && name(elem.name); };
		} else if(name === "*"){
			return isTag;
		} else {
			return function(elem){ return isTag(elem) && elem.name === name; };
		}
	},
	tag_type: function(type){
		if(typeof type === "function"){
			return function(elem){ return type(elem.type); };
		} else {
			return function(elem){ return elem.type === type; };
		}
	},
	tag_contains: function(data){
		if(typeof data === "function"){
			return function(elem){ return !isTag(elem) && data(elem.data); };
		} else {
			return function(elem){ return !isTag(elem) && elem.data === data; };
		}
	}
};

function getAttribCheck(attrib, value){
	if(typeof value === "function"){
		return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
	} else {
		return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
	}
}

function combineFuncs(a, b){
	return function(elem){
		return a(elem) || b(elem);
	};
}

exports.getElements = function(options, element, recurse, limit){
	var funcs = Object.keys(options).map(function(key){
		var value = options[key];
		return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
	});

	return funcs.length === 0 ? [] : this.filter(
		funcs.reduce(combineFuncs),
		element, recurse, limit
	);
};

exports.getElementById = function(id, element, recurse){
	if(!Array.isArray(element)) element = [element];
	return this.findOne(getAttribCheck("id", id), element, recurse !== false);
};

exports.getElementsByTagName = function(name, element, recurse, limit){
	return this.filter(Checks.tag_name(name), element, recurse, limit);
};

exports.getElementsByTagType = function(type, element, recurse, limit){
	return this.filter(Checks.tag_type(type), element, recurse, limit);
};


/***/ }),
/* 143 */
/***/ (function(module, exports) {

exports.removeElement = function(elem){
	if(elem.prev) elem.prev.next = elem.next;
	if(elem.next) elem.next.prev = elem.prev;

	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1);
	}
};

exports.replaceElement = function(elem, replacement){
	var prev = replacement.prev = elem.prev;
	if(prev){
		prev.next = replacement;
	}

	var next = replacement.next = elem.next;
	if(next){
		next.prev = replacement;
	}

	var parent = replacement.parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs[childs.lastIndexOf(elem)] = replacement;
	}
};

exports.appendChild = function(elem, child){
	child.parent = elem;

	if(elem.children.push(child) !== 1){
		var sibling = elem.children[elem.children.length - 2];
		sibling.next = child;
		child.prev = sibling;
		child.next = null;
	}
};

exports.append = function(elem, next){
	var parent = elem.parent,
		currNext = elem.next;

	next.next = currNext;
	next.prev = elem;
	elem.next = next;
	next.parent = parent;

	if(currNext){
		currNext.prev = next;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(currNext), 0, next);
		}
	} else if(parent){
		parent.children.push(next);
	}
};

exports.prepend = function(elem, prev){
	var parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs.splice(childs.lastIndexOf(elem), 0, prev);
	}

	if(elem.prev){
		elem.prev.next = prev;
	}
	
	prev.parent = parent;
	prev.prev = elem.prev;
	prev.next = elem;
	elem.prev = prev;
};




/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var isTag = __webpack_require__(30).isTag;

module.exports = {
	filter: filter,
	find: find,
	findOneChild: findOneChild,
	findOne: findOne,
	existsOne: existsOne,
	findAll: findAll
};

function filter(test, element, recurse, limit){
	if(!Array.isArray(element)) element = [element];

	if(typeof limit !== "number" || !isFinite(limit)){
		limit = Infinity;
	}
	return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit){
	var result = [], childs;

	for(var i = 0, j = elems.length; i < j; i++){
		if(test(elems[i])){
			result.push(elems[i]);
			if(--limit <= 0) break;
		}

		childs = elems[i].children;
		if(recurse && childs && childs.length > 0){
			childs = find(test, childs, recurse, limit);
			result = result.concat(childs);
			limit -= childs.length;
			if(limit <= 0) break;
		}
	}

	return result;
}

function findOneChild(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(test(elems[i])) return elems[i];
	}

	return null;
}

function findOne(test, elems){
	var elem = null;

	for(var i = 0, l = elems.length; i < l && !elem; i++){
		if(!isTag(elems[i])){
			continue;
		} else if(test(elems[i])){
			elem = elems[i];
		} else if(elems[i].children.length > 0){
			elem = findOne(test, elems[i].children);
		}
	}

	return elem;
}

function existsOne(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(
			isTag(elems[i]) && (
				test(elems[i]) || (
					elems[i].children.length > 0 &&
					existsOne(test, elems[i].children)
				)
			)
		){
			return true;
		}
	}

	return false;
}

function findAll(test, elems){
	var result = [];
	for(var i = 0, j = elems.length; i < j; i++){
		if(!isTag(elems[i])) continue;
		if(test(elems[i])) result.push(elems[i]);

		if(elems[i].children.length > 0){
			result = result.concat(findAll(test, elems[i].children));
		}
	}
	return result;
}


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var ElementType = __webpack_require__(30),
    getOuterHTML = __webpack_require__(50),
    isTag = ElementType.isTag;

module.exports = {
	getInnerHTML: getInnerHTML,
	getOuterHTML: getOuterHTML,
	getText: getText
};

function getInnerHTML(elem, opts){
	return elem.children ? elem.children.map(function(elem){
		return getOuterHTML(elem, opts);
	}).join("") : "";
}

function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
}


/***/ }),
/* 146 */
/***/ (function(module, exports) {

var getChildren = exports.getChildren = function(elem){
	return elem.children;
};

var getParent = exports.getParent = function(elem){
	return elem.parent;
};

exports.getSiblings = function(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function(elem, name){
	return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function(elem, name){
	return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function(elem){
	return elem.name;
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var encode = __webpack_require__(149),
    decode = __webpack_require__(148);

exports.decode = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function(data, level){
	return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 =
exports.encodeHTML5 =
exports.encodeHTML  = encode.HTML;

exports.decodeXML =
exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 =
exports.decodeHTML5 =
exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict =
exports.decodeHTML5Strict =
exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var entityMap = __webpack_require__(51),
    legacyMap = __webpack_require__(81),
    xmlMap    = __webpack_require__(52),
    decodeCodePoint = __webpack_require__(80);

var decodeXMLStrict  = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map){
	var keys = Object.keys(map).join("|"),
	    replace = getReplacer(map);

	keys += "|#[xX][\\da-fA-F]+|#\\d+";

	var re = new RegExp("&(?:" + keys + ");", "g");

	return function(str){
		return String(str).replace(re, replace);
	};
}

var decodeHTML = (function(){
	var legacy = Object.keys(legacyMap)
		.sort(sorter);

	var keys = Object.keys(entityMap)
		.sort(sorter);

	for(var i = 0, j = 0; i < keys.length; i++){
		if(legacy[j] === keys[i]){
			keys[i] += ";?";
			j++;
		} else {
			keys[i] += ";";
		}
	}

	var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
	    replace = getReplacer(entityMap);

	function replacer(str){
		if(str.substr(-1) !== ";") str += ";";
		return replace(str);
	}

	//TODO consider creating a merged map
	return function(str){
		return String(str).replace(re, replacer);
	};
}());

function sorter(a, b){
	return a < b ? 1 : -1;
}

function getReplacer(map){
	return function replace(str){
		if(str.charAt(1) === "#"){
			if(str.charAt(2) === "X" || str.charAt(2) === "x"){
				return decodeCodePoint(parseInt(str.substr(3), 16));
			}
			return decodeCodePoint(parseInt(str.substr(2), 10));
		}
		return map[str.slice(1, -1)];
	};
}

module.exports = {
	XML: decodeXMLStrict,
	HTML: decodeHTML,
	HTMLStrict: decodeHTMLStrict
};

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var inverseXML = getInverseObj(__webpack_require__(52)),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(__webpack_require__(51)),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj){
	return Object.keys(obj).sort().reduce(function(inverse, name){
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer(inverse){
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function(k){
		if(k.length === 1){
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c){
	return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c){
	// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	var high = c.charCodeAt(0);
	var low  = c.charCodeAt(1);
	var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
	return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re){
	function func(name){
		return inverse[name];
	}

	return function(data){
		return data
				.replace(re, func)
				.replace(re_astralSymbols, astralReplacer)
				.replace(re_nonASCII, singleCharReplacer);
	};
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data){
	return data
			.replace(re_xmlChars, singleCharReplacer)
			.replace(re_astralSymbols, astralReplacer)
			.replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;


/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = {
	"0": 65533,
	"128": 8364,
	"130": 8218,
	"131": 402,
	"132": 8222,
	"133": 8230,
	"134": 8224,
	"135": 8225,
	"136": 710,
	"137": 8240,
	"138": 352,
	"139": 8249,
	"140": 338,
	"142": 381,
	"145": 8216,
	"146": 8217,
	"147": 8220,
	"148": 8221,
	"149": 8226,
	"150": 8211,
	"151": 8212,
	"152": 732,
	"153": 8482,
	"154": 353,
	"155": 8250,
	"156": 339,
	"158": 382,
	"159": 376
};

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(151);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(161);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(1);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(6);

var createArrayFromMixed = __webpack_require__(154);
var getMarkupWrap = __webpack_require__(156);
var invariant = __webpack_require__(1);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(6);

var invariant = __webpack_require__(1);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(158);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(160);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(6);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(163);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = CollectingHandler;

function CollectingHandler(cbs){
	this._cbs = cbs || {};
	this.events = [];
}

var EVENTS = __webpack_require__(23).EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(){
			this.events.push([name]);
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a){
			this.events.push([name, a]);
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a, b){
			this.events.push([name, a, b]);
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

CollectingHandler.prototype.onreset = function(){
	this.events = [];
	if(this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function(){
	if(this._cbs.onreset) this._cbs.onreset();

	for(var i = 0, len = this.events.length; i < len; i++){
		if(this._cbs[this.events[i][0]]){

			var num = this.events[i].length;

			if(num === 1){
				this._cbs[this.events[i][0]]();
			} else if(num === 2){
				this._cbs[this.events[i][0]](this.events[i][1]);
			} else {
				this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
			}
		}
	}
};


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var index = __webpack_require__(23),
    DomHandler = index.DomHandler,
    DomUtils = index.DomUtils;

//TODO: make this a streamable handler
function FeedHandler(callback, options){
	this.init(callback, options);
}

__webpack_require__(11)(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where){
	return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where){
	return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse){
	return DomUtils.getText(
		DomUtils.getElementsByTagName(what, where, recurse, 1)
	).trim();
}

function addConditionally(obj, prop, what, where, recurse){
	var tmp = fetch(what, where, recurse);
	if(tmp) obj[prop] = tmp;
}

var isValidFeed = function(value){
	return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function(){
	var feed = {},
	    feedRoot = getOneElement(isValidFeed, this.dom),
	    tmp, childs;

	if(feedRoot){
		if(feedRoot.name === "feed"){
			childs = feedRoot.children;

			feed.type = "atom";
			addConditionally(feed, "id", "id", childs);
			addConditionally(feed, "title", "title", childs);
			if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
			addConditionally(feed, "description", "subtitle", childs);
			if((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "email", childs, true);

			feed.items = getElements("entry", childs).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "id", item);
				addConditionally(entry, "title", "title", item);
				if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
				if((tmp = fetch("summary", item) || fetch("content", item))) entry.description = tmp;
				if((tmp = fetch("updated", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		} else {
			childs = getOneElement("channel", feedRoot.children).children;

			feed.type = feedRoot.name.substr(0, 3);
			feed.id = "";
			addConditionally(feed, "title", "title", childs);
			addConditionally(feed, "link", "link", childs);
			addConditionally(feed, "description", "description", childs);
			if((tmp = fetch("lastBuildDate", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "managingEditor", childs, true);

			feed.items = getElements("item", feedRoot.children).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "guid", item);
				addConditionally(entry, "title", "title", item);
				addConditionally(entry, "link", "link", item);
				addConditionally(entry, "description", "description", item);
				if((tmp = fetch("pubDate", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		}
	}
	this.dom = feed;
	DomHandler.prototype._handleCallback.call(
		this, feedRoot ? null : Error("couldn't find root of feed")
	);
};

module.exports = FeedHandler;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = ProxyHandler;

function ProxyHandler(cbs){
	this._cbs = cbs || {};
}

var EVENTS = __webpack_require__(23).EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(){
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a){
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a, b){
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Stream;

var Parser = __webpack_require__(87);

function Stream(options){
	Parser.call(this, new Cbs(this), options);
}

__webpack_require__(11)(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope){
	this.scope = scope;
}

var EVENTS = __webpack_require__(23).EVENTS;

Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		Cbs.prototype["on" + name] = function(){
			this.scope.emit(name);
		};
	} else if(EVENTS[name] === 1){
		Cbs.prototype["on" + name] = function(a){
			this.scope.emit(name, a);
		};
	} else if(EVENTS[name] === 2){
		Cbs.prototype["on" + name] = function(a, b){
			this.scope.emit(name, a, b);
		};
	} else {
		throw Error("wrong number of arguments!");
	}
});

/***/ }),
/* 169 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array ? array.length : 0,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity]
 *  The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = filter;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)(module)))

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array ? array.length : 0;
  return length ? baseFlatten(array, 1) : [];
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = flatten;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = map;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)(module)))

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object),
    nativeMax = Math.max;

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (typeof key == 'number' && value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  if (!(isArray(source) || isTypedArray(source))) {
    var props = baseKeysIn(source);
  }
  arrayEach(props || source, function(srcValue, key) {
    if (props) {
      key = srcValue;
      srcValue = source[key];
    }
    if (isObject(srcValue)) {
      stack || (stack = new Stack);
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  });
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = object[key],
      srcValue = source[key],
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    newValue = srcValue;
    if (isArray(srcValue) || isTypedArray(srcValue)) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else {
        isCommon = false;
        newValue = baseClone(srcValue, true);
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
        isCommon = false;
        newValue = baseClone(srcValue, true);
      }
      else {
        newValue = objValue;
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) ||
      objectToString.call(value) != objectTag || isHostObject(value)) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = merge;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)(module)))

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, props) {
  object = Object(object);
  return basePickBy(object, props, function(value, key) {
    return key in object;
  });
}

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick from.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, props, predicate) {
  var index = -1,
      length = props.length,
      result = {};

  while (++index < length) {
    var key = props[index],
        value = object[key];

    if (predicate(value, key)) {
      result[key] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [props] The property identifiers to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = baseRest(function(object, props) {
  return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
});

module.exports = pick;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */
function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection) {
    accumulator = initAccum
      ? (initAccum = false, value)
      : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */
function reduce(collection, iteratee, accumulator) {
  var func = isArray(collection) ? arrayReduce : baseReduce,
      initAccum = arguments.length < 3;

  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = reduce;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)(module)))

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array ? array.length : 0,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * The opposite of `_.filter`; this method returns the elements of `collection`
 * that `predicate` does **not** return truthy for.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.filter
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': true }
 * ];
 *
 * _.reject(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.reject(users, { 'age': 40, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.reject(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.reject(users, 'active');
 * // => objects for ['barney']
 */
function reject(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, negate(baseIteratee(predicate, 3)));
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0: return !predicate.call(this);
      case 1: return !predicate.call(this, args[0]);
      case 2: return !predicate.call(this, args[0], args[1]);
      case 3: return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = reject;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)(module)))

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  baseEach(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = isArray(collection) ? arraySome : baseSome;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = some;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)(module)))

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = compile;

var BaseFuncs = __webpack_require__(27),
    trueFunc  = BaseFuncs.trueFunc,
    falseFunc = BaseFuncs.falseFunc;

/*
	returns a function that checks if an elements index matches the given rule
	highly optimized to return the fastest solution
*/
function compile(parsed){
	var a = parsed[0],
	    b = parsed[1] - 1;

	//when b <= 0, a*n won't be possible for any matches when a < 0
	//besides, the specification says that no element is matched when a and b are 0
	if(b < 0 && a <= 0) return falseFunc;

	//when a is in the range -1..1, it matches any element (so only b is checked)
	if(a ===-1) return function(pos){ return pos <= b; };
	if(a === 0) return function(pos){ return pos === b; };
	//when b <= 0 and a === 1, they match any element
	if(a === 1) return b < 0 ? trueFunc : function(pos){ return pos >= b; };

	//when a > 0, modulo can be used to check if there is a match
	var bMod = b % a;
	if(bMod < 0) bMod += a;

	if(a > 1){
		return function(pos){
			return pos >= b && pos % a === bMod;
		};
	}

	a *= -1; //make `a` positive

	return function(pos){
		return pos <= b && pos % a === bMod;
	};
}

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(180),
    compile = __webpack_require__(178);

module.exports = function nthCheck(formula){
	return compile(parse(formula));
};

module.exports.parse = parse;
module.exports.compile = compile;

/***/ }),
/* 180 */
/***/ (function(module, exports) {

module.exports = parse;

//following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/;

/*
	parses a nth-check formula, returns an array of two numbers
*/
function parse(formula){
	formula = formula.trim().toLowerCase();

	if(formula === "even"){
		return [2, 0];
	} else if(formula === "odd"){
		return [2, 1];
	} else {
		var parsed = formula.match(re_nthElement);

		if(!parsed){
			throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
		}

		var a;

		if(parsed[1]){
			a = parseInt(parsed[1], 10);
			if(isNaN(a)){
				if(parsed[1].charAt(0) === "-") a = -1;
				else a = 1;
			}
		} else a = 0;

		return [
			a,
			parsed[3] ? parseInt((parsed[2] || "") + parsed[3], 10) : 0
		];
	}
}


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



if (process.env.NODE_ENV !== 'production') {
  var invariant = __webpack_require__(1);
  var warning = __webpack_require__(2);
  var ReactPropTypesSecret = __webpack_require__(92);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(10);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactPropTypesSecret = __webpack_require__(92);
var checkPropTypes = __webpack_require__(181);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

var focusNode = __webpack_require__(83);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(34);
var ExecutionEnvironment = __webpack_require__(6);
var FallbackCompositionState = __webpack_require__(191);
var SyntheticCompositionEvent = __webpack_require__(234);
var SyntheticInputEvent = __webpack_require__(237);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(93);
var ExecutionEnvironment = __webpack_require__(6);
var ReactInstrumentation = __webpack_require__(9);

var camelizeStyleName = __webpack_require__(152);
var dangerousStyleValue = __webpack_require__(244);
var hyphenateStyleName = __webpack_require__(159);
var memoizeStringOnly = __webpack_require__(162);
var warning = __webpack_require__(2);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue, component);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName], component);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(33);
var EventPropagators = __webpack_require__(34);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(12);
var SyntheticEvent = __webpack_require__(14);

var getEventTarget = __webpack_require__(67);
var isEventSupported = __webpack_require__(68);
var isTextInputElement = __webpack_require__(111);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  // IE10+ fire input events to often, such when a placeholder
  // changes or when an input with a placeholder is focused.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
}

/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  if (activeElement.attachEvent) {
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.addEventListener('propertychange', handlePropertyChange, false);
  }
}

/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;

  if (activeElement.detachEvent) {
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
  }

  activeElement = null;
  activeElementInst = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetInstForInputEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput') {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return targetInst;
  }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9-11, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementInst;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return targetInst;
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }

};

module.exports = ChangeEventPlugin;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(24);
var ExecutionEnvironment = __webpack_require__(6);

var createNodesFromMarkup = __webpack_require__(155);
var emptyFunction = __webpack_require__(10);
var invariant = __webpack_require__(1);

var Danger = {

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }

};

module.exports = Danger;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(34);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticMouseEvent = __webpack_require__(41);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }

};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(17);

var getTextContentAccessor = __webpack_require__(109);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(25);

var instantiateReactComponent = __webpack_require__(110);
var KeyEscapeUtils = __webpack_require__(59);
var shouldUpdateReactComponent = __webpack_require__(69);
var traverseAllChildren = __webpack_require__(113);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(7);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
  ) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(56);
var ReactDOMIDOperations = __webpack_require__(201);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var React = __webpack_require__(26);
var ReactComponentEnvironment = __webpack_require__(61);
var ReactCurrentOwner = __webpack_require__(13);
var ReactErrorUtils = __webpack_require__(62);
var ReactInstanceMap = __webpack_require__(35);
var ReactInstrumentation = __webpack_require__(9);
var ReactNodeTypes = __webpack_require__(103);
var ReactReconciler = __webpack_require__(25);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(243);
}

var emptyObject = __webpack_require__(32);
var invariant = __webpack_require__(1);
var shallowEqual = __webpack_require__(53);
var shouldUpdateReactComponent = __webpack_require__(69);
var warning = __webpack_require__(2);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(5);
var ReactDefaultInjection = __webpack_require__(213);
var ReactMount = __webpack_require__(102);
var ReactReconciler = __webpack_require__(25);
var ReactUpdates = __webpack_require__(12);
var ReactVersion = __webpack_require__(228);

var findDOMNode = __webpack_require__(245);
var getHostComponentFromComposite = __webpack_require__(108);
var renderSubtreeIntoContainer = __webpack_require__(252);
var warning = __webpack_require__(2);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = __webpack_require__(6);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = __webpack_require__(9);
  var ReactDOMUnknownPropertyHook = __webpack_require__(210);
  var ReactDOMNullInputValuePropHook = __webpack_require__(204);
  var ReactDOMInvalidARIAHook = __webpack_require__(203);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var AutoFocusUtils = __webpack_require__(184);
var CSSPropertyOperations = __webpack_require__(186);
var DOMLazyTree = __webpack_require__(24);
var DOMNamespaces = __webpack_require__(57);
var DOMProperty = __webpack_require__(16);
var DOMPropertyOperations = __webpack_require__(95);
var EventPluginHub = __webpack_require__(33);
var EventPluginRegistry = __webpack_require__(39);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactDOMComponentFlags = __webpack_require__(96);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMInput = __webpack_require__(202);
var ReactDOMOption = __webpack_require__(205);
var ReactDOMSelect = __webpack_require__(97);
var ReactDOMTextarea = __webpack_require__(208);
var ReactInstrumentation = __webpack_require__(9);
var ReactMultiChild = __webpack_require__(221);
var ReactServerRenderingTransaction = __webpack_require__(226);

var emptyFunction = __webpack_require__(10);
var escapeTextContentForBrowser = __webpack_require__(43);
var invariant = __webpack_require__(1);
var isEventSupported = __webpack_require__(68);
var shallowEqual = __webpack_require__(53);
var validateDOMNesting = __webpack_require__(70);
var warning = __webpack_require__(2);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }

};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(70);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(56);
var ReactDOMComponentTree = __webpack_require__(5);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMPropertyOperations = __webpack_require__(95);
var LinkedValueUtils = __webpack_require__(60);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(12);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        // eslint-disable-next-line
        if (value != valueAsNumber) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
        // eslint-disable-next-line
      } else if (value != node.value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var React = __webpack_require__(26);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMSelect = __webpack_require__(97);

var warning = __webpack_require__(2);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

};

module.exports = ReactDOMOption;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var getNodeForCharacterOffset = __webpack_require__(249);
var getTextContentAccessor = __webpack_require__(109);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMChildrenOperations = __webpack_require__(56);
var DOMLazyTree = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);

var escapeTextContentForBrowser = __webpack_require__(43);
var invariant = __webpack_require__(1);
var validateDOMNesting = __webpack_require__(70);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }

});

module.exports = ReactDOMTextComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(60);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(12);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var EventPluginRegistry = __webpack_require__(39);
var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(219);
var ReactHostOperationHistoryHook = __webpack_require__(217);
var ReactComponentTreeHook = __webpack_require__(7);
var ExecutionEnvironment = __webpack_require__(6);

var performanceNow = __webpack_require__(164);
var warning = __webpack_require__(2);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactUpdates = __webpack_require__(12);
var Transaction = __webpack_require__(42);

var emptyFunction = __webpack_require__(10);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(183);
var BeforeInputEventPlugin = __webpack_require__(185);
var ChangeEventPlugin = __webpack_require__(187);
var DefaultEventPluginOrder = __webpack_require__(189);
var EnterLeaveEventPlugin = __webpack_require__(190);
var HTMLDOMPropertyConfig = __webpack_require__(192);
var ReactComponentBrowserEnvironment = __webpack_require__(194);
var ReactDOMComponent = __webpack_require__(197);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMEmptyComponent = __webpack_require__(199);
var ReactDOMTreeTraversal = __webpack_require__(209);
var ReactDOMTextComponent = __webpack_require__(207);
var ReactDefaultBatchingStrategy = __webpack_require__(212);
var ReactEventListener = __webpack_require__(216);
var ReactInjection = __webpack_require__(218);
var ReactReconcileTransaction = __webpack_require__(224);
var SVGDOMPropertyConfig = __webpack_require__(229);
var SelectEventPlugin = __webpack_require__(230);
var SimpleEventPlugin = __webpack_require__(231);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(33);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventListener = __webpack_require__(82);
var ExecutionEnvironment = __webpack_require__(6);
var PooledClass = __webpack_require__(17);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(12);

var getEventTarget = __webpack_require__(67);
var getUnboundedScrollPosition = __webpack_require__(157);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var EventPluginHub = __webpack_require__(33);
var EventPluginUtils = __webpack_require__(58);
var ReactComponentEnvironment = __webpack_require__(61);
var ReactEmptyComponent = __webpack_require__(98);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactHostComponent = __webpack_require__(100);
var ReactUpdates = __webpack_require__(12);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(242);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactComponentEnvironment = __webpack_require__(61);
var ReactInstanceMap = __webpack_require__(35);
var ReactInstrumentation = __webpack_require__(9);

var ReactCurrentOwner = __webpack_require__(13);
var ReactReconciler = __webpack_require__(25);
var ReactChildReconciler = __webpack_require__(193);

var emptyFunction = __webpack_require__(10);
var flattenChildren = __webpack_require__(246);
var invariant = __webpack_require__(1);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }

  }

};

module.exports = ReactMultiChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(94);
var PooledClass = __webpack_require__(17);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactInputSelection = __webpack_require__(101);
var ReactInstrumentation = __webpack_require__(9);
var Transaction = __webpack_require__(42);
var ReactUpdateQueue = __webpack_require__(63);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(222);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(17);
var Transaction = __webpack_require__(42);
var ReactInstrumentation = __webpack_require__(9);
var ReactServerUpdateQueue = __webpack_require__(227);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(63);

var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.5.4';

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(34);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInputSelection = __webpack_require__(101);
var SyntheticEvent = __webpack_require__(14);

var getActiveElement = __webpack_require__(84);
var isTextInputElement = __webpack_require__(111);
var shallowEqual = __webpack_require__(53);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var EventListener = __webpack_require__(82);
var EventPropagators = __webpack_require__(34);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticAnimationEvent = __webpack_require__(232);
var SyntheticClipboardEvent = __webpack_require__(233);
var SyntheticEvent = __webpack_require__(14);
var SyntheticFocusEvent = __webpack_require__(236);
var SyntheticKeyboardEvent = __webpack_require__(238);
var SyntheticMouseEvent = __webpack_require__(41);
var SyntheticDragEvent = __webpack_require__(235);
var SyntheticTouchEvent = __webpack_require__(239);
var SyntheticTransitionEvent = __webpack_require__(240);
var SyntheticUIEvent = __webpack_require__(36);
var SyntheticWheelEvent = __webpack_require__(241);

var emptyFunction = __webpack_require__(10);
var getEventCharCode = __webpack_require__(65);
var invariant = __webpack_require__(1);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }

};

module.exports = SimpleEventPlugin;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(41);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(36);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(36);

var getEventCharCode = __webpack_require__(65);
var getEventKey = __webpack_require__(247);
var getEventModifierState = __webpack_require__(66);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(36);

var getEventModifierState = __webpack_require__(66);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(41);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypeLocationNames = __webpack_require__(223);
var ReactPropTypesSecret = __webpack_require__(104);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(7);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(93);
var warning = __webpack_require__(2);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(13);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstanceMap = __webpack_require__(35);

var getHostComponentFromComposite = __webpack_require__(108);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(59);
var traverseAllChildren = __webpack_require__(113);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(7);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(65);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(43);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactMount = __webpack_require__(102);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(19);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(254);
var ReactElement = __webpack_require__(18);

var emptyFunction = __webpack_require__(10);
var traverseAllChildren = __webpack_require__(265);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(19),
    _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(71);
var ReactElement = __webpack_require__(18);
var ReactPropTypeLocationNames = __webpack_require__(116);
var ReactNoopUpdateQueue = __webpack_require__(72);

var emptyObject = __webpack_require__(32);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

var didWarnDeprecated = false;

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
      didWarnDeprecated = true;
    }

    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(18);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(115);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(18),
    isValidElement = _require.isValidElement;

var factory = __webpack_require__(91);

module.exports = factory(isValidElement);

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(71);
var ReactNoopUpdateQueue = __webpack_require__(72);

var emptyObject = __webpack_require__(32);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.5.4';

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(19);

var ReactPropTypeLocationNames = __webpack_require__(116);
var ReactPropTypesSecret = __webpack_require__(259);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(7);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(19);

var ReactElement = __webpack_require__(18);

var invariant = __webpack_require__(1);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(19);

var ReactCurrentOwner = __webpack_require__(13);
var REACT_ELEMENT_TYPE = __webpack_require__(114);

var getIteratorFn = __webpack_require__(117);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(253);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(20)


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(118)


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

var Stream = (function (){
  try {
    return __webpack_require__(46); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = __webpack_require__(119);
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(74);
exports.Duplex = __webpack_require__(20);
exports.Transform = __webpack_require__(73);
exports.PassThrough = __webpack_require__(118);


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(73)


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(74)


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(0)))

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(271);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 274 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 275 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })
/******/ ]);